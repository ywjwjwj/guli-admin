/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { h, getCurrentInstance } from '@vue/composition-api';
import isEmpty from 'lodash/isEmpty';
import isFunction from 'lodash/isFunction';
import isObject from 'lodash/isObject';
import isString from 'lodash/isString';

var isVNode = function isVNode(obj) {
  var vNode = h("span", "");
  var VNode2 = vNode.constructor;
  return obj instanceof VNode2;
};

function getDefaultNode(options) {
  var defaultNode;

  if (isObject(options) && "defaultNode" in options) {
    defaultNode = options.defaultNode;
  } else if (isVNode(options) || isString(options)) {
    defaultNode = options;
  }

  return defaultNode;
}
function getParams(options) {
  return isObject(options) && "params" in options ? options.params : null;
}
var useTNodeJSX = function useTNodeJSX() {
  var instance = getCurrentInstance();
  return function (name, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var slots = instance.setupContext.slots;
    var propsNode;

    if (Object.keys(instance.props).includes(name)) {
      propsNode = instance.props[name];
    }

    if (propsNode === false) return;

    if (slots[name]) {
      return slots[name](params);
    }

    if (isFunction(propsNode)) return propsNode(h, params);

    if (propsNode === true && defaultNode) {
      return defaultNode;
    }

    return propsNode;
  };
};
var useTNodeDefault = function useTNodeDefault() {
  var renderTNodeJSX = useTNodeJSX();
  return function (name, options) {
    var defaultNode = getDefaultNode(options);
    return renderTNodeJSX(name, options) || defaultNode;
  };
};
var useContent = function useContent() {
  var renderTNodeJSX = useTNodeJSX();
  return function (name1, name2, options) {
    var params = getParams(options);
    var defaultNode = getDefaultNode(options);
    var toParams = params ? {
      params: params
    } : void 0;
    var node1 = renderTNodeJSX(name1, toParams);
    var node2 = renderTNodeJSX(name2, toParams);
    var res = isEmpty(node1) ? node2 : node1;
    return isEmpty(res) ? defaultNode : res;
  };
};

export { getDefaultNode, getParams, useContent, useTNodeDefault, useTNodeJSX };
//# sourceMappingURL=tnode.js.map
