import Vue from 'vue';
import { DropdownOption } from './type';
import { TNodeReturnValue } from '../common';
export interface DropdownItemInstance extends Vue {
    dropdown: {
        handleMenuClick: (data: DropdownOption, context: {
            e: MouseEvent;
        }) => void;
    };
}
declare const _default: import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & DropdownItemInstance & Vue, {
    focused: boolean;
}, {
    renderSuffix(): TNodeReturnValue;
    handleItemClick(e: MouseEvent): void;
    handleMouseover(): void;
}, unknown, {
    path: string;
    hasChildren: boolean;
    active: boolean;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    divider: boolean;
    value: string | number | {
        [key: string]: any;
    };
    onClick: (dropdownItem: DropdownOption, context: {
        e: MouseEvent;
    }) => void;
}>;
export default _default;
