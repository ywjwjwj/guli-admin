import { CascaderConfig } from '../../config-provider/config-receiver';
import { TreeNode, CascaderContextType, InputContentProps } from '../interface';
import { ClassName } from '../../common';
interface ComponentComputed {
    closeIconClass: ClassName;
    fakeArrowIconClass: ClassName;
    cascaderInnerClasses: ClassName;
    closeShow: boolean;
    showPlaceholder: boolean;
    singleContent: string;
    multipleContent: TreeNode[];
}
interface ComponentData {
    isHover: boolean;
}
interface ComponentMethods {
    getInputWidth: () => void;
    outerClickListenerFn: (event: MouseEvent | TouchEvent) => void;
    InnerContent: () => JSX.Element;
    renderContent: () => JSX.Element;
    renderSuffixIcon: () => JSX.Element;
}
interface ComponentInstanceType extends ComponentComputed, ComponentData, ComponentMethods {
}
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../../config-provider/config-receiver").Placement): string;
} & {
    global: CascaderConfig;
} & Record<never, any> & import("../../config-provider/config-receiver").ConfigComponent & InputContentProps & import("vue/types/umd") & ComponentInstanceType & import("vue").default, unknown, unknown, unknown, {
    cascaderContext: CascaderContextType;
    placeholder: any;
    listeners: import("../interface").ListenersType;
    collapsedItems: (h: import("vue").CreateElement, props: {
        value: import("../../common").TreeOptionData[];
        collapsedSelectedItems: import("../../common").TreeOptionData[];
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
}>;
export default _default;
