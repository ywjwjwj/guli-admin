{"version":3,"file":"interface.js","sources":["../../src/cascader/interface.tsx"],"sourcesContent":["import { TdCascaderProps, CascaderValue, CascaderChangeSource } from './type';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport { TreeNodeModel, TreeNodeValue } from '../_common/js/tree/types';\n\nexport type CascaderProps = TdCascaderProps;\n\nexport * from './type';\nexport interface CascaderContextType\n  extends Pick<\n    TdCascaderProps,\n    | 'size'\n    | 'disabled'\n    | 'checkStrictly'\n    | 'lazy'\n    | 'multiple'\n    | 'filterable'\n    | 'clearable'\n    | 'checkProps'\n    | 'showAllLevels'\n    | 'max'\n    | 'value'\n    | 'minCollapsedNum'\n    | 'loading'\n    | 'valueType'\n  > {\n  treeStore: TreeStore;\n  inputWidth: number;\n  setInputWidth: (val: number) => void;\n  setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => void;\n  visible: boolean;\n  setVisible: (val: boolean) => void;\n  treeNodes: TreeNode[];\n  setTreeNodes: (val: CascaderValue) => void;\n  filterActive: boolean;\n  setFilterActive: (val: boolean) => void;\n  inputVal: string;\n  setInputVal: (val: string) => void;\n  setExpend: (val: TreeNodeValue[]) => void;\n}\n\nexport interface CascaderPanelProps extends Pick<TdCascaderProps, 'trigger' | 'empty' | 'onChange'> {\n  cascaderContext: CascaderContextType;\n}\n\nexport interface ListenersType {\n  onRemove?: TdCascaderProps['onRemove'];\n  onBlur?: TdCascaderProps['onBlur'];\n  onFocus?: TdCascaderProps['onFocus'];\n  onChange?: TdCascaderProps['onChange'];\n}\n// InputContent component interfaces\nexport interface InputContentProps {\n  cascaderContext: CascaderContextType;\n  placeholder: TdCascaderProps['placeholder'];\n  listeners: ListenersType;\n  collapsedItems: TdCascaderProps['collapsedItems'];\n}\n\nexport interface CascaderItemPropsType {\n  node: TreeNode;\n  cascaderContext: CascaderContextType;\n  onClick: (ctx: ContextType) => void;\n  onChange: (ctx: ContextType | { e: boolean; node: TreeNode }) => void;\n  onMouseEnter: (ctx: ContextType) => void;\n}\n\nexport type ContextType = { e?: Event; node?: TreeNode };\nexport { TreeNode } from '../_common/js/tree/tree-node';\nexport type { TreeNodeValue } from '../_common/js/tree/types';\nexport type { TreeOptionData } from '../_common/js/common';\nexport type { TreeNodeModel } from '../tree';\n\nexport const EVENT_NAME_WITH_KEBAB = ['remove', 'blur', 'focus'];\n"],"names":["EVENT_NAME_WITH_KEBAB"],"mappings":";;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,qBAAqB,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB;;;;"}