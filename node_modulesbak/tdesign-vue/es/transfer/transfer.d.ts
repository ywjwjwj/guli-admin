import { TransferListType, TransferItemOption, CheckedOptions, TransferValue, EmptyType, TransferListOptionBase, TargetParams, SearchEvent, SearchOption } from './interface';
import { PageInfo, TdPaginationProps } from '../pagination/type';
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("../config-provider/config-receiver").ComponentConfigType;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, {
    SOURCE: TransferListType;
    TARGET: TransferListType;
    formDisabled: boolean;
}, {
    transferTo(toDirection: TransferListType): void;
    transferToRight(): void;
    transferToLeft(): void;
    handleCheckedChange(val: Array<TransferValue>, listType: TransferListType): void;
    filterMethod(transferList: Array<TransferItemOption>, targetValueList: Array<TransferValue>, needMatch: boolean): Array<TransferItemOption>;
    handleScroll(e: Event, listType: TransferListType): void;
    handleSearch(e: SearchEvent): void;
    handlePageChange(pageInfo: PageInfo, listType: TransferListType): void;
    renderTransferList(listType: TransferListType): JSX.Element;
}, {
    tDisabled: boolean | boolean[];
    isTreeMode: boolean;
    leftButtonDisabled: boolean;
    rightButtonDisabled: boolean;
    transferData: TransferItemOption[];
    sourceList: TransferItemOption[];
    targetList: TransferItemOption[];
    checkedValue: TransferListOptionBase<TransferValue[]>;
    hasFooter: boolean;
    showPagination: boolean;
    showSearch: boolean;
    footerOption: TransferListOptionBase<string | Function>;
    emptyOption: TransferListOptionBase<EmptyType>;
    searchOption: TransferListOptionBase<SearchOption>;
    checkAllOption: TransferListOptionBase<boolean>;
    disabledOption: TransferListOptionBase<boolean>;
    titleOption: TransferListOptionBase<string>;
    paginationOption: TransferListOptionBase<TdPaginationProps>;
}, {
    checkboxProps: import("..").TdCheckboxProps;
    checked: TransferValue[];
    defaultChecked: TransferValue[];
    data: import("./type").DataOption[];
    direction: "both" | "left" | "right";
    disabled: boolean | boolean[];
    empty: EmptyType | EmptyType[];
    footer: (string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue))[] | ((h: import("vue").CreateElement, props: {
        type: TransferListType;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    keys: import("../common").KeysType;
    operation: (string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue))[] | ((h: import("vue").CreateElement, props: {
        direction: "left" | "right";
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    pagination: TdPaginationProps | TdPaginationProps[];
    search: SearchOption | SearchOption[];
    showCheckAll: boolean | boolean[];
    targetSort: "push" | "unshift" | "original";
    title: import("./type").TitleType[] | ((h: import("vue").CreateElement, props: {
        type: TransferListType;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    transferItem: (h: import("vue").CreateElement, props: import("./type").TransferItem<import("./type").DataOption>) => import("vue/types/vnode").ScopedSlotReturnValue;
    value: TransferValue[];
    defaultValue: TransferValue[];
    onChange: (targetValue: TransferValue[], context: TargetParams) => void;
    onCheckedChange: (options: CheckedOptions) => void;
    onPageChange: (page: PageInfo, context: {
        type: TransferListType;
    }) => void;
    onScroll: (options: {
        e: Event;
        bottomDistance: number;
        type: TransferListType;
    }) => void;
    onSearch: (options: import("./type").SearchContext) => void;
}>;
export default _default;
