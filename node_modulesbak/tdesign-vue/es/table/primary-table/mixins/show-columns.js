/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import Vue from 'vue';
import { SettingIcon } from 'tdesign-icons-vue';
import { DialogPlugin } from '../../../dialog/plugin.js';
import { Checkbox } from '../../../checkbox/index.js';
import CheckboxGroup from '../../../checkbox/group.js';
import primaryTableProps from '../../primary-table-props.js';
import { prefix } from '../../../config.js';
import { renderTNodeJSXDefault } from '../../../utils/render-tnode.js';
import '@babel/runtime/helpers/defineProperty';
import '../../../dialog/dialog.js';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/throttle';
import '../../../button/index.js';
import '../../../button/button.js';
import '../../../_chunks/dep-99305448.js';
import '../../../utils/classnames.js';
import '../../../loading/index.js';
import '../../../loading/loading.js';
import '../../../loading/icon/gradient.js';
import '../../../_common/js/loading/circle-adapter.js';
import '../../../_common/js/utils/set-style.js';
import '../../../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../../../utils/dom.js';
import 'raf';
import 'lodash/isString';
import '../../../utils/easing.js';
import '../../../utils/transfer-dom.js';
import '../../../loading/props.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/isObject';
import '../../../utils/withInstall.js';
import 'lodash/capitalize';
import './style/css.js';
import '../../../loading/type.js';
import '../../../loading/plugin.js';
import '../../../button/props.js';
import '../../../utils/ripple.js';
import '../../../config-provider/config-receiver.js';
import 'lodash/mergeWith';
import '../../../config-provider/zh_CN_config.js';
import '../../../config-provider/type.js';
import '../../../utils/mixins.js';
import '../../../button/type.js';
import '../../../dialog/actions.js';
import '../../../dialog/props.js';
import '../../../utils/event.js';
import '../../../utils/helper.js';
import 'lodash/camelCase';
import '../../../checkbox/checkbox.js';
import '../../../checkbox/props.js';
import '../../../utils/map-props.js';
import '../../../checkbox/type.js';
import 'lodash/intersection';
import '../../../checkbox/checkbox-group-props.js';

var showColumns = Vue.extend({
  name: "".concat(prefix, "-primary-show-columns"),
  props: {
    columnController: primaryTableProps.columnController,
    columns: primaryTableProps.columns,
    showColumns: {
      type: Boolean,
      "default": false
    }
  },
  data: function data() {
    return {
      showColumnKeys: this.columns.map(function (_ref) {
        var colKey = _ref.colKey;
        return colKey;
      }),
      showColumnCheckboxKeys: this.columns.map(function (_ref2) {
        var colKey = _ref2.colKey;
        return colKey;
      }),
      isShowColumnsDlg: false
    };
  },
  computed: {
    showColumnCheckboxOpts: function showColumnCheckboxOpts() {
      var _this$columnControlle;

      var enbledKeys = new Set(((_this$columnControlle = this.columnController) === null || _this$columnControlle === void 0 ? void 0 : _this$columnControlle.fields) || this.columns.map(function (_ref3) {
        var colKey = _ref3.colKey;
        return colKey;
      }));
      return this.columns.filter(function (_ref4) {
        var colKey = _ref4.colKey,
            title = _ref4.title;
        return colKey && title;
      }).map(function (_ref5) {
        var colKey = _ref5.colKey,
            title = _ref5.title;
        return {
          label: title,
          value: colKey,
          disabled: !enbledKeys.has(colKey)
        };
      });
    },
    isAllShowColumns: function isAllShowColumns() {
      var _this = this;

      return this.showColumnCheckboxOpts.every(function (_ref6) {
        var value = _ref6.value;
        return _this.showColumnCheckboxKeys.includes(value);
      });
    },
    isSomeShowColumns: function isSomeShowColumns() {
      var _this2 = this;

      return !this.isAllShowColumns && this.showColumnCheckboxOpts.some(function (_ref7) {
        var value = _ref7.value;
        return _this2.showColumnCheckboxKeys.includes(value);
      });
    }
  },
  methods: {
    getShowColumns: function getShowColumns(columns) {
      var _this3 = this;

      return columns.filter(function (_ref8) {
        var colKey = _ref8.colKey;
        return _this3.showColumnKeys.includes(colKey) || !_this3.showColumnCheckboxOpts.map(function (_ref9) {
          var value = _ref9.value;
          return value;
        }).includes(colKey);
      });
    },
    renderShowColumns: function renderShowColumns() {
      var _this4 = this;

      var h = this.$createElement;

      var handleCheckChange = function handleCheckChange(vals) {
        _this4.showColumnCheckboxKeys = vals;
      };

      var handleToggleColumnController = function handleToggleColumnController() {
        var dialogTmp = DialogPlugin.confirm({
          header: "\u81EA\u5B9A\u4E49\u8BBE\u7F6E\u8868\u683C\u5217",
          body: function body() {
            var defaultNode = h("div", {
              "class": "".concat(prefix, "-table__column-controller ").concat(prefix, "-table__column-controller--").concat(_this4.columnController.displayType === "fixed-width" ? "fixed" : "auto")
            }, [h("div", {
              "class": "".concat(prefix, "-table__column-controller-body")
            }, [h("p", {
              "class": "".concat(prefix, "-table__column-controller-desc")
            }, ["\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217"]), h("div", {
              "class": "".concat(prefix, "-table__column-controller-block")
            }, [h(Checkbox, {
              "attrs": {
                "indeterminate": _this4.isSomeShowColumns,
                "checked": _this4.isAllShowColumns
              },
              "on": {
                "change": _this4.handleClickAllShowColumns
              }
            }, ["\u5168\u9009"])]), h("div", {
              "class": "".concat(prefix, "-table__column-controller-block")
            }, [h(CheckboxGroup, {
              "attrs": {
                "options": _this4.showColumnCheckboxOpts,
                "value": _this4.showColumnCheckboxKeys
              },
              "on": {
                "change": handleCheckChange
              }
            })])])]);
            return renderTNodeJSXDefault(_this4, "columnControllerContent", defaultNode);
          },
          confirmBtn: "\u786E\u8BA4",
          cancelBtn: "\u53D6\u6D88",
          width: 612,
          onConfirm: function onConfirm() {
            _this4.showColumnKeys = _toConsumableArray(_this4.showColumnCheckboxKeys);
            dialogTmp.hide();
          },
          onClose: function onClose() {
            dialogTmp.hide();
          }
        });
      };

      return h("div", {
        "class": "".concat(prefix, "-table__top-content")
      }, [h("t-button", {
        "attrs": {
          "theme": "default",
          "variant": "outline"
        },
        "on": {
          "click": handleToggleColumnController
        }
      }, [h(SettingIcon, {
        "slot": "icon"
      }), "\u81EA\u5B9A\u4E49\u5217"])]);
    },
    handleClickAllShowColumns: function handleClickAllShowColumns() {
      if (this.isAllShowColumns) {
        this.showColumnCheckboxKeys = this.showColumnCheckboxOpts.filter(function (item) {
          return item.disabled;
        }).map(function (_ref10) {
          var value = _ref10.value;
          return value;
        });
      } else {
        this.showColumnCheckboxKeys = this.showColumnCheckboxOpts.map(function (_ref11) {
          var value = _ref11.value;
          return value;
        });
      }
    },
    updateColumns: function updateColumns() {
      var keys = this.columns.map(function (_ref12) {
        var colKey = _ref12.colKey;
        return colKey;
      });
      this.showColumnKeys = keys;
      this.showColumnCheckboxKeys = keys;
    }
  },
  watch: {
    columns: {
      deep: true,
      handler: function handler() {
        this.updateColumns();
      }
    }
  }
});

export { showColumns as default };
//# sourceMappingURL=show-columns.js.map
