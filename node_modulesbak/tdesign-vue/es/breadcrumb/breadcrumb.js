/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import { prefix } from '../config.js';
import props from './props.js';
import _BreadcrumbItem from './breadcrumb-item.js';
import '../_chunks/dep-99305448.js';
import 'tdesign-icons-vue';
import '../tooltip/index.js';
import '../tooltip/tooltip.js';
import '../tooltip/props.js';
import '../popup/props.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../utils/classnames.js';
import '../utils/dom.js';
import 'raf';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/render-tnode.js';
import 'lodash/isObject';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../_common/js/utils/set-style.js';
import '../popup/container.js';
import '../utils/map-props.js';
import '../utils/withInstall.js';
import 'lodash/capitalize';
import './style/css.js';
import '../tooltip/type.js';
import './breadcrumb-item-props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-breadcrumb");
var _Breadcrumb = Vue.extend({
  name: "TBreadcrumb",
  props: _objectSpread({}, props),
  components: {
    BreadcrumbItem: _BreadcrumbItem
  },
  provide: function provide() {
    return {
      tBreadcrumb: this
    };
  },
  render: function render() {
    var h = arguments[0];
    var content = this.$slots["default"];

    if (this.options && this.options.length) {
      content = this.options.map(function (option, index) {
        return h(_BreadcrumbItem, {
          "key": index,
          "attrs": {
            "maxWidth": option.maxWidth,
            "disabled": option.disabled,
            "href": option.href,
            "target": option.target,
            "to": option.to,
            "router": option.router,
            "replace": option.replace
          }
        }, [option["default"] || option.content]);
      });
    }

    return h("div", {
      "class": name
    }, [content]);
  }
});

export { _Breadcrumb as default };
//# sourceMappingURL=breadcrumb.js.map
