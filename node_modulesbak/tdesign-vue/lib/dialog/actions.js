/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var helper = require('../_chunks/dep-c2bd70fb.js');
var _typeof = require('@babel/runtime/helpers/typeof');
var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var isString = require('lodash/isString');
var isObject = require('lodash/isObject');
var utils_renderTnode = require('../utils/render-tnode.js');
var button_index = require('../button/index.js');
require('../button/button.js');
require('../config.js');
require('../utils/classnames.js');
require('../loading/index.js');
require('../loading/loading.js');
require('../loading/icon/gradient.js');
require('../_common/js/loading/circle-adapter.js');
require('../_common/js/utils/set-style.js');
require('../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('@babel/runtime/helpers/slicedToArray');
require('../utils/dom.js');
require('raf');
require('../utils/easing.js');
require('../utils/transfer-dom.js');
require('../loading/props.js');
require('../utils/withInstall.js');
require('lodash/capitalize');
require('../loading/plugin.js');
require('../button/props.js');
require('../utils/ripple.js');
require('../config-provider/config-receiver.js');
require('lodash/mergeWith');
require('../config-provider/zh_CN_config.js');
require('../utils/mixins.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _typeof__default = /*#__PURE__*/_interopDefaultLegacy(_typeof);
var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);
var isString__default = /*#__PURE__*/_interopDefaultLegacy(isString);
var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var ActionMixin = Vue__default["default"].extend({
  methods: {
    getConfirmBtn: function getConfirmBtn(options) {
      var h = this.$createElement;
      var confirmBtn = options.confirmBtn,
          className = options.className;
      if (confirmBtn === null) return null;

      if (confirmBtn && this.$scopedSlots.confirmBtn) {
        console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
      }

      var defaultButtonProps = this.getDefaultConfrimBtnProps(options);

      if (!confirmBtn && !this.$scopedSlots.confirmBtn) {
        return h(button_index.Button, helper.helper([{
          "class": className
        }, {
          "props": _objectSpread({}, defaultButtonProps)
        }]));
      }

      if (confirmBtn && ["string", "object"].includes(_typeof__default["default"](confirmBtn))) {
        return this.getButtonByProps(confirmBtn, defaultButtonProps, className);
      }

      return utils_renderTnode.renderTNodeJSX(this, "confirmBtn");
    },
    getCancelBtn: function getCancelBtn(options) {
      var h = this.$createElement;
      var cancelBtn = options.cancelBtn,
          className = options.className;
      if (cancelBtn === null) return null;

      if (cancelBtn && this.$scopedSlots.cancelBtn) {
        console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
      }

      var defaultButtonProps = this.getDefaultCancelBtnProps(options);

      if (!cancelBtn && !this.$scopedSlots.cancelBtn) {
        return h(button_index.Button, helper.helper([{
          "class": className
        }, {
          "props": _objectSpread({}, defaultButtonProps)
        }]));
      }

      if (cancelBtn && ["string", "object"].includes(_typeof__default["default"](cancelBtn))) {
        return this.getButtonByProps(cancelBtn, defaultButtonProps);
      }

      return utils_renderTnode.renderTNodeJSX(this, "cancelBtn");
    },
    getButtonByProps: function getButtonByProps(button, defaultButton, className) {
      var h = this.$createElement;
      var newOptions = defaultButton;

      if (isString__default["default"](button)) {
        newOptions.content = button;
      } else if (isObject__default["default"](button)) {
        newOptions = _objectSpread(_objectSpread({}, newOptions), button);
      }

      return h(button_index.Button, helper.helper([{
        "class": className
      }, {
        "props": newOptions
      }]));
    },
    confirmBtnAction: function confirmBtnAction(e) {},
    cancelBtnAction: function cancelBtnAction(e) {},
    getDefaultConfrimBtnProps: function getDefaultConfrimBtnProps(options) {
      var _this = this;

      var globalConfirm = options.globalConfirm,
          theme = options.theme,
          globalConfirmBtnTheme = options.globalConfirmBtnTheme;
      var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
      var props = {
        theme: defaultTheme,
        content: "\u786E\u5B9A",
        onClick: function onClick(e) {
          _this.confirmBtnAction(e);
        }
      };

      if (isString__default["default"](globalConfirm)) {
        props.content = globalConfirm;
      } else if (isObject__default["default"](globalConfirm)) {
        props = _objectSpread(_objectSpread({}, props), globalConfirm);
      }

      return props;
    },
    getDefaultCancelBtnProps: function getDefaultCancelBtnProps(options) {
      var _this2 = this;

      var globalCancel = options.globalCancel;
      var props = {
        theme: "default",
        content: "\u53D6\u6D88",
        onClick: function onClick(e) {
          _this2.cancelBtnAction(e);
        }
      };

      if (isString__default["default"](globalCancel)) {
        props.content = globalCancel;
      } else if (isObject__default["default"](globalCancel)) {
        props = _objectSpread(_objectSpread({}, props), globalCancel);
      }

      return props;
    }
  }
});

exports["default"] = ActionMixin;
//# sourceMappingURL=actions.js.map
