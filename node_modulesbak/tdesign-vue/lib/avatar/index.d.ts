import { TdAvatarProps, TdAvatarGroupProps } from './type';
import './style';
export * from './type';
export declare type AvatarProps = TdAvatarProps;
export declare type AvatarGroupProps = TdAvatarGroupProps;
export declare const Avatar: import("vue/types/vue").ExtendedVue<import("./avatar").AvatarInstance, {
    isImgExist: boolean;
    gap: number;
    sizeValue: string;
    scale: string;
}, {
    handleImgLoadError(): void;
    setScaleParams(): void;
    isCustomSize(): boolean;
}, {
    customAvatarSize: import("../common").Styles;
    customImageSize: import("../common").Styles;
    customCharaSize: import("../common").Styles;
}, {
    alt: string;
    hideOnLoadFailed: boolean;
    icon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    image: string;
    shape: import("./type").ShapeEnum;
    size: string;
    onError: () => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("./avatar").AvatarInstance, {
    isImgExist: boolean;
    gap: number;
    sizeValue: string;
    scale: string;
}, {
    handleImgLoadError(): void;
    setScaleParams(): void;
    isCustomSize(): boolean;
}, {
    customAvatarSize: import("../common").Styles;
    customImageSize: import("../common").Styles;
    customCharaSize: import("../common").Styles;
}, {
    alt: string;
    hideOnLoadFailed: boolean;
    icon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    image: string;
    shape: import("./type").ShapeEnum;
    size: string;
    onError: () => void;
}>>;
export declare const AvatarGroup: import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    renderEllipsisAvatar(children: import("vue/types/vnode").ScopedSlotReturnValue[]): import("vue/types/vnode").ScopedSlotReturnValue[];
    setEllipsisContent(children: import("vue/types/vnode").ScopedSlotReturnValue[]): any;
    isIcon(): boolean;
}, unknown, {
    cascading: import("./type").CascadingValue;
    collapseAvatar: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    max: number;
    placement: import("./type").MaxOverPlacement;
    popupProps: import("..").TdPopupProps;
    size: string;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    renderEllipsisAvatar(children: import("vue/types/vnode").ScopedSlotReturnValue[]): import("vue/types/vnode").ScopedSlotReturnValue[];
    setEllipsisContent(children: import("vue/types/vnode").ScopedSlotReturnValue[]): any;
    isIcon(): boolean;
}, unknown, {
    cascading: import("./type").CascadingValue;
    collapseAvatar: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    max: number;
    placement: import("./type").MaxOverPlacement;
    popupProps: import("..").TdPopupProps;
    size: string;
}>>;
export default Avatar;
