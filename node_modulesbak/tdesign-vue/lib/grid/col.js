/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var isObject = require('lodash/isObject');
var utils_responsive = require('../utils/responsive.js');
var config = require('../config.js');
var grid_colProps = require('./col-props.js');
var utils_renderTnode = require('../utils/render-tnode.js');
require('@babel/runtime/helpers/typeof');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);
var isObject__default = /*#__PURE__*/_interopDefaultLegacy(isObject);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-col");
var _Col = Vue__default["default"].extend({
  name: "TCol",
  props: _objectSpread({}, grid_colProps["default"]),
  inject: ["rowContext"],
  data: function data() {
    return {
      size: "md"
    };
  },
  computed: {
    classes: function classes() {
      var _this = this,
          _objectSpread3;

      var span = this.span,
          order = this.order,
          offset = this.offset,
          push = this.push,
          pull = this.pull;
      var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
      var sizeClasses = allSizes.reduce(function (acc, currSize) {
        var _objectSpread2;

        var sizeProp = _this[currSize];
        var sizeObject = {};

        if (typeof sizeProp === "number") {
          sizeObject.span = sizeProp;
        } else if (isObject__default["default"](sizeProp)) {
          sizeObject = sizeProp || {};
        }

        return _objectSpread(_objectSpread({}, acc), {}, (_objectSpread2 = {}, _defineProperty__default["default"](_objectSpread2, "".concat(name, "-").concat(currSize, "-").concat(sizeObject.span), sizeObject.span !== void 0), _defineProperty__default["default"](_objectSpread2, "".concat(name, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), _defineProperty__default["default"](_objectSpread2, "".concat(name, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), _defineProperty__default["default"](_objectSpread2, "".concat(name, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), _defineProperty__default["default"](_objectSpread2, "".concat(name, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0), _objectSpread2));
      }, {});
      return _objectSpread((_objectSpread3 = {}, _defineProperty__default["default"](_objectSpread3, "".concat(name), true), _defineProperty__default["default"](_objectSpread3, "".concat(name, "-").concat(span), span !== void 0), _defineProperty__default["default"](_objectSpread3, "".concat(name, "-order-").concat(order), order), _defineProperty__default["default"](_objectSpread3, "".concat(name, "-offset-").concat(offset), offset), _defineProperty__default["default"](_objectSpread3, "".concat(name, "-push-").concat(push), push), _defineProperty__default["default"](_objectSpread3, "".concat(name, "-pull-").concat(pull), pull), _objectSpread3), sizeClasses);
    }
  },
  mounted: function mounted() {
    this.updateSize();
    window.addEventListener("resize", this.updateSize);
  },
  beforeDestroy: function beforeDestroy() {
    window.removeEventListener("resize", this.updateSize);
  },
  methods: {
    updateSize: function updateSize() {
      this.size = utils_responsive.calcSize(window.innerWidth);
    },
    parseFlex: function parseFlex(flex) {
      if (typeof flex === "number") {
        return "".concat(flex, " ").concat(flex, " 0");
      }

      if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
        return "0 0 ".concat(flex);
      }

      return flex;
    },
    calcColPadding: function calcColPadding(gutter, currentSize) {
      var paddingObj = {};

      if (typeof gutter === "number") {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter / 2, "px"),
          paddingRight: "".concat(gutter / 2, "px")
        });
      } else if (Array.isArray(gutter) && gutter.length) {
        if (typeof gutter[0] === "number") {
          Object.assign(paddingObj, {
            paddingLeft: "".concat(gutter[0] / 2, "px"),
            paddingRight: "".concat(gutter[0] / 2, "px")
          });
        }

        if (isObject__default["default"](gutter[0]) && gutter[0][currentSize]) {
          Object.assign(paddingObj, {
            paddingLeft: "".concat(gutter[0][currentSize] / 2, "px"),
            paddingRight: "".concat(gutter[0][currentSize] / 2, "px")
          });
        }
      } else if (isObject__default["default"](gutter) && gutter[currentSize]) {
        Object.assign(paddingObj, {
          paddingLeft: "".concat(gutter[currentSize] / 2, "px"),
          paddingRight: "".concat(gutter[currentSize] / 2, "px")
        });
      }

      return paddingObj;
    }
  },
  render: function render() {
    var h = arguments[0];
    var flex = this.flex,
        tag = this.tag,
        classes = this.classes;
    var colStyle = {};
    flex && (colStyle.flex = this.parseFlex(flex));
    var rowContext = this.rowContext;

    if (rowContext) {
      var rowGutter = rowContext.gutter;
      Object.assign(colStyle, this.calcColPadding(rowGutter, this.size));
    }

    return h(tag, {
      "class": classes,
      "style": colStyle
    }, [utils_renderTnode.renderTNodeJSX(this, "default")]);
  }
});

exports["default"] = _Col;
//# sourceMappingURL=col.js.map
