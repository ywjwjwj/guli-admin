/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var Vue = require('vue');
var config = require('../config.js');
var locale_zh_CN = require('./zh_CN.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty__default["default"](target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(config.prefix, "-locale-receiver");
function getLocalReceiverMixins(componentName) {
  return Vue__default["default"].extend({
    name: name,
    inject: {
      globalLocale: {
        "default": void 0
      }
    },
    computed: {
      locale: function locale() {
        var defaultData = locale_zh_CN["default"][componentName];

        if (this.globalLocale && this.globalLocale[componentName]) {
          return _objectSpread(_objectSpread({}, defaultData), this.globalLocale[componentName]);
        }

        return defaultData;
      }
    },
    methods: {
      t: function t(pattern, placement) {
        if (typeof pattern === "string") {
          if (!placement) return pattern;
          var regx = /\{\s*([\w-]+)\s*\}/g;
          var translated = pattern.replace(regx, function (match, key) {
            if (placement) {
              return String(placement[key]);
            }

            return "";
          });
          return translated;
        }

        if (typeof pattern === "function") {
          return pattern(placement);
        }

        return "";
      }
    }
  });
}

exports["default"] = getLocalReceiverMixins;
//# sourceMappingURL=local-receiver.js.map
