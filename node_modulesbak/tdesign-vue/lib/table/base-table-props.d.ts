import { TdBaseTableProps } from '../table/type';
import { PropType } from 'vue';
declare const _default: {
    bordered: BooleanConstructor;
    columns: {
        type: PropType<import("../table/type").BaseTableCol<import("../table/type").TableRowData>[]>;
        default: () => TdBaseTableProps['columns'];
    };
    data: {
        type: PropType<import("../table/type").TableRowData[]>;
        default: () => TdBaseTableProps['data'];
    };
    disableDataSort: BooleanConstructor;
    empty: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
        default: string;
    };
    firstFullRow: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    height: {
        type: PropType<string | number>;
        default: string;
    };
    hover: BooleanConstructor;
    lastFullRow: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    loading: {
        type: PropType<boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
        default: boolean;
    };
    maxHeight: {
        type: PropType<string | number>;
    };
    pagination: {
        type: PropType<import("..").TdPaginationProps>;
    };
    rowClassName: {
        type: PropType<import("../common").ClassName | ((params: {
            row: import("../table/type").TableRowData;
            rowIndex: number;
        }) => import("../common").ClassName)>;
    };
    rowKey: {
        type: StringConstructor;
        default: string;
        required: boolean;
    };
    rowspanAndColspan: {
        type: PropType<(params: import("../table/type").RowspanAndColspanParams<import("../table/type").TableRowData>) => import("../table/type").RowspanColspan>;
    };
    scroll: {
        type: PropType<import("../table/type").TableScroll>;
    };
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: TdBaseTableProps['size']): boolean;
    };
    stripe: BooleanConstructor;
    tableLayout: {
        type: PropType<"fixed" | "auto">;
        default: "fixed" | "auto";
        validator(val: TdBaseTableProps['tableLayout']): boolean;
    };
    topContent: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    verticalAlign: {
        type: PropType<"top" | "bottom" | "middle">;
        default: "top" | "bottom" | "middle";
        validator(val: TdBaseTableProps['verticalAlign']): boolean;
    };
    onCellClick: PropType<(context: import("../table/type").BaseTableCellEventContext<import("../table/type").TableRowData>) => void>;
    onPageChange: PropType<(pageInfo: import("..").PageInfo, newDataSource: import("../table/type").TableRowData[]) => void>;
    onRowClick: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowDbClick: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowHover: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMousedown: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMouseenter: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMouseleave: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onRowMouseup: PropType<(context: import("../table/type").RowEventContext<import("../table/type").TableRowData>) => void>;
    onScrollX: PropType<(params: {
        e: WheelEvent;
    }) => void>;
    onScrollY: PropType<(params: {
        e: WheelEvent;
    }) => void>;
};
export default _default;
