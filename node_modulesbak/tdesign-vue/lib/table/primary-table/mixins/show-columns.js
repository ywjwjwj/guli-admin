/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _toConsumableArray = require('@babel/runtime/helpers/toConsumableArray');
var Vue = require('vue');
var tdesignIconsVue = require('tdesign-icons-vue');
var dialog_plugin = require('../../../dialog/plugin.js');
var checkbox_index = require('../../../checkbox/index.js');
var checkbox_group = require('../../../checkbox/group.js');
var table_primaryTableProps = require('../../primary-table-props.js');
var config = require('../../../config.js');
var utils_renderTnode = require('../../../utils/render-tnode.js');
require('@babel/runtime/helpers/defineProperty');
require('../../../dialog/dialog.js');
require('@babel/runtime/helpers/slicedToArray');
require('lodash/throttle');
require('../../../button/index.js');
require('../../../button/button.js');
require('../../../_chunks/dep-c2bd70fb.js');
require('../../../utils/classnames.js');
require('../../../loading/index.js');
require('../../../loading/loading.js');
require('../../../loading/icon/gradient.js');
require('../../../_common/js/loading/circle-adapter.js');
require('../../../_common/js/utils/set-style.js');
require('../../../_common/js/utils/helper.js');
require('@babel/runtime/helpers/objectWithoutProperties');
require('../../../utils/dom.js');
require('raf');
require('lodash/isString');
require('../../../utils/easing.js');
require('../../../utils/transfer-dom.js');
require('../../../loading/props.js');
require('@babel/runtime/helpers/typeof');
require('lodash/isObject');
require('../../../utils/withInstall.js');
require('lodash/capitalize');
require('../../../loading/plugin.js');
require('../../../button/props.js');
require('../../../utils/ripple.js');
require('../../../config-provider/config-receiver.js');
require('lodash/mergeWith');
require('../../../config-provider/zh_CN_config.js');
require('../../../utils/mixins.js');
require('../../../dialog/actions.js');
require('../../../dialog/props.js');
require('../../../utils/event.js');
require('../../../utils/helper.js');
require('lodash/camelCase');
require('../../../checkbox/checkbox.js');
require('../../../checkbox/props.js');
require('../../../utils/map-props.js');
require('lodash/intersection');
require('../../../checkbox/checkbox-group-props.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _toConsumableArray__default = /*#__PURE__*/_interopDefaultLegacy(_toConsumableArray);
var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);

var showColumns = Vue__default["default"].extend({
  name: "".concat(config.prefix, "-primary-show-columns"),
  props: {
    columnController: table_primaryTableProps["default"].columnController,
    columns: table_primaryTableProps["default"].columns,
    showColumns: {
      type: Boolean,
      "default": false
    }
  },
  data: function data() {
    return {
      showColumnKeys: this.columns.map(function (_ref) {
        var colKey = _ref.colKey;
        return colKey;
      }),
      showColumnCheckboxKeys: this.columns.map(function (_ref2) {
        var colKey = _ref2.colKey;
        return colKey;
      }),
      isShowColumnsDlg: false
    };
  },
  computed: {
    showColumnCheckboxOpts: function showColumnCheckboxOpts() {
      var _this$columnControlle;

      var enbledKeys = new Set(((_this$columnControlle = this.columnController) === null || _this$columnControlle === void 0 ? void 0 : _this$columnControlle.fields) || this.columns.map(function (_ref3) {
        var colKey = _ref3.colKey;
        return colKey;
      }));
      return this.columns.filter(function (_ref4) {
        var colKey = _ref4.colKey,
            title = _ref4.title;
        return colKey && title;
      }).map(function (_ref5) {
        var colKey = _ref5.colKey,
            title = _ref5.title;
        return {
          label: title,
          value: colKey,
          disabled: !enbledKeys.has(colKey)
        };
      });
    },
    isAllShowColumns: function isAllShowColumns() {
      var _this = this;

      return this.showColumnCheckboxOpts.every(function (_ref6) {
        var value = _ref6.value;
        return _this.showColumnCheckboxKeys.includes(value);
      });
    },
    isSomeShowColumns: function isSomeShowColumns() {
      var _this2 = this;

      return !this.isAllShowColumns && this.showColumnCheckboxOpts.some(function (_ref7) {
        var value = _ref7.value;
        return _this2.showColumnCheckboxKeys.includes(value);
      });
    }
  },
  methods: {
    getShowColumns: function getShowColumns(columns) {
      var _this3 = this;

      return columns.filter(function (_ref8) {
        var colKey = _ref8.colKey;
        return _this3.showColumnKeys.includes(colKey) || !_this3.showColumnCheckboxOpts.map(function (_ref9) {
          var value = _ref9.value;
          return value;
        }).includes(colKey);
      });
    },
    renderShowColumns: function renderShowColumns() {
      var _this4 = this;

      var h = this.$createElement;

      var handleCheckChange = function handleCheckChange(vals) {
        _this4.showColumnCheckboxKeys = vals;
      };

      var handleToggleColumnController = function handleToggleColumnController() {
        var dialogTmp = dialog_plugin.DialogPlugin.confirm({
          header: "\u81EA\u5B9A\u4E49\u8BBE\u7F6E\u8868\u683C\u5217",
          body: function body() {
            var defaultNode = h("div", {
              "class": "".concat(config.prefix, "-table__column-controller ").concat(config.prefix, "-table__column-controller--").concat(_this4.columnController.displayType === "fixed-width" ? "fixed" : "auto")
            }, [h("div", {
              "class": "".concat(config.prefix, "-table__column-controller-body")
            }, [h("p", {
              "class": "".concat(config.prefix, "-table__column-controller-desc")
            }, ["\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217"]), h("div", {
              "class": "".concat(config.prefix, "-table__column-controller-block")
            }, [h(checkbox_index.Checkbox, {
              "attrs": {
                "indeterminate": _this4.isSomeShowColumns,
                "checked": _this4.isAllShowColumns
              },
              "on": {
                "change": _this4.handleClickAllShowColumns
              }
            }, ["\u5168\u9009"])]), h("div", {
              "class": "".concat(config.prefix, "-table__column-controller-block")
            }, [h(checkbox_group["default"], {
              "attrs": {
                "options": _this4.showColumnCheckboxOpts,
                "value": _this4.showColumnCheckboxKeys
              },
              "on": {
                "change": handleCheckChange
              }
            })])])]);
            return utils_renderTnode.renderTNodeJSXDefault(_this4, "columnControllerContent", defaultNode);
          },
          confirmBtn: "\u786E\u8BA4",
          cancelBtn: "\u53D6\u6D88",
          width: 612,
          onConfirm: function onConfirm() {
            _this4.showColumnKeys = _toConsumableArray__default["default"](_this4.showColumnCheckboxKeys);
            dialogTmp.hide();
          },
          onClose: function onClose() {
            dialogTmp.hide();
          }
        });
      };

      return h("div", {
        "class": "".concat(config.prefix, "-table__top-content")
      }, [h("t-button", {
        "attrs": {
          "theme": "default",
          "variant": "outline"
        },
        "on": {
          "click": handleToggleColumnController
        }
      }, [h(tdesignIconsVue.SettingIcon, {
        "slot": "icon"
      }), "\u81EA\u5B9A\u4E49\u5217"])]);
    },
    handleClickAllShowColumns: function handleClickAllShowColumns() {
      if (this.isAllShowColumns) {
        this.showColumnCheckboxKeys = this.showColumnCheckboxOpts.filter(function (item) {
          return item.disabled;
        }).map(function (_ref10) {
          var value = _ref10.value;
          return value;
        });
      } else {
        this.showColumnCheckboxKeys = this.showColumnCheckboxOpts.map(function (_ref11) {
          var value = _ref11.value;
          return value;
        });
      }
    },
    updateColumns: function updateColumns() {
      var keys = this.columns.map(function (_ref12) {
        var colKey = _ref12.colKey;
        return colKey;
      });
      this.showColumnKeys = keys;
      this.showColumnCheckboxKeys = keys;
    }
  },
  watch: {
    columns: {
      deep: true,
      handler: function handler() {
        this.updateColumns();
      }
    }
  }
});

exports["default"] = showColumns;
//# sourceMappingURL=show-columns.js.map
