{"version":3,"file":"expand.js","sources":["../../../../src/table/primary-table/mixins/expand.tsx"],"sourcesContent":["import Vue, { CreateElement, VNode } from 'vue';\nimport get from 'lodash/get';\nimport { TdPrimaryTableProps } from '../../type';\nimport baseTableProps from '../../base-table-props';\nimport ExpandBox from '../expand-box';\nimport { ExpandProps } from '../../util/interface';\nimport { filterDataByIds } from '../../util/common';\nimport { prefix } from '../../../config';\nimport { emitEvent } from '../../../utils/event';\nimport { renderTNodeJSX } from '../../../utils/render-tnode';\n\ntype Columns = TdPrimaryTableProps['columns'];\n\nconst expandedColKey = 'expanded-icon-cell';\nexport default Vue.extend({\n  name: `${prefix}-primary-table-expand`,\n  props: {\n    data: baseTableProps.data,\n    columns: baseTableProps.columns,\n    rowKey: baseTableProps.rowKey,\n    ...ExpandProps,\n  },\n  data() {\n    return {\n      hasExpandedColumn: false,\n    };\n  },\n  computed: {\n    reRowKey(): string {\n      return this.rowKey || 'id';\n    },\n    columnLength(): number {\n      let len = this.columns.length;\n      if (this.hasExpandedColumn) {\n        len += 1;\n      }\n      return len;\n    },\n    isFirstColumnFixed(): boolean {\n      return this.columns[0].fixed === 'left';\n    },\n  },\n  methods: {\n    getExpandRowHandler(): TdPrimaryTableProps['expandedRow'] {\n      if (!this.expandedRow && !this.$scopedSlots.expandedRow) return;\n      return (h: CreateElement, params) => renderTNodeJSX(this, 'expandedRow', { params });\n    },\n    getExpandColumns(columns: Columns): Columns {\n      const expandRowHandler = this.getExpandRowHandler();\n      const hasExpandedColumn = Boolean(expandRowHandler && this.expandIcon);\n      this.hasExpandedColumn = hasExpandedColumn;\n      if (!hasExpandedColumn) return columns;\n      return [\n        {\n          colKey: expandedColKey,\n          width: 48,\n          attrs: {\n            class: [`${prefix}-table__expandable-icon-cell`],\n            style: {\n              overflow: 'auto',\n            },\n          },\n          fixed: this.isFirstColumnFixed ? 'left' : undefined,\n          cell: (h, { row, rowIndex }) => this.renderExpandIconCell({ row, rowIndex }),\n        },\n        ...columns,\n      ];\n    },\n    // 渲染展开单元格内容\n    renderExpandIconCell({ row, rowIndex }: Record<string, any>): VNode {\n      const { expandedRowKeys = [] } = this;\n      const id = get(row, this.reRowKey);\n      const isExpanded = expandedRowKeys.indexOf(id) !== -1;\n      return (\n        <ExpandBox\n          expandIcon={this.expandIcon}\n          expanded={isExpanded}\n          row={row}\n          rowIndex={rowIndex}\n          onClick={(e: MouseEvent) => {\n            this.expandOnRowClick && e.stopPropagation();\n            this.handleExpandChange(row);\n          }}\n        />\n      );\n    },\n\n    // 渲染被展开行\n    renderExpandedRow(\n      params: Parameters<TdPrimaryTableProps['expandedRow']>[1],\n    ): ReturnType<TdPrimaryTableProps['expandedRow']> {\n      const id = get(params.row, this.reRowKey);\n      const isShowExpanded = this.expandedRowKeys.includes(id);\n      if (isShowExpanded) {\n        return (\n          <tr class={`${prefix}-table__expanded-row`}>\n            <td colspan={this.columnLength} class={`${prefix}-table__row--full`}>\n              <div class={`${prefix}-table__expanded-row-inner`}>{renderTNodeJSX(this, 'expandedRow', { params })}</div>\n            </td>\n          </tr>\n        );\n      }\n      return null;\n    },\n\n    // handle\n    handleExpandChange(record: Record<string, any> = {}): void {\n      const expandedRowKeys = [...this.expandedRowKeys] as Array<string | number>;\n      const id = get(record, this.reRowKey);\n      const expandedRowIndex = expandedRowKeys.indexOf(id);\n      const isExpanded = expandedRowIndex !== -1;\n      isExpanded\n        ? expandedRowKeys.splice(expandedRowIndex, 1) // 删除\n        : expandedRowKeys.push(id); // 增加\n      emitEvent(this, 'expand-change', expandedRowKeys, {\n        expandedRowData: filterDataByIds(this.data, expandedRowKeys),\n      });\n    },\n  },\n});\n"],"names":["expandedColKey","Vue","extend","name","prefix","props","data","baseTableProps","columns","rowKey","ExpandProps","hasExpandedColumn","computed","reRowKey","columnLength","len","length","isFirstColumnFixed","fixed","methods","getExpandRowHandler","expandedRow","$scopedSlots","h","params","renderTNodeJSX","getExpandColumns","expandRowHandler","Boolean","expandIcon","colKey","width","attrs","style","overflow","cell","row","rowIndex","renderExpandIconCell","expandedRowKeys","id","get","isExpanded","indexOf","ExpandBox","e","expandOnRowClick","stopPropagation","handleExpandChange","renderExpandedRow","isShowExpanded","includes","record","_toConsumableArray","expandedRowIndex","splice","push","emitEvent","expandedRowData","filterDataByIds"],"mappings":"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"}