declare const _default: import("vue/types/vue").ExtendedVue<{
    store: import("./tree-store").default<import("..").TableRowData>;
    dataSource: any[];
} & {
    getTreeNodeStyle(level: number): {
        paddingLeft: string;
    };
    toggleExpandData(p: import("..").PrimaryTableCellParams<import("..").TableRowData>): void;
    setData<T>(key: import("..").TableRowValue, newRowData: T): void;
    getData(key: import("..").TableRowValue): import("..").TableRowState<import("..").TableRowData>;
    remove(key: import("..").TableRowValue): void;
    appendTo<T_1>(key: import("..").TableRowValue, newData: T_1): void;
} & {
    rowDataKeys: import("./tree-store").KeysType;
    childrenKey: string;
    columnsSource: import("..").PrimaryTableCol<import("..").TableRowData>[];
} & {
    rowKey: string;
    data: import("..").TableRowData[];
    columns: import("..").PrimaryTableCol<import("..").TableRowData>[];
    tree: import("..").TableTreeConfig;
} & import("vue").default & {
    dataSource: import("..").TableRowData[];
    store: import("./tree-store").default<import("..").TableRowData>;
} & {
    onInnerSelectChange(rowKeys: (string | number)[], extraData: import("..").SelectOptions<import("..").TableRowData>): void;
    handleSelectAll(extraData: import("..").SelectOptions<import("..").TableRowData>): void;
    handleSelect(rowKeys: (string | number)[], extraData: import("..").SelectOptions<import("..").TableRowData>): void;
} & {
    childrenKey: string;
    rowDataKeys: import("./tree-store").KeysType;
} & {
    data: import("..").TableRowData[];
    rowKey: string;
    columns: import("..").PrimaryTableCol<import("..").TableRowData>[];
    tree: import("..").TableTreeConfig;
}, {
    dataSource: any[];
}, unknown, {
    childrenKey: string;
}, {
    tree: import("..").TableTreeConfig;
    asyncLoading: "loading" | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | "load-more";
    columnController: import("..").TableColumnController;
    columnControllerContent: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    columns: import("..").PrimaryTableCol<import("..").TableRowData>[];
    dragSort: boolean;
    expandedRow: (h: import("vue").CreateElement, props: {
        row: import("..").TableRowData;
        index: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    expandedRowKeys: (string | number)[];
    defaultExpandedRowKeys: (string | number)[];
    expandIcon: boolean | ((h: import("vue").CreateElement, props: import("..").ExpandArrowRenderParams<import("..").TableRowData>) => import("vue/types/vnode").ScopedSlotReturnValue);
    expandOnRowClick: boolean;
    filterIcon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    filterRow: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    filterValue: import("..").FilterValue;
    defaultFilterValue: import("..").FilterValue;
    multipleSort: boolean;
    selectedRowKeys: (string | number)[];
    defaultSelectedRowKeys: (string | number)[];
    showDragCol: boolean;
    sort: import("..").TableSort;
    defaultSort: import("..").TableSort;
    sortOnRowDraggable: boolean;
    onAsyncLoadingClick: (context: {
        status: "loading" | "load-more";
    }) => void;
    onCellClick: (context: import("..").PrimaryTableCellEventContext<import("..").TableRowData>) => void;
    onChange: (data: import("..").TableChangeData, context: import("..").TableChangeContext<import("..").TableRowData[]>) => void;
    onDataChange: (data: import("..").TableRowData[]) => void;
    onDragSort: (context: import("..").DragSortContext<import("..").TableRowData>) => void;
    onExpandChange: (expandedRowKeys: (string | number)[], options: import("..").ExpandOptions<import("..").TableRowData>) => void;
    onFilterChange: (filterValue: import("..").FilterValue, context: {
        col?: import("..").PrimaryTableCol<import("..").TableRowData>;
    }) => void;
    onSelectChange: (selectedRowKeys: (string | number)[], options: import("..").SelectOptions<import("..").TableRowData>) => void;
    onSortChange: (sort: import("..").TableSort, options: import("..").SortOptions<import("..").TableRowData>) => void;
    bordered: boolean;
    data: import("..").TableRowData[];
    disableDataSort: boolean;
    empty: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    firstFullRow: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    height: string | number;
    hover: boolean;
    lastFullRow: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    loading: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    maxHeight: string | number;
    pagination: import("../..").TdPaginationProps;
    rowClassName: import("../../common").ClassName | ((params: {
        row: import("..").TableRowData;
        rowIndex: number;
    }) => import("../../common").ClassName);
    rowKey: string;
    rowspanAndColspan: (params: import("..").RowspanAndColspanParams<import("..").TableRowData>) => import("..").RowspanColspan;
    scroll: import("..").TableScroll;
    size: import("../../common").SizeEnum;
    stripe: boolean;
    tableLayout: "fixed" | "auto";
    topContent: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    verticalAlign: "top" | "bottom" | "middle";
    onPageChange: (pageInfo: import("../..").PageInfo, newDataSource: import("..").TableRowData[]) => void;
    onRowClick: (context: import("..").RowEventContext<import("..").TableRowData>) => void;
    onRowDbClick: (context: import("..").RowEventContext<import("..").TableRowData>) => void;
    onRowHover: (context: import("..").RowEventContext<import("..").TableRowData>) => void;
    onRowMousedown: (context: import("..").RowEventContext<import("..").TableRowData>) => void;
    onRowMouseenter: (context: import("..").RowEventContext<import("..").TableRowData>) => void;
    onRowMouseleave: (context: import("..").RowEventContext<import("..").TableRowData>) => void;
    onRowMouseup: (context: import("..").RowEventContext<import("..").TableRowData>) => void;
    onScrollX: (params: {
        e: WheelEvent;
    }) => void;
    onScrollY: (params: {
        e: WheelEvent;
    }) => void;
}>;
export default _default;
