import { InputProps } from '../input';
import { PopupProps } from '../popup';
import { TimePickerProps } from '../time-picker';
import { TNode } from '../common';
export interface TdDatePickerProps {
    allowInput?: boolean;
    clearable?: boolean;
    disabled?: boolean;
    disableDate?: DisableDate;
    enableTimePicker?: boolean;
    firstDayOfWeek?: number;
    format?: string;
    inputProps?: InputProps;
    mode?: 'year' | 'month' | 'date';
    placeholder?: string | Array<string>;
    popupProps?: PopupProps;
    prefixIcon?: TNode;
    presets?: PresetDate;
    range?: boolean;
    size?: 'small' | 'medium' | 'large';
    suffixIcon?: TNode;
    timePickerProps?: TimePickerProps;
    value?: DateValue;
    defaultValue?: DateValue;
    onBlur?: (context: {
        value: DateValue;
        e: FocusEvent;
    }) => void;
    onChange?: (value: DateValue) => void;
    onFocus?: (context: {
        value: DateValue;
        e: FocusEvent;
    }) => void;
    onInput?: (context: {
        input: string;
        value: DateValue;
        e: InputEvent;
    }) => void;
}
export interface TdDateRangePickerProps {
    allowInput?: boolean;
    clearable?: boolean;
    disabled?: boolean | Array<boolean>;
    disableDate?: DisableRangeDate;
    firstDayOfWeek?: number;
    format?: string;
    mode?: 'year' | 'month' | 'date';
    placeholder?: string | Array<string>;
    prefixIcon?: TNode;
    presets?: PresetRange;
    separator?: string;
    size?: 'small' | 'medium' | 'large';
    suffixIcon?: TNode;
    value?: DateRangeValue;
    defaultValue?: DateRangeValue;
    onBlur?: (context: {
        value: DateRangeValue;
        partial: DateRangePickerPartial;
        e: FocusEvent;
    }) => void;
    onChange?: (value: DateRangeValue) => void;
    onFocus?: (context: {
        value: DateRangeValue;
        partial: DateRangePickerPartial;
        e: FocusEvent;
    }) => void;
    onInput?: (context: {
        input: string;
        value: DateRangeValue;
        partial: DateRangePickerPartial;
        e: InputEvent;
    }) => void;
    onPick?: (value: DateValue, context: PickContext) => void;
}
export declare type DisableDate = Array<DateValue> | DisableDateObj | ((date: DateValue) => boolean);
export interface DisableDateObj {
    from?: string;
    to?: string;
    before?: string;
    after?: string;
}
export interface PresetDate {
    [name: string]: DateValue | (() => DateValue);
}
export declare type DateValue = string | Date | Array<DateValue>;
export declare type DisableRangeDate = Array<DateValue> | DisableDateObj | ((context: {
    date: DateRangeValue;
    partial: DateRangePickerPartial;
}) => boolean);
export declare type DateRangePickerPartial = 'start' | 'end';
export interface PresetRange {
    [range: string]: DateRange | (() => DateRange);
}
export declare type DateRange = [DateValue, DateValue];
export declare type DateRangeValue = Array<DateValue>;
export interface PickContext {
    e: MouseEvent;
    partial: DateRangePickerPartial;
}
