import { TdDatePickerProps } from './type';
import { DatePickerConfig } from '../config-provider/config-receiver';
import { DatePickerInstance, DateValue } from './interface';
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: DatePickerConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & TdDatePickerProps & DatePickerInstance & import("vue").default, unknown, unknown, unknown, {
    allowInput: boolean;
    clearable: boolean;
    disabled: boolean;
    disableDate: import("./type").DisableDate;
    enableTimePicker: boolean;
    firstDayOfWeek: number;
    format: any;
    inputProps: import("../input").TdInputProps;
    mode: "month" | "year" | "date";
    placeholder: any;
    popupProps: import("../popup").TdPopupProps;
    prefixIcon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    presets: import("./type").PresetDate;
    range: boolean;
    size: "small" | "medium" | "large";
    suffixIcon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    timePickerProps: boolean;
    value: DateValue;
    defaultValue: DateValue;
    onBlur: (context: {
        value: DateValue;
        e: FocusEvent;
    }) => void;
    onChange: (value: DateValue) => void;
    onFocus: (context: {
        value: DateValue;
        e: FocusEvent;
    }) => void;
    onInput: (context: {
        input: string;
        value: DateValue;
        e: InputEvent;
    }) => void;
}>;
export default _default;
