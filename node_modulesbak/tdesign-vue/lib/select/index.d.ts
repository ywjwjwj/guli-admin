import { TdSelectProps, TdOptionProps, TdOptionGroupProps } from './type';
import './style';
export declare type SelectProps = TdSelectProps;
export declare type OptionProps = TdOptionProps;
export declare type OptionGroupProps = TdOptionGroupProps;
export * from './type';
export declare const Select: import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    updateData(this: any, propName: string, v: any, ...args: any[]): any;
}, unknown, {
    [x: string]: any;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    updateData(this: any, propName: string, v: any, ...args: any[]): any;
}, unknown, {
    [x: string]: any;
}>>;
export declare const Option: import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./option").OptionInstance & import("vue").default, {
    isHover: boolean;
    formDisabled: any;
}, {
    select(e: MouseEvent | KeyboardEvent): false;
    mouseEvent(v: boolean): void;
}, {
    tDisabled: boolean;
    hovering: boolean;
    multiLimitDisabled: boolean;
    classes: import("../common").ClassName;
    isCreatedOption: boolean;
    show: boolean;
    labelText: string | number;
    selected: boolean;
}, {
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    label: string;
    value: string | number;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./option").OptionInstance & import("vue").default, {
    isHover: boolean;
    formDisabled: any;
}, {
    select(e: MouseEvent | KeyboardEvent): false;
    mouseEvent(v: boolean): void;
}, {
    tDisabled: boolean;
    hovering: boolean;
    multiLimitDisabled: boolean;
    classes: import("../common").ClassName;
    isCreatedOption: boolean;
    show: boolean;
    labelText: string | number;
    selected: boolean;
}, {
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    label: string;
    value: string | number;
}>>;
export declare const OptionGroup: import("vue/types/vue").ExtendedVue<import("./optionGroup").Select, {
    visible: boolean;
}, {
    childrenChange(): void;
}, {
    classes: import("../common").ClassName;
}, {
    divider: boolean;
    label: string;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("./optionGroup").Select, {
    visible: boolean;
}, {
    childrenChange(): void;
}, {
    classes: import("../common").ClassName;
}, {
    divider: boolean;
    label: string;
}>>;
