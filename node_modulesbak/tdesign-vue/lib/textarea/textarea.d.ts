import Vue from 'vue';
import { TextareaValue } from './type';
import { ClassName } from '../common';
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    formDisabled: any;
    focused: boolean;
    mouseHover: boolean;
    textareaStyle: {};
}, {
    adjustTextareaHeight(): void;
    emitEvent(name: string, value: string | number, context: object): void;
    focus(): void;
    blur(): void;
    handleInput(e: any): void;
    onCompositionend(e: InputEvent): void;
    inputValueChangeHandle(e: InputEvent): void;
    setInputValue(v?: TextareaValue): void;
    emitKeyDown(e: KeyboardEvent): void;
    emitKeyUp(e: KeyboardEvent): void;
    emitKeypress(e: KeyboardEvent): void;
    emitFocus(e: FocusEvent): void;
    emitBlur(e: FocusEvent): void;
}, {
    tDisabled: boolean;
    textareaClasses: ClassName;
    inputAttrs: Record<string, any>;
    characterNumber: number;
}, {
    autofocus: boolean;
    autosize: boolean | {
        minRows?: number;
        maxRows?: number;
    };
    disabled: boolean;
    maxcharacter: number;
    maxlength: number;
    name: string;
    placeholder: any;
    readonly: boolean;
    status: "error" | "success" | "warning";
    tips: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    value: TextareaValue;
    defaultValue: TextareaValue;
    onBlur: (value: TextareaValue, context: {
        e: FocusEvent;
    }) => void;
    onChange: (value: TextareaValue, context?: {
        e?: InputEvent;
    }) => void;
    onFocus: (value: TextareaValue, context: {
        e: FocusEvent;
    }) => void;
    onKeydown: (value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void;
    onKeypress: (value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void;
    onKeyup: (value: TextareaValue, context: {
        e: KeyboardEvent;
    }) => void;
}>;
export default _default;
