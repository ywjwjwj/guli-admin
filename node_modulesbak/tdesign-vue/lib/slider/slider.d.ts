import Vue, { VNode } from 'vue';
import { TNode, ClassName } from '../common';
import { SliderValue } from './type';
export interface MarkItem {
    point: number;
    position: number;
    mark: string | number | TNode<{
        value: number;
    }>;
}
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    firstValue: number;
    secondValue: number;
    prevValue: number;
    dragging: boolean;
    sliderSize: number;
    inputDecimalPlaces: number;
    inputFormat: any;
    inputPlaceholder: string;
    inputTheme: string;
    showSteps: boolean;
    formDisabled: any;
}, {
    init(): void;
    valueChanged(): boolean;
    setValues(value: SliderValue): SliderValue;
    setInputProps(): void;
    setPosition(percent: number): void;
    onSliderClick(event: MouseEvent): void;
    resetSize(): void;
    emitChange(value: SliderValue): void;
    getStopStyle(position: number): {
        top: string;
        left?: undefined;
    } | {
        left: string;
        top?: undefined;
    };
    changeValue(point: number): void;
    renderMask(): VNode;
    renderInputButton(): VNode;
}, {
    tDisabled: boolean;
    containerClass: ClassName;
    sliderClass: ClassName;
    sliderRailClass: ClassName;
    sliderNumberClass: ClassName;
    vertical: boolean;
    rangeDiff: number;
    steps: number[];
    markList: MarkItem[];
    minValue: number;
    maxValue: number;
    barSize: string;
    barStart: string;
    precision: number;
    runwayStyle: object;
    barStyle: object;
}, {
    disabled: boolean;
    inputNumberProps: boolean | import("../input-number/type").TdInputNumberProps;
    label: string | boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    layout: "vertical" | "horizontal";
    marks: number[] | import("./type").SliderMarks;
    max: number;
    min: number;
    range: boolean;
    step: number;
    tooltipProps: import("..").TdTooltipProps;
    value: SliderValue;
    defaultValue: SliderValue;
    onChange: (value: SliderValue) => void;
}>;
export default _default;
