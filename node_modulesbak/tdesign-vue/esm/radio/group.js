/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import isString from 'lodash/isString';
import isNumber from 'lodash/isNumber';
import props from './radio-group-props.js';
import { prefix } from '../config.js';
import _Radio, { radioBtnName } from './radio.js';
import ClASSNAMES, { SIZE_CLASSNAMES } from '../utils/classnames.js';
import { emitEvent } from '../utils/event.js';
import '../_chunks/dep-99305448.js';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../utils/render-tnode.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/isObject';
import './props.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-radio-group");
var _RadioGroup = Vue.extend({
  name: "TRadioGroup",
  props: _objectSpread({}, props),
  components: {
    Radio: _Radio
  },
  provide: function provide() {
    return {
      radioGroup: this
    };
  },
  data: function data() {
    return {
      barStyle: {
        width: "0px",
        left: "0px"
      },
      observer: null
    };
  },
  computed: {
    checkedClassName: function checkedClassName() {
      return ".".concat(radioBtnName, ".").concat(ClASSNAMES.STATUS.checked);
    }
  },
  render: function render(h) {
    var _this = this,
        _ref;

    var $scopedSlots = this.$scopedSlots;
    var children = $scopedSlots["default"] && $scopedSlots["default"](null);

    if (this.options && this.options.length) {
      children = this.options.map(function (option, index) {
        var opt = option;

        if (isNumber(option) || isString(option)) {
          opt = {
            value: option,
            label: option.toString()
          };
        }

        return h(_Radio, {
          "key": "radio-group-options-".concat(opt.value, "-").concat(index),
          "attrs": {
            "name": _this.name,
            "checked": _this.value === opt.value,
            "disabled": "disabled" in opt ? opt.disabled : _this.disabled,
            "value": opt.value
          }
        }, [typeof opt.label === "function" ? opt.label(h) : opt.label]);
      });
    }

    var groupClass = ["".concat(name), SIZE_CLASSNAMES[this.size], (_ref = {}, _defineProperty(_ref, "".concat(name, "__outline"), this.variant === "outline"), _defineProperty(_ref, "".concat(name, "--filled"), this.variant.includes("filled")), _defineProperty(_ref, "".concat(name, "--primary-filled"), this.variant === "primary-filled"), _ref)];

    if (this.variant.includes("filled")) {
      children && children.push(h("div", {
        "style": this.barStyle,
        "class": "".concat(name, "__bg-block")
      }));
    }

    return h("div", {
      "class": groupClass
    }, [children]);
  },
  watch: {
    value: function value() {
      var _this2 = this;

      this.$nextTick(function () {
        return _this2.calcBarStyle();
      });
    }
  },
  created: function created() {
    this.$on("checked-change", this.handleRadioChange);
  },
  mounted: function mounted() {
    this.calcBarStyle();
    var observer = new MutationObserver(this.calcBarStyle);
    observer.observe(this.$el, {
      childList: true,
      attributes: true,
      subtree: true
    });
    this.observer = observer;
  },
  beforeDestroy: function beforeDestroy() {
    this.observer.disconnect();
  },
  methods: {
    handleRadioChange: function handleRadioChange(value, context) {
      emitEvent(this, "change", value, context);
    },
    calcDefaultBarStyle: function calcDefaultBarStyle() {
      var defaultNode = this.$el.cloneNode(true);
      var div = document.createElement("div");
      div.setAttribute("style", "position: absolute; visibility: hidden;");
      div.appendChild(defaultNode);
      document.body.appendChild(div);
      var defaultCheckedRadio = div.querySelector(this.checkedClassName);
      var offsetWidth = defaultCheckedRadio.offsetWidth,
          offsetLeft = defaultCheckedRadio.offsetLeft;
      this.barStyle = {
        width: "".concat(offsetWidth, "px"),
        left: "".concat(offsetLeft, "px")
      };
      document.body.removeChild(div);
    },
    calcBarStyle: function calcBarStyle() {
      if (this.variant === "outline") return;
      var checkedRadio = this.$el.querySelector(this.checkedClassName);
      if (!checkedRadio) return;
      var offsetWidth = checkedRadio.offsetWidth,
          offsetLeft = checkedRadio.offsetLeft;

      if (!offsetWidth) {
        this.calcDefaultBarStyle();
      } else {
        this.barStyle = {
          width: "".concat(offsetWidth, "px"),
          left: "".concat(offsetLeft, "px")
        };
      }
    }
  }
});

export { _RadioGroup as default };
//# sourceMappingURL=group.js.map
