import Vue from 'vue';
import { Styles } from '@src/common';
import Slider from './slider';
import { TdTooltipProps } from '../tooltip/type';
interface SliderInstanceType extends Vue {
    slider: InstanceType<typeof Slider>;
}
declare const _default: import("vue/types/vue").ExtendedVue<SliderInstanceType, {
    visible: boolean;
    hovering: boolean;
    dragging: boolean;
    isClick: boolean;
    clientX: number;
    clientY: number;
    startX: number;
    startY: number;
    currentX: number;
    currentY: number;
    startPos: number;
    newPos: any;
    prevValue: import("./type").SliderValue;
    showTooltip: boolean;
    trigger: string;
    showArrow: boolean;
    overlayStyle: any;
    overlayClassName: any;
    attach: string;
    destroyOnClose: any;
}, {
    setTooltipProps(): void;
    getTooltipProps(): TdTooltipProps;
    handleIE(): void;
    showTooltipComponent(): void;
    hideTooltipComponent(): void;
    handleMouseEnter(): void;
    handleMouseLeave(): void;
    onButtonDown(event: MouseEvent): void;
    onNativeKeyDown(e: KeyboardEvent): void;
    onLeftKeyDown(): void;
    onRightKeyDown(): void;
    onKeyDown(state: string): void;
    onDragStart(event: Event): void;
    onDragging(e: Event): void;
    onDragEnd(): void;
    setPosition(pos: number): void;
    empty(str: any): boolean;
}, {
    placement: string;
    rangeDiff: number;
    formatValue: import("./type").SliderValue;
    disabled: boolean;
    max: number;
    min: number;
    step: number;
    precision: number;
    currentPos: string;
    wrapperStyle: Styles;
}, {
    value: import("./type").SliderValue;
    vertical: boolean;
    popupClass: string;
    tooltipProps: boolean | TdTooltipProps;
}>;
export default _default;
