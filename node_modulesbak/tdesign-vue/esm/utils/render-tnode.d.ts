import Vue from 'vue';
import { ComponentRenderProxy } from '@vue/composition-api';
import { VNode } from 'vue/types/umd';
import { ScopedSlotReturnValue } from 'vue/types/vnode';
export declare type VmType = Vue | ComponentRenderProxy;
export declare const RenderTNodeTemplate: import("vue/types/vue").ExtendedVue<Vue, {}, {}, {}, import("vue/types/options").DefaultProps>;
interface JSXRenderContext {
    defaultNode?: VNode;
    params?: Record<string, any>;
    silent?: boolean;
}
export declare const renderTNodeJSX: (vm: VmType, name: string, options?: ScopedSlotReturnValue | JSXRenderContext) => any;
export declare const renderTNodeJSXDefault: (vm: VmType, name: string, options?: ScopedSlotReturnValue | JSXRenderContext) => any;
export declare const renderContent: (vm: VmType, name1: string, name2: string, options?: VNode | JSXRenderContext) => any;
export {};
