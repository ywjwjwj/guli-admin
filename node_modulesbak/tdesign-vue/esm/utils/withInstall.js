/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import capitalize from 'lodash/capitalize';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function withInstall(comp, dep) {
  var _c$options;

  var c = comp;
  var name = (c === null || c === void 0 ? void 0 : (_c$options = c.options) === null || _c$options === void 0 ? void 0 : _c$options.name) || c.name;

  c.install = function (Vue, config) {
    var defaults = {
      prefix: "t"
    };

    var installConfig = _objectSpread(_objectSpread({}, defaults), config);

    var defaultPrefix = capitalize(defaults.prefix);
    var componentName = name.replace(defaultPrefix, "").replace("-mapprops", "");
    componentName = capitalize(installConfig.prefix) + componentName;
    Vue.component(componentName, comp);

    if (dep && (Vue === null || Vue === void 0 ? void 0 : Vue._installedPlugins.indexOf(dep)) === -1) {
      Vue.use(dep);
    }
  };

  return comp;
}

export { withInstall as default, withInstall };
//# sourceMappingURL=withInstall.js.map
