import { TdTagProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    closable: BooleanConstructor;
    content: {
        type: PropType<string | number | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    default: {
        type: PropType<string | number | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    disabled: BooleanConstructor;
    icon: {
        type: PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
        default: any;
    };
    maxWidth: {
        type: PropType<string | number>;
    };
    shape: {
        type: PropType<"square" | "round" | "mark">;
        default: "square" | "round" | "mark";
        validator(val: TdTagProps['shape']): boolean;
    };
    size: {
        type: PropType<import("../common").SizeEnum>;
        default: import("../common").SizeEnum;
        validator(val: TdTagProps['size']): boolean;
    };
    theme: {
        type: PropType<"default" | "success" | "primary" | "danger" | "warning">;
        default: "default" | "success" | "primary" | "danger" | "warning";
        validator(val: TdTagProps['theme']): boolean;
    };
    variant: {
        type: PropType<"outline" | "dark" | "light" | "light-outline">;
        default: "outline" | "dark" | "light" | "light-outline";
        validator(val: TdTagProps['variant']): boolean;
    };
    onClick: PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onClose: PropType<(context: {
        e: MouseEvent;
    }) => void>;
};
export default _default;
