import Vue from 'vue';
import { PaginationConfig } from '../config-provider/config-receiver';
import { ClassName } from '../common';
import { TdPaginationProps } from './type';
export declare type PageSizeChangeParams = Parameters<TdPaginationProps['onPageSizeChange']>;
export declare type CurrentChangeParams = Parameters<TdPaginationProps['onCurrentChange']>;
export declare type ChangeEventParams = Parameters<TdPaginationProps['onChange']>;
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: PaginationConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & Vue, {
    prevMore: boolean;
    nextMore: boolean;
    jumpIndex: number;
}, {
    toPage(pageIndex: number, isTriggerChange?: boolean): void;
    prevPage(): void;
    nextPage(): void;
    prevMorePage(): void;
    nextMorePage(): void;
    getButtonClass(index: number): ClassName;
    onSelectorChange(e: string): void;
    onJumperChange(val: String): void;
}, {
    paginationClass: ClassName;
    totalClass: ClassName;
    sizerClass: ClassName;
    preBtnClass: ClassName;
    nextBtnClass: ClassName;
    btnWrapClass: ClassName;
    btnMoreClass: ClassName;
    jumperClass: ClassName;
    jumperInputClass: ClassName;
    simpleClass: ClassName;
    isSimple: boolean;
    pageCount: number;
    pageCountOption: {
        label: string;
        value: number;
    }[];
    sizeOptions: {
        label: string;
        value: number;
    }[];
    curPageLeftCount: number;
    curPageRightCount: number;
    isPrevMoreShow: boolean;
    isNextMoreShow: boolean;
    pages: number[];
    isFolded: boolean;
}, {
    current: number;
    pageSize: number;
    defaultCurrent: number;
    disabled: boolean;
    foldedMaxPageBtn: number;
    maxPageBtn: number;
    defaultPageSize: number;
    pageSizeOptions: (number | {
        label: string;
        value: number;
    })[];
    showJumper: boolean;
    size: "small" | "medium";
    theme: "default" | "simple";
    total: number;
    totalContent: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onChange: (pageInfo: import("./type").PageInfo) => void;
    onCurrentChange: (current: number, pageInfo: import("./type").PageInfo) => void;
    onPageSizeChange: (pageSize: number, pageInfo: import("./type").PageInfo) => void;
}>;
export default _default;
