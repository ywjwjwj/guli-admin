import Vue from 'vue';
import { ScopedSlotReturnValue } from 'vue/types/vnode';
import { ANCHOR_CONTAINER } from './utils';
export interface Anchor extends Vue {
    scrollContainer: ANCHOR_CONTAINER;
    handleScrollLock: boolean;
}
declare const _default: import("vue/types/vue").ExtendedVue<Anchor, {
    links: string[];
    active: string;
    activeLineStyle: boolean | {
        top: string;
        height: string;
        opacity: number;
    };
}, {
    getScrollContainer(): void;
    getAnchorTarget(link: string): HTMLElement;
    registerLink(link: string): void;
    unregisterLink(link: string): void;
    setCurrentActiveLink(link: string): Promise<void>;
    updateActiveLine(): void;
    emitChange(currentLink: string, prevLink: string): void;
    handleLinkClick(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }): void;
    handleScrollTo(link: string): Promise<void>;
    handleScroll(): void;
    renderCursor(): string | true | import("vue").VNode | import("vue/types/vnode").ScopedSlotReturnArray;
}, unknown, {
    affixProps: import("../affix").TdAffixProps;
    bounds: number;
    container: import("../common").ScrollContainer;
    cursor: (h: import("vue").CreateElement) => ScopedSlotReturnValue;
    size: "small" | "medium" | "large";
    targetOffset: number;
    onChange: (currentLink: string, prevLink: string) => void;
    onClick: (link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void;
}>;
export default _default;
