{"version":3,"file":"xhr.js","sources":["../../../../src/_common/js/upload/xhr.ts"],"sourcesContent":["import { XhrOptions } from './types';\n\nexport default function xhr({\n  method = 'POST',\n  action,\n  withCredentials = false,\n  headers = {},\n  data = {},\n  file,\n  files,\n  name = 'file',\n  onError,\n  onProgress,\n  onSuccess,\n}: XhrOptions) {\n  // support files\n  const innerFiles = Array.isArray(files) ? files : [file];\n\n  // eslint-disable-next-line no-shadow\n  const xhr = new XMLHttpRequest();\n  if (withCredentials) {\n    xhr.withCredentials = true;\n  }\n\n  // set send data\n  const formData = new FormData();\n  const sendData = typeof data === 'function' ? data(file) : data;\n  Object.keys(sendData).forEach((key) => {\n    formData.append(key, data[key]);\n  });\n\n  // support one request upload multiple files\n  innerFiles.forEach((f) => {\n    formData.append(name, f.raw);\n  });\n\n  xhr.open(method, action, true);\n\n  // custom request headers\n  Object.keys(headers).forEach((key) => {\n    xhr.setRequestHeader(key, headers[key]);\n  });\n\n  xhr.onerror = (event: ProgressEvent) => onError({ event, file, files: innerFiles });\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = (event: ProgressEvent) => {\n      let percent = 0;\n      if (event.total > 0) {\n        percent = Math.round((event.loaded / event.total) * 100);\n      }\n\n      onProgress({\n        event, percent, file, files: innerFiles\n      });\n    };\n  }\n\n  // eslint-disable-next-line consistent-return\n  xhr.onload = (event: ProgressEvent) => {\n    let response;\n    const isFail = xhr.status < 200 || xhr.status >= 300;\n    if (isFail) {\n      return onError({\n        event, file, files: innerFiles, response\n      });\n    }\n    const text = xhr.responseText || xhr.response;\n    try {\n      response = JSON.parse(text);\n    } catch (e) {\n      response = text;\n    }\n    onSuccess({\n      event, file, files: innerFiles, response\n    });\n  };\n\n  xhr.send(formData);\n\n  return xhr;\n}\n"],"names":["xhr","method","action","withCredentials","headers","data","file","files","name","onError","onProgress","onSuccess","innerFiles","Array","isArray","xhr2","XMLHttpRequest","formData","FormData","sendData","Object","keys","forEach","key","append","f","raw","open","setRequestHeader","onerror","event","upload","onprogress","percent","total","Math","round","loaded","onload","response","isFail","status","text","responseText","JSON","parse","e","send"],"mappings":"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"}