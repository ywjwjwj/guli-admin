import { EmptyType, SearchOption, TransferValue, TransferListType, TransferItemOption } from '../interface';
import { PageInfo, TdPaginationProps } from '../../pagination';
declare const _default: import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../../config-provider/config-receiver").ConfigComponent & import("vue").default, {
    filterValue: string;
    defaultCurrent: number;
    defaultPageSize: number;
}, {
    handlePaginationChange(pageInfo: PageInfo): void;
    handleCheckedChange(val: Array<TransferValue>): void;
    handleCheckedAllChange(checked: boolean): void;
    scroll(e: Event): void;
    handleSearch(e: any): void;
    renderTitle(): JSX.Element;
    renderContent(): JSX.Element;
    renderEmpty(): JSX.Element;
    renderFooter(): any;
}, {
    currentPage: number;
    pageSize: number;
    pageTotal: number;
    filteredData: TransferItemOption[];
    curPageData: TransferItemOption[];
    paginationProps: TdPaginationProps;
    hasFooter: boolean;
    indeterminate: boolean;
    isAllChecked: boolean;
    totalCount: number;
}, {
    checkboxProps: {};
    dataSource: TransferItemOption[];
    listType: TransferListType;
    title: string | Function;
    checkedValue: TransferValue[];
    disabled: boolean;
    search: SearchOption;
    transferItem: (h: import("vue").CreateElement, props: import("../type").TransferItem<import("../type").DataOption>) => import("vue/types/vnode").ScopedSlotReturnValue;
    empty: EmptyType;
    pagination: any;
    footer: string | Function;
    checkAll: boolean;
    t: Function;
    global: any;
    isTreeMode: boolean;
}>;
export default _default;
