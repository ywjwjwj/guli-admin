import Vue from 'vue';
import { PopupVisibleChangeContext } from './type';
import { Styles, ClassName } from '../common';
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    name: string;
    popper: import("@popperjs/core").Instance;
    timeout: any;
    hasDocumentEvent: boolean;
    visibleState: number;
    mouseInRange: boolean;
    contentClicked: boolean;
    refClicked: boolean;
}, {
    createPopper(): void;
    updatePopper(): void;
    updateOverlayStyle(): void;
    setOverlayStyle(styles: Styles): void;
    destroyPopper(): void;
    handleToggle(context: PopupVisibleChangeContext): void;
    handleOpen(context: Pick<PopupVisibleChangeContext, 'trigger'>): void;
    handleClose(context: Pick<PopupVisibleChangeContext, 'trigger'>): void;
    handleDocumentClick(): void;
    emitPopVisible(val: boolean, context: PopupVisibleChangeContext): void;
    onMouseEnter(): void;
    onMouseLeave(ev: MouseEvent): void;
    onBeforeEnter(): void;
    onAfterEnter(): void;
    preventClosing(preventing: boolean): void;
}, {
    overlayClasses: ClassName;
    hasTrigger: Record<"click" | "focus" | "hover" | "context-menu", boolean>;
}, {
    expandAnimation: boolean;
    attach: import("../common").AttachNode;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    destroyOnClose: boolean;
    disabled: boolean;
    hideEmptyPopup: boolean;
    overlayClassName: ClassName;
    overlayStyle: Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => Styles);
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    showArrow: boolean;
    trigger: "click" | "focus" | "hover" | "context-menu";
    triggerElement: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    visible: boolean;
    defaultVisible: any;
    zIndex: number;
    onScroll: (context: {
        e: WheelEvent;
    }) => void;
    onVisibleChange: (visible: boolean, context: PopupVisibleChangeContext) => void;
}>;
export default _default;
