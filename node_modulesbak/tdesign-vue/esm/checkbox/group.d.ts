import Vue, { VNode } from 'vue';
import { CheckboxOptionObj, TdCheckboxProps, CheckboxGroupValue, TdCheckboxGroupProps } from './type';
declare type CheckedChangeType = Parameters<TdCheckboxGroupProps['onChange']>;
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    checkedMap: {};
    optionList: CheckboxOptionObj[];
}, {
    onCheckedChange(p: {
        checked: boolean;
        checkAll: boolean;
        e: Event;
        option: TdCheckboxProps;
    }): void;
    getOptionListBySlots(nodes: VNode[]): CheckboxOptionObj[];
    renderLabel(option: CheckboxOptionObj): import("vue/types/vnode").ScopedSlotReturnValue;
    emitChange(val: CheckboxGroupValue, context: CheckedChangeType[1]): void;
    handleCheckboxChange(data: {
        checked: boolean;
        e: Event;
        option: TdCheckboxProps;
    }): void;
    getAllCheckboxValue(): CheckboxGroupValue;
    onCheckAllChange(checked: boolean, context: {
        e: Event;
        source?: 't-checkbox';
    }): void;
}, {
    values: string;
    intersectionLen: number;
    isCheckAll: boolean;
    indeterminate: boolean;
    maxExceeded: boolean;
}, {
    disabled: boolean;
    max: any;
    name: string;
    options: import("./type").CheckboxOption[];
    value: CheckboxGroupValue;
    defaultValue: CheckboxGroupValue;
    onChange: (value: CheckboxGroupValue, context: import("./type").CheckboxGroupChangeContext) => void;
}>;
export default _default;
