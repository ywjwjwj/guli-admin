/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { computed, inject } from '@vue/composition-api';
import cloneDeep from 'lodash/cloneDeep';
import mergeWith from 'lodash/mergeWith';
import { defaultGlobalConfig } from './context.js';
import './type.js';
import '@babel/runtime/helpers/defineProperty';
import './zh_CN_config.js';

var merge = function merge(defaultGlobalConfig2, injectConfig) {
  return mergeWith(defaultGlobalConfig2, injectConfig, function (objValue, srcValue) {
    if (Array.isArray(objValue)) {
      return srcValue;
    }
  });
};
function useConfig(componentName) {
  var mergedGlobalConfig = computed(function () {
    var globalConfig = inject("globalConfig", /* @__PURE__ */Object.create(null));
    var mergedGlobalConfig2 = merge(cloneDeep(defaultGlobalConfig), globalConfig);
    return mergedGlobalConfig2;
  });
  var global = computed(function () {
    return mergedGlobalConfig.value[componentName];
  });
  var classPrefix = computed(function () {
    return mergedGlobalConfig.value.classPrefix;
  });

  var t = function t(pattern, data) {
    if (typeof pattern === "string") {
      if (!data) return pattern;
      var regular = /\{\s*([\w-]+)\s*\}/g;
      var translated = pattern.replace(regular, function (match, key) {
        if (data) {
          return String(data[key]);
        }

        return "";
      });
      return translated;
    }

    if (typeof pattern === "function") {
      return pattern(data);
    }

    return "";
  };

  return {
    t: t,
    global: global,
    classPrefix: classPrefix
  };
}
function usePrefixClass(componentName) {
  var _useConfig = useConfig("classPrefix"),
      classPrefix = _useConfig.classPrefix;

  return computed(function () {
    return componentName ? "".concat(classPrefix.value, "-").concat(componentName) : classPrefix.value;
  });
}

export { merge, useConfig, usePrefixClass };
//# sourceMappingURL=useConfig.js.map
