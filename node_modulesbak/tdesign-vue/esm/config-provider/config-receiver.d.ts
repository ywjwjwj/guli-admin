import Vue from 'vue';
import { GlobalConfigProvider } from './type';
export declare type ValueOf<T> = T[keyof T];
export declare type ComponentConfigType = ValueOf<GlobalConfigProvider>;
export * from './type';
export declare type ConfigRule<T = any> = string | ((args: T) => string);
export interface Placement {
    [propName: string]: string | number;
}
export interface ConfigComponent extends Vue {
    globalConfig: GlobalConfigProvider;
}
export default function getConfigReceiverMixins<BasicComponent extends Vue, C extends ComponentConfigType>(componentName: string): import("vue/types/vue").ExtendedVue<ConfigComponent & BasicComponent, unknown, {
    t<T>(pattern: T, placement?: Placement): string;
}, {
    global: C;
}, Record<never, any>>;
export declare function getKeepAnimationMixins<BasicComponent extends Vue>(): import("vue/types/vue").ExtendedVue<ConfigComponent & BasicComponent, unknown, unknown, {
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
}, Record<never, any>>;
