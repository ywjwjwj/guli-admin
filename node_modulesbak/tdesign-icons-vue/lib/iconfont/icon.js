'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var iconfont_props_props = require('./props/props.js');
var utils_useSizeProps = require('../utils/use-size-props.js');
var utils_configContext = require('../utils/config-context.js');
var utils_checkUrlAndLoad = require('../utils/check-url-and-load.js');
require('../utils/use-common-classname.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);

var classPrefix = utils_configContext["default"].classPrefix;
var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.0.3/fonts/index.css";
var IconFont = Vue__default["default"].extend({
  name: "IconFont",
  props: iconfont_props_props["default"],
  computed: {
    classes: function classes() {
      var tName = "".concat(classPrefix, "-icon");

      var _useSizeProps = utils_useSizeProps["default"](this.size),
          sizeClassName = _useSizeProps.className;

      var iconName = this.url ? this.name : "".concat(tName, "-").concat(this.name);
      var arr = [tName, iconName, sizeClassName];
      return arr;
    },
    iconStyle: function iconStyle() {
      if (["small", "medium", "large"].includes(this.size)) return {};
      return {
        "font-size": this.size
      };
    }
  },
  mounted: function mounted() {
    var finalUrl = [];

    if (this.url) {
      finalUrl = this.url instanceof Array ? this.url.concat() : [this.url];
    }

    if (this.loadDefaultIcons) {
      finalUrl.push(CDN_ICONFONT_URL);
    }

    Array.from(new Set(finalUrl)).forEach(function (url) {
      utils_checkUrlAndLoad.checkLinkAndLoad(url, "".concat(classPrefix, "-iconfont-stylesheet--unique-class"));
    });
  },
  methods: {
    handleClick: function handleClick(e) {
      var _this$onClick;

      this.$emit("click", {
        e: e
      });
      (_this$onClick = this.onClick) === null || _this$onClick === void 0 ? void 0 : _this$onClick.call(this, {
        e: e
      });
    }
  },
  render: function render() {
    var h = arguments[0];
    var Component = this.tag;
    return h(Component, {
      "class": this.classes,
      "style": this.iconStyle,
      "on": {
        "click": this.handleClick
      }
    });
  }
});

exports.IconFont = IconFont;
exports["default"] = IconFont;
//# sourceMappingURL=icon.js.map
