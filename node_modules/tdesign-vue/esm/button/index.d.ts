import { TdButtonProps } from './type';
import './style';
export * from './type';
export declare type ButtonProps = TdButtonProps;
export declare const Button: import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, unknown, unknown, unknown, {
    block: boolean;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    ghost: boolean;
    icon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    loading: boolean;
    shape: "square" | "round" | "circle" | "rectangle";
    size: import("../common").SizeEnum;
    theme: "default" | "success" | "primary" | "danger" | "warning";
    type: "button" | "reset" | "submit";
    variant: "outline" | "base" | "text" | "dashed";
    onClick: (e: MouseEvent) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, unknown, unknown, unknown, {
    block: boolean;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    ghost: boolean;
    icon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    loading: boolean;
    shape: "square" | "round" | "circle" | "rectangle";
    size: import("../common").SizeEnum;
    theme: "default" | "success" | "primary" | "danger" | "warning";
    type: "button" | "reset" | "submit";
    variant: "outline" | "base" | "text" | "dashed";
    onClick: (e: MouseEvent) => void;
}>>;
export default Button;
