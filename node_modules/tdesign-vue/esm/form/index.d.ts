import { TdFormProps, TdFormItemProps } from './type';
import './style';
export * from './type';
export declare type FormProps = TdFormProps;
export declare type FormItemProps = TdFormItemProps;
export declare const Form: import("vue/types/vue").ExtendedVue<import("vue").default, {
    children: import("vue/types/vue").CombinedVueInstance<{
        errorList: any[];
        successList: any[];
        verifyStatus: import("./form-item").VALIDATE_STATUS;
        resetValidating: boolean;
        needResetField: boolean;
        initialValue: any;
    } & {
        addWatch(): void;
        setChildrenDisabled(disabled: boolean, children: import("vue").default[]): void;
        setValidateMessage(validateMessage: import("./type").FormItemValidateMessage[]): void;
        validate<T>(trigger: import("./type").ValidateTriggerType): Promise<import("./form-item").FormItemValidateResult<T>>;
        getLabelContent(): import("vue/types/vnode").ScopedSlotReturnValue;
        getLabel(): import("vue/types/vnode").ScopedSlotReturnValue;
        renderTipsInfo(): import("vue").VNode;
        getDefaultIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
        getIcon(statusIcon: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | ((h: import("vue").CreateElement, props: TdFormItemProps) => import("vue/types/vnode").ScopedSlotReturnValue), slotStatusIcon: import("vue/types/vnode").NormalizedScopedSlot, props?: TdFormItemProps): import("vue/types/vnode").ScopedSlotReturnValue;
        getSuffixIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
        getEmptyValue(): any;
        resetField(): void;
        resetHandler(): void;
    } & {
        needErrorMessage: Boolean;
        classes: import("../common").ClassName;
        labelClasses: import("../common").ClassName;
        errorClasses: string;
        disabled: boolean;
        contentClasses: import("../common").ClassName;
        contentStyle: import("../common").Styles;
        value: any;
        hasColon: boolean;
        needRequiredMark: boolean;
        innerRules: import("./type").FormRule[];
        errorMessages: import("./type").FormErrorMessage;
    } & {
        for: string;
        help: string;
        label: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
        labelAlign: "left" | "top" | "right";
        labelWidth: string | number;
        name: string;
        requiredMark: any;
        rules: import("./type").FormRule[];
        showErrorMessage: any;
        statusIcon: any;
        successBorder: boolean;
    } & {
        t<T_1>(pattern: T_1, placement?: import("../config-provider/config-receiver").Placement): string;
    } & {
        global: import("..").FormConfig;
    } & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./form-item").FormItemContructor & import("vue").default, object, object, object, Record<never, any>>[];
}, {
    getFirstError<T_2>(r: boolean | import("./form-item").FormItemValidateResult<T_2>): any;
    scrollTo(selector: string): void;
    isFunction(val: unknown): boolean;
    needValidate(name: string, fields: string[]): boolean;
    validate<T_3 = Record<string, any>>(param?: import("./type").FormValidateParams): Promise<import("./type").FormValidateResult<T_3>>;
    setValidateMessage(validateMessage: import("./type").FormValidateMessage<FormData>): void;
    submitHandler<T_4>(e?: Event): void;
    resetHandler(e?: Event): void;
    clearValidate(fields?: string[]): void;
    reset(): void;
    submit<T_5 extends import("./type").Data = import("./type").Data>(): void;
}, {
    formClass: import("../common").ClassName;
    controlledComponents: string[];
}, {
    colon: boolean;
    data: import("./type").Data;
    disabled: any;
    errorMessage: import("./type").FormErrorMessage;
    formControlledComponents: string[];
    labelAlign: "left" | "top" | "right";
    labelWidth: string | number;
    layout: "inline" | "vertical";
    preventSubmitDefault: boolean;
    requiredMark: any;
    resetType: "empty" | "initial";
    rules: {
        [x: string]: import("./type").FormRule[];
    };
    scrollToFirstError: "auto" | "smooth";
    showErrorMessage: boolean;
    size: "medium" | "large";
    statusIcon: any;
    submitWithWarningMessage: boolean;
    onReset: (context: {
        e?: Event;
    }) => void;
    onSubmit: (context: import("./type").SubmitContext<import("./type").Data>) => void;
    onValidate: (result: import("./type").ValidateResultContext<import("./type").Data>) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("vue").default, {
    children: import("vue/types/vue").CombinedVueInstance<{
        errorList: any[];
        successList: any[];
        verifyStatus: import("./form-item").VALIDATE_STATUS;
        resetValidating: boolean;
        needResetField: boolean;
        initialValue: any;
    } & {
        addWatch(): void;
        setChildrenDisabled(disabled: boolean, children: import("vue").default[]): void;
        setValidateMessage(validateMessage: import("./type").FormItemValidateMessage[]): void;
        validate<T>(trigger: import("./type").ValidateTriggerType): Promise<import("./form-item").FormItemValidateResult<T>>;
        getLabelContent(): import("vue/types/vnode").ScopedSlotReturnValue;
        getLabel(): import("vue/types/vnode").ScopedSlotReturnValue;
        renderTipsInfo(): import("vue").VNode;
        getDefaultIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
        getIcon(statusIcon: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | ((h: import("vue").CreateElement, props: TdFormItemProps) => import("vue/types/vnode").ScopedSlotReturnValue), slotStatusIcon: import("vue/types/vnode").NormalizedScopedSlot, props?: TdFormItemProps): import("vue/types/vnode").ScopedSlotReturnValue;
        getSuffixIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
        getEmptyValue(): any;
        resetField(): void;
        resetHandler(): void;
    } & {
        needErrorMessage: Boolean;
        classes: import("../common").ClassName;
        labelClasses: import("../common").ClassName;
        errorClasses: string;
        disabled: boolean;
        contentClasses: import("../common").ClassName;
        contentStyle: import("../common").Styles;
        value: any;
        hasColon: boolean;
        needRequiredMark: boolean;
        innerRules: import("./type").FormRule[];
        errorMessages: import("./type").FormErrorMessage;
    } & {
        for: string;
        help: string;
        label: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
        labelAlign: "left" | "top" | "right";
        labelWidth: string | number;
        name: string;
        requiredMark: any;
        rules: import("./type").FormRule[];
        showErrorMessage: any;
        statusIcon: any;
        successBorder: boolean;
    } & {
        t<T_1>(pattern: T_1, placement?: import("../config-provider/config-receiver").Placement): string;
    } & {
        global: import("..").FormConfig;
    } & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./form-item").FormItemContructor & import("vue").default, object, object, object, Record<never, any>>[];
}, {
    getFirstError<T_2>(r: boolean | import("./form-item").FormItemValidateResult<T_2>): any;
    scrollTo(selector: string): void;
    isFunction(val: unknown): boolean;
    needValidate(name: string, fields: string[]): boolean;
    validate<T_3 = Record<string, any>>(param?: import("./type").FormValidateParams): Promise<import("./type").FormValidateResult<T_3>>;
    setValidateMessage(validateMessage: import("./type").FormValidateMessage<FormData>): void;
    submitHandler<T_4>(e?: Event): void;
    resetHandler(e?: Event): void;
    clearValidate(fields?: string[]): void;
    reset(): void;
    submit<T_5 extends import("./type").Data = import("./type").Data>(): void;
}, {
    formClass: import("../common").ClassName;
    controlledComponents: string[];
}, {
    colon: boolean;
    data: import("./type").Data;
    disabled: any;
    errorMessage: import("./type").FormErrorMessage;
    formControlledComponents: string[];
    labelAlign: "left" | "top" | "right";
    labelWidth: string | number;
    layout: "inline" | "vertical";
    preventSubmitDefault: boolean;
    requiredMark: any;
    resetType: "empty" | "initial";
    rules: {
        [x: string]: import("./type").FormRule[];
    };
    scrollToFirstError: "auto" | "smooth";
    showErrorMessage: boolean;
    size: "medium" | "large";
    statusIcon: any;
    submitWithWarningMessage: boolean;
    onReset: (context: {
        e?: Event;
    }) => void;
    onSubmit: (context: import("./type").SubmitContext<import("./type").Data>) => void;
    onValidate: (result: import("./type").ValidateResultContext<import("./type").Data>) => void;
}>>;
export declare const FormItem: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").FormConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./form-item").FormItemContructor & import("vue").default, {
    errorList: any[];
    successList: any[];
    verifyStatus: import("./form-item").VALIDATE_STATUS;
    resetValidating: boolean;
    needResetField: boolean;
    initialValue: any;
}, {
    addWatch(): void;
    setChildrenDisabled(disabled: boolean, children: import("vue").default[]): void;
    setValidateMessage(validateMessage: import("./type").FormItemValidateMessage[]): void;
    validate<T_1>(trigger: import("./type").ValidateTriggerType): Promise<import("./form-item").FormItemValidateResult<T_1>>;
    getLabelContent(): import("vue/types/vnode").ScopedSlotReturnValue;
    getLabel(): import("vue/types/vnode").ScopedSlotReturnValue;
    renderTipsInfo(): import("vue").VNode;
    getDefaultIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
    getIcon(statusIcon: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | ((h: import("vue").CreateElement, props: TdFormItemProps) => import("vue/types/vnode").ScopedSlotReturnValue), slotStatusIcon: import("vue/types/vnode").NormalizedScopedSlot, props?: TdFormItemProps): import("vue/types/vnode").ScopedSlotReturnValue;
    getSuffixIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
    getEmptyValue(): any;
    resetField(): void;
    resetHandler(): void;
}, {
    needErrorMessage: Boolean;
    classes: import("../common").ClassName;
    labelClasses: import("../common").ClassName;
    errorClasses: string;
    disabled: boolean;
    contentClasses: import("../common").ClassName;
    contentStyle: import("../common").Styles;
    value: any;
    hasColon: boolean;
    needRequiredMark: boolean;
    innerRules: import("./type").FormRule[];
    errorMessages: import("./type").FormErrorMessage;
}, {
    for: string;
    help: string;
    label: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    labelAlign: "left" | "top" | "right";
    labelWidth: string | number;
    name: string;
    requiredMark: any;
    rules: import("./type").FormRule[];
    showErrorMessage: any;
    statusIcon: any;
    successBorder: boolean;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").FormConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./form-item").FormItemContructor & import("vue").default, {
    errorList: any[];
    successList: any[];
    verifyStatus: import("./form-item").VALIDATE_STATUS;
    resetValidating: boolean;
    needResetField: boolean;
    initialValue: any;
}, {
    addWatch(): void;
    setChildrenDisabled(disabled: boolean, children: import("vue").default[]): void;
    setValidateMessage(validateMessage: import("./type").FormItemValidateMessage[]): void;
    validate<T_1>(trigger: import("./type").ValidateTriggerType): Promise<import("./form-item").FormItemValidateResult<T_1>>;
    getLabelContent(): import("vue/types/vnode").ScopedSlotReturnValue;
    getLabel(): import("vue/types/vnode").ScopedSlotReturnValue;
    renderTipsInfo(): import("vue").VNode;
    getDefaultIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
    getIcon(statusIcon: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | ((h: import("vue").CreateElement, props: TdFormItemProps) => import("vue/types/vnode").ScopedSlotReturnValue), slotStatusIcon: import("vue/types/vnode").NormalizedScopedSlot, props?: TdFormItemProps): import("vue/types/vnode").ScopedSlotReturnValue;
    getSuffixIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
    getEmptyValue(): any;
    resetField(): void;
    resetHandler(): void;
}, {
    needErrorMessage: Boolean;
    classes: import("../common").ClassName;
    labelClasses: import("../common").ClassName;
    errorClasses: string;
    disabled: boolean;
    contentClasses: import("../common").ClassName;
    contentStyle: import("../common").Styles;
    value: any;
    hasColon: boolean;
    needRequiredMark: boolean;
    innerRules: import("./type").FormRule[];
    errorMessages: import("./type").FormErrorMessage;
}, {
    for: string;
    help: string;
    label: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    labelAlign: "left" | "top" | "right";
    labelWidth: string | number;
    name: string;
    requiredMark: any;
    rules: import("./type").FormRule[];
    showErrorMessage: any;
    statusIcon: any;
    successBorder: boolean;
}>>;
export default Form;
