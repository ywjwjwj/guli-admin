{"version":3,"file":"avatar.js","sources":["../../src/avatar/avatar.tsx"],"sourcesContent":["import Vue, { VueConstructor } from 'vue';\nimport { prefix } from '../config';\nimport CLASSNAMES from '../utils/classnames';\nimport props from './props';\nimport { renderContent, renderTNodeJSX } from '../utils/render-tnode';\nimport { AvatarGroupInstance } from './instance';\nimport { Styles } from '../common';\n\nconst name = `${prefix}-avatar`;\n\nexport interface AvatarInstance extends Vue {\n  avatarGroup: AvatarGroupInstance;\n}\n\nexport default (Vue as VueConstructor<AvatarInstance>).extend({\n  name: 'TAvatar',\n\n  props: {\n    ...props,\n  },\n\n  data() {\n    return {\n      isImgExist: true,\n      gap: 4,\n      sizeValue: '',\n      scale: '',\n    };\n  },\n  inject: {\n    avatarGroup: {\n      default: undefined,\n    },\n  },\n  computed: {\n    customAvatarSize(): Styles {\n      return this.isCustomSize() ? {\n        width: this.sizeValue,\n        height: this.sizeValue,\n        'font-size': `${Number.parseInt(this.sizeValue, 10) / 2}px`,\n      } : {};\n    },\n    customImageSize(): Styles {\n      return this.isCustomSize() ? {\n        height: this.sizeValue,\n        width: this.sizeValue,\n      } : {};\n    },\n    customCharaSize(): Styles {\n      return {\n        transform: this.scale,\n      };\n    },\n  },\n\n  mounted() {\n    const { avatarGroup } = this;\n    this.sizeValue = this.size || avatarGroup?.size;\n    this.$nextTick(() => {\n      this.setScaleParams();\n    });\n  },\n\n  methods: {\n    handleImgLoadError() {\n      const { onError, hideOnLoadFailed } = this.$props;\n      this.isImgExist = !hideOnLoadFailed;\n      onError && onError();\n      this.$emit('error');\n    },\n    setScaleParams() {\n      const avater = this.$refs.avatar as HTMLElement;\n      const avaterChild = this.$refs.avatarChild as HTMLElement;\n      const avaterWidth = avater?.offsetWidth;\n      const avaterChildWidth = avaterChild?.offsetWidth;\n      if (this.gap * 2 < avaterWidth) {\n        this.scale = avaterChildWidth > avaterWidth - this.gap * 2 ? `scale(${(avaterWidth - this.gap * 2) / avaterChildWidth})` : 'scale(1)';\n      }\n    },\n    isCustomSize() {\n      return this.sizeValue && !CLASSNAMES.SIZE[this.sizeValue];\n    },\n  },\n  updated() {\n    this.$nextTick(() => {\n      this.setScaleParams();\n    });\n  },\n  render() {\n    let content = renderContent(this, 'default', 'content');\n    const icon = renderTNodeJSX(this, 'icon');\n    const isIconOnly = icon && !content;\n    const { shape, image, alt } = this.$props;\n    const avatarClass = [\n      `${name}`,\n      CLASSNAMES.SIZE[this.sizeValue],\n      {\n        [`${name}--circle`]: shape === 'circle',\n        [`${name}--round`]: shape === 'round',\n        [`${name}__icon`]: !!isIconOnly,\n      },\n    ];\n    content = <span ref='avatarChild' style={{ ...this.customCharaSize }}>{ content }</span>;\n    if (icon) {\n      content = [\n        icon,\n        !isIconOnly ? content : '',\n      ];\n    }\n\n    if (image && this.isImgExist) {\n      content = <img style={{ ...this.customImageSize }} src={image} alt={alt} onError={this.handleImgLoadError}></img>;\n    }\n    return (<div ref='avatar' class={avatarClass} style={{ ...this.customAvatarSize }}>\n      {content}\n    </div>);\n  },\n\n});\n"],"names":["name","prefix","Vue","extend","props","data","isImgExist","gap","sizeValue","scale","inject","avatarGroup","computed","customAvatarSize","isCustomSize","width","height","Number","parseInt","customImageSize","customCharaSize","transform","mounted","size","$nextTick","setScaleParams","methods","handleImgLoadError","$props","onError","hideOnLoadFailed","$emit","avater","$refs","avatar","avaterChild","avatarChild","avaterWidth","offsetWidth","avaterChildWidth","CLASSNAMES","SIZE","updated","render","content","renderContent","icon","renderTNodeJSX","isIconOnly","shape","image","alt","avatarClass"],"mappings":"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"}