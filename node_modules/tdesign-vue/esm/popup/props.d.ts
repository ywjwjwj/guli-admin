import { TdPopupProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    attach: {
        type: PropType<import("../common").AttachNode>;
        default: string;
    };
    content: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    default: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    destroyOnClose: BooleanConstructor;
    disabled: BooleanConstructor;
    hideEmptyPopup: BooleanConstructor;
    overlayClassName: {
        type: PropType<import("../common").ClassName>;
    };
    overlayStyle: {
        type: PropType<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    };
    placement: {
        type: PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: TdPopupProps['placement']): boolean;
    };
    showArrow: BooleanConstructor;
    trigger: {
        type: PropType<"click" | "focus" | "hover" | "context-menu">;
        default: "click" | "focus" | "hover" | "context-menu";
        validator(val: TdPopupProps['trigger']): boolean;
    };
    triggerElement: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    visible: BooleanConstructor;
    defaultVisible: {
        type: BooleanConstructor;
        default: any;
    };
    zIndex: {
        type: NumberConstructor;
    };
    onScroll: PropType<(context: {
        e: WheelEvent;
    }) => void>;
    onVisibleChange: PropType<(visible: boolean, context: import("./type").PopupVisibleChangeContext) => void>;
};
export default _default;
