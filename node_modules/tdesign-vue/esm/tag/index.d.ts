import { TdTagProps } from './type';
import './style';
export * from './type';
export declare type TagProps = TdTagProps;
export declare const Tag: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").TagConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, unknown, {
    handleClose(e: MouseEvent): void;
    handleClick(e: MouseEvent): void;
    getCloseIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
}, {
    tagClass: import("../common").ClassName;
    tagStyle: import("../common").Styles;
}, {
    closable: boolean;
    content: string | number | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | number | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    icon: any;
    maxWidth: string | number;
    shape: "square" | "round" | "mark";
    size: import("../common").SizeEnum;
    theme: "default" | "success" | "primary" | "danger" | "warning";
    variant: "outline" | "dark" | "light" | "light-outline";
    onClick: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (context: {
        e: MouseEvent;
    }) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").TagConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, unknown, {
    handleClose(e: MouseEvent): void;
    handleClick(e: MouseEvent): void;
    getCloseIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
}, {
    tagClass: import("../common").ClassName;
    tagStyle: import("../common").Styles;
}, {
    closable: boolean;
    content: string | number | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | number | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    icon: any;
    maxWidth: string | number;
    shape: "square" | "round" | "mark";
    size: import("../common").SizeEnum;
    theme: "default" | "success" | "primary" | "danger" | "warning";
    variant: "outline" | "dark" | "light" | "light-outline";
    onClick: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (context: {
        e: MouseEvent;
    }) => void;
}>>;
export declare const CheckTag: import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    updateData(this: any, propName: string, v: any, ...args: any[]): any;
}, unknown, {
    [x: string]: any;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    updateData(this: any, propName: string, v: any, ...args: any[]): any;
}, unknown, {
    [x: string]: any;
}>>;
export default Tag;
