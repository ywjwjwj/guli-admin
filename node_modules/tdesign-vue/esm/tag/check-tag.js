/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import { prefix } from '../config.js';
import props from './check-tag-props.js';
import { renderContent } from '../utils/render-tnode.js';
import ClASSNAMES from '../utils/classnames.js';
import { emitEvent } from '../utils/event.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/isObject';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-tag");
var _CheckTag = Vue.extend({
  name: "TCheckTag",
  props: _objectSpread({}, props),
  computed: {
    tagClass: function tagClass() {
      var _ref;

      return ["".concat(name), "".concat(name, "--check"), "".concat(name, "--default"), ClASSNAMES.SIZE[this.size], (_ref = {}, _defineProperty(_ref, "".concat(name, "--checked"), !this.disabled && this.checked), _defineProperty(_ref, "".concat(prefix, "-is-disabled"), this.disabled), _defineProperty(_ref, "".concat(name, "--disabled"), this.disabled), _ref)];
    }
  },
  methods: {
    handleClick: function handleClick(e) {
      if (!this.disabled) {
        emitEvent(this, "click", {
          e: e
        });
        emitEvent(this, "change", !this.checked);
      }
    }
  },
  render: function render() {
    var h = arguments[0];
    var tagContent = renderContent(this, "default", "content");
    return h("span", {
      "class": this.tagClass,
      "on": {
        "click": this.handleClick
      }
    }, [tagContent]);
  }
});

export { _CheckTag as default };
//# sourceMappingURL=check-tag.js.map
