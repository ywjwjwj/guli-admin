import './style';
export declare const Dropdown: import("vue/types/vue").ExtendedVue<import("vue").default, unknown, unknown, unknown, {
    direction: "left" | "right";
    disabled: boolean;
    hideAfterItemClick: boolean;
    maxColumnWidth: string | number;
    maxHeight: number;
    minColumnWidth: string | number;
    options: import("./type").DropdownOption[];
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    popupProps: import("..").TdPopupProps;
    trigger: "click" | "focus" | "hover" | "context-menu";
    onClick: (dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("vue").default, unknown, unknown, unknown, {
    direction: "left" | "right";
    disabled: boolean;
    hideAfterItemClick: boolean;
    maxColumnWidth: string | number;
    maxHeight: number;
    minColumnWidth: string | number;
    options: import("./type").DropdownOption[];
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    popupProps: import("..").TdPopupProps;
    trigger: "click" | "focus" | "hover" | "context-menu";
    onClick: (dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void;
}>>;
export declare const DropdownItem: import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./dropdown-item").DropdownItemInstance & import("vue").default, {
    focused: boolean;
}, {
    renderSuffix(): import("vue/types/vnode").ScopedSlotReturnValue;
    handleItemClick(e: MouseEvent): void;
    handleMouseover(): void;
}, unknown, {
    path: string;
    hasChildren: boolean;
    active: boolean;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    divider: boolean;
    value: string | number | {
        [key: string]: any;
    };
    onClick: (dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("./dropdown-item").DropdownItemInstance & import("vue").default, {
    focused: boolean;
}, {
    renderSuffix(): import("vue/types/vnode").ScopedSlotReturnValue;
    handleItemClick(e: MouseEvent): void;
    handleMouseover(): void;
}, unknown, {
    path: string;
    hasChildren: boolean;
    active: boolean;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    divider: boolean;
    value: string | number | {
        [key: string]: any;
    };
    onClick: (dropdownItem: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }) => void;
}>>;
export declare const DropdownMenu: import("vue/types/vue").ExtendedVue<import("./dropdown-menu").DropdownMenuInstance, {
    path: string;
}, {
    isActive(item: import("./type").DropdownOption, pathPrefix: string, excludeSelf?: boolean): boolean;
    handleHoverItem(path: string): void;
    handleItemClick(data: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }, idx: number): void;
    renderMenuColumn(children: import("./type").DropdownOption[], showSubmenu: boolean, pathPrefix: string): import("vue/types/vnode").ScopedSlotReturnValue;
}, unknown, Record<never, any>> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("./dropdown-menu").DropdownMenuInstance, {
    path: string;
}, {
    isActive(item: import("./type").DropdownOption, pathPrefix: string, excludeSelf?: boolean): boolean;
    handleHoverItem(path: string): void;
    handleItemClick(data: import("./type").DropdownOption, context: {
        e: MouseEvent;
    }, idx: number): void;
    renderMenuColumn(children: import("./type").DropdownOption[], showSubmenu: boolean, pathPrefix: string): import("vue/types/vnode").ScopedSlotReturnValue;
}, unknown, Record<never, any>>>;
export default Dropdown;
