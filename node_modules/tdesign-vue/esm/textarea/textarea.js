/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _typeof from '@babel/runtime/helpers/typeof';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import isFunction from 'lodash/isFunction';
import { prefix } from '../config.js';
import ClASSNAMES from '../utils/classnames.js';
import props from './props.js';
import { getCharacterLength, getPropsApiByEvent } from '../utils/helper.js';
import calcTextareaHeight from './calcTextareaHeight.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-textarea");
var TEXTAREA_TIPS_CLASS = "".concat(prefix, "-textarea__tips");
var TEXTAREA_LIMIT = "".concat(name, "__limit");

function getValidAttrs(obj) {
  var newObj = {};
  Object.keys(obj).forEach(function (key) {
    if (typeof obj[key] !== "undefined") {
      newObj[key] = obj[key];
    }
  });
  return newObj;
}

var _Textarea = Vue.extend({
  name: "TTextarea",
  props: _objectSpread({}, props),
  data: function data() {
    return {
      formDisabled: void 0,
      focused: false,
      mouseHover: false,
      textareaStyle: {}
    };
  },
  computed: {
    tDisabled: function tDisabled() {
      return this.formDisabled || this.disabled;
    },
    textareaClasses: function textareaClasses() {
      var _ref;

      return [name, (_ref = {}, _defineProperty(_ref, "".concat(prefix, "-is-disabled"), this.tDisabled), _defineProperty(_ref, "".concat(prefix, "-is-readonly"), this.readonly), _ref)];
    },
    inputAttrs: function inputAttrs() {
      return getValidAttrs({
        autofocus: this.autofocus,
        disabled: this.tDisabled,
        readonly: this.readonly,
        placeholder: this.placeholder,
        maxlength: this.maxlength || void 0,
        name: this.name || void 0,
        unselectable: this.readonly ? "on" : "off"
      });
    },
    characterNumber: function characterNumber() {
      var characterInfo = getCharacterLength(String(this.value || ""));

      if (_typeof(characterInfo) === "object") {
        return characterInfo.length;
      }

      return characterInfo;
    }
  },
  mounted: function mounted() {
    this.adjustTextareaHeight();
  },
  methods: {
    adjustTextareaHeight: function adjustTextareaHeight() {
      if (this.autosize === true) {
        this.textareaStyle = calcTextareaHeight(this.$refs.refTextareaElem);
      } else if (_typeof(this.autosize) === "object") {
        var _this$autosize, _this$autosize2;

        this.textareaStyle = calcTextareaHeight(this.$refs.refTextareaElem, (_this$autosize = this.autosize) === null || _this$autosize === void 0 ? void 0 : _this$autosize.minRows, (_this$autosize2 = this.autosize) === null || _this$autosize2 === void 0 ? void 0 : _this$autosize2.maxRows);
      } else if (this.$attrs.rows) {
        this.textareaStyle = {
          height: "auto",
          minHeight: "auto"
        };
      }
    },
    emitEvent: function emitEvent(name2, value, context) {
      this.$emit(name2, value, context);
      var handleName = getPropsApiByEvent(name2);
      isFunction(this[handleName]) && this[handleName](value, context);
    },
    focus: function focus() {
      var input = this.$refs.refTextareaElem;
      input === null || input === void 0 ? void 0 : input.focus();
    },
    blur: function blur() {
      var input = this.$refs.refTextareaElem;
      input === null || input === void 0 ? void 0 : input.blur();
    },
    handleInput: function handleInput(e) {
      if (e.isComposing || e.inputType === "insertCompositionText") return;
      this.inputValueChangeHandle(e);
    },
    onCompositionend: function onCompositionend(e) {
      this.inputValueChangeHandle(e);
    },
    inputValueChangeHandle: function inputValueChangeHandle(e) {
      var _this = this;

      var target = e.target;
      var val = target.value;

      if (this.maxcharacter && this.maxcharacter >= 0) {
        var stringInfo = getCharacterLength(val, this.maxcharacter);
        val = _typeof(stringInfo) === "object" && stringInfo.characters;
      }

      this.$emit("input", val);
      this.emitEvent("change", val, {
        e: e
      });
      this.$nextTick(function () {
        return _this.setInputValue(val);
      });
      this.adjustTextareaHeight();
    },
    setInputValue: function setInputValue() {
      var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var textareaElem = this.$refs.refTextareaElem;
      var sV = String(v);

      if (!textareaElem) {
        return;
      }

      if (textareaElem.value !== sV) {
        textareaElem.value = sV;
      }
    },
    emitKeyDown: function emitKeyDown(e) {
      if (this.tDisabled) return;
      this.emitEvent("keydown", this.value, {
        e: e
      });
    },
    emitKeyUp: function emitKeyUp(e) {
      if (this.tDisabled) return;
      this.emitEvent("keyup", this.value, {
        e: e
      });
    },
    emitKeypress: function emitKeypress(e) {
      if (this.tDisabled) return;
      this.emitEvent("keypress", this.value, {
        e: e
      });
    },
    emitFocus: function emitFocus(e) {
      if (this.tDisabled) return;
      this.focused = true;
      this.emitEvent("focus", this.value, {
        e: e
      });
    },
    emitBlur: function emitBlur(e) {
      this.focused = false;
      this.emitEvent("blur", this.value, {
        e: e
      });
    }
  },
  render: function render() {
    var _ref2, _String;

    var h = arguments[0];
    var inputEvents = getValidAttrs({
      focus: this.emitFocus,
      blur: this.emitBlur,
      keydown: this.emitKeyDown,
      keyup: this.emitKeyUp,
      keypress: this.emitKeypress
    });
    var classes = ["".concat(name, "__inner"), (_ref2 = {}, _defineProperty(_ref2, "".concat(prefix, "-is-").concat(this.status), this.status), _defineProperty(_ref2, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty(_ref2, ClASSNAMES.STATUS.focused, this.focused), _defineProperty(_ref2, "".concat(prefix, "-resize-none"), _typeof(this.autosize) === "object"), _ref2)];
    var tips = renderTNodeJSX(this, "tips");
    return h("div", {
      "class": this.textareaClasses
    }, [h("textarea", {
      "on": _objectSpread({
        "input": this.handleInput,
        "compositionend": this.onCompositionend
      }, inputEvents),
      "attrs": _objectSpread({}, _objectSpread(_objectSpread({}, this.$attrs), this.inputAttrs)),
      "domProps": {
        "value": this.value
      },
      "class": classes,
      "style": this.textareaStyle,
      "ref": "refTextareaElem"
    }), this.maxcharacter && h("span", {
      "class": TEXTAREA_LIMIT
    }, ["".concat(this.characterNumber, "/").concat(this.maxcharacter)]), !this.maxcharacter && this.maxlength ? h("span", {
      "class": TEXTAREA_LIMIT
    }, ["".concat(this.value ? (_String = String(this.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(this.maxlength)]) : null, tips && h("div", {
      "class": "".concat(TEXTAREA_TIPS_CLASS, " ").concat(prefix, "-textarea__tips--").concat(this.status || "normal")
    }, [tips])]);
  }
});

export { _Textarea as default };
//# sourceMappingURL=textarea.js.map
