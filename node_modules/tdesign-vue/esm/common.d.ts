export declare type TNodeReturnValue = import('vue/types/vnode').ScopedSlotReturnValue;
export declare type TNode<T = undefined> = T extends undefined ? (h: Vue.CreateElement) => TNodeReturnValue : (h: Vue.CreateElement, props: T) => TNodeReturnValue;
export declare type JsxNode = TNodeReturnValue;
export declare type AttachNodeReturnValue = HTMLElement | Element | Document;
export declare type AttachNode = CSSSelector | ((triggerNode?: HTMLElement) => AttachNodeReturnValue);
export declare type ScrollContainerElement = Window | HTMLElement;
export declare type ScrollContainer = (() => ScrollContainerElement) | CSSSelector;
export declare type FormResetEvent = Event;
export declare type FormSubmitEvent = Event;
export interface Styles {
    [css: string]: string | number;
}
export declare type OptionData = {
    label?: string;
    value?: string | number;
} & {
    [key: string]: any;
};
export declare type TreeOptionData = {
    children?: Array<TreeOptionData>;
} & OptionData;
export declare type SizeEnum = 'small' | 'medium' | 'large';
export declare type HorizontalAlignEnum = 'left' | 'center' | 'right';
export declare type VerticalAlignEnum = 'top' | 'middle' | 'bottom';
export declare type ClassName = {
    [className: string]: any;
} | ClassName[] | string;
export declare type CSSSelector = string;
export interface KeysType {
    value?: string;
    label?: string;
}
export interface HTMLElementAttributes {
    [css: string]: string;
}
