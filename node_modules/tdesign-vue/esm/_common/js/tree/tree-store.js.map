{"version":3,"file":"tree-store.js","sources":["../../../../src/_common/js/tree/tree-store.ts"],"sourcesContent":["import difference from 'lodash/difference';\nimport camelCase from 'lodash/camelCase';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { TreeNode } from './tree-node';\nimport {\n  TreeNodeValue,\n  TypeIdMap,\n  TypeTimer,\n  TypeTargetNode,\n  TypeTreeNodeData,\n  TypeTreeStoreOptions,\n  TypeTreeFilter,\n  TypeTreeFilterOptions,\n  TypeRelatedNodesOptions,\n  TypeTreeEventState,\n} from './types';\n\n// 构建一个树的数据模型\n// 基本设计思想：写入时更新，减少读取消耗，以减少未来实现虚拟滚动所需的计算量\n// 任何一次数据写入，会触发相应节点的状态更新\nexport class TreeStore {\n  // 根节点集合\n  public children: TreeNode[];\n\n  // 所有节点集合\n  public nodes: TreeNode[];\n\n  // 所有节点映射\n  public nodeMap: Map<TreeNodeValue, TreeNode>;\n\n  // 配置选项\n  public config: TypeTreeStoreOptions;\n\n  // 活动节点集合\n  public activedMap: TypeIdMap;\n\n  // 数据被更新的节点集合\n  public updatedMap: TypeIdMap;\n\n  // 选中节点集合\n  public checkedMap: TypeIdMap;\n\n  // 展开节点的集合\n  public expandedMap: TypeIdMap;\n\n  // 符合过滤条件的节点的集合\n  public filterMap: TypeIdMap;\n\n  // 数据更新计时器\n  public updateTimer: TypeTimer;\n\n  // 识别是否需要重排\n  public shouldReflow: boolean;\n\n  // 树节点过滤器\n  public prevFilter: TypeTreeFilter;\n\n  public constructor(options: TypeTreeStoreOptions) {\n    const config: TypeTreeStoreOptions = {\n      prefix: 't',\n      keys: {},\n      expandAll: false,\n      expandLevel: 0,\n      expandMutex: false,\n      expandParent: false,\n      activable: false,\n      activeMultiple: false,\n      checkable: false,\n      checkStrictly: false,\n      disabled: false,\n      load: null,\n      lazy: false,\n      valueMode: 'onlyLeaf',\n      filter: null,\n      onLoad: null,\n      onReflow: null,\n      onUpdate: null,\n      allowFoldNodeOnFilter: false,\n      ...options,\n    };\n    this.config = config;\n    this.nodes = [];\n    this.children = [];\n    this.nodeMap = new Map();\n    this.activedMap = new Map();\n    this.expandedMap = new Map();\n    this.checkedMap = new Map();\n    this.updatedMap = new Map();\n    this.filterMap = new Map();\n    this.prevFilter = null;\n    // 这个计时器确保频繁的 update 事件被归纳为1次完整数据更新后的触发\n    this.updateTimer = null;\n    // 在子节点增删改查时，将此属性设置为 true，来触发视图更新\n    this.shouldReflow = false;\n  }\n\n  // 配置选项\n  public setConfig(options: TypeTreeStoreOptions) {\n    let hasChanged = false;\n    Object.keys(options).forEach((key) => {\n      const val = options[key];\n      if (val !== this.config[key]) {\n        hasChanged = true;\n        this.config[key] = val;\n      }\n    });\n    if (hasChanged) {\n      // 在 td-tree 的 render 方法中调用 setConfig\n      // 这样减少了 watch 属性\n      // 仅在属性变更后刷新状态\n      // 这样可以避免触发渲染死循环\n      this.refreshState();\n    }\n  }\n\n  // 获取根孩子节点列表\n  public getChildren() {\n    return this.children;\n  }\n\n  // 获取节点对象\n  public getNode(item: TypeTargetNode): TreeNode {\n    let node = null;\n    if (typeof item === 'string' || typeof item === 'number') {\n      node = this.nodeMap.get(item);\n    } else if (item instanceof TreeNode) {\n      node = this.nodeMap.get(item.value);\n    }\n    return node;\n  }\n\n  // 获取节点在总节点列表中的位置\n  public getIndex(node: TreeNode): number {\n    return this.nodes.indexOf(node);\n  }\n\n  // 获取指定节点的父节点\n  public getParent(value: TypeTargetNode): TreeNode {\n    let parent = null;\n    const node = this.getNode(value);\n    if (node) {\n      parent = node.getParent();\n    }\n    return parent;\n  }\n\n  // 获取指定节点的所有父节点\n  public getParents(value: TypeTargetNode): TreeNode[] {\n    const node = this.getNode(value);\n    let parents: TreeNode[] = [];\n    if (node) {\n      parents = node.getParents();\n    }\n    return parents;\n  }\n\n  // 获取指定节点在其所在 children 中的位置\n  public getNodeIndex(value: TypeTargetNode): number {\n    const node = this.getNode(value);\n    let index = -1;\n    if (node) {\n      index = node.getIndex();\n    }\n    return index;\n  }\n\n  // 获取所有符合条件的节点\n  public getNodes(\n    item?: TypeTargetNode,\n    options?: TypeTreeFilterOptions,\n  ): TreeNode[] {\n    let nodes: TreeNode[] = [];\n    let val: TreeNodeValue = '';\n    if (typeof item === 'string' || typeof item === 'number') {\n      val = item;\n    } else if (item instanceof TreeNode) {\n      val = item.value;\n    }\n    if (!val) {\n      nodes = this.nodes.slice(0);\n    } else {\n      const node = this.getNode(val);\n      if (node) {\n        nodes = node.walk();\n      }\n    }\n\n    if (options) {\n      const conf: TypeTreeFilterOptions = {\n        filter: null,\n        level: Infinity,\n        ...options,\n      };\n      if (typeof conf.level === 'number' && conf.level !== Infinity) {\n        nodes = nodes.filter((node) => node.level <= conf.level);\n      }\n      if (typeof conf.filter === 'function') {\n        nodes = nodes.filter((node) => {\n          const nodeModel = node.getModel();\n          return conf.filter(nodeModel);\n        });\n      }\n      if (isPlainObject(conf.props)) {\n        nodes = nodes.filter((node) => {\n          const result = Object.keys(conf.props).every((key) => {\n            const propEqual = node[key] === conf.props[key];\n            return propEqual;\n          });\n          return result;\n        });\n      }\n    }\n    return nodes;\n  }\n\n  // 给树添加节点数据\n  public append(list: TypeTreeNodeData[]): void {\n    list.forEach((item) => {\n      const node = new TreeNode(this, item);\n      this.children.push(node);\n    });\n    this.reflow();\n  }\n\n  // 重新加载数据\n  public reload(list: TypeTreeNodeData[]): void {\n    this.expandedMap.clear();\n    this.checkedMap.clear();\n    this.activedMap.clear();\n    this.filterMap.clear();\n    this.removeAll();\n    this.append(list);\n  }\n\n  // 解析节点数据，适配多种节点类型\n  public parseNodeData(\n    para: TreeNodeValue | TreeNode | TypeTreeNodeData,\n    item: TypeTreeNodeData | TypeTreeNodeData[] | TreeNode,\n  ) {\n    let value: TreeNodeValue = '';\n    let node = null;\n    let data = null;\n\n    if (typeof para === 'string' || typeof para === 'number') {\n      value = para;\n      data = item;\n      node = this.getNode(value);\n    } else if (para instanceof TreeNode) {\n      node = para;\n      data = item;\n    } else {\n      data = para;\n    }\n    const spec = {\n      node,\n      data,\n    };\n    return spec;\n  }\n\n  /**\n   * 向指定节点追加节点或者数据\n   * 支持下列使用方式\n   * item: 节点数据, TreeNode: 节点实例, value: 节点值(ID)\n   * appendNodes(item)\n   * appendNodes(TreeNode)\n   * appendNodes(value, item)\n   * appendNodes(value, TreeNode)\n   * appendNodes(TreeNode, item)\n   * appendNodes(TreeNode, TreeNode)\n   */\n  public appendNodes(\n    para?: TypeTargetNode | TypeTreeNodeData,\n    item?: TypeTreeNodeData | TreeNode,\n  ): void {\n    const spec = this.parseNodeData(para, item);\n    if (spec.data) {\n      if (!spec.node) {\n        // 在根节点插入\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this);\n        } else if (Array.isArray(spec.data)) {\n          this.append(spec.data);\n        } else {\n          this.append([spec.data]);\n        }\n      } else {\n        // 插入到目标节点之下\n        if (spec.data instanceof TreeNode) {\n          spec.data.appendTo(this, spec.node);\n        } else if (Array.isArray(spec.data)) {\n          spec.node.append(spec.data);\n        } else {\n          spec.node.append([spec.data]);\n        }\n        spec.node.updateRelated();\n      }\n    }\n  }\n\n  // 在目标节点之前插入节点\n  public insertBefore(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertBefore(item);\n    }\n  }\n\n  // 在目标节点之后插入节点\n  public insertAfter(value: TypeTargetNode, item: TypeTreeNodeData): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.insertAfter(item);\n    }\n  }\n\n  // 更新树结构\n  // 清空 nodes 数组，然后遍历所有根节点重新插入 node\n  public refreshNodes(): void {\n    const { children, nodes } = this;\n    nodes.length = 0;\n    children.forEach((node) => {\n      const list = node.walk();\n      Array.prototype.push.apply(nodes, list);\n    });\n  }\n\n  // 更新所有树节点状态\n  public refreshState(): void {\n    const { nodes } = this;\n    nodes.forEach((node) => {\n      node.update();\n      node.updateChecked();\n    });\n  }\n\n  // 节点重排\n  // 应该仅在树节点增删改查时调用\n  public reflow(node?: TreeNode): void {\n    this.shouldReflow = true;\n    this.updated(node);\n  }\n\n  // 触发更新事件\n  // 节点属性变更时调用\n  public updated(node?: TreeNode): void {\n    if (node?.value) {\n      this.updatedMap.set(node.value, true);\n    }\n    if (this.updateTimer) return;\n    this.updateTimer = +setTimeout(() => {\n      clearTimeout(this.updateTimer);\n      this.updateTimer = null;\n\n      // 检查节点是否需要回流，重排数组\n      if (this.shouldReflow) {\n        this.refreshNodes();\n        this.emit('reflow');\n      }\n\n      // 检查节点是否有被过滤，锁定路径节点\n      // 在此之前要遍历节点生成一个经过排序的节点数组\n      // 以便于优化锁定检查算法\n      if (!this.config?.allowFoldNodeOnFilter) this.lockFilterPathNodes();\n\n      const updatedList = Array.from(this.updatedMap.keys());\n      if (updatedList.length > 0) {\n        // 统计需要更新状态的节点，派发更新事件\n        const updatedNodes = updatedList.map((value) => this.getNode(value));\n        this.emit('update', {\n          nodes: updatedNodes,\n          map: this.updatedMap,\n        });\n      } else if (this.shouldReflow) {\n        // 单纯的回流不需要更新节点状态\n        // 但需要触发更新事件\n        this.emit('update', {\n          nodes: [],\n          map: this.updatedMap,\n        });\n      }\n\n      // 每次回流检查完毕，还原检查状态\n      this.shouldReflow = false;\n      this.updatedMap.clear();\n    });\n  }\n\n  // 获取激活节点集合\n  public getActived(map?: TypeIdMap): TreeNodeValue[] {\n    const activedMap = map || this.activedMap;\n    return Array.from(activedMap.keys());\n  }\n\n  // 获取指定范围的高亮节点\n  public getActivedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isActived());\n    return nodes;\n  }\n\n  // 替换激活态\n  public replaceActived(list: TreeNodeValue[]): void {\n    this.resetActived();\n    this.setActived(list);\n  }\n\n  // 设置激活态\n  public setActived(actived: TreeNodeValue[]): void {\n    const { activeMultiple } = this.config;\n    const list = actived.slice(0);\n    if (!activeMultiple) {\n      list.length = 1;\n    }\n    list.forEach((val) => {\n      this.activedMap.set(val, true);\n      const node = this.getNode(val);\n      if (node) {\n        node.update();\n      }\n    });\n  }\n\n  // 重置激活态\n  public resetActived(): void {\n    const actived = this.getActived();\n    this.activedMap.clear();\n    const relatedNodes = this.getRelatedNodes(actived);\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取展开节点集合\n  public getExpanded(map?: TypeIdMap): TreeNodeValue[] {\n    const expandedMap = map || this.expandedMap;\n    return Array.from(expandedMap.keys());\n  }\n\n  // 替换展开节点\n  public replaceExpanded(list: TreeNodeValue[]): void {\n    const expanded = this.getExpanded();\n    const added = difference(list, expanded);\n    const removed = difference(expanded, list);\n    this.setExpandedDirectly(removed, false);\n    this.updateExpanded(removed);\n    this.setExpanded(added);\n  }\n\n  // 批量设置展开节点\n  public setExpanded(list: TreeNodeValue[]): void {\n    this.setExpandedDirectly(list);\n    this.updateExpanded(list);\n  }\n\n  // 直接设置展开节点数据，不更新节点状态\n  public setExpandedDirectly(list: TreeNodeValue[], expanded = true): void {\n    list.forEach((val) => {\n      if (expanded) {\n        this.expandedMap.set(val, true);\n        const node = this.getNode(val);\n        if (node) {\n          node.afterExpanded();\n        }\n      } else {\n        this.expandedMap.delete(val);\n      }\n    });\n  }\n\n  // 清除所有展开节点\n  public resetExpanded(): void {\n    const expanded = this.getExpanded();\n    this.expandedMap.clear();\n    this.updateExpanded(expanded);\n  }\n\n  // 更新展开节点相关节点的状态\n  public updateExpanded(list: TreeNodeValue[]): void {\n    const relatedNodes = this.getRelatedNodes(list, {\n      withParents: false,\n    });\n    relatedNodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 获取选中态节点 value 数组\n  public getChecked(map?: TypeIdMap): TreeNodeValue[] {\n    const { nodes, config } = this;\n    const { valueMode, checkStrictly } = config;\n    const list: TreeNodeValue[] = [];\n    const checkedMap = map || this.checkedMap;\n    nodes.forEach((node) => {\n      if (node.isChecked(checkedMap)) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          if (!node.parent || !node.parent.isChecked(checkedMap)) {\n            list.push(node.value);\n          }\n        } else if (valueMode === 'onlyLeaf' && !checkStrictly) {\n          if (node.isLeaf()) {\n            list.push(node.value);\n          }\n        } else {\n          list.push(node.value);\n        }\n      }\n    });\n    return list;\n  }\n\n  // 获取指定节点下的选中节点\n  public getCheckedNodes(item?: TypeTargetNode): TreeNode[] {\n    let nodes = this.getNodes(item);\n    nodes = nodes.filter((node) => node.isChecked());\n    return nodes;\n  }\n\n  // 替换选中态列表\n  public replaceChecked(list: TreeNodeValue[]): void {\n    this.resetChecked();\n    this.setChecked(list);\n  }\n\n  // 批量设置选中态\n  public setChecked(list: TreeNodeValue[]): void {\n    const { valueMode, checkStrictly, checkable } = this.config;\n    if (!checkable) return;\n    list.forEach((val: TreeNodeValue) => {\n      const node = this.getNode(val);\n      if (node) {\n        if (valueMode === 'parentFirst' && !checkStrictly) {\n          const childrenNodes = node.walk();\n          childrenNodes.forEach((childNode) => {\n            this.checkedMap.set(childNode.value, true);\n          });\n        } else {\n          this.checkedMap.set(val, true);\n          node.updateChecked();\n        }\n      }\n    });\n    if (!checkStrictly) {\n      const checked = this.getChecked();\n      const relatedNodes = this.getRelatedNodes(checked);\n      relatedNodes.forEach((node) => {\n        node.updateChecked();\n      });\n    }\n  }\n\n  // 清除所有选中节点\n  public resetChecked(): void {\n    const checked = this.getChecked();\n    const relatedNodes = this.getRelatedNodes(checked);\n    this.checkedMap.clear();\n    relatedNodes.forEach((node) => {\n      node.updateChecked();\n    });\n  }\n\n  // 更新全部节点状态\n  public updateAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.update();\n    });\n  }\n\n  // 移除指定节点\n  public remove(value?: TypeTargetNode): void {\n    const node = this.getNode(value);\n    if (node) {\n      node.remove();\n    }\n  }\n\n  // 清空所有节点\n  public removeAll(): void {\n    const nodes = this.getNodes();\n    nodes.forEach((node) => {\n      node.remove();\n    });\n  }\n\n  // 获取节点状态变化可能影响的周边节点\n  // 实现最小遍历集合\n  public getRelatedNodes(\n    list: TreeNodeValue[],\n    options?: TypeRelatedNodesOptions,\n  ): TreeNode[] {\n    const conf = {\n      withParents: true,\n      ...options,\n    };\n    const map = new Map();\n    list.forEach((value) => {\n      if (map.get(value)) return;\n      const node = this.getNode(value);\n      if (node) {\n        const parents = node.getParents();\n        const children = node.walk();\n        let related = [];\n        if (conf.withParents) {\n          related = parents.concat(children);\n        } else {\n          related = children;\n        }\n        related.forEach((relatedNode) => {\n          map.set(relatedNode.value, relatedNode);\n        });\n      }\n    });\n    const relatedNodes = Array.from(map.values());\n    return relatedNodes;\n  }\n\n  // 触发绑定的事件\n  public emit(name: string, state?: TypeTreeEventState): void {\n    const config = this.config || {};\n    const methodName = camelCase(`on-${name}`);\n    const method = config[methodName];\n    if (typeof method === 'function') {\n      method(state);\n    }\n  }\n\n  // 锁定过滤节点的路径节点\n  // 使得路径节点展开，可见，且不可操作\n  public lockFilterPathNodes() {\n    const { config } = this;\n    const allNodes = this.getNodes();\n\n    // 如果之前有进行过滤，则先解锁所有节点\n    if (this.prevFilter) {\n      allNodes.forEach((node: TreeNode) => {\n        node.lock(false);\n      });\n    }\n\n    // 当前没有过滤器\n    // 则无需处理锁定节点\n    if (!config.filter) {\n      return;\n    }\n    this.prevFilter = config.filter;\n\n    // 构造路径节点map\n    const map = new Map();\n\n    // 全部节点要经过排序，才能使用这个算法\n    // 比起每个过滤节点调用 getParents 方法检查父节点状态\n    // 算法复杂度 O(N*log(N)) => O(N)\n    allNodes.reverse().forEach((item: TreeNode) => {\n      const node = item;\n\n      // 被过滤节点父节点固定为展开状态\n      const parent = node.getParent();\n      if (node.vmIsRest) {\n        if (parent) {\n          // 被过滤节点的父节点固定为展开状态\n          parent.expanded = true;\n        }\n        // 被过滤节点固定为展示状态\n        node.visible = true;\n      }\n      if (node.vmIsRest || map.get(node.value)) {\n        if (parent && !parent.vmIsRest) {\n          map.set(parent.value, true);\n        }\n      }\n    });\n\n    // 锁定路径节点展示样式\n    const filterPathValues = Array.from(map.keys());\n    filterPathValues.forEach((value: TreeNodeValue) => {\n      const node = this.getNode(value);\n      if (node) {\n        node.lock(true);\n      }\n    });\n  }\n}\n\nexport default TreeStore;\n"],"names":["TreeStore","options","config","prefix","keys","expandAll","expandLevel","expandMutex","expandParent","activable","activeMultiple","checkable","checkStrictly","disabled","load","lazy","valueMode","filter","onLoad","onReflow","onUpdate","allowFoldNodeOnFilter","nodes","children","nodeMap","Map","activedMap","expandedMap","checkedMap","updatedMap","filterMap","prevFilter","updateTimer","shouldReflow","hasChanged","Object","forEach","key","val","refreshState","item","node","get","TreeNode","value","indexOf","parent","getNode","getParent","parents","getParents","index","getIndex","slice","walk","conf","level","Infinity","nodeModel","getModel","isPlainObject","props","result","every","propEqual","list","push","reflow","clear","removeAll","append","para","data","spec","parseNodeData","appendTo","Array","isArray","updateRelated","insertBefore","insertAfter","length","prototype","apply","update","updateChecked","updated","set","setTimeout","clearTimeout","refreshNodes","emit","lockFilterPathNodes","updatedList","from","updatedNodes","map","getNodes","isActived","resetActived","setActived","actived","getActived","relatedNodes","getRelatedNodes","expanded","getExpanded","added","difference","removed","setExpandedDirectly","updateExpanded","setExpanded","afterExpanded","withParents","isChecked","isLeaf","resetChecked","setChecked","childrenNodes","childNode","checked","getChecked","remove","related","concat","relatedNode","values","name","state","methodName","camelCase","method","allNodes","lock","reverse","vmIsRest","visible","filterPathValues"],"mappings":"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"}