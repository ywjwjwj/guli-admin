/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import { prefix } from '../config.js';
import ClASSNAMES from '../utils/classnames.js';
import props from './option-group-props.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-select-option-group");
var _OptionGroup = Vue.extend({
  name: "TOptionGroup",
  props: _objectSpread({}, props),
  inject: {
    tSelect: {
      "default": void 0
    }
  },
  computed: {
    classes: function classes() {
      var _ref;

      return [name, (_ref = {}, _defineProperty(_ref, ClASSNAMES.SIZE[this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty(_ref, "".concat(name, "__divider"), this.divider), _ref)];
    }
  },
  watch: {
    "tSelect.displayOptions": function tSelectDisplayOptions() {
      this.childrenChange();
    }
  },
  data: function data() {
    return {
      visible: true
    };
  },
  methods: {
    childrenChange: function childrenChange() {
      this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function (option) {
        return option.show === true;
      });
    }
  },
  render: function render() {
    var h = arguments[0];
    var children = renderTNodeJSX(this, "default");
    return h("li", {
      "directives": [{
        name: "show",
        value: this.visible
      }],
      "class": this.classes
    }, [h("div", {
      "class": "".concat(name, "__header")
    }, [this.label]), h("ul", [children])]);
  }
});

export { _OptionGroup as default };
//# sourceMappingURL=optionGroup.js.map
