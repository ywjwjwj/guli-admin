import { TdSelectInputProps } from './type';
import './style';
export * from './type';
export declare type SelectInputProps = TdSelectInputProps;
export declare const SelectInput: import("vue").ComponentOptions<import("vue").default, import("@vue/composition-api").ShallowUnwrapRef<{
    selectInputWrapRef: import("@vue/composition-api").Ref<any>;
    innerPopupVisible: import("@vue/composition-api").Ref<boolean>;
    commonInputProps: import("@vue/composition-api").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayStyle: import("@vue/composition-api").Ref<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    selectInputRef: import("@vue/composition-api").Ref<any>;
    popupClasses: import("@vue/composition-api").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderSelectSingle: (h: import("vue").CreateElement, popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams, h: import("vue").CreateElement) => JSX.Element;
    onInnerPopupVisibleChange: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
}> & import("@vue/composition-api").Data, {}, {}, {
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: import("vue").CreateElement, props: {
            value: import("./type").SelectInputValue;
            collapsedTags: import("./type").SelectInputValue;
            count: number;
        }) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<import("..").InputValue>;
    };
    defaultInputValue: {
        type: import("vue").PropType<import("..").InputValue>;
    };
    keys: {
        type: import("vue").PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement, props: {
            value: string | number;
        }) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement, props: {
            value: import("./type").SelectInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: import("vue").PropType<(value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onTagChange: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void>;
}, {
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
} & {
    keys?: unknown;
    value?: unknown;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void;
    onFocus?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    inputValue?: import("..").InputValue;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        collapsedTags: import("./type").SelectInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    popupProps?: unknown;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    panel?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    inputProps?: unknown;
    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
    defaultInputValue?: import("..").InputValue;
    tagProps?: unknown;
    onInputChange?: (value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void;
    tagInputProps?: unknown;
    onTagChange?: (value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void;
}> & Omit<import("vue").VueConstructor<import("vue").default>, never> & (new (...args: any[]) => import("@vue/composition-api").ComponentRenderProxy<{
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
} & {
    keys?: unknown;
    value?: unknown;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void;
    onFocus?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    inputValue?: import("..").InputValue;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        collapsedTags: import("./type").SelectInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    popupProps?: unknown;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    panel?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    inputProps?: unknown;
    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
    defaultInputValue?: import("..").InputValue;
    tagProps?: unknown;
    onInputChange?: (value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void;
    tagInputProps?: unknown;
    onTagChange?: (value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void;
}, import("@vue/composition-api").ShallowUnwrapRef<{
    selectInputWrapRef: import("@vue/composition-api").Ref<any>;
    innerPopupVisible: import("@vue/composition-api").Ref<boolean>;
    commonInputProps: import("@vue/composition-api").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayStyle: import("@vue/composition-api").Ref<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    selectInputRef: import("@vue/composition-api").Ref<any>;
    popupClasses: import("@vue/composition-api").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderSelectSingle: (h: import("vue").CreateElement, popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams, h: import("vue").CreateElement) => JSX.Element;
    onInnerPopupVisibleChange: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
}>, import("@vue/composition-api").Data, {}, {}, {}, {}, {}, {
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
} & {
    keys?: unknown;
    value?: unknown;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void;
    onFocus?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    inputValue?: import("..").InputValue;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        collapsedTags: import("./type").SelectInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    popupProps?: unknown;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    panel?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    inputProps?: unknown;
    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
    defaultInputValue?: import("..").InputValue;
    tagProps?: unknown;
    onInputChange?: (value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void;
    tagInputProps?: unknown;
    onTagChange?: (value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void;
}, {
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
}, true>) & import("vue").PluginObject<import("vue").ComponentOptions<import("vue").default, import("@vue/composition-api").ShallowUnwrapRef<{
    selectInputWrapRef: import("@vue/composition-api").Ref<any>;
    innerPopupVisible: import("@vue/composition-api").Ref<boolean>;
    commonInputProps: import("@vue/composition-api").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayStyle: import("@vue/composition-api").Ref<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    selectInputRef: import("@vue/composition-api").Ref<any>;
    popupClasses: import("@vue/composition-api").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderSelectSingle: (h: import("vue").CreateElement, popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams, h: import("vue").CreateElement) => JSX.Element;
    onInnerPopupVisibleChange: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
}> & import("@vue/composition-api").Data, {}, {}, {
    allowInput: BooleanConstructor;
    autoWidth: BooleanConstructor;
    borderless: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: import("vue").CreateElement, props: {
            value: import("./type").SelectInputValue;
            collapsedTags: import("./type").SelectInputValue;
            count: number;
        }) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    disabled: BooleanConstructor;
    inputProps: {
        type: import("vue").PropType<import("..").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<import("..").InputValue>;
    };
    defaultInputValue: {
        type: import("vue").PropType<import("..").InputValue>;
    };
    keys: {
        type: import("vue").PropType<import("./type").SelectInputKeys>;
    };
    label: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    loading: BooleanConstructor;
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    multiple: BooleanConstructor;
    panel: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    popupProps: {
        type: import("vue").PropType<import("..").TdPopupProps>;
    };
    popupVisible: {
        type: BooleanConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement, props: {
            value: string | number;
        }) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    tagInputProps: {
        type: import("vue").PropType<import("..").TdTagInputProps>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").SelectInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement, props: {
            value: import("./type").SelectInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void>;
    onInputChange: import("vue").PropType<(value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onPopupVisibleChange: import("vue").PropType<(visible: boolean, context: import("..").PopupVisibleChangeContext) => void>;
    onTagChange: import("vue").PropType<(value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void>;
}, {
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
} & {
    keys?: unknown;
    value?: unknown;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void;
    onFocus?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    inputValue?: import("..").InputValue;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        collapsedTags: import("./type").SelectInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    popupProps?: unknown;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    panel?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    inputProps?: unknown;
    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
    defaultInputValue?: import("..").InputValue;
    tagProps?: unknown;
    onInputChange?: (value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void;
    tagInputProps?: unknown;
    onTagChange?: (value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void;
}> & Omit<import("vue").VueConstructor<import("vue").default>, never> & (new (...args: any[]) => import("@vue/composition-api").ComponentRenderProxy<{
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
} & {
    keys?: unknown;
    value?: unknown;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void;
    onFocus?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    inputValue?: import("..").InputValue;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        collapsedTags: import("./type").SelectInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    popupProps?: unknown;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    panel?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    inputProps?: unknown;
    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
    defaultInputValue?: import("..").InputValue;
    tagProps?: unknown;
    onInputChange?: (value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void;
    tagInputProps?: unknown;
    onTagChange?: (value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void;
}, import("@vue/composition-api").ShallowUnwrapRef<{
    selectInputWrapRef: import("@vue/composition-api").Ref<any>;
    innerPopupVisible: import("@vue/composition-api").Ref<boolean>;
    commonInputProps: import("@vue/composition-api").ComputedRef<import("./interface").SelectInputCommonProperties>;
    tOverlayStyle: import("@vue/composition-api").Ref<import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles)>;
    selectInputRef: import("@vue/composition-api").Ref<any>;
    popupClasses: import("@vue/composition-api").ComputedRef<{
        [x: string]: boolean;
    }[]>;
    onInnerClear: (context: {
        e: MouseEvent;
    }) => void;
    renderSelectSingle: (h: import("vue").CreateElement, popupVisible: boolean) => JSX.Element;
    renderSelectMultiple: (p: import("./useMultiple").RenderSelectMultipleParams, h: import("vue").CreateElement) => JSX.Element;
    onInnerPopupVisibleChange: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
}>, import("@vue/composition-api").Data, {}, {}, {}, {}, {}, {
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
} & {
    keys?: unknown;
    value?: unknown;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").SelectInputValue, context: {
        e: KeyboardEvent;
        inputValue: import("..").InputValue;
    }) => void;
    onFocus?: (value: import("./type").SelectInputValue, context: import("./type").SelectInputFocusContext) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    inputValue?: import("..").InputValue;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        collapsedTags: import("./type").SelectInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    popupProps?: unknown;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").SelectInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    panel?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    inputProps?: unknown;
    onPopupVisibleChange?: (visible: boolean, context: import("..").PopupVisibleChangeContext) => void;
    defaultInputValue?: import("..").InputValue;
    tagProps?: unknown;
    onInputChange?: (value: import("..").InputValue, context?: import("./type").SelectInputValueChangeContext) => void;
    tagInputProps?: unknown;
    onTagChange?: (value: import("./type").SelectInputValue, context: import("..").TagInputChangeContext) => void;
}, {
    loading: boolean;
    disabled: boolean;
    multiple: boolean;
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    minCollapsedNum: number;
    allowInput: boolean;
    borderless: boolean;
    popupVisible: boolean;
}, true>)>;
export default SelectInput;
