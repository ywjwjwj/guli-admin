/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { h as helper } from '../_chunks/dep-99305448.js';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { getCurrentInstance, toRefs, ref, computed } from '@vue/composition-api';
import isObject from 'lodash/isObject';
import pick from 'lodash/pick';
import { Input } from '../input/index.js';
import { Loading } from '../loading/index.js';
import { useTNodeJSX } from '../hooks/tnode.js';
import '../config-provider/index.js';
import useDefaultValue from '../hooks/useDefaultValue.js';
import { usePrefixClass } from '../config-provider/useConfig.js';
import '../input/addon.js';
import 'vue';
import '../config.js';
import '../input/input.js';
import '@babel/runtime/helpers/toConsumableArray';
import '@babel/runtime/helpers/typeof';
import 'tdesign-icons-vue';
import 'lodash/camelCase';
import 'lodash/kebabCase';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '../config-provider/config-receiver.js';
import 'lodash/mergeWith';
import '../config-provider/zh_CN_config.js';
import '../config-provider/type.js';
import '../utils/mixins.js';
import '../utils/classnames.js';
import '../utils/event.js';
import '../input/props.js';
import '../utils/render-tnode.js';
import '../input/input-group.js';
import '../utils/map-props.js';
import '../utils/withInstall.js';
import 'lodash/capitalize';
import './style/index.js';
import '../input/type.js';
import '../loading/loading.js';
import '../loading/icon/gradient.js';
import '../_common/js/loading/circle-adapter.js';
import '../_common/js/utils/set-style.js';
import '../_common/js/utils/helper.js';
import '../utils/dom.js';
import 'raf';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/transfer-dom.js';
import '../loading/props.js';
import '../loading/type.js';
import '../loading/plugin.js';
import 'lodash/isEmpty';
import 'lodash/isFunction';
import '../config-provider/config-provider.js';
import 'lodash/cloneDeep';
import '../config-provider/context.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave"];
var DEFAULT_KEYS = {
  label: "label",
  value: "value"
};

function getInputValue(value, keys) {
  var iKeys = keys || DEFAULT_KEYS;
  return isObject(value) ? value[iKeys.label] : value;
}

function useSingle(props, context) {
  var _props$defaultInputVa;

  var instance = getCurrentInstance();

  var _toRefs = toRefs(props),
      value = _toRefs.value,
      keys = _toRefs.keys,
      propsInputValue = _toRefs.inputValue;

  var classPrefix = usePrefixClass();

  var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props.onInputChange, "inputValue", "input-change"),
      _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
      inputValue = _useDefaultValue2[0],
      setInputValue = _useDefaultValue2[1];

  var inputRef = ref();
  var renderTNode = useTNodeJSX();
  var commonInputProps = computed(function () {
    return pick(props, COMMON_PROPERTIES);
  });

  var onInnerClear = function onInnerClear(context2) {
    var _context2$e, _props$onClear;

    context2 === null || context2 === void 0 ? void 0 : (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
    (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, context2);
    instance.emit("clear", context2);
    setInputValue("", {
      trigger: "clear"
    });
  };

  var onInnerInputChange = function onInnerInputChange(value2, context2) {
    if (props.allowInput) {
      setInputValue(value2, _objectSpread(_objectSpread({}, context2), {}, {
        trigger: "input"
      }));
    }
  };

  var renderSelectSingle = function renderSelectSingle(h, popupVisible) {
    var singleValueDisplay = renderTNode("valueDisplay");
    var displayedValue = popupVisible && props.allowInput ? inputValue.value : getInputValue(value.value, keys.value);
    var prefixContent = [singleValueDisplay, renderTNode("label")];

    var inputProps = _objectSpread(_objectSpread(_objectSpread({}, commonInputProps.value), props.inputProps), {}, {
      value: singleValueDisplay ? void 0 : displayedValue,
      label: prefixContent.length ? function () {
        return prefixContent;
      } : void 0,
      autoWidth: props.autoWidth,
      readonly: !props.allowInput,
      placeholder: singleValueDisplay ? "" : props.placeholder,
      suffixIcon: !props.disabled && props.loading ? function () {
        return h(Loading, {
          "attrs": {
            "loading": true,
            "size": "small"
          }
        });
      } : props.suffixIcon,
      showClearIconOnEmpty: Boolean(props.clearable && inputValue.value),
      inputClass: _defineProperty({}, "".concat(classPrefix.value, "-input--focused"), popupVisible)
    });

    return h(Input, helper([{
      "ref": "inputRef"
    }, {
      "props": inputProps
    }, {
      "scopedSlots": context.slots,
      "on": {
        "change": onInnerInputChange,
        "clear": onInnerClear,
        "blur": function blur(val, context2) {
          var _props$onBlur;

          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value.value, _objectSpread(_objectSpread({}, context2), {}, {
            inputValue: val
          }));
          instance.emit("blur", value.value, _objectSpread(_objectSpread({}, context2), {}, {
            inputValue: val
          }));
        },
        "enter": function enter(val, context2) {
          var _props$onEnter;

          (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, value.value, _objectSpread(_objectSpread({}, context2), {}, {
            inputValue: val
          }));
          instance.emit("enter", value.value, _objectSpread(_objectSpread({}, context2), {}, {
            inputValue: val
          }));
        },
        "focus": function focus(val, context2) {
          var _props$onFocus;

          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value.value, _objectSpread(_objectSpread({}, context2), {}, {
            inputValue: val
          }));
          instance.emit("focus", value.value, _objectSpread(_objectSpread({}, context2), {}, {
            tagInputValue: val
          }));
          !popupVisible && setInputValue(getInputValue(value.value, keys.value), _objectSpread(_objectSpread({}, context2), {}, {
            trigger: "input"
          }));
        }
      }
    }]));
  };

  return {
    inputRef: inputRef,
    commonInputProps: commonInputProps,
    onInnerClear: onInnerClear,
    renderSelectSingle: renderSelectSingle
  };
}

export { useSingle as default };
//# sourceMappingURL=useSingle.js.map
