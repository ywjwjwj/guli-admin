import { TdDrawerProps } from './type';
import './style';
export * from './type';
export declare type DrawerProps = TdDrawerProps;
export declare const Drawer: import("vue/types/vue").ExtendedVue<{
    getConfirmBtn(options: import("../dialog/actions").MixinsConfirmBtn): any;
    getCancelBtn(options: import("../dialog/actions").MixinsCancelBtn): any;
    getButtonByProps(button: string | import("..").TdButtonProps, defaultButton: import("..").TdButtonProps, className?: import("../common").ClassName): JSX.Element;
    confirmBtnAction(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    getDefaultConfrimBtnProps(options: import("../dialog/actions").MixinsConfirmBtn): import("..").TdButtonProps;
    getDefaultCancelBtnProps(options: import("../dialog/actions").MixinsCancelBtn): import("..").TdButtonProps;
} & Record<never, any> & import("vue").default & {
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").DrawerConfig;
} & import("../config-provider/config-receiver").ConfigComponent, {
    isSizeDragging: boolean;
    draggedSizeValue: any;
}, {
    enableDrag(): void;
    handleMousemove(e: MouseEvent): void;
    disableDrag(): void;
    handleScrollThrough(visible: boolean): void;
    handlePushMode(): void;
    updatePushMode(): void;
    getDefaultBtn(btnType: "cancel" | "confirm", btnApi: import("./type").FooterButton): JSX.Element;
    isUseDefault(btnApi: import("./type").FooterButton): boolean;
    getDefaultFooter(): JSX.Element;
    handleCloseBtnClick(e: MouseEvent): void;
    handleWrapperClick(e: MouseEvent): void;
    onKeyDown(e: KeyboardEvent): void;
    confirmBtnAction(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    closeDrawer(params: import("./type").DrawerCloseContext): void;
}, {
    drawerClasses: import("../common").ClassName;
    sizeValue: string;
    wrapperStyles: import("../common").Styles;
    wrapperClasses: import("../common").ClassName;
    parentNode: HTMLElement;
    modeAndPlacement: string;
    footerStyle: import("../common").Styles;
    isHorizontal: boolean;
    isVertical: boolean;
    draggableLineStyles: import("../common").Styles;
}, {
    attach: import("../common").AttachNode;
    body: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    cancelBtn: import("./type").FooterButton;
    closeBtn: any;
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmBtn: import("./type").FooterButton;
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    destroyOnClose: boolean;
    footer: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    header: any;
    mode: "push" | "overlay";
    placement: "left" | "top" | "bottom" | "right";
    preventScrollThrough: boolean;
    showInAttachedElement: boolean;
    showOverlay: boolean;
    size: string;
    sizeDraggable: boolean;
    visible: boolean;
    defaultVisible: boolean;
    zIndex: number;
    onCancel: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (context: import("./type").DrawerCloseContext) => void;
    onCloseBtnClick: (context: {
        e: MouseEvent;
    }) => void;
    onConfirm: (context: {
        e: MouseEvent;
    }) => void;
    onEscKeydown: (context: {
        e: KeyboardEvent;
    }) => void;
    onOverlayClick: (context: {
        e: MouseEvent;
    }) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<{
    getConfirmBtn(options: import("../dialog/actions").MixinsConfirmBtn): any;
    getCancelBtn(options: import("../dialog/actions").MixinsCancelBtn): any;
    getButtonByProps(button: string | import("..").TdButtonProps, defaultButton: import("..").TdButtonProps, className?: import("../common").ClassName): JSX.Element;
    confirmBtnAction(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    getDefaultConfrimBtnProps(options: import("../dialog/actions").MixinsConfirmBtn): import("..").TdButtonProps;
    getDefaultCancelBtnProps(options: import("../dialog/actions").MixinsCancelBtn): import("..").TdButtonProps;
} & Record<never, any> & import("vue").default & {
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").DrawerConfig;
} & import("../config-provider/config-receiver").ConfigComponent, {
    isSizeDragging: boolean;
    draggedSizeValue: any;
}, {
    enableDrag(): void;
    handleMousemove(e: MouseEvent): void;
    disableDrag(): void;
    handleScrollThrough(visible: boolean): void;
    handlePushMode(): void;
    updatePushMode(): void;
    getDefaultBtn(btnType: "cancel" | "confirm", btnApi: import("./type").FooterButton): JSX.Element;
    isUseDefault(btnApi: import("./type").FooterButton): boolean;
    getDefaultFooter(): JSX.Element;
    handleCloseBtnClick(e: MouseEvent): void;
    handleWrapperClick(e: MouseEvent): void;
    onKeyDown(e: KeyboardEvent): void;
    confirmBtnAction(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    closeDrawer(params: import("./type").DrawerCloseContext): void;
}, {
    drawerClasses: import("../common").ClassName;
    sizeValue: string;
    wrapperStyles: import("../common").Styles;
    wrapperClasses: import("../common").ClassName;
    parentNode: HTMLElement;
    modeAndPlacement: string;
    footerStyle: import("../common").Styles;
    isHorizontal: boolean;
    isVertical: boolean;
    draggableLineStyles: import("../common").Styles;
}, {
    attach: import("../common").AttachNode;
    body: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    cancelBtn: import("./type").FooterButton;
    closeBtn: any;
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmBtn: import("./type").FooterButton;
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    destroyOnClose: boolean;
    footer: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    header: any;
    mode: "push" | "overlay";
    placement: "left" | "top" | "bottom" | "right";
    preventScrollThrough: boolean;
    showInAttachedElement: boolean;
    showOverlay: boolean;
    size: string;
    sizeDraggable: boolean;
    visible: boolean;
    defaultVisible: boolean;
    zIndex: number;
    onCancel: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (context: import("./type").DrawerCloseContext) => void;
    onCloseBtnClick: (context: {
        e: MouseEvent;
    }) => void;
    onConfirm: (context: {
        e: MouseEvent;
    }) => void;
    onEscKeydown: (context: {
        e: KeyboardEvent;
    }) => void;
    onOverlayClick: (context: {
        e: MouseEvent;
    }) => void;
}>>;
export default Drawer;
