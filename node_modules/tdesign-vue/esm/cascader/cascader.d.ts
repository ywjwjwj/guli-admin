import Vue from 'vue';
import { TreeNode, TreeNodeValue, CascaderContextType, TreeNodeModel } from './interface';
import { CascaderChangeSource, CascaderValue, CascaderChangeContext } from './type';
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    formDisabled: any;
    inputWidth: number;
    visible: boolean;
    treeStore: any;
    inputVal: string;
    scopeVal: any;
    treeNodes: any[];
    filterActive: boolean;
    expend: TreeNodeValue[];
}, {
    init(): void;
    updatedTreeNodes(): void;
    updateExpend(): void;
}, {
    tDisabled: boolean;
    stateFns: {
        setTreeNodes: (nodes: TreeNode[]) => void;
        setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => void;
        setVisible: (val: boolean) => void;
        setFilterActive: (val: boolean) => void;
        setInputVal: (val: string) => void;
        setExpend: (val: TreeNodeValue[]) => void;
        setInputWidth: (val: number) => void;
    };
    cascaderContext: CascaderContextType;
}, {
    checkProps: import("..").TdCheckboxProps;
    checkStrictly: boolean;
    clearable: boolean;
    collapsedItems: (h: import("vue").CreateElement, props: {
        value: import("../common").TreeOptionData[];
        collapsedSelectedItems: import("../common").TreeOptionData[];
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    disabled: boolean;
    empty: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    filterable: boolean;
    keys: import("./type").CascaderKeysType;
    lazy: boolean;
    load: (node: TreeNodeModel<import("../common").TreeOptionData>) => Promise<import("../common").TreeOptionData[]>;
    loading: boolean;
    loadingText: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    max: number;
    minCollapsedNum: number;
    multiple: boolean;
    options: import("../common").TreeOptionData[];
    placeholder: any;
    popupProps: import("../popup/type").TdPopupProps;
    showAllLevels: boolean;
    size: import("../common").SizeEnum;
    trigger: "click" | "hover";
    value: CascaderValue<import("../common").TreeOptionData>;
    defaultValue: CascaderValue<import("../common").TreeOptionData>;
    valueMode: "all" | "parentFirst" | "onlyLeaf";
    valueType: "full" | "single";
    onBlur: (context: {
        value: CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void;
    onChange: (value: CascaderValue<import("../common").TreeOptionData>, context: CascaderChangeContext<import("../common").TreeOptionData>) => void;
    onFocus: (context: {
        value: CascaderValue<import("../common").TreeOptionData>;
        e: FocusEvent;
    }) => void;
    onRemove: (context: import("./type").RemoveContext<import("../common").TreeOptionData>) => void;
}>;
export default _default;
