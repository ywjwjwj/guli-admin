/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import get from 'lodash/get';
import baseTableProps from '../../base-table-props.js';
import ExpandBox from '../expand-box.js';
import { ExpandProps } from '../../util/interface.js';
import { filterDataByIds } from '../../util/common.js';
import { prefix } from '../../../config.js';
import { emitEvent } from '../../../utils/event.js';
import { renderTNodeJSX } from '../../../utils/render-tnode.js';
import '../../../_chunks/dep-99305448.js';
import 'lodash/isFunction';
import 'tdesign-icons-vue';
import '../../../utils/mixins.js';
import '../../../config-provider/config-receiver.js';
import 'lodash/mergeWith';
import '../../../config-provider/zh_CN_config.js';
import '../../../config-provider/type.js';
import '../../primary-table-props.js';
import 'lodash/isString';
import '../../../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '@babel/runtime/helpers/typeof';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var expandedColKey = "expanded-icon-cell";
var expand = Vue.extend({
  name: "".concat(prefix, "-primary-table-expand"),
  props: _objectSpread({
    data: baseTableProps.data,
    columns: baseTableProps.columns,
    rowKey: baseTableProps.rowKey
  }, ExpandProps),
  data: function data() {
    return {
      hasExpandedColumn: false
    };
  },
  computed: {
    reRowKey: function reRowKey() {
      return this.rowKey || "id";
    },
    columnLength: function columnLength() {
      var len = this.columns.length;

      if (this.hasExpandedColumn) {
        len += 1;
      }

      return len;
    },
    isFirstColumnFixed: function isFirstColumnFixed() {
      return this.columns[0].fixed === "left";
    }
  },
  methods: {
    getExpandRowHandler: function getExpandRowHandler() {
      var _this = this;

      if (!this.expandedRow && !this.$scopedSlots.expandedRow) return;
      return function (h, params) {
        return renderTNodeJSX(_this, "expandedRow", {
          params: params
        });
      };
    },
    getExpandColumns: function getExpandColumns(columns) {
      var _this2 = this;

      var expandRowHandler = this.getExpandRowHandler();
      var hasExpandedColumn = Boolean(expandRowHandler && this.expandIcon);
      this.hasExpandedColumn = hasExpandedColumn;
      if (!hasExpandedColumn) return columns;
      return [{
        colKey: expandedColKey,
        width: 48,
        attrs: {
          "class": ["".concat(prefix, "-table__expandable-icon-cell")],
          style: {
            overflow: "auto"
          }
        },
        fixed: this.isFirstColumnFixed ? "left" : void 0,
        cell: function cell(h, _ref) {
          var row = _ref.row,
              rowIndex = _ref.rowIndex;
          return _this2.renderExpandIconCell({
            row: row,
            rowIndex: rowIndex
          });
        }
      }].concat(_toConsumableArray(columns));
    },
    renderExpandIconCell: function renderExpandIconCell(_ref2) {
      var _this3 = this;

      var row = _ref2.row,
          rowIndex = _ref2.rowIndex;
      var h = this.$createElement;
      var _this$expandedRowKeys = this.expandedRowKeys,
          expandedRowKeys = _this$expandedRowKeys === void 0 ? [] : _this$expandedRowKeys;
      var id = get(row, this.reRowKey);
      var isExpanded = expandedRowKeys.indexOf(id) !== -1;
      return h(ExpandBox, {
        "attrs": {
          "expandIcon": this.expandIcon,
          "expanded": isExpanded,
          "row": row,
          "rowIndex": rowIndex
        },
        "on": {
          "click": function click(e) {
            _this3.expandOnRowClick && e.stopPropagation();

            _this3.handleExpandChange(row);
          }
        }
      });
    },
    renderExpandedRow: function renderExpandedRow(params) {
      var h = this.$createElement;
      var id = get(params.row, this.reRowKey);
      var isShowExpanded = this.expandedRowKeys.includes(id);

      if (isShowExpanded) {
        return h("tr", {
          "class": "".concat(prefix, "-table__expanded-row")
        }, [h("td", {
          "attrs": {
            "colspan": this.columnLength
          },
          "class": "".concat(prefix, "-table__row--full")
        }, [h("div", {
          "class": "".concat(prefix, "-table__expanded-row-inner")
        }, [renderTNodeJSX(this, "expandedRow", {
          params: params
        })])])]);
      }

      return null;
    },
    handleExpandChange: function handleExpandChange() {
      var record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var expandedRowKeys = _toConsumableArray(this.expandedRowKeys);

      var id = get(record, this.reRowKey);
      var expandedRowIndex = expandedRowKeys.indexOf(id);
      var isExpanded = expandedRowIndex !== -1;
      isExpanded ? expandedRowKeys.splice(expandedRowIndex, 1) : expandedRowKeys.push(id);
      emitEvent(this, "expand-change", expandedRowKeys, {
        expandedRowData: filterDataByIds(this.data, expandedRowKeys)
      });
    }
  }
});

export { expand as default };
//# sourceMappingURL=expand.js.map
