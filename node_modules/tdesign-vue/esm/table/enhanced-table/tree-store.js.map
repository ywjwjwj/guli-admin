{"version":3,"file":"tree-store.js","sources":["../../../src/table/enhanced-table/tree-store.ts"],"sourcesContent":["import get from 'lodash/get';\nimport { isRowSelectedDisabled } from '../util/common';\nimport {\n  PrimaryTableCol, TableRowState, TableRowValue, PrimaryTableCellParams, TableRowData,\n} from '../type';\n\nexport type TableTreeDataMap<T extends TableRowData = TableRowData> = Map<string | number, TableRowState<T>>;\n\nexport interface TableRowModel<T> extends TableRowState<T> {\n  setData?: (key: string | number, data: T) => void;\n}\n\nexport interface KeysType { rowKey: string, childrenKey: string }\n\n/**\n * 表格树形结构处理器\n * Vue 和 React 可以通用\n * 关键函数有以下几个\n * @toggleExpandData 处理树形结构展开收起\n * @setData 更新当行数据\n * @getData 获取单行数据\n * @remove 移除行数据，及其子节点\n * @appendTo 追加子节点到末尾\n */\nclass TableTreeStore<T extends TableRowData = TableRowData> {\n  /** 树形结构 Map 存储 */\n  treeDataMap: TableTreeDataMap<T> = new Map();\n\n  constructor() {\n    this.treeDataMap = new Map();\n  }\n\n  /**\n   * 初始化 treeDataMap，不会改变 dataSource\n   * @param dataSource 树形数据源\n   * @param columns 列配置\n   * @param keys 字段别名\n   */\n  initialTreeStore(dataSource: T[], columns: PrimaryTableCol[], keys: KeysType) {\n    this.treeDataMap?.clear();\n    initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);\n  }\n\n  toggleExpandData(p: PrimaryTableCellParams<T>, dataSouce: T[], keys: KeysType) {\n    const rowValue = get(p.row, keys.rowKey);\n    const r = this.treeDataMap.get(rowValue) || {\n      row: p.row,\n      rowIndex: p.rowIndex,\n      expanded: false,\n    };\n    r.rowIndex = p.rowIndex;\n    r.expanded = !r.expanded;\n    this.treeDataMap.set(rowValue, r);\n    this.updateExpandRow(r, dataSouce, keys);\n  }\n\n  updateExpandRow(changeRow: TableRowState<T>, dataSource: T[], keys: KeysType) {\n    const { row, rowIndex, expanded } = changeRow;\n    const { treeDataMap } = this;\n    const childrenNodes = get(row, keys.childrenKey);\n    if (!row || !childrenNodes) return;\n    if (expanded) {\n      updateChildrenRowState(treeDataMap, changeRow, expanded, keys);\n      updateRowExpandLength(treeDataMap, row, childrenNodes.length, 'expand', keys);\n      dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));\n    } else {\n      updateChildrenRowState<T>(treeDataMap, changeRow, expanded, keys);\n      const len = changeRow.expandChildrenLength || childrenNodes.length;\n      updateRowExpandLength(treeDataMap, row, -1 * len, 'fold', keys);\n      dataSource.splice(rowIndex + 1, len);\n    }\n    // 展开或收起后，会影响后续节点的 rowIndex，需同步更新\n    updateRowIndex(treeDataMap, dataSource, {\n      rowKey: keys.rowKey,\n      minRowIndex: rowIndex + 1,\n    });\n  }\n\n  /**\n   * 获取当前行全部数据\n   * @param key 行唯一标识\n   * @returns {TableRowState} 当前行数据\n   */\n  getData(key: TableRowValue): TableRowState<T> {\n    return this.treeDataMap.get(key);\n  }\n\n  /**\n   * 更新当前行数据，并返回当前行下标\n   * @param key 当前行唯一标识值\n   * @param newRowData 新行数据\n   * @returns {number} rowIndex 设置的行下标\n   */\n  updateData(key: TableRowValue, newRowData: T, dataSource: T[], keys: KeysType): number {\n    const newKey = get(newRowData, keys.rowKey);\n    const rowState = this.treeDataMap.get(key);\n    // Map 没有查询到，或者查询到的 rowIndex 值为 -1，均表示当前数据不在 dataSource 列表中，未显示在页面中\n    if (!rowState || rowState.rowIndex === -1) {\n      updateRowData(dataSource, key, newRowData, {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      return;\n    }\n    const currentRowIndex = rowState.rowIndex;\n    rowState.row = newRowData;\n    this.treeDataMap.set(key, rowState);\n    if (rowState.parent) {\n      const siblings = get(rowState.parent.row, keys.childrenKey);\n      const index = siblings.findIndex((item: T) => get(item, keys.rowKey) === key);\n      siblings[index] = newRowData;\n    }\n    // key 也发生了变化\n    if (key !== newKey) {\n      this.treeDataMap.set(newKey, rowState);\n      this.treeDataMap.delete(key);\n    } else {\n      this.treeDataMap.set(key, rowState);\n    }\n    return currentRowIndex;\n  }\n\n  /**\n   * 移除指定节点\n   * @param key 行唯一标识\n   */\n  remove(key: TableRowValue, dataSource: T[], keys: KeysType): T[] {\n    const r = this.treeDataMap.get(key);\n    if (r && r.rowIndex >= 0) {\n      // 移除当前节点时，展开的节点的子节点需同步移除\n      const removeNumber = (r.expandChildrenLength || 0) + 1;\n      dataSource.splice(r.rowIndex, removeNumber);\n      if (r.parent) {\n        const siblings = get(r.parent.row, keys.childrenKey);\n        const index = siblings.findIndex((item: TableRowData) => get(item, keys.rowKey) === key);\n        siblings.splice(index, 1);\n        updateRowExpandLength(this.treeDataMap, r.parent.row, (-1) * removeNumber, 'delete', {\n          rowKey: keys.rowKey,\n          childrenKey: keys.childrenKey,\n        });\n      }\n      this.treeDataMap.delete(key);\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: r.rowIndex,\n        rowKey: keys.rowKey,\n      });\n    } else {\n      // TODO, remove from dataSource\n      console.warn('TDesign Table Warn: Do not remove this node, which is not appreared.');\n    }\n    return dataSource;\n  }\n\n  /**\n   * 为当前节点添加子节点，默认添加到最后一个节点\n   * @param key 当前节点唯一标识\n   * @param newData 待添加的新节点\n   */\n  appendTo(key: string | number, newData: T, dataSource: T[], keys: KeysType): T[] {\n    const state = this.treeDataMap.get(key);\n    if (!state) {\n      console.warn(`TDesign Table Warn: ${key} is not exist.`);\n      return;\n    }\n    const newRowValue = get(newData, keys.rowKey);\n    if (this.treeDataMap.get(newRowValue)) {\n      console.warn(`TDesign Table Warn: Duplicated Key. ${newRowValue} is already exists.`);\n      return;\n    }\n    const children: T[] = get(state.row, keys.childrenKey);\n    // 子节点不存在，则表示为叶子节点\n    const isShowNewNode = state.expanded || !children?.length;\n    const newState = {\n      row: newData,\n      level: state.level + 1,\n      parent: state,\n      path: [...state.path],\n      expanded: false,\n      expandChildrenLength: 0,\n      rowIndex: isShowNewNode\n        ? state.rowIndex + (state.expandChildrenLength || 0) + 1\n        : -1,\n    };\n    newState.path = newState.path.concat(newState);\n    if (children?.length) {\n      state.row[keys.childrenKey].push(newData);\n    } else {\n      // @ts-ignore\n      state.row[keys.childrenKey] = [newData];\n      state.expanded = true;\n    }\n    this.treeDataMap.set(newRowValue, newState);\n    // 如果当前节点为展开状态，则需要继续处理\n    if (isShowNewNode) {\n      dataSource.splice(newState.rowIndex, 0, newData);\n      // 更新展开子节点数量\n      updateRowExpandLength(this.treeDataMap, state.row, 1, 'insert', {\n        rowKey: keys.rowKey,\n        childrenKey: keys.childrenKey,\n      });\n      // 更新 rowIndex 之后的下标\n      updateRowIndex(this.treeDataMap, dataSource, {\n        minRowIndex: newState.rowIndex,\n        rowKey: keys.rowKey,\n      });\n    }\n    return dataSource;\n  }\n}\n\nexport default TableTreeStore;\n\nexport function initialTreeDataMap<T extends TableRowData = TableRowData>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  column: PrimaryTableCol,\n  keys: KeysType,\n) {\n  for (let i = 0, len = dataSource.length; i < len; i++) {\n    const item = dataSource[i];\n    const rowValue = get(item, keys.rowKey);\n    const state: TableRowState = {\n      row: item,\n      rowIndex: i,\n      expanded: false,\n      level: 0,\n      expandChildrenLength: 0,\n      disabled: isRowSelectedDisabled(column, item, i),\n    };\n    state.path = [state];\n    treeDataMap.set(rowValue, state);\n    const children = get(item, keys.childrenKey);\n    if (column.colKey === 'row-select' && children?.length) {\n      initialTreeDataMap(treeDataMap, children, column, keys);\n    }\n  }\n}\n\n/**\n * 更新展开的子节点数量\n * @param rowSate 行数据和状态\n * @param distance 需要调整的展开子节点长度数量，展开时增加，收起时减少。值为负数，表示减\n * @param expanded 展开/收起\n */\nexport function updateRowExpandLength(\n  treeDataMap: TableTreeDataMap,\n  row: TableRowData,\n  distance: number,\n  type: 'expand' | 'fold' | 'delete' | 'insert',\n  keys: KeysType,\n) {\n  let tmp = row;\n  while (tmp) {\n    const state = treeDataMap.get(get(tmp, keys.rowKey));\n    const expandLen = (state.expandChildrenLength || 0) + distance;\n    state.expandChildrenLength = Math.max(0, expandLen);\n    tmp = state?.parent?.row;\n  }\n  // 如果是收起状态，子节点需全部收起，清空子节点展开行数量，设置 expandChildrenLength 为 0\n  if (type === 'fold') {\n    clearRowExpandLength(treeDataMap, row, keys);\n  }\n}\n\nexport function clearRowExpandLength<T>(treeDataMap: TableTreeDataMap, row: T, keys: KeysType) {\n  const children = get(row, keys.childrenKey);\n  if (children?.length) {\n    children.forEach((item: T[]) => {\n      const state = treeDataMap.get(get(item, keys.rowKey));\n      if (!state) return;\n      state.expandChildrenLength = 0;\n      clearRowExpandLength(treeDataMap, state.row, keys);\n    });\n  }\n}\n\n/**\n * 更新子节点行状态，行数据、父节点、层级、路径等数据\n * @param rowState 行状态数据\n * @param expanded 展开或收起\n * @param keys\n */\nexport function updateChildrenRowState<T>(\n  treeDataMap: TableTreeDataMap,\n  rowState: TableRowState<T>,\n  expanded: boolean,\n  keys: KeysType,\n) {\n  const { row, level = 0, rowIndex } = rowState;\n  const childrenNodes = get(row, keys.childrenKey);\n  childrenNodes.forEach((item: T, kidRowIndex: number) => {\n    const rowValue = get(item, keys.rowKey);\n    const index = expanded ? (rowIndex + 1) + kidRowIndex : -1;\n    const curState = treeDataMap.get(rowValue);\n    const newState: TableRowState<T> = {\n      ...curState,\n      row: item,\n      rowIndex: index,\n      expanded: false,\n      parent: rowState,\n      level: level + 1,\n      path: [],\n    };\n    newState.path = newState.path.concat(newState);\n    treeDataMap.set(rowValue, newState);\n    // 父节点展开，子节点不一定展开；父节点收起，则所有子节点收起\n    if (!expanded) {\n      const children = get(item, keys.childrenKey);\n      if (children?.length) {\n        updateChildrenRowState(treeDataMap, {\n          ...newState,\n          rowIndex: -1,\n          expanded: false,\n        } as any, expanded, keys);\n      }\n    }\n  });\n}\n\nexport function updateRowData<T extends TableRowData = TableRowData>(\n  data: T[],\n  key: string | number,\n  newData: T,\n  keys: KeysType,\n) {\n  for (let i = 0, len = data.length; i < len; i++) {\n    const item = data[i];\n    if (get(item, keys.rowKey) === key) {\n      // eslint-disable-next-line no-param-reassign\n      data[i] = newData;\n      return;\n    }\n    const children: T[] = get(item, keys.childrenKey) || [];\n    if (children?.length) {\n      updateRowData(children, key, newData, keys);\n    }\n  }\n}\n\nexport function updateRowIndex<T>(\n  treeDataMap: TableTreeDataMap,\n  dataSource: T[],\n  extra: { rowKey: string, minRowIndex?: number, maxRowIndex?: number, },\n) {\n  const start = extra.minRowIndex || 0;\n  const end = extra.maxRowIndex || dataSource.length;\n  for (let rowIndex = start; rowIndex < end; rowIndex++) {\n    const item = dataSource[rowIndex];\n    const state = treeDataMap.get(get(item, extra.rowKey));\n    state.rowIndex = rowIndex;\n  }\n}\n"],"names":["TableTreeStore","Map","treeDataMap","dataSource","columns","keys","clear","initialTreeDataMap","p","dataSouce","rowValue","get","row","rowKey","r","rowIndex","expanded","set","updateExpandRow","changeRow","childrenNodes","childrenKey","updateChildrenRowState","updateRowExpandLength","length","splice","apply","concat","len","expandChildrenLength","updateRowIndex","minRowIndex","key","newRowData","newKey","rowState","updateRowData","currentRowIndex","parent","siblings","index","findIndex","item","removeNumber","console","warn","newData","state","newRowValue","children","isShowNewNode","newState","level","path","push","column","i","disabled","isRowSelectedDisabled","colKey","distance","type","tmp","expandLen","Math","max","clearRowExpandLength","forEach","kidRowIndex","curState","data","extra","start","end","maxRowIndex"],"mappings":"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"}