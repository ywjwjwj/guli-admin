{"version":3,"file":"tree.js","sources":["../../../src/table/enhanced-table/tree.tsx"],"sourcesContent":["import Vue from 'vue';\nimport { AddRectangleIcon, MinusRectangleIcon } from 'tdesign-icons-vue';\nimport get from 'lodash/get';\nimport cloneDeep from 'lodash/cloneDeep';\nimport baseTableProps from '../base-table-props';\nimport primaryTableProps from '../primary-table-props';\nimport enhancedTableProps from '../enhanced-table-props';\nimport {\n  TdPrimaryTableProps, TableRowState, TableRowValue, PrimaryTableCellParams, TableRowData,\n} from '../type';\nimport { getCell } from '../util/common';\nimport TableTreeStore, { KeysType } from './tree-store';\nimport { prefix } from '../../config';\n\nexport default Vue.extend({\n  props: {\n    rowKey: baseTableProps.rowKey,\n    data: baseTableProps.data,\n    columns: primaryTableProps.columns,\n    tree: enhancedTableProps.tree,\n  },\n\n  data() {\n    return {\n      store: new TableTreeStore() as InstanceType<typeof TableTreeStore>,\n      dataSource: [],\n    };\n  },\n\n  computed: {\n    rowDataKeys(): KeysType {\n      return {\n        rowKey: this.rowKey,\n        childrenKey: this.childrenKey,\n      };\n    },\n    childrenKey(): string {\n      return this.tree?.childrenKey || 'children';\n    },\n    columnsSource(): TdPrimaryTableProps['columns'] {\n      let treeNodeColumnIndex = this.tree?.treeNodeColumnIndex || 0;\n      // type 存在，则表示表格内部渲染的特殊列，比如：展开行按钮、复选框、单选按钮等，不能作为树结点列。因此树结点展开列向后顺移一位\n      if (this.columns[treeNodeColumnIndex]?.type) {\n        treeNodeColumnIndex += 1;\n      }\n      const cols = [...this.columns];\n      const treeNodeCol = { ...this.columns[treeNodeColumnIndex] };\n      // 定义树节点列\n      treeNodeCol.cell = (h, p) => {\n        const cellInfo = getCell(this, { ...p, col: this.columns[treeNodeColumnIndex] });\n        const currentState = this.store.treeDataMap.get(get(p.row, this.rowKey));\n        const colStyle = this.getTreeNodeStyle(currentState?.level);\n        const childrenNodes = get(p.row, this.childrenKey);\n        if (childrenNodes && childrenNodes instanceof Array) {\n          const IconNode = this.store.treeDataMap.get(get(p.row, this.rowKey))?.expanded\n            ? MinusRectangleIcon\n            : AddRectangleIcon;\n          return (\n            <div class={`${prefix}-table__tree-col`} style={colStyle}>\n              {!!childrenNodes.length && (\n                <IconNode style={{ marginRight: '8px' }} onClick={() => this.toggleExpandData(p)} />\n              )}\n              {cellInfo}\n            </div>\n          );\n        }\n        return <div style={colStyle}>{cellInfo}</div>;\n      };\n      // 树形节点 hover 不需要显示操作符号 [+] 和 [-]\n      if (treeNodeCol.ellipsis === true) {\n        treeNodeCol.ellipsis = (h, p) => getCell(this, { ...p, col: this.columns[treeNodeColumnIndex] });\n      }\n      cols[treeNodeColumnIndex] = treeNodeCol;\n      return cols;\n    },\n  },\n\n  watch: {\n    data: {\n      immediate: true,\n      handler(val) {\n        this.dataSource = [...cloneDeep(val)];\n        this.store.initialTreeStore(this.dataSource, this.columns, this.rowDataKeys);\n      },\n    },\n  },\n\n  destroyed() {\n    this.store.treeDataMap?.clear();\n    this.store = null;\n  },\n\n  methods: {\n    getTreeNodeStyle(level: number) {\n      if (!level) return;\n      const indent = this.tree?.indent || 24;\n      return { paddingLeft: `${level * indent}px` };\n    },\n\n    toggleExpandData(p: PrimaryTableCellParams<TableRowData>) {\n      this.store.toggleExpandData(p, this.dataSource, this.rowDataKeys);\n    },\n\n    /**\n     * 组件实例方法，设置行数据，自动刷新界面\n     * @param key 当前行唯一标识值\n     * @param newRowData 新行数据\n     */\n    setData<T>(key: TableRowValue, newRowData: T) {\n      const rowIndex = this.store.updateData(key, newRowData, this.dataSource, this.rowDataKeys);\n      this.$set(this.dataSource, rowIndex, newRowData);\n    },\n\n    /**\n     * 组件实例方法，获取当前行全部数据\n     * @param key 行唯一标识\n     * @returns {TableRowState} 当前行数据\n     */\n    getData(key: TableRowValue): TableRowState {\n      return this.store.getData(key);\n    },\n\n    /**\n     * 组件实例方法，移除指定节点\n     * @param key 行唯一标识\n     */\n    remove(key: TableRowValue) {\n      // 引用传值，可自动更新 this.dataSource\n      this.store.remove(key, this.dataSource, this.rowDataKeys);\n    },\n\n    /**\n     * 为当前节点添加子节点，默认添加到最后一个节点\n     * @param key 当前节点唯一标识\n     * @param newData 待添加的新节点\n     */\n    appendTo<T>(key: TableRowValue, newData: T) {\n      // 引用传值，可自动更新 this.dataSource\n      this.store.appendTo(key, newData, this.dataSource, this.rowDataKeys);\n    },\n  },\n});\n"],"names":["Vue","extend","props","rowKey","baseTableProps","data","columns","primaryTableProps","tree","enhancedTableProps","store","TableTreeStore","dataSource","computed","rowDataKeys","childrenKey","columnsSource","treeNodeColumnIndex","type","cols","treeNodeCol","cell","h","p","cellInfo","getCell","col","currentState","treeDataMap","get","row","colStyle","getTreeNodeStyle","level","childrenNodes","Array","IconNode","expanded","MinusRectangleIcon","AddRectangleIcon","prefix","length","marginRight","toggleExpandData","ellipsis","watch","immediate","handler","val","cloneDeep","initialTreeStore","destroyed","clear","methods","indent","paddingLeft","setData","key","newRowData","rowIndex","updateData","$set","getData","remove","appendTo","newData"],"mappings":"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"}