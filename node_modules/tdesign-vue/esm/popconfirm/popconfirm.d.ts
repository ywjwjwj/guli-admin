import Vue from 'vue';
import { PopconfirmConfig } from '../config-provider/config-receiver';
import { PopconfirmVisibleChangeContext } from './type';
declare const _default: import("vue/types/vue").ExtendedVue<{
    getConfirmBtn(options: import("../dialog/actions").MixinsConfirmBtn): any;
    getCancelBtn(options: import("../dialog/actions").MixinsCancelBtn): any;
    getButtonByProps(button: string | import("..").TdButtonProps, defaultButton: import("..").TdButtonProps, className?: import("../common").ClassName): JSX.Element;
    confirmBtnAction(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    getDefaultConfrimBtnProps(options: import("../dialog/actions").MixinsConfirmBtn): import("..").TdButtonProps;
    getDefaultCancelBtnProps(options: import("../dialog/actions").MixinsCancelBtn): import("..").TdButtonProps;
} & Record<never, any> & Vue & {
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: PopconfirmConfig;
} & import("../config-provider/config-receiver").ConfigComponent, {
    name: string;
    popupName: string;
}, {
    cancelBtnAction(e: MouseEvent): void;
    confirmBtnAction(e: MouseEvent): void;
    renderIcon(): any;
    onPopupVisibleChange(val: boolean, context: PopconfirmVisibleChangeContext): void;
}, {
    themeIcon: import("vue/types/vue").ExtendedVue<Vue, {}, {}, {}, import("tdesign-icons-vue/lib/utils/types").IconProps>;
    iconCls: string;
    innerPopupProps: import("../popup/type").TdPopupProps;
}, {
    cancelBtn: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | import("..").TdButtonProps;
    confirmBtn: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | import("..").TdButtonProps;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    destroyOnClose: boolean;
    icon: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    popupProps: import("../popup/type").TdPopupProps;
    showArrow: boolean;
    theme: "default" | "danger" | "warning";
    triggerElement: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    visible: boolean;
    defaultVisible: boolean;
    onCancel: (options: {
        e: MouseEvent;
    }) => void;
    onConfirm: (options: {
        e: MouseEvent;
    }) => void;
    onVisibleChange: (visible: boolean, context?: PopconfirmVisibleChangeContext) => void;
}>;
export default _default;
