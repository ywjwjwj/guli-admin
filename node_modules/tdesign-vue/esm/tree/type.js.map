{"version":3,"file":"type.js","sources":["../../src/tree/type.ts"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * updated at 2021-12-08 14:17:11\n * */\n\nimport { CheckboxProps } from '../checkbox';\nimport { TNode, TreeOptionData } from '../common';\n\nexport interface TdTreeProps<T extends TreeOptionData = TreeOptionData> {\n  /**\n   * 节点是否可高亮\n   * @default false\n   */\n  activable?: boolean;\n  /**\n   * 高亮的节点值\n   */\n  actived?: Array<TreeNodeValue>;\n  /**\n   * 高亮的节点值，非受控属性\n   */\n  defaultActived?: Array<TreeNodeValue>;\n  /**\n   * 是否允许多个节点同时高亮\n   * @default false\n   */\n  activeMultiple?: boolean;\n  /**\n   * 隐藏节点复选框\n   * @default false\n   */\n  checkable?: boolean;\n  /**\n   * 透传属性到 checkbox 组件。参考 checkbox 组件 API\n   */\n  checkProps?: CheckboxProps;\n  /**\n   * 父子节点选中状态不再关联，可各自选中或取消\n   * @default false\n   */\n  checkStrictly?: boolean;\n  /**\n   * 树数据，泛型 `T` 表示树节点 TS 类型\n   * @default []\n   */\n  data?: Array<T>;\n  /**\n   * 禁用复选框，可支持禁用不同的行\n   * @default false\n   */\n  disableCheck?: boolean | ((node: TreeNodeModel) => boolean);\n  /**\n   * 是否禁用树操作\n   */\n  disabled?: boolean;\n  /**\n   * 数据为空时展示的文本\n   * @default ''\n   */\n  empty?: string | TNode;\n  /**\n   * 是否展开全部节点\n   * @default false\n   */\n  expandAll?: boolean;\n  /**\n   * 展开的节点值\n   * @default []\n   */\n  expanded?: Array<TreeNodeValue>;\n  /**\n   * 展开的节点值，非受控属性\n   * @default []\n   */\n  defaultExpanded?: Array<TreeNodeValue>;\n  /**\n   * 默认展开的级别，第一层为 0\n   * @default 0\n   */\n  expandLevel?: number;\n  /**\n   * 同级别展开互斥，手风琴效果\n   * @default false\n   */\n  expandMutex?: boolean;\n  /**\n   * 是否支持点击节点也能展开收起\n   * @default false\n   */\n  expandOnClickNode?: boolean;\n  /**\n   * 展开子节点时是否自动展开父节点\n   * @default false\n   */\n  expandParent?: boolean;\n  /**\n   * 节点过滤方法，只呈现返回值为 true 的节点，泛型 `T` 表示树节点 TS 类型\n   */\n  filter?: (node: TreeNodeModel<T>) => boolean;\n  /**\n   * 节点是否有悬浮状态\n   */\n  hover?: boolean;\n  /**\n   * 节点图标，可自定义\n   * @default true\n   */\n  icon?: boolean | TNode<TreeNodeModel>;\n  /**\n   * 用来定义 value / label / children 在 `options` 中对应的字段别名\n   */\n  keys?: TreeKeysType;\n  /**\n   * 自定义节点内容，值为 false 不显示，值为 true 显示默认 label，值为字符串直接输出该字符串。泛型 `T` 表示树节点 TS 类型\n   * @default true\n   */\n  label?: string | boolean | TNode<TreeNodeModel<T>>;\n  /**\n   * 延迟加载 children 为 true 的节点的子节点数据，即使 expandAll 被设置为 true，也同样延迟加载\n   * @default true\n   */\n  lazy?: boolean;\n  /**\n   * 连接线。值为 false 不显示连接线；值为 true 显示默认连接线；值类型为 Function 表示自定义连接线\n   * @default false\n   */\n  line?: boolean | TNode;\n  /**\n   * 加载子数据的方法，在展开节点时调用（仅当节点 children 为 true 时生效），泛型 `T` 表示树节点 TS 类型\n   */\n  load?: (node: TreeNodeModel<T>) => Promise<Array<T>>;\n  /**\n   * 自定义节点操作项，泛型 `T` 表示树节点 TS 类型\n   */\n  operations?: TNode<TreeNodeModel<T>>;\n  /**\n   * 节点展开折叠时是否使用过渡动画\n   * @default true\n   */\n  transition?: boolean;\n  /**\n   * 选中值（组件为可选状态时）\n   * @default []\n   */\n  value?: Array<TreeNodeValue>;\n  /**\n   * 选中值（组件为可选状态时），非受控属性\n   * @default []\n   */\n  defaultValue?: Array<TreeNodeValue>;\n  /**\n   * 选中值模式。all 表示父节点和子节点全部会出现在选中值里面；parentFirst 表示当子节点全部选中时，仅父节点在选中值里面；onlyLeaft 表示无论什么情况，选中值仅呈现叶子节点\n   * @default onlyLeaf\n   */\n  valueMode?: 'onlyLeaf' | 'parentFirst' | 'all';\n  /**\n   * 节点激活时触发，泛型 `T` 表示树节点 TS 类型\n   */\n  onActive?: (value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T> }) => void;\n  /**\n   * 节点选中状态变化时触发，context.node 表示当前变化的选项，泛型 `T` 表示树节点 TS 类型\n   */\n  onChange?: (value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T> }) => void;\n  /**\n   * 节点点击时触发，泛型 `T` 表示树节点 TS 类型\n   */\n  onClick?: (context: { node: TreeNodeModel<T>; e: MouseEvent }) => void;\n  /**\n   * 节点展开或收起时触发，泛型 `T` 表示树节点 TS 类型\n   */\n  onExpand?: (value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T>; e: MouseEvent }) => void;\n  /**\n   * 异步加载后触发，泛型 `T` 表示树节点 TS 类型\n   */\n  onLoad?: (context: { node: TreeNodeModel<T> }) => void;\n};\n\n/** 组件实例方法 */\nexport interface TreeInstanceFunctions<T extends TreeOptionData = TreeOptionData> {\n  /**\n   * 为指定节点添加子节点，默认添加到根节点，泛型 `T` 表示树节点 TS 类型\n   */\n  appendTo?: (value: TreeNodeValue, newData: T | Array<T>) => void;\n  /**\n   * 获取指定节点下标\n   */\n  getIndex?: (value: TreeNodeValue) => number;\n  /**\n   * 获取指定节点所有信息，泛型 `T` 表示树节点 TS 类型\n   */\n  getItem?: (value: TreeNodeValue) => TreeNodeModel<T>;\n  /**\n   * 获取某节点的全部子孙节点；参数为空，则表示获取整棵树的全部节点，泛型 `T` 表示树节点 TS 类型\n   */\n  getItems?: (value?: TreeNodeValue) => Array<TreeNodeModel<T>>;\n  /**\n   * 获取指定节点的直属父节点，泛型 `T` 表示树节点 TS 类型\n   */\n  getParent?: (value: TreeNodeValue) => TreeNodeModel<T>;\n  /**\n   * 获取指定节点的全部父节点，泛型 `T` 表示树节点 TS 类型\n   */\n  getParents?: (value: TreeNodeValue) => TreeNodeModel<T>[];\n  /**\n   * 自下而上获取全路径数据，泛型 `T` 表示树节点 TS 类型\n   */\n  getPath?: (value: TreeNodeValue) => TreeNodeModel<T>[];\n  /**\n   * 插入新节点到指定节点后面，泛型 `T` 表示树节点 TS 类型\n   */\n  insertAfter?: (value: TreeNodeValue, newData: T) => void;\n  /**\n   * 插入新节点到指定节点前面，泛型 `T` 表示树节点 TS 类型\n   */\n  insertBefore?: (value: TreeNodeValue, newData: T) => void;\n  /**\n   * 移除指定节点\n   */\n  remove?: (value: TreeNodeValue) => void;\n  /**\n   * 设置节点状态\n   */\n  setItem?: (value: TreeNodeValue, options: TreeNodeState) => void;\n}\n\nexport interface TreeNodeState {\n  /**\n   * 节点是否允许被激活\n   * @default false\n   */\n  activable?: boolean;\n  /**\n   * 节点是否被激活\n   * @default false\n   */\n  actived?: boolean;\n  /**\n   * 节点是否允许被选中\n   * @default false\n   */\n  checkable?: boolean;\n  /**\n   * 节点是否被选中\n   * @default false\n   */\n  checked?: boolean;\n  /**\n   * 节点是否被禁用\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * 节点是否已展开\n   * @default false\n   */\n  expanded?: boolean;\n  /**\n   * 子节点是否互斥展开\n   * @default false\n   */\n  expandMutex?: boolean;\n  /**\n   * 节点是否为半选中状态\n   * @default false\n   */\n  indeterminate?: boolean;\n  /**\n   * 节点标签文案\n   * @default ''\n   */\n  label?: string;\n  /**\n   * 子节点数据是否在加载中\n   * @default false\n   */\n  loading?: boolean;\n  /**\n   * 节点值\n   */\n  value?: string | number;\n  /**\n   * 节点是否可视\n   * @default false\n   */\n  visible?: boolean;\n};\n\nexport interface TreeNodeModel<T extends TreeOptionData = TreeOptionData> extends TreeNodeState {\n  /**\n   * 当前节点是否处于高亮激活态\n   */\n  actived: boolean;\n  /**\n   * 当前节点是否被选中\n   */\n  checked: boolean;\n  /**\n   * 节点数据，泛型 `T` 表示树节点 TS 类型\n   */\n  data: T;\n  /**\n   * 当前节点是否展开\n   */\n  expanded: boolean;\n  /**\n   * 当前节点是否处于半选状态\n   */\n  indeterminate: boolean;\n  /**\n   * 当前节点是否处于加载中状态\n   */\n  loading: boolean;\n  /**\n   * 追加子节点数据，泛型 `T` 表示树节点 TS 类型\n   */\n  appendData: (data: T | Array<T>) => void;\n  /**\n   * 默认获取当前节点的全部子节点，deep 值为 true 则表示获取全部子孙节点\n   */\n  getChildren: (deep: boolean) => Array<TreeNodeModel> | boolean;\n  /**\n   * 获取节点在父节点的子节点列表中的位置，如果没有父节点，则获取节点在根节点列表的位置\n   */\n  getIndex: () => number;\n  /**\n   * 获取节点所在的层级\n   */\n  getLevel: () => number;\n  /**\n   * 获取单个父节点\n   */\n  getParent: () => TreeNodeModel;\n  /**\n   * 获取所有父节点\n   */\n  getParents: () => Array<TreeNodeModel>;\n  /**\n   * 获取节点全路径\n   */\n  getPath: () => Array<TreeNodeModel>;\n  /**\n   * 获取根节点\n   */\n  getRoot: () => TreeNodeModel;\n  /**\n   * 获取兄弟节点，包含自己在内\n   */\n  getSiblings: () => Array<TreeNodeModel>;\n  /**\n   * 在当前节点前插入新节点，泛型 `T` 表示树节点 TS 类型\n   */\n  insertAfter: (newData: T) => void;\n  /**\n   * 在当前节点前插入新节点，泛型 `T` 表示树节点 TS 类型\n   */\n  insertBefore: (newData: T) => void;\n  /**\n   * 是否为兄弟节点中的第一个节点\n   */\n  isFirst: () => boolean;\n  /**\n   * 是否为兄弟节点中的最后一个节点\n   */\n  isLast: () => boolean;\n  /**\n   * 是否为叶子节点\n   */\n  isLeaf: () => boolean;\n  /**\n   * 移除当前节点或当前节点的子节点，值为空则移除当前节点，值存在则移除当前节点的子节点\n   */\n  remove: (value?: TreeNodeValue) => void;\n  /**\n   * 设置当前节点数据，数据变化可自动刷新页面，泛型 `T` 表示树节点 TS 类型\n   */\n  setData: (data: T) => void;\n};\n\nexport interface TreeKeysType { value?: string; label?: string; children?: string };\n\nexport type TreeNodeValue = string | number;\n"],"names":[],"mappings":";;;;;;AAAA,CAAA;AACA,CAAA;AACA,CAAA;AACA"}