/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import { InfoCircleFilledIcon, CheckCircleFilledIcon, ErrorCircleFilledIcon, CloseIcon } from 'tdesign-icons-vue';
import { prefix } from '../config.js';
import { on, off, addClass } from '../utils/dom.js';
import props from './props.js';
import { renderTNodeJSX } from '../utils/render-tnode.js';
import 'raf';
import 'lodash/isString';
import '../utils/easing.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/isObject';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-alert");
var _Alert = Vue.extend({
  name: "TAlert",
  data: function data() {
    return {
      visible: true,
      collapsed: true
    };
  },
  props: _objectSpread({}, props),
  render: function render() {
    var h = arguments[0];
    var compClass = [name, "".concat(name, "--").concat(this.theme), _defineProperty({}, "".concat(prefix, "-is-hidden"), !this.visible)];
    return h("div", {
      "class": compClass
    }, [this.renderIcon(), this.renderContent(), this.renderClose()]);
  },
  mounted: function mounted() {
    on(this.$el, "transitionend", this.handleCloseEnd);
  },
  beforeDestroy: function beforeDestroy() {
    off(this.$el, "transitionend", this.handleCloseEnd);
  },
  methods: {
    renderIcon: function renderIcon() {
      var h = this.$createElement;
      var iconContent;

      if (typeof this.icon === "function") {
        iconContent = this.icon(this.$createElement);
      } else if (this.$scopedSlots.icon) {
        iconContent = this.$scopedSlots.icon && this.$scopedSlots.icon(null)[0];
      } else {
        var component = {
          info: InfoCircleFilledIcon,
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: ErrorCircleFilledIcon
        }[this.theme];
        iconContent = h(component);
      }

      return iconContent ? h("div", {
        "class": "".concat(name, "__icon")
      }, [iconContent]) : null;
    },
    renderClose: function renderClose() {
      var h = this.$createElement;
      var closeContent = null;

      if (this.close === true || this.close === "") {
        closeContent = h(CloseIcon);
      } else if (typeof this.close === "string") {
        closeContent = this.close;
      } else if (typeof this.close === "function") {
        closeContent = this.close(this.$createElement);
      } else {
        closeContent = this.$scopedSlots.close && this.$scopedSlots.close(null)[0];
      }

      return closeContent ? h("div", {
        "class": "".concat(name, "__close"),
        "on": {
          "click": this.handleClose
        }
      }, [closeContent]) : null;
    },
    renderContent: function renderContent() {
      var h = this.$createElement;
      return h("div", {
        "class": "".concat(name, "__content")
      }, [this.renderTitle(), this.renderMessage()]);
    },
    renderTitle: function renderTitle() {
      var h = this.$createElement;
      var titleContent = renderTNodeJSX(this, "title");
      return titleContent ? h("div", {
        "class": "".concat(name, "__title")
      }, [" ", titleContent]) : null;
    },
    renderMessage: function renderMessage() {
      var h = this.$createElement;
      var operationContent = renderTNodeJSX(this, "operation");
      return h("div", {
        "class": "".concat(name, "__message")
      }, [this.renderDescription(), operationContent ? h("div", {
        "class": "".concat(name, "__operation")
      }, [operationContent]) : null]);
    },
    renderDescription: function renderDescription() {
      var _this = this;

      var h = this.$createElement;
      var messageContent;
      messageContent = renderTNodeJSX(this, "default");

      if (!messageContent) {
        messageContent = renderTNodeJSX(this, "message");
      }

      var contentLength = Object.prototype.toString.call(messageContent) === "[object Array]" ? messageContent.length : 1;
      var hasCollapse = this.maxLine > 0 && this.maxLine < contentLength;

      if (hasCollapse && this.collapsed) {
        messageContent = messageContent.slice(0, this.maxLine);
      }

      return h("div", {
        "class": "".concat(name, "__description")
      }, [hasCollapse ? messageContent.map(function (content) {
        return h("div", [content]);
      }) : messageContent, hasCollapse ? h("div", {
        "class": "".concat(name, "__collapse"),
        "on": {
          "click": function click() {
            _this.collapsed = !_this.collapsed;
          }
        }
      }, [this.collapsed ? "\u5C55\u5F00\u5168\u90E8" : "\u6536\u8D77"]) : null]);
    },
    handleClose: function handleClose(e) {
      this.$emit("close", {
        e: e
      });

      if (this.onClose) {
        this.onClose({
          e: e
        });
      }

      addClass(this.$el, "".concat(name, "--closing"));
    },
    handleCloseEnd: function handleCloseEnd(e) {
      if (e.propertyName === "opacity") {
        this.visible = false;
        this.$emit("closed", {
          e: e
        });

        if (this.onClosed) {
          this.onClosed({
            e: e
          });
        }
      }
    }
  }
});

export { _Alert as default };
//# sourceMappingURL=alert.js.map
