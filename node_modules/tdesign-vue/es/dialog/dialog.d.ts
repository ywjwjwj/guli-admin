import Vue from 'vue';
import { DialogCloseContext } from './type';
import { DialogConfig } from '../config-provider/config-receiver';
import { ClassName, Styles } from '../common';
declare const _default: import("vue/types/vue").ExtendedVue<{
    getConfirmBtn(options: import("./actions").MixinsConfirmBtn): any;
    getCancelBtn(options: import("./actions").MixinsCancelBtn): any;
    getButtonByProps(button: string | import("../button").TdButtonProps, defaultButton: import("../button").TdButtonProps, className?: ClassName): JSX.Element;
    confirmBtnAction(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    getDefaultConfrimBtnProps(options: import("./actions").MixinsConfirmBtn): import("../button").TdButtonProps;
    getDefaultCancelBtnProps(options: import("./actions").MixinsCancelBtn): import("../button").TdButtonProps;
} & Record<never, any> & Vue & {
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: DialogConfig;
} & import("../config-provider/config-receiver").ConfigComponent, {
    scrollWidth: number;
    disX: number;
    disY: number;
    windowInnerWidth: number;
    windowInnerHeight: number;
    offsetX: number;
    offsetY: number;
    diaglogW: number;
    diaglogH: number;
    dLeft: number;
    dTop: number;
}, {
    addKeyboardEvent(status: boolean): void;
    keyboardEvent(e: KeyboardEvent): void;
    overlayAction(e: MouseEvent): void;
    closeBtnAcion(e: MouseEvent): void;
    cancelBtnAction(e: MouseEvent): void;
    confirmBtnAction(e: MouseEvent): void;
    afterEnter(): void;
    afterLeave(): void;
    emitCloseEvent(context: DialogCloseContext): void;
    hasEventOn(name: string): boolean;
    getIcon(): any;
    mousedownHanler(targetEvent: MouseEvent): void;
    mouseMoverHander(documentEvent: MouseEvent): void;
    mouseUpHandler(): void;
    initDragEvent(status: boolean): void;
    getTranslateXY(target: HTMLElement): number[];
    resizeAdjustPosition(): void;
    renderDialog(): JSX.Element;
}, {
    isModal: boolean;
    isModeless: boolean;
    maskClass: ClassName;
    dialogClass: ClassName;
    dialogStyle: Styles;
}, {
    attach: import("../common").AttachNode;
    body: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    cancelBtn: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | import("../button").TdButtonProps;
    closeBtn: string | boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    closeOnEscKeydown: boolean;
    closeOnOverlayClick: boolean;
    confirmBtn: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | import("../button").TdButtonProps;
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    destroyOnClose: boolean;
    draggable: boolean;
    footer: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    header: string | boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    mode: "normal" | "modal" | "modeless";
    placement: "center" | "top";
    preventScrollThrough: boolean;
    showOverlay: boolean;
    theme: "default" | "success" | "danger" | "warning" | "info";
    top: string | number;
    visible: boolean;
    width: string | number;
    zIndex: number;
    onCancel: (context: {
        e: MouseEvent;
    }) => void;
    onClose: (context: DialogCloseContext) => void;
    onCloseBtnClick: (context: {
        e: MouseEvent;
    }) => void;
    onClosed: () => void;
    onConfirm: (context: {
        e: MouseEvent;
    }) => void;
    onEscKeydown: (context: {
        e: KeyboardEvent;
    }) => void;
    onOpened: () => void;
    onOverlayClick: (context: {
        e: MouseEvent;
    }) => void;
}>;
export default _default;
