import Vue, { CreateElement } from 'vue';
import { InputValue } from './type';
import { InputConfig } from '../config-provider/config-receiver';
import { ClassName } from '../common';
interface InputInstance extends Vue {
    composing: boolean;
}
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: InputConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & InputInstance & Vue, {
    formDisabled: any;
    isHover: boolean;
    focused: boolean;
    renderType: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
    inputValue: InputValue;
}, {
    addListenders(): void;
    mouseEvent(v: boolean): void;
    renderIcon(h: CreateElement, icon: string | Function | undefined, iconType: 'prefix-icon' | 'suffix-icon'): any;
    setInputValue(v?: InputValue): void;
    focus(): void;
    blur(): void;
    handleInput(e: InputEvent): void;
    handleKeydown(e: KeyboardEvent): void;
    handleKeyUp(e: KeyboardEvent): void;
    handleKeypress(e: KeyboardEvent): void;
    onHandlePaste(e: ClipboardEvent): void;
    onHandleMousewheel(e: WheelEvent): void;
    emitPassword(): void;
    emitClear(e: MouseEvent): void;
    emitFocus(e: FocusEvent): void;
    formatAndEmitBlur(e: FocusEvent): void;
    compositionendHandler(e: InputEvent): void;
    onRootClick(e: MouseEvent): void;
    inputValueChangeHandle(e: InputEvent): void;
    onInputMouseenter(e: MouseEvent): void;
    onInputMouseleave(e: MouseEvent): void;
    updateInputWidth(): void;
}, {
    tDisabled: boolean;
    tPlaceholder: string;
    showClear: boolean;
    inputAttrs: Record<string, any>;
    inputClasses: ClassName;
}, {
    align: "center" | "left" | "right";
    autocomplete: string;
    autofocus: boolean;
    autoWidth: boolean;
    clearable: boolean;
    disabled: boolean;
    format: (value: InputValue) => string | number;
    inputClass: ClassName;
    label: string | ((h: CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    maxcharacter: number;
    maxlength: number;
    name: string;
    placeholder: any;
    prefixIcon: (h: CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    readonly: boolean;
    showClearIconOnEmpty: boolean;
    size: import("../common").SizeEnum;
    status: "error" | "success" | "warning";
    suffix: string | ((h: CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon: (h: CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips: string | ((h: CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    type: "number" | "search" | "password" | "url" | "hidden" | "text" | "submit" | "tel";
    value: InputValue;
    defaultValue: InputValue;
    onBlur: (value: InputValue, context: {
        e: FocusEvent;
    }) => void;
    onChange: (value: InputValue, context?: {
        e?: MouseEvent | InputEvent;
    }) => void;
    onClear: (context: {
        e: MouseEvent;
    }) => void;
    onCompositionend: (value: InputValue, context: {
        e: CompositionEvent;
    }) => void;
    onCompositionstart: (value: InputValue, context: {
        e: CompositionEvent;
    }) => void;
    onEnter: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onFocus: (value: InputValue, context: {
        e: FocusEvent;
    }) => void;
    onKeydown: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onKeypress: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onKeyup: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onMouseenter: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave: (context: {
        e: MouseEvent;
    }) => void;
    onPaste: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    onWheel: (context: {
        e: WheelEvent;
    }) => void;
}>;
export default _default;
