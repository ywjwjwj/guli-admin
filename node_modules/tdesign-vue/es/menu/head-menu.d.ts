import { MenuValue } from './type';
declare const _default: import("vue").ComponentOptions<import("vue").default, import("@vue/composition-api").ShallowUnwrapRef<{
    mode: import("@vue/composition-api").Ref<"normal" | "popup">;
    menuClass: import("@vue/composition-api").ComputedRef<string[]>;
    expandValues: import("@vue/composition-api").Ref<MenuValue[]>;
    activeValue: import("@vue/composition-api").Ref<MenuValue>;
    activeValues: import("@vue/composition-api").Ref<any[]>;
    submenu: any[];
    handleTabChange: (value: MenuValue) => void;
}> & import("@vue/composition-api").Data, {
    renderNormalSubmenu(): JSX.Element;
}, {}, {
    expanded: {
        type: import("vue").PropType<MenuValue[]>;
    };
    defaultExpanded: {
        type: import("vue").PropType<MenuValue[]>;
    };
    expandType: {
        type: import("vue").PropType<"normal" | "popup">;
        default: "normal" | "popup";
        validator(val: "normal" | "popup"): boolean;
    };
    logo: {
        type: import("vue").PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    operations: {
        type: import("vue").PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    theme: {
        type: import("vue").PropType<"dark" | "light">;
        default: "dark" | "light";
        validator(val: "dark" | "light"): boolean;
    };
    value: {
        type: import("vue").PropType<MenuValue>;
    };
    defaultValue: {
        type: import("vue").PropType<MenuValue>;
    };
    onChange: import("vue").PropType<(value: MenuValue) => void>;
    onExpand: import("vue").PropType<(value: MenuValue[]) => void>;
}, {
    theme: "dark" | "light";
    expandType: "normal" | "popup";
} & {
    value?: MenuValue;
    expanded?: MenuValue[];
    onChange?: (value: MenuValue) => void;
    defaultValue?: MenuValue;
    defaultExpanded?: MenuValue[];
    logo?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    operations?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    onExpand?: (value: MenuValue[]) => void;
}> & Omit<import("vue").VueConstructor<import("vue").default>, never> & (new (...args: any[]) => import("@vue/composition-api").ComponentRenderProxy<{
    theme: "dark" | "light";
    expandType: "normal" | "popup";
} & {
    value?: MenuValue;
    expanded?: MenuValue[];
    onChange?: (value: MenuValue) => void;
    defaultValue?: MenuValue;
    defaultExpanded?: MenuValue[];
    logo?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    operations?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    onExpand?: (value: MenuValue[]) => void;
}, import("@vue/composition-api").ShallowUnwrapRef<{
    mode: import("@vue/composition-api").Ref<"normal" | "popup">;
    menuClass: import("@vue/composition-api").ComputedRef<string[]>;
    expandValues: import("@vue/composition-api").Ref<MenuValue[]>;
    activeValue: import("@vue/composition-api").Ref<MenuValue>;
    activeValues: import("@vue/composition-api").Ref<any[]>;
    submenu: any[];
    handleTabChange: (value: MenuValue) => void;
}>, import("@vue/composition-api").Data, {}, {
    renderNormalSubmenu(): JSX.Element;
}, {}, {}, {}, {
    theme: "dark" | "light";
    expandType: "normal" | "popup";
} & {
    value?: MenuValue;
    expanded?: MenuValue[];
    onChange?: (value: MenuValue) => void;
    defaultValue?: MenuValue;
    defaultExpanded?: MenuValue[];
    logo?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    operations?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    onExpand?: (value: MenuValue[]) => void;
}, {
    theme: "dark" | "light";
    expandType: "normal" | "popup";
}, true>);
export default _default;
