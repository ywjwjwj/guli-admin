import Vue from 'vue';
import { PopupProps, PopupVisibleChangeContext } from '../popup';
import { ClassName } from '../common';
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    timer: any;
    tooltipVisible: boolean;
}, {
    onTipVisibleChange(val: boolean, ctx?: PopupVisibleChangeContext): void;
    getPopupProps(): PopupProps;
    updatedTooltip(): void;
}, {
    tooltipOverlayClassName: ClassName;
}, {
    destroyOnClose: boolean;
    duration: number;
    showArrow: boolean;
    theme: "default" | "success" | "primary" | "danger" | "warning" | "light";
    attach: import("../common").AttachNode;
    content: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    default: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    disabled: boolean;
    hideEmptyPopup: boolean;
    overlayClassName: ClassName;
    overlayStyle: import("../common").Styles | ((triggerElement: HTMLElement, popupElement: HTMLElement) => import("../common").Styles);
    placement: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
    trigger: "click" | "focus" | "hover" | "context-menu";
    triggerElement: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    visible: boolean;
    defaultVisible: any;
    zIndex: number;
    onScroll: (context: {
        e: WheelEvent;
    }) => void;
    onVisibleChange: (visible: boolean, context: PopupVisibleChangeContext) => void;
}>;
export default _default;
