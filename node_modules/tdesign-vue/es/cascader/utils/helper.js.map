{"version":3,"file":"helper.js","sources":["../../../src/cascader/utils/helper.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport {\n  TreeNode,\n  CascaderContextType,\n  CascaderProps,\n  CascaderValue,\n  TreeNodeValue,\n  TreeOptionData,\n} from '../interface';\n\n/**\n * 获取node的全部路径\n * @param node\n * @returns\n */\nexport function getFullPathLabel(node: TreeNode) {\n  return node\n    .getPath()\n    .map((node: TreeNode) => node.label)\n    .join('/');\n}\n\n/**\n * treeValue计算方法\n * @param value\n * @returns\n */\nexport const getTreeValue = (value: CascaderContextType['value']) => {\n  let treeValue: TreeNodeValue[] = [];\n  if (Array.isArray(value)) {\n    if (value.length > 0 && typeof value[0] === 'object') {\n      treeValue = (value as TreeOptionData[]).map((val) => val.value);\n    } else if (value.length) {\n      treeValue = value as TreeNodeValue[];\n    }\n  } else if (value) {\n    if (typeof value === 'object') {\n      treeValue = [(value as TreeOptionData).value];\n    } else {\n      treeValue = [value];\n    }\n  }\n  return treeValue;\n};\n\n/**\n * 计算数值\n * @param value\n * @param showAllLevels\n * @param multiple\n * @returns\n */\nexport const getValue = (value: CascaderValue, valueType: CascaderProps['valueType'], multiple: boolean) => {\n  if (valueType === 'single') {\n    return value;\n  }\n  if (multiple) {\n    return (value as Array<CascaderValue>).map((item: TreeNodeValue[]) => item[item.length - 1]);\n  }\n  return value[(value as Array<CascaderValue>).length - 1];\n};\n\n/**\n * 空值校验\n * 补充value为Number时的空值校验逻辑，排除NaN\n * @param value\n * @returns\n */\nexport function isEmptyValues(value: unknown): boolean {\n  if (typeof value === 'number' && !isNaN(value)) return false;\n  return isEmpty(value);\n}\n\nexport default {\n  getFullPathLabel,\n};\n"],"names":["getFullPathLabel","node","getPath","map","node2","label","join","getTreeValue","value","treeValue","Array","isArray","length","val","getValue","valueType","multiple","item","isEmptyValues","isNaN","isEmpty"],"mappings":";;;;;;;;;AACO,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AACrC,EAAA,OAAOA,IAAI,CAACC,OAAL,GAAeC,GAAf,CAAmB,UAACC,KAAD,EAAA;AAAA,IAAWA,OAAAA,KAAK,CAACC,KAAjB,CAAA;AAAA,GAAnB,CAA2CC,CAAAA,IAA3C,CAAgD,GAAhD,CAAP,CAAA;AACD,CAAA;IACYC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AACrC,EAAIC,IAAAA,SAAS,GAAG,EAAhB,CAAA;;AACA,EAAA,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxB,IAAA,IAAIA,KAAK,CAACI,MAAN,GAAe,CAAf,IAAoB,OAAOJ,CAAAA,KAAK,CAAC,CAAD,CAAZ,CAAA,KAAoB,QAA5C,EAAsD;AACpDC,MAAAA,SAAS,GAAGD,KAAK,CAACL,GAAN,CAAU,UAACU,GAAD,EAAA;AAAA,QAASA,OAAAA,GAAG,CAACL,KAAb,CAAA;AAAA,OAAV,CAAZ,CAAA;AACD,KAFD,MAEO,IAAIA,KAAK,CAACI,MAAV,EAAkB;AACvBH,MAAAA,SAAS,GAAGD,KAAZ,CAAA;AACD,KAAA;AACF,GAND,MAMO,IAAIA,KAAJ,EAAW;AAChB,IAAA,IAAI,OAAOA,CAAAA,KAAP,CAAiB,KAAA,QAArB,EAA+B;AAC7BC,MAAAA,SAAS,GAAG,CAACD,KAAK,CAACA,KAAP,CAAZ,CAAA;AACD,KAFD,MAEO;AACLC,MAAAA,SAAS,GAAG,CAACD,KAAD,CAAZ,CAAA;AACD,KAAA;AACF,GAAA;;AACD,EAAA,OAAOC,SAAP,CAAA;AACD,EAhBM;AAiBA,IAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACN,KAAD,EAAQO,SAAR,EAAmBC,QAAnB,EAAgC;AACtD,EAAID,IAAAA,SAAS,KAAK,QAAlB,EAA4B;AAC1B,IAAA,OAAOP,KAAP,CAAA;AACD,GAAA;;AACD,EAAA,IAAIQ,QAAJ,EAAc;AACZ,IAAA,OAAOR,KAAK,CAACL,GAAN,CAAU,UAACc,IAAD,EAAA;AAAA,MAAA,OAAUA,IAAI,CAACA,IAAI,CAACL,MAAL,GAAc,CAAf,CAAd,CAAA;AAAA,KAAV,CAAP,CAAA;AACD,GAAA;;AACD,EAAA,OAAOJ,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAAZ,CAAA;AACD,EARM;AASA,SAASM,aAAT,CAAuBV,KAAvB,EAA8B;AACnC,EAAA,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACW,KAAK,CAACX,KAAD,CAAvC,EACE,OAAO,KAAP,CAAA;AACF,EAAOY,OAAAA,OAAO,CAACZ,KAAD,CAAd,CAAA;AACD,CAAA;AACD,aAAe;AACbR,EAAAA,gBAAgB,EAAhBA,gBAAAA;AADa,CAAf;;;;"}