{"version":3,"file":"cascader.js","sources":["../../src/cascader/cascader.tsx"],"sourcesContent":["import Vue, { VNode } from 'vue';\n\n// utils\nimport isEqual from 'lodash/isEqual';\nimport { prefix } from '../config';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport { emitEvent } from '../utils/event';\nimport { getPropsApiByEvent } from '../utils/helper';\nimport { getTreeValue, getValue, isEmptyValues } from './utils/helper';\n\n// common logic\nimport { treeNodesEffect, treeStoreExpendEffect } from './utils/cascader';\n\n// component\nimport Panel from './components/Panel';\nimport Popup, { PopupProps } from '../popup/index';\nimport InputContent from './components/InputContent';\n\n// types\nimport {\n  TreeNode,\n  ListenersType,\n  TreeNodeValue,\n  EVENT_NAME_WITH_KEBAB,\n  CascaderContextType,\n  TdCascaderProps,\n  TreeOptionData,\n  TreeNodeModel,\n} from './interface';\nimport props from './props';\nimport { CascaderChangeSource, CascaderValue, CascaderChangeContext } from './type';\n\nconst name = `${prefix}-cascader`;\n\nexport default Vue.extend({\n  name: 'TCascader',\n\n  components: {\n    Popup,\n    Panel,\n    InputContent,\n  },\n\n  props: {\n    ...props,\n  },\n\n  data() {\n    return {\n      // 表单控制禁用态时的变量\n      formDisabled: undefined,\n      inputWidth: 0,\n      visible: false,\n      treeStore: null,\n      inputVal: '',\n      scopeVal: this.defaultValue as any,\n      treeNodes: [],\n      filterActive: false,\n      expend: [] as TreeNodeValue[],\n    };\n  },\n\n  computed: {\n    tDisabled(): boolean {\n      return this.formDisabled || this.disabled;\n    },\n    stateFns() {\n      return {\n        setTreeNodes: (nodes: TreeNode[]) => {\n          this.treeNodes = nodes;\n        },\n        // 内部节点时 TreeNode，对外暴露的节点对象是 TreeNodeModel\n        setValue: (val: CascaderValue, source: CascaderChangeSource, node?: TreeNodeModel) => {\n          if (isEqual(val, this.scopeVal)) return;\n          emitEvent<Parameters<TdCascaderProps['onChange']>>(this, 'change', val, {\n            source,\n            node,\n          } as CascaderChangeContext<TreeOptionData>);\n        },\n        setVisible: (val: boolean) => {\n          this.visible = val;\n        },\n        setFilterActive: (val: boolean) => {\n          this.filterActive = val;\n        },\n        setInputVal: (val: string) => {\n          this.inputVal = val;\n        },\n        setExpend: (val: TreeNodeValue[]) => {\n          this.expend = val;\n        },\n        setInputWidth: (val: number) => {\n          this.inputWidth = val;\n        },\n      };\n    },\n    cascaderContext(): CascaderContextType {\n      const value = this.scopeVal as TdCascaderProps['value'];\n      const {\n        size = 'medium',\n        checkStrictly = false,\n        lazy = true,\n        multiple = false,\n        filterable = false,\n        clearable = false,\n        checkProps = {},\n        max = 0,\n        tDisabled,\n        showAllLevels = true,\n        minCollapsedNum = 0,\n        loading,\n        valueType = 'single',\n      } = this;\n\n      const {\n        visible, treeStore, treeNodes, filterActive, inputVal, inputWidth,\n      } = this;\n\n      return {\n        valueType,\n        loading,\n        size,\n        disabled: tDisabled,\n        checkStrictly,\n        lazy,\n        multiple,\n        filterable,\n        checkProps,\n        clearable,\n        showAllLevels,\n        max,\n        value,\n        visible,\n        treeStore,\n        treeNodes,\n        filterActive,\n        inputVal,\n        inputWidth,\n        minCollapsedNum,\n        ...this.stateFns,\n      };\n    },\n  },\n\n  watch: {\n    // 处理外部传进来的value\n    value: {\n      handler(val) {\n        const { valueType, multiple } = this;\n        if (isEqual(val, this.scopeVal)) return;\n        this.scopeVal = getValue(val, valueType, multiple);\n        this.updateExpend();\n        this.updatedTreeNodes();\n      },\n    },\n    inputVal() {\n      const {\n        cascaderContext: { value, setExpend },\n      } = this;\n      if (!getTreeValue(value).length) {\n        setExpend([]);\n      }\n      this.updatedTreeNodes();\n    },\n    filterActive() {\n      const {\n        cascaderContext: { filterActive },\n      } = this;\n      if (!filterActive) {\n        this.inputVal = '';\n      }\n    },\n  },\n\n  mounted() {\n    const {\n      value,\n      multiple,\n      cascaderContext: { setValue, showAllLevels },\n      valueType,\n    } = this;\n    if ((multiple && !Array.isArray(value)) || (!multiple && Array.isArray(value) && !showAllLevels)) {\n      const val: CascaderValue = multiple ? [] : '';\n      setValue(val, 'invalid-value');\n      console.warn('TDesign Cascader Warn:', 'cascader props value invalid, v-model automatic calibration');\n    }\n    if (!isEmptyValues(value)) {\n      this.scopeVal = getValue(value, valueType, multiple);\n    }\n\n    this.init();\n    ['checkStrictly', 'tDisabled', 'keys', 'lazy', 'load', 'options', 'valueMode'].forEach((key) => {\n      this.$watch(key, () => {\n        this.init();\n      });\n    });\n  },\n  provide(): any {\n    return {\n      tCascader: this,\n    };\n  },\n  methods: {\n    // 创建单个 cascader 节点\n    init() {\n      const {\n        tDisabled, keys, checkStrictly = false, lazy = true, load, options, valueMode = 'onlyLeaf',\n      } = this;\n      if (!options || (Array.isArray(options) && !options.length)) return;\n\n      this.treeStore = new TreeStore({\n        keys: keys || {},\n        checkable: true,\n        checkStrictly,\n        expandMutex: true,\n        expandParent: true,\n        disabled: tDisabled,\n        load,\n        lazy,\n        valueMode,\n        onLoad: () => {\n          setTimeout(() => {\n            this.treeStore.refreshNodes();\n            this.updatedTreeNodes();\n          }, 0);\n        },\n      });\n      this.treeStore.append(options);\n\n      // 初始化状态\n      this.$nextTick(() => {\n        this.updateExpend();\n        this.updatedTreeNodes();\n      });\n    },\n    // 更新treeNodes\n    updatedTreeNodes() {\n      const {\n        cascaderContext: { inputVal, treeStore, setTreeNodes },\n      } = this;\n      treeNodesEffect(inputVal, treeStore, setTreeNodes);\n    },\n    // 更新节点展开状态\n    updateExpend() {\n      const {\n        cascaderContext: { treeStore, value },\n        expend,\n      } = this;\n      if (!treeStore) return;\n      treeStoreExpendEffect(treeStore, value, expend);\n      treeStore.replaceChecked(getTreeValue(value));\n    },\n  },\n  render(): VNode {\n    const {\n      visible, trigger, empty, $attrs, cascaderContext, $scopedSlots, placeholder, collapsedItems,\n    } = this;\n\n    const popupProps = this.popupProps as PopupProps;\n\n    const listeners: ListenersType = {};\n\n    EVENT_NAME_WITH_KEBAB.forEach((eventName) => {\n      listeners[getPropsApiByEvent(eventName)] = (...args: any[]) => {\n        emitEvent(this, eventName, ...args);\n      };\n    });\n\n    return (\n      <Popup\n        class={`${name}__popup`}\n        overlayClassName={`${name}__dropdown`}\n        placement=\"bottom-left\"\n        visible={visible}\n        trigger={popupProps?.trigger || 'click'}\n        expandAnimation={true}\n        props={popupProps}\n        content={() => (\n          <panel\n            empty={empty}\n            trigger={trigger}\n            cascaderContext={cascaderContext}\n            scopedSlots={{ empty: $scopedSlots.empty }}\n          ></panel>\n        )}\n      >\n        <InputContent\n          {...$attrs}\n          cascaderContext={cascaderContext}\n          placeholder={placeholder}\n          listeners={listeners}\n          collapsedItems={collapsedItems}\n          scopedSlots={{ collapsedItems: $scopedSlots.collapsedItems }}\n        ></InputContent>\n      </Popup>\n    );\n  },\n});\n"],"names":["name","prefix","Vue","extend","components","Popup","Panel","InputContent","props","data","formDisabled","inputWidth","visible","treeStore","inputVal","scopeVal","defaultValue","treeNodes","filterActive","expend","computed","tDisabled","disabled","stateFns","setTreeNodes","nodes","setValue","val","source","node","isEqual","emitEvent","setVisible","setFilterActive","setInputVal","setExpend","setInputWidth","cascaderContext","value","size","checkStrictly","lazy","multiple","filterable","clearable","checkProps","max","showAllLevels","minCollapsedNum","loading","valueType","watch","handler","getValue","updateExpend","updatedTreeNodes","getTreeValue","length","mounted","Array","isArray","console","warn","isEmptyValues","init","forEach","key","$watch","provide","tCascader","methods","keys","load","options","valueMode","TreeStore","checkable","expandMutex","expandParent","onLoad","setTimeout","refreshNodes","append","$nextTick","treeNodesEffect","treeStoreExpendEffect","replaceChecked","render","trigger","empty","$attrs","$scopedSlots","placeholder","collapsedItems","popupProps","listeners","EVENT_NAME_WITH_KEBAB","eventName","getPropsApiByEvent","args","_mergeJSXProps2","_mergeJSXProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAMA,IAAI,GAAMC,EAAAA,CAAAA,MAAAA,CAAAA,MAAN,EAAV,WAAA,CAAA,CAAA;AACA,gBAAeC,GAAG,CAACC,MAAJ,CAAW;AACxBH,EAAAA,IAAI,EAAE,WADkB;AAExBI,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAALA,KADU;AAEVC,IAAAA,KAAK,EAALA,KAFU;AAGVC,IAAAA,YAAY,EAAZA,YAAAA;AAHU,GAFY;AAOxBC,EAAAA,KAAK,EACAA,aAAAA,CAAAA,EAAAA,EAAAA,KADA,CAPmB;AAUxBC,EAAAA,IAVwB,EAUjB,SAAA,IAAA,GAAA;AACL,IAAO,OAAA;AACLC,MAAAA,YAAY,EAAE,KAAK,CADd;AAELC,MAAAA,UAAU,EAAE,CAFP;AAGLC,MAAAA,OAAO,EAAE,KAHJ;AAILC,MAAAA,SAAS,EAAE,IAJN;AAKLC,MAAAA,QAAQ,EAAE,EALL;AAMLC,MAAAA,QAAQ,EAAE,IAAA,CAAKC,YANV;AAOLC,MAAAA,SAAS,EAAE,EAPN;AAQLC,MAAAA,YAAY,EAAE,KART;AASLC,MAAAA,MAAM,EAAE,EAAA;AATH,KAAP,CAAA;AAWD,GAtBuB;AAuBxBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SADQ,EACI,SAAA,SAAA,GAAA;AACV,MAAA,OAAO,IAAKX,CAAAA,YAAL,IAAqB,IAAA,CAAKY,QAAjC,CAAA;AACD,KAHO;AAIRC,IAAAA,QAJQ,EAIG,SAAA,QAAA,GAAA;AAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA;;AACT,MAAO,OAAA;AACLC,QAAAA,YAAY,EAAE,SAACC,YAAAA,CAAAA,KAAD,EAAW;AACvB,UAAA,KAAI,CAACR,SAAL,GAAiBQ,KAAjB,CAAA;AACD,SAHI;AAILC,QAAAA,QAAQ,EAAE,SAACC,QAAAA,CAAAA,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAuB;AAC/B,UAAIC,IAAAA,OAAO,CAACH,GAAD,EAAM,KAAI,CAACZ,QAAX,CAAX,EACE,OAAA;AACFgB,UAAAA,SAAS,CAAC,KAAD,EAAO,QAAP,EAAiBJ,GAAjB,EAAsB;AAC7BC,YAAAA,MAAM,EAANA,MAD6B;AAE7BC,YAAAA,IAAI,EAAJA,IAAAA;AAF6B,WAAtB,CAAT,CAAA;AAID,SAXI;AAYLG,QAAAA,UAAU,EAAE,SAACL,UAAAA,CAAAA,GAAD,EAAS;AACnB,UAAA,KAAI,CAACf,OAAL,GAAee,GAAf,CAAA;AACD,SAdI;AAeLM,QAAAA,eAAe,EAAE,SAACN,eAAAA,CAAAA,GAAD,EAAS;AACxB,UAAA,KAAI,CAACT,YAAL,GAAoBS,GAApB,CAAA;AACD,SAjBI;AAkBLO,QAAAA,WAAW,EAAE,SAACP,WAAAA,CAAAA,GAAD,EAAS;AACpB,UAAA,KAAI,CAACb,QAAL,GAAgBa,GAAhB,CAAA;AACD,SApBI;AAqBLQ,QAAAA,SAAS,EAAE,SAACR,SAAAA,CAAAA,GAAD,EAAS;AAClB,UAAA,KAAI,CAACR,MAAL,GAAcQ,GAAd,CAAA;AACD,SAvBI;AAwBLS,QAAAA,aAAa,EAAE,SAACT,aAAAA,CAAAA,GAAD,EAAS;AACtB,UAAA,KAAI,CAAChB,UAAL,GAAkBgB,GAAlB,CAAA;AACD,SAAA;AA1BI,OAAP,CAAA;AA4BD,KAjCO;AAkCRU,IAAAA,eAlCQ,EAkCU,SAAA,eAAA,GAAA;AAChB,MAAMC,IAAAA,KAAK,GAAG,IAAA,CAAKvB,QAAnB,CAAA;AACA,MAcI,IAAA,UAAA,GAAA,IAdJ,CACEwB,IADF;AAAA,UACEA,IADF,2BACS,QADT,GAAA,UAAA;AAAA,UAcI,mBAAA,GAAA,IAdJ,CAEEC,aAFF;AAAA,UAEEA,aAFF,oCAEkB,KAFlB,GAAA,mBAAA;AAAA,UAcI,UAAA,GAAA,IAdJ,CAGEC,IAHF;AAAA,UAGEA,IAHF,2BAGS,IAHT,GAAA,UAAA;AAAA,UAcI,cAAA,GAAA,IAdJ,CAIEC,QAJF;AAAA,UAIEA,QAJF,+BAIa,KAJb,GAAA,cAAA;AAAA,UAcI,gBAAA,GAAA,IAdJ,CAKEC,UALF;AAAA,UAKEA,UALF,iCAKe,KALf,GAAA,gBAAA;AAAA,UAcI,eAAA,GAAA,IAdJ,CAMEC,SANF;AAAA,UAMEA,SANF,gCAMc,KANd,GAAA,eAAA;AAAA,UAcI,gBAAA,GAAA,IAdJ,CAOEC,UAPF;AAAA,UAOEA,UAPF,iCAOe,EAPf,GAAA,gBAAA;AAAA,UAcI,SAAA,GAAA,IAdJ,CAQEC,GARF;AAAA,UAQEA,GARF,0BAQQ,CARR,GAAA,SAAA;AAAA,UASEzB,SATF,GAcI,IAdJ,CASEA,SATF;AAAA,UAcI,mBAAA,GAAA,IAdJ,CAUE0B,aAVF;AAAA,UAUEA,aAVF,oCAUkB,IAVlB,GAAA,mBAAA;AAAA,UAcI,qBAAA,GAAA,IAdJ,CAWEC,eAXF;AAAA,UAWEA,eAXF,sCAWoB,CAXpB,GAAA,qBAAA;AAAA,UAYEC,OAZF,GAcI,IAdJ,CAYEA,OAZF;AAAA,UAcI,eAAA,GAAA,IAdJ,CAaEC,SAbF;AAAA,UAaEA,SAbF,gCAac,QAbd,GAAA,eAAA,CAAA;AAeA,MAAA,IACEtC,OADF,GAOI,IAPJ,CACEA,OADF;AAAA,UAEEC,SAFF,GAOI,IAPJ,CAEEA,SAFF;AAAA,UAGEI,SAHF,GAOI,IAPJ,CAGEA,SAHF;AAAA,UAIEC,YAJF,GAOI,IAPJ,CAIEA,YAJF;AAAA,UAKEJ,QALF,GAOI,IAPJ,CAKEA,QALF;AAAA,UAMEH,UANF,GAOI,IAPJ,CAMEA,UANF,CAAA;AAQA,MAAA,OAAA,aAAA,CAAA;AACEuC,QAAAA,SAAS,EAATA,SADF;AAEED,QAAAA,OAAO,EAAPA,OAFF;AAGEV,QAAAA,IAAI,EAAJA,IAHF;AAIEjB,QAAAA,QAAQ,EAAED,SAJZ;AAKEmB,QAAAA,aAAa,EAAbA,aALF;AAMEC,QAAAA,IAAI,EAAJA,IANF;AAOEC,QAAAA,QAAQ,EAARA,QAPF;AAQEC,QAAAA,UAAU,EAAVA,UARF;AASEE,QAAAA,UAAU,EAAVA,UATF;AAUED,QAAAA,SAAS,EAATA,SAVF;AAWEG,QAAAA,aAAa,EAAbA,aAXF;AAYED,QAAAA,GAAG,EAAHA,GAZF;AAaER,QAAAA,KAAK,EAALA,KAbF;AAcE1B,QAAAA,OAAO,EAAPA,OAdF;AAeEC,QAAAA,SAAS,EAATA,SAfF;AAgBEI,QAAAA,SAAS,EAATA,SAhBF;AAiBEC,QAAAA,YAAY,EAAZA,YAjBF;AAkBEJ,QAAAA,QAAQ,EAARA,QAlBF;AAmBEH,QAAAA,UAAU,EAAVA,UAnBF;AAoBEqC,QAAAA,eAAe,EAAfA,eAAAA;AApBF,OAAA,EAqBK,KAAKzB,QArBV,CAAA,CAAA;AAuBD,KAAA;AAlFO,GAvBc;AA2GxB4B,EAAAA,KAAK,EAAE;AACLb,IAAAA,KAAK,EAAE;AACLc,MAAAA,OADK,EACGzB,SAAAA,OAAAA,CAAAA,GADH,EACQ;AACX,QAAA,IAAQuB,SAAR,GAAgC,IAAhC,CAAQA,SAAR;AAAA,YAAmBR,QAAnB,GAAgC,IAAhC,CAAmBA,QAAnB,CAAA;AACA,QAAA,IAAIZ,OAAO,CAACH,GAAD,EAAM,IAAKZ,CAAAA,QAAX,CAAX,EACE,OAAA;AACF,QAAKA,IAAAA,CAAAA,QAAL,GAAgBsC,QAAQ,CAAC1B,GAAD,EAAMuB,SAAN,EAAiBR,QAAjB,CAAxB,CAAA;AACA,QAAA,IAAA,CAAKY,YAAL,EAAA,CAAA;AACA,QAAA,IAAA,CAAKC,gBAAL,EAAA,CAAA;AACD,OAAA;AARI,KADF;AAWLzC,IAAAA,QAXK,EAWM,SAAA,QAAA,GAAA;AACT,MAEI,IAAA,qBAAA,GAAA,IAFJ,CACEuB,eADF;AAAA,UACqBC,KADrB,yBACqBA,KADrB;AAAA,UAC4BH,SAD5B,yBAC4BA,SAD5B,CAAA;;AAGA,MAAA,IAAI,CAACqB,YAAY,CAAClB,KAAD,CAAZ,CAAoBmB,MAAzB,EAAiC;AAC/BtB,QAAAA,SAAS,CAAC,EAAD,CAAT,CAAA;AACD,OAAA;;AACD,MAAA,IAAA,CAAKoB,gBAAL,EAAA,CAAA;AACD,KAnBI;AAoBLrC,IAAAA,YApBK,EAoBU,SAAA,YAAA,GAAA;AACb,MAAA,IACqBA,YADrB,GAEI,IAFJ,CACEmB,eADF,CACqBnB,YADrB,CAAA;;AAGA,MAAI,IAAA,CAACA,YAAL,EAAmB;AACjB,QAAKJ,IAAAA,CAAAA,QAAL,GAAgB,EAAhB,CAAA;AACD,OAAA;AACF,KAAA;AA3BI,GA3GiB;AAwIxB4C,EAAAA,OAxIwB,EAwId,SAAA,OAAA,GAAA;AAAA,IAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;AACR,IAAA,IACEpB,KADF,GAKI,IALJ,CACEA,KADF;AAAA,QAEEI,QAFF,GAKI,IALJ,CAEEA,QAFF;AAAA,QAKI,sBAAA,GAAA,IALJ,CAGEL,eAHF;AAAA,QAGqBX,QAHrB,0BAGqBA,QAHrB;AAAA,QAG+BqB,aAH/B,0BAG+BA,aAH/B;AAAA,QAIEG,SAJF,GAKI,IALJ,CAIEA,SAJF,CAAA;;AAMA,IAAIR,IAAAA,QAAQ,IAAI,CAACiB,KAAK,CAACC,OAAN,CAActB,KAAd,CAAb,IAAqC,CAACI,QAAD,IAAaiB,KAAK,CAACC,OAAN,CAActB,KAAd,CAAb,IAAqC,CAACS,aAA/E,EAA8F;AAC5F,MAAA,IAAMpB,GAAG,GAAGe,QAAQ,GAAG,EAAH,GAAQ,EAA5B,CAAA;AACAhB,MAAAA,QAAQ,CAACC,GAAD,EAAM,eAAN,CAAR,CAAA;AACAkC,MAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb,EAAuC,6DAAvC,CAAA,CAAA;AACD,KAAA;;AACD,IAAA,IAAI,CAACC,aAAa,CAACzB,KAAD,CAAlB,EAA2B;AACzB,MAAKvB,IAAAA,CAAAA,QAAL,GAAgBsC,QAAQ,CAACf,KAAD,EAAQY,SAAR,EAAmBR,QAAnB,CAAxB,CAAA;AACD,KAAA;;AACD,IAAA,IAAA,CAAKsB,IAAL,EAAA,CAAA;AACA,IAAA,CAAC,eAAD,EAAkB,WAAlB,EAA+B,MAA/B,EAAuC,MAAvC,EAA+C,MAA/C,EAAuD,SAAvD,EAAkE,WAAlE,CAAA,CAA+EC,OAA/E,CAAuF,UAACC,GAAD,EAAS;AAC9F,MAAA,MAAI,CAACC,MAAL,CAAYD,GAAZ,EAAiB,YAAM;AACrB,QAAA,MAAI,CAACF,IAAL,EAAA,CAAA;AACD,OAFD,CAAA,CAAA;AAGD,KAJD,CAAA,CAAA;AAKD,GA7JuB;AA8JxBI,EAAAA,OA9JwB,EA8Jd,SAAA,OAAA,GAAA;AACR,IAAO,OAAA;AACLC,MAAAA,SAAS,EAAE,IAAA;AADN,KAAP,CAAA;AAGD,GAlKuB;AAmKxBC,EAAAA,OAAO,EAAE;AACPN,IAAAA,IADO,EACA,SAAA,IAAA,GAAA;AAAA,MAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;AACL,MAAA,IACE3C,SADF,GAQI,IARJ,CACEA,SADF;AAAA,UAEEkD,IAFF,GAQI,IARJ,CAEEA,IAFF;AAAA,UAQI,oBAAA,GAAA,IARJ,CAGE/B,aAHF;AAAA,UAGEA,aAHF,qCAGkB,KAHlB,GAAA,oBAAA;AAAA,UAQI,WAAA,GAAA,IARJ,CAIEC,IAJF;AAAA,UAIEA,IAJF,4BAIS,IAJT,GAAA,WAAA;AAAA,UAKE+B,IALF,GAQI,IARJ,CAKEA,IALF;AAAA,UAMEC,OANF,GAQI,IARJ,CAMEA,OANF;AAAA,UAQI,eAAA,GAAA,IARJ,CAOEC,SAPF;AAAA,UAOEA,SAPF,gCAOc,UAPd,GAAA,eAAA,CAAA;AASA,MAAA,IAAI,CAACD,OAAD,IAAYd,KAAK,CAACC,OAAN,CAAca,OAAd,CAA0B,IAAA,CAACA,OAAO,CAAChB,MAAnD,EACE,OAAA;AACF,MAAA,IAAA,CAAK5C,SAAL,GAAiB,IAAI8D,SAAJ,CAAc;AAC7BJ,QAAAA,IAAI,EAAEA,IAAI,IAAI,EADe;AAE7BK,QAAAA,SAAS,EAAE,IAFkB;AAG7BpC,QAAAA,aAAa,EAAbA,aAH6B;AAI7BqC,QAAAA,WAAW,EAAE,IAJgB;AAK7BC,QAAAA,YAAY,EAAE,IALe;AAM7BxD,QAAAA,QAAQ,EAAED,SANmB;AAO7BmD,QAAAA,IAAI,EAAJA,IAP6B;AAQ7B/B,QAAAA,IAAI,EAAJA,IAR6B;AAS7BiC,QAAAA,SAAS,EAATA,SAT6B;AAU7BK,QAAAA,MAAM,EAAE,SAAM,MAAA,GAAA;AACZC,UAAAA,UAAU,CAAC,YAAM;AACf,YAAA,MAAI,CAACnE,SAAL,CAAeoE,YAAf,EAAA,CAAA;;AACA,YAAA,MAAI,CAAC1B,gBAAL,EAAA,CAAA;AACD,WAHS,EAGP,CAHO,CAAV,CAAA;AAID,SAAA;AAf4B,OAAd,CAAjB,CAAA;AAiBA,MAAA,IAAA,CAAK1C,SAAL,CAAeqE,MAAf,CAAsBT,OAAtB,CAAA,CAAA;AACA,MAAKU,IAAAA,CAAAA,SAAL,CAAe,YAAM;AACnB,QAAA,MAAI,CAAC7B,YAAL,EAAA,CAAA;;AACA,QAAA,MAAI,CAACC,gBAAL,EAAA,CAAA;AACD,OAHD,CAAA,CAAA;AAID,KAnCM;AAoCPA,IAAAA,gBApCO,EAoCY,SAAA,gBAAA,GAAA;AACjB,MAEI,IAAA,sBAAA,GAAA,IAFJ,CACElB,eADF;AAAA,UACqBvB,QADrB,0BACqBA,QADrB;AAAA,UAC+BD,SAD/B,0BAC+BA,SAD/B;AAAA,UAC0CW,YAD1C,0BAC0CA,YAD1C,CAAA;AAGA4D,MAAAA,eAAe,CAACtE,QAAD,EAAWD,SAAX,EAAsBW,YAAtB,CAAf,CAAA;AACD,KAzCM;AA0CP8B,IAAAA,YA1CO,EA0CQ,SAAA,YAAA,GAAA;AACb,MAGI,IAAA,sBAAA,GAAA,IAHJ,CACEjB,eADF;AAAA,UACqBxB,SADrB,0BACqBA,SADrB;AAAA,UACgCyB,KADhC,0BACgCA,KADhC;AAAA,UAEEnB,MAFF,GAGI,IAHJ,CAEEA,MAFF,CAAA;AAIA,MAAI,IAAA,CAACN,SAAL,EACE,OAAA;AACFwE,MAAAA,qBAAqB,CAACxE,SAAD,EAAYyB,KAAZ,EAAmBnB,MAAnB,CAArB,CAAA;AACAN,MAAAA,SAAS,CAACyE,cAAV,CAAyB9B,YAAY,CAAClB,KAAD,CAArC,CAAA,CAAA;AACD,KAAA;AAnDM,GAnKe;AAwNxBiD,EAAAA,MAxNwB,EAwNf,SAAA,MAAA,GAAA;AAAA,IAAA,IAAA,MAAA,GAAA,IAAA,CAAA;;AAAA,IAAA,IAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,CAAA;AACP,IAAA,IACE3E,OADF,GASI,IATJ,CACEA,OADF;AAAA,QAEE4E,OAFF,GASI,IATJ,CAEEA,OAFF;AAAA,QAGEC,KAHF,GASI,IATJ,CAGEA,KAHF;AAAA,QAIEC,MAJF,GASI,IATJ,CAIEA,MAJF;AAAA,QAKErD,eALF,GASI,IATJ,CAKEA,eALF;AAAA,QAMEsD,YANF,GASI,IATJ,CAMEA,YANF;AAAA,QAOEC,WAPF,GASI,IATJ,CAOEA,WAPF;AAAA,QAQEC,cARF,GASI,IATJ,CAQEA,cARF,CAAA;AAUA,IAAMC,IAAAA,UAAU,GAAG,IAAA,CAAKA,UAAxB,CAAA;AACA,IAAMC,IAAAA,SAAS,GAAG,EAAlB,CAAA;AACAC,IAAAA,qBAAqB,CAAC/B,OAAtB,CAA8B,UAACgC,SAAD,EAAe;AAC3CF,MAAAA,SAAS,CAACG,kBAAkB,CAACD,SAAD,CAAnB,CAAT,GAA2C,YAAa;AAAA,QAAA,KAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAATE,IAAS,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAATA,UAAAA,IAAS,CAAA,IAAA,CAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;AAAA,SAAA;;AACtDpE,QAAAA,SAAS,CAAT,KAAA,CAAA,KAAA,CAAA,EAAA,CAAU,MAAV,EAAgBkE,SAAhB,SAA8BE,IAA9B,CAAA,CAAA,CAAA;AACD,OAFD,CAAA;AAGD,KAJD,CAAA,CAAA;AAKA,IAAA,OAAA,CAAA,CAAA,KAAA,EAAAC,MAAA,CAAA,CAAA;AAAA,MAAA,OAAA,EAAA,EAAA,CAAA,MAAA,CAAwBpG,IAAxB,EAAA,SAAA,CAAA;AAAA,MAAA,OAAA,EAAA;AAAA,QAAA,kBAAA,EAAA,EAAA,CAAA,MAAA,CAA4DA,IAA5D,EAAA,YAAA,CAAA;AAAA,QAAA,WAAA,EAAwF,aAAxF;AAAA,QAAA,SAAA,EAA+GY,OAA/G;AAAA,QAAiI,SAAA,EAAA,CAAAkF,UAAU,KAAA,IAAV,IAAAA,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAAA,UAAU,CAAEN,OAAZ,KAAuB,OAAxJ;AAAA,QAAkL,iBAAA,EAAA,IAAA;AAAlL,OAAA;AAAA,KAAA,EAAA;AAAA,MAA+LM,OAAAA,EAAAA,UAAAA;AAA/L,KAAA,EAAA;AAAA,MAAA,OAAA,EAAA;AAAA,QAAoN,SAAA,EAAA,SAAA,OAAA,GAAA;AAAA,UAAA,OAAA,CAAA,CAAA,OAAA,EAAA;AAAA,YAAA,OAAA,EAAA;AAAA,cAAA,OAAA,EAAoBL,KAApB;AAAA,cAAA,SAAA,EAAoCD,OAApC;AAAA,cAA8DnD,iBAAAA,EAAAA,eAAAA;AAA9D,aAAA;AAAA,YAA4F,aAAA,EAAA;AAAEoD,cAAAA,KAAK,EAAEE,YAAY,CAACF,KAAAA;AAAtB,aAAA;AAA5F,WAAA,CAAA,CAAA;AAAA,SAAA;AAApN,OAAA;AAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,YAAA,EAAAY,MAAA,CAAA,CAAA,EAAA,EAAqWX,MAArW,EAAA;AAAA,MAAA,OAAA,EAAA;AAAA,QAAA,iBAAA,EAA8XrD,eAA9X;AAAA,QAAA,aAAA,EAA4ZuD,WAA5Z;AAAA,QAAA,WAAA,EAAobG,SAApb;AAAA,QAA+cF,gBAAAA,EAAAA,cAAAA;AAA/c,OAAA;AAAA,MAA4e,aAAA,EAAA;AAAEA,QAAAA,cAAc,EAAEF,YAAY,CAACE,cAAAA;AAA/B,OAAA;AAA5e,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACD,GAAA;AA3OuB,CAAX,CAAf;;;;"}