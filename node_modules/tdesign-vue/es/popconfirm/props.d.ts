import { TdPopconfirmProps } from './type';
import { PropType } from 'vue';
declare const _default: {
    cancelBtn: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | import("..").TdButtonProps>;
        default: string;
    };
    confirmBtn: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | import("..").TdButtonProps>;
        default: string;
    };
    content: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    default: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    placement: {
        type: PropType<"left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom">;
        default: "left" | "top" | "bottom" | "right" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | "left-top" | "left-bottom" | "right-top" | "right-bottom";
        validator(val: TdPopconfirmProps['placement']): boolean;
    };
    popupProps: {
        type: PropType<import("..").TdPopupProps>;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    theme: {
        type: PropType<"default" | "danger" | "warning">;
        default: "default" | "danger" | "warning";
        validator(val: TdPopconfirmProps['theme']): boolean;
    };
    triggerElement: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    visible: BooleanConstructor;
    defaultVisible: BooleanConstructor;
    onCancel: PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onConfirm: PropType<(options: {
        e: MouseEvent;
    }) => void>;
    onVisibleChange: PropType<(visible: boolean, context?: import("./type").PopconfirmVisibleChangeContext) => void>;
};
export default _default;
