/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import { h as helper } from '../_chunks/dep-99305448.js';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import { prefix } from '../config.js';
import { Popup } from '../popup/index.js';
import _DropdownMenu from './dropdown-menu.js';
import { emitEvent } from '../utils/event.js';
import props from './props.js';
import '../popup/popup.js';
import '@babel/runtime/helpers/typeof';
import '@popperjs/core';
import '../utils/classnames.js';
import '../utils/dom.js';
import 'raf';
import 'lodash/isString';
import '../utils/easing.js';
import '../utils/render-tnode.js';
import 'lodash/isObject';
import '../utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import 'lodash/camelCase';
import '../_common/js/utils/set-style.js';
import '../popup/props.js';
import '../popup/container.js';
import '../utils/map-props.js';
import '../utils/withInstall.js';
import 'lodash/capitalize';
import './style/css.js';
import '../popup/type.js';
import './dropdown-item.js';
import 'tdesign-icons-vue';
import '../divider/index.js';
import '../divider/divider.js';
import '../divider/props.js';
import '../divider/type.js';
import './dropdown-item-props.js';
import '../utils/ripple.js';
import '../utils/mixins.js';
import '../config-provider/config-receiver.js';
import 'lodash/mergeWith';
import '../config-provider/zh_CN_config.js';
import '../config-provider/type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var name = "".concat(prefix, "-dropdown");
var _Dropdown = Vue.extend({
  name: "TDropdown",
  props: _objectSpread({}, props),
  provide: function provide() {
    return {
      dropdown: this
    };
  },
  methods: {
    handleMenuClick: function handleMenuClick(data, context) {
      if (this.hideAfterItemClick) {
        var popupElem = this.$refs.popupElem;
        popupElem.handleClose();
      }

      emitEvent(this, "click", data, context);
    }
  },
  render: function render() {
    var h = arguments[0];
    var trigger = this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : "";
    var contentSlot = this.$scopedSlots.dropdown ? this.$scopedSlots.dropdown(null) : "";
    var popupProps = {
      props: _objectSpread(_objectSpread(_objectSpread({}, this.$attrs), this.popupProps), {}, {
        disabled: this.disabled,
        placement: this.placement,
        trigger: this.trigger,
        overlayClassName: this.popupProps && this.popupProps.overlayClassName ? [name, this.popupProps.overlayClassName] : name
      }),
      ref: "popup"
    };
    return h(Popup, helper([{}, popupProps, {
      "ref": "popupElem",
      "attrs": {
        "expandAnimation": true
      }
    }]), [h("template", {
      "slot": "content",
      "attrs": {
        "role": "dropdown"
      }
    }, [contentSlot || h(_DropdownMenu)]), trigger]);
  }
});

export { _Dropdown as default };
//# sourceMappingURL=dropdown.js.map
