{"version":3,"file":"type.js","sources":["../../src/transfer/type.ts"],"sourcesContent":["/* eslint-disable */\n\n/**\n * 该文件为脚本自动生成文件，请勿随意修改。如需修改请联系 PMC\n * updated at 2021-12-12 16:59:59\n * */\n\nimport { CheckboxProps } from '../checkbox';\nimport { PaginationProps, PageInfo } from '../pagination';\nimport { InputProps } from '../input';\nimport { TNode, KeysType } from '../common';\n\nexport interface TdTransferProps<T extends DataOption = DataOption> {\n  /**\n   * 用于控制复选框属性\n   */\n  checkboxProps?: CheckboxProps;\n  /**\n   * 数据列表选中项\n   * @default []\n   */\n  checked?: Array<TransferValue>;\n  /**\n   * 数据列表选中项，非受控属性\n   * @default []\n   */\n  defaultChecked?: Array<TransferValue>;\n  /**\n   * 全量数据\n   * @default []\n   */\n  data?: Array<T>;\n  /**\n   * 穿梭框可操作方向\n   * @default both\n   */\n  direction?: 'left' | 'right' | 'both';\n  /**\n   * 禁用全部操作：搜索、选中、移动、分页等。[源列表, 目标列表]，示例：[true, false] 或者 true\n   * @default false\n   */\n  disabled?: boolean | Array<boolean>;\n  /**\n   * 列表为空时呈现的内容。值类型为数组，则表示分别控制源列表和目标列表数据为空的呈现内容\n   * @default ''\n   */\n  empty?: EmptyType | Array<EmptyType> | TNode ;\n  /**\n   * 穿梭框底部内容\n   */\n  footer?: Array<string | TNode> | TNode<{ type: TransferListType }>;\n  /**\n   * 用来定义选项文本和选项值字段，示例：`{ label: 'text', value: 'id' }`，表示选项文本取 `text` 字段，选项值取 `id` 字段\n   */\n  keys?: KeysType;\n  /**\n   * 方向操作按钮。默认显示组件内置操作图标。自定义操作图标示例：['向左', '向右'] 或者 `[() => <i class='left' />, () => <i class='left' />]` 或者 `(h, direction) => direction === 'left' ? '《' : '》'`\n   */\n  operation?: Array<string | TNode> | TNode<{ direction: 'left' | 'right' }>;\n  /**\n   * 分页配置，值为空则不显示。具体 API 参考分页组件。值类型为数组，表示可分别控制源列表和目标列表分页组件\n   */\n  pagination?: PaginationProps | Array<PaginationProps>;\n  /**\n   * 搜索框配置，值为 false 表示不显示搜索框；值为 true 表示显示默认搜索框；值类型为对象，用于透传 Props 到 Input 组件；值类型为数组，则分别表示控制两侧搜索框\n   * @default false\n   */\n  search?: SearchOption | Array<SearchOption>;\n  /**\n   * 是否显示全选，值类型为数组则表示分别控制源列表和目标列表\n   * @default true\n   */\n  showCheckAll?: boolean | Array<boolean>;\n  /**\n   * 目标数据列表排列顺序\n   * @default original\n   */\n  targetSort?: 'original' | 'push' | 'unshift';\n  /**\n   * 穿梭框标题，示例：['源列表', '目标列表'] 或者 `[() => 'A', () => 'B']` 或者 `({ type }) => type === 'source' ? '源' : '目标'`\n   * @default []\n   */\n  title?: Array<TitleType> | TNode<{ type: TransferListType }>;\n  /**\n   * 自定义渲染节点\n   */\n  transferItem?: TNode<TransferItem<T>>;\n  /**\n   * 目标数据列表数据\n   * @default []\n   */\n  value?: Array<TransferValue>;\n  /**\n   * 目标数据列表数据，非受控属性\n   * @default []\n   */\n  defaultValue?: Array<TransferValue>;\n  /**\n   * 数据列表发生变化时触发，`type` 值为 `source`，表示源列表移动到目标列表，值为 `target` 表示目标列表移动到源列表，movedValue 则表示被移动的选项\n   */\n  onChange?: (targetValue: Array<TransferValue>, context: TargetParams) => void;\n  /**\n   * 源数据列表或目标数据列表的选中项发生变化时触发，`context.type` 可以区分触发来源是目标列表，还是源列表\n   */\n  onCheckedChange?: (options: CheckedOptions) => void;\n  /**\n   * 分页发生变化时触发\n   */\n  onPageChange?: (page: PageInfo, context: { type: TransferListType }) => void;\n  /**\n   * 列表滚动时触发，bottomDistance 表示元素滚动到底部的距离\n   */\n  onScroll?: (options: { e: Event; bottomDistance: number; type: TransferListType }) => void;\n  /**\n   * 搜索时触发，options.query 表示用户输入的内容\n   */\n  onSearch?: (options: SearchContext) => void;\n};\n\nexport type EmptyType = string | TNode;\n\nexport type SearchOption = boolean | InputProps;\n\nexport type TitleType = string | TNode;\n\nexport type TransferListType = 'source' | 'target';\n\nexport interface TransferItem<T extends DataOption = DataOption> { data: T; index: number; type: TransferListType};\n\nexport interface TargetParams { type: TransferListType; movedValue: Array<TransferValue> };\n\nexport interface CheckedOptions { checked: Array<TransferValue>; sourceChecked: Array<TransferValue>; targetChecked: Array<TransferValue>; type: TransferListType };\n\nexport interface SearchContext { query: string; type: TransferListType; trigger: 'input' | 'enter';  e: InputEvent | KeyboardEvent };\n\nexport type DataOption = { label?: string; value?: TransferValue; disabled?: boolean } & Record<string, any>;\n\nexport type TransferValue = string | number;\n"],"names":[],"mappings":";;;;;;AAAA,CAAA;AACA,CAAA;AACA,CAAA;AACA,CAAA;AACA"}