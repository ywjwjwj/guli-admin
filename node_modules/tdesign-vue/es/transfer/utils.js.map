{"version":3,"file":"utils.js","sources":["../../src/transfer/utils.ts"],"sourcesContent":["import Vue from 'vue';\nimport cloneDeep from 'lodash/cloneDeep';\nimport {\n  TransferListOptionBase, TransferItemOption, TdTransferProps, TransferValue, DataOption,\n} from './interface';\n\nexport { emitEvent } from '../utils/event';\n\nexport const TRANSFER_NAME = 'TTransfer';\n\ninterface TreeNode {\n  children?: Array<TreeNode>\n}\n\nfunction findTopNode(vm: Vue): Vue {\n  // 找到t-transfer这层父节点\n  if (vm.$options.name === TRANSFER_NAME) {\n    return vm;\n  }\n  if (vm.$parent) {\n    return findTopNode(vm.$parent);\n  }\n  return vm;\n}\n\nfunction getTransferListOption<T>(prop: T | Array<T>): TransferListOptionBase<T> {\n  if (Array.isArray(prop)) {\n    return {\n      source: prop[0],\n      target: prop[1],\n    };\n  }\n  return {\n    source: prop,\n    target: prop,\n  };\n}\n\nfunction getDataValues(data: Array<TransferItemOption>, filterValues: Array<TransferValue>, {\n  isTreeMode = false,\n  include = true, // true=保留filterValues，false=删除filterValues中元素\n} = {}): Array<TransferValue> {\n  // 用于处理 tree 组件这种数据结构是树形的\n  if (isTreeMode) {\n    let result: Array<TransferValue> = [];\n    if (data) {\n      for (let i = 0; i < data.length; i++) {\n        const item = data[i];\n        const isInclude = filterValues.includes(item.value);\n        if (!include && isInclude) {\n          continue; // 排除模式下子元素一律排除\n        }\n\n        // 只找叶子节点\n        if (item?.children && item.children?.length > 0) {\n          const childResult = getDataValues(item.children, filterValues, {\n            isTreeMode,\n            include,\n          });\n          result = result.concat(childResult);\n        } else if ((include && isInclude) || (!include && !isInclude)) {\n          result.push(item.value);\n        }\n      }\n    }\n    return result;\n  }\n  return data.filter((item) => {\n    const isInclude = filterValues.includes(item.value);\n    return ((include && isInclude) || (!include && !isInclude)) && !item.disabled;\n  }).map((item) => item.value);\n}\n\nfunction getTransferData(\n  data: Array<DataOption>,\n  keys: TdTransferProps['keys'],\n  isTreeMode = false,\n): Array<TransferItemOption> {\n  const list: Array<TransferItemOption> = data.map((transferDataItem, index): TransferItemOption => {\n    const labelKey = keys?.label || 'label';\n    const valueKey = keys?.value || 'value';\n    if (transferDataItem[labelKey] === undefined) {\n      throw `${labelKey} is not in DataOption ${JSON.stringify(transferDataItem)}`;\n    }\n    if (transferDataItem[valueKey] === undefined) {\n      throw `${valueKey} is not in DataOption ${JSON.stringify(transferDataItem)}`;\n    }\n    const result: TransferItemOption = ({\n      label: transferDataItem[labelKey] as string,\n      value: transferDataItem[valueKey],\n      key: `key__value_${transferDataItem[valueKey]}_index_${index}`,\n      disabled: transferDataItem.disabled ?? false,\n      data: transferDataItem,\n    });\n    if (isTreeMode && transferDataItem.children) {\n      result.children = getTransferData(transferDataItem.children, keys, true);\n    }\n    return result;\n  });\n  return list;\n}\n\nfunction isAllNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  return false;\n}\n\nfunction isTreeNodeValid(data: TransferItemOption, filterValues: Array<TransferValue>, needMatch: boolean): boolean {\n  if (filterValues.includes(data.value)) {\n    return needMatch;\n  }\n  if (data?.children) {\n    return data?.children.some((item) => isTreeNodeValid(item, filterValues, needMatch));\n  }\n  return !needMatch;\n}\n\n// 复制树并过滤节点\nfunction cloneTreeWithFilter(\n  sourceTree: TransferItemOption[],\n  targetTree: TransferItemOption[],\n  filterValues: Array<TransferValue>,\n  needMatch: boolean,\n) {\n  sourceTree.forEach((item) => {\n    let newNode: TransferItemOption;\n    if (isAllNodeValid(item, filterValues, needMatch)) {\n      // 如果当前节点直接命中，则复制所有子节点\n      newNode = cloneDeep<TransferItemOption>(item);\n      targetTree.push(newNode);\n    } else if (isTreeNodeValid(item, filterValues, needMatch)) {\n      // 如果有合法子节点，就复制这个节点\n      newNode = {\n        ...item,\n      };\n      delete newNode.children;\n      targetTree.push(newNode);\n      if (item.children) {\n        newNode.children = [];\n        cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);\n        if (newNode.children.length === 0) {\n          delete newNode.children;\n        }\n      }\n    }\n  });\n}\n\n// 过滤列表，如果是树的话需要保持树的结构\nfunction filterTransferData(\n  data: Array<TransferItemOption>,\n  filterValues: Array<TransferValue>,\n  needMatch = true,\n  isTreeMode = false,\n) {\n  if (!isTreeMode) {\n    return data.filter((item) => {\n      const isMatch = filterValues.includes(item.value);\n      return needMatch ? isMatch : !isMatch;\n    });\n  }\n\n  const result: Array<TransferItemOption> = [];\n  cloneTreeWithFilter(data, result, filterValues, needMatch);\n  return result;\n}\n\n// 获取树节点的叶子数量\nfunction getLeefCount(nodes: Array<TreeNode>): number {\n  let total = 0;\n  nodes.forEach((child) => {\n    if (child.children && child.children.length > 0) {\n      total += getLeefCount(child.children);\n    } else {\n      total += 1;\n    }\n  });\n  return total;\n}\n\nexport {\n  findTopNode, getTransferListOption, getDataValues, getTransferData, cloneTreeWithFilter,\n  filterTransferData, getLeefCount,\n};\n"],"names":["TRANSFER_NAME","findTopNode","vm","$options","name","$parent","getTransferListOption","prop","Array","isArray","source","target","getDataValues","data","filterValues","isTreeMode","include","result","i","length","item","isInclude","includes","value","children","childResult","concat","push","filter","disabled","map","getTransferData","keys","list","transferDataItem","index","labelKey","label","valueKey","JSON","stringify","key","isAllNodeValid","needMatch","isTreeNodeValid","some","cloneTreeWithFilter","sourceTree","targetTree","forEach","newNode","cloneDeep","filterTransferData","isMatch","getLeefCount","nodes","total","child"],"mappings":"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"}