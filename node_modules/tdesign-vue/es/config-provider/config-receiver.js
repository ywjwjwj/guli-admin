/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import mergeWith from 'lodash/mergeWith';
import GLOBAL_CONFIG_ZH from './zh_CN_config.js';
import './type.js';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function getConfigReceiverMixins(componentName) {
  return Vue.extend({
    name: "TConfigProvider",
    inject: {
      globalConfig: {
        "default": void 0
      }
    },
    computed: {
      global: function global() {
        var defaultData = GLOBAL_CONFIG_ZH[componentName];

        if (this.globalConfig && this.globalConfig[componentName]) {
          return _objectSpread(_objectSpread({}, defaultData), this.globalConfig[componentName]);
        }

        return defaultData;
      }
    },
    methods: {
      t: function t(pattern, placement) {
        if (typeof pattern === "string") {
          if (!placement) return pattern;
          var regx = /\{\s*([\w-]+)\s*\}/g;
          var translated = pattern.replace(regx, function (match, key) {
            if (placement) {
              return String(placement[key]);
            }

            return "";
          });
          return translated;
        }

        if (typeof pattern === "function") {
          return pattern(placement);
        }

        return "";
      }
    }
  });
}
function getKeepAnimationMixins() {
  return Vue.extend({
    name: "TKeepAnimation",
    inject: {
      globalConfig: {
        "default": void 0
      }
    },
    computed: {
      keepAnimation: function keepAnimation() {
        var animationConfig = {
          include: ["ripple", "expand", "fade"],
          exclude: []
        };

        if (this.globalConfig && this.globalConfig.animation) {
          animationConfig = mergeWith(animationConfig, this.globalConfig.animation, function (objValue, srcValue) {
            if (Array.isArray(objValue)) {
              return srcValue;
            }
          });
        }

        var isKeep = function isKeep(type) {
          return animationConfig && !animationConfig.exclude.includes(type) && animationConfig.include.includes(type);
        };

        return {
          ripple: isKeep("ripple"),
          expand: isKeep("expand"),
          fade: isKeep("fade")
        };
      }
    }
  });
}

export { getConfigReceiverMixins as default, getKeepAnimationMixins };
//# sourceMappingURL=config-receiver.js.map
