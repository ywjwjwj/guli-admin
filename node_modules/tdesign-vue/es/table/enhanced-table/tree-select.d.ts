import Vue from 'vue';
import { TdPrimaryTableProps, TableRowData } from '../type';
import { PrimaryTableCol } from '..';
import TableTreeStore, { KeysType } from './tree-store';
export declare const childreMap: Map<any, any>;
export interface GetChildrenDataReturnValue {
    allChildren: Array<any>;
    allChildrenKeys: Array<string | number>;
}
export declare function getChildrenData(treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'], data: TableRowData, childrenKey: string, rowKey: string, r?: GetChildrenDataReturnValue): GetChildrenDataReturnValue;
export interface RemoveParams {
    selectedRowKeys: Array<string | number>;
    removeKeys: Array<string | number>;
}
export interface RemainData {
    data: Array<any>;
    keys: Array<string | number>;
}
export declare function removeChildrenKeys(p: RemoveParams, r?: RemainData): RemainData;
export interface GetKeyDataParams {
    treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'];
    data: Array<any>;
    column: PrimaryTableCol;
    keys: KeysType;
}
export interface GetRowDataParams {
    treeDataMap: InstanceType<typeof TableTreeStore>['treeDataMap'];
    selectedRowKeys: Array<string | number>;
}
export declare function getRowDataByKeys(p: GetRowDataParams): import("..").TableRowState<TableRowData>[];
declare type SelectChangeParams = Parameters<TdPrimaryTableProps['onSelectChange']>;
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    dataSource: TableRowData[];
    store: TableTreeStore<TableRowData>;
}, {
    onInnerSelectChange(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]): void;
    handleSelectAll(extraData: SelectChangeParams[1]): void;
    handleSelect(rowKeys: SelectChangeParams[0], extraData: SelectChangeParams[1]): void;
}, {
    childrenKey: string;
    rowDataKeys: KeysType;
}, {
    data: TableRowData[];
    rowKey: string;
    columns: PrimaryTableCol<TableRowData>[];
    tree: import("..").TableTreeConfig;
}>;
export default _default;
