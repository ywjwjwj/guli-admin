{"version":3,"file":"sort.js","sources":["../../../../src/table/primary-table/mixins/sort.tsx"],"sourcesContent":["import Vue from 'vue';\nimport isFunction from 'lodash/isFunction';\nimport { PrimaryTableProps } from '@src/table';\nimport SorterButton from '../sorter-button';\nimport { prefix } from '../../../config';\nimport {\n  SortInfo, PrimaryTableCol, TdPrimaryTableProps, SortType, DataType,\n} from '../../type';\nimport primaryTableProps from '../../primary-table-props';\nimport baseTableProps from '../../base-table-props';\nimport { emitEvent } from '../../../utils/event';\nimport { getTitle } from '../../util/common';\n\ntype Columns = TdPrimaryTableProps['columns'];\ntype SorterChangeContext = Parameters<TdPrimaryTableProps['onSortChange']>;\ntype ChangeContext = Parameters<TdPrimaryTableProps['onChange']>;\ntype TableData = TdPrimaryTableProps['data'];\n\nexport default Vue.extend({\n  name: `${prefix}-primary-table-sort`,\n  props: {\n    data: baseTableProps.data,\n    columns: primaryTableProps.columns,\n    sort: primaryTableProps.sort,\n    multipleSort: primaryTableProps.multipleSort,\n  },\n  data() {\n    return {\n      // 用于记录哪些字段是自定义排序函数\n      sorterFuncMap: {},\n    };\n  },\n  computed: {\n    sortArray(): Array<SortInfo> {\n      const { sort } = this;\n      if (!sort) return [];\n      return Array.isArray(sort) ? sort : [sort];\n    },\n    sortMap(): Record<string, SortInfo & { index: number }> {\n      const sortMap = {};\n      this.sortArray.forEach((info, index) => {\n        const { sortBy } = info;\n        sortMap[sortBy] = {\n          index,\n          ...info,\n        };\n      });\n      return sortMap;\n    },\n    localDataSort(): boolean {\n      return (!!Object.keys(this.sorterFuncMap).length);\n    },\n  },\n  methods: {\n    // 本地排序功能中，多字段排序需注意优先级\n    handleDataSort(): TableData {\n      const { data, sort } = this;\n      if (!sort || !this.localDataSort) return;\n      const formatedSort = sort instanceof Array ? sort : [sort];\n      // data为受控的，data.slice()浅拷贝，防止sort导致原数据变异\n      const newData: TableData = data.slice().sort((a: TableData[0], b: TableData[0]) => {\n        let sortResult = 0;\n        for (let i = 0, len = formatedSort.length; i < len; i++) {\n          const item = formatedSort[i];\n          const sortFunc = this.sorterFuncMap[item.sortBy];\n          // 上一个排序字段值相同时才会进行下一个字段的大小对比\n          if (sortResult === 0 && sortFunc) {\n            sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);\n            if (sortResult !== 0) {\n              sortResult = sortResult > 0 ? 1 : -1;\n            }\n          } else {\n            break;\n          }\n        }\n        return sortResult;\n      });\n      // Data 变化返回的是数据引用，为避免死循环，特此检测排序数据前后是否相同，如果相同则不再触发事件\n      if (JSON.stringify(newData) === JSON.stringify(this.data)) return;\n      emitEvent<Parameters<PrimaryTableProps['onDataChange']>>(this, 'data-change', newData);\n      return newData;\n    },\n    needSort(column: PrimaryTableCol): boolean {\n      const { sorter, sortType } = column;\n      return sorter && (!sortType || (Array.isArray(sortType) && sortType.length > 0) || typeof sortType === 'string');\n    },\n    getNextSortOrder(currentSortOrder: SortType, sortType: SortType) {\n      const sorterTypes: Array<SortType> = (!sortType || sortType === 'all') ? ['desc', 'asc'] : [sortType];\n      const idx: number = (sorterTypes.indexOf(currentSortOrder) + 1) % (sorterTypes.length + 1);\n      return sorterTypes[idx];\n    },\n    handleSortHeaderClick(col: PrimaryTableCol) {\n      // 本地数据 data 排序，需同时抛出 data-change\n      const newData = this.handleDataSort();\n      let sortInfo: SortInfo | Array<SortInfo>;\n      if (this.multipleSort) {\n        sortInfo = this.getMultipleNextSort(col);\n      } else {\n        sortInfo = this.getSingleNextSort(col);\n      }\n      emitEvent<SorterChangeContext>(this, 'sort-change', sortInfo, {\n        currentDataSource: newData || this.data,\n        col,\n      });\n      emitEvent<ChangeContext>(\n        this, 'change',\n        { sorter: sortInfo },\n        { trigger: 'sorter', currentData: newData || this.data },\n      );\n    },\n    getSortColumn(colKey: string) {\n      return this.columns.find((column) => column.colKey === colKey);\n    },\n    getSortOrder(descending: boolean) {\n      if (descending === undefined) return;\n      return descending ? 'desc' : 'asc';\n    },\n    // 排序行为：降序 -> 升序 -> 取消排序。只有 sortType 包含的排序方式才能进行排序。\n    getNextDescending(current: SortInfo, col: Columns[0]): boolean {\n      const { descending } = current || {};\n      const { sortType = 'all' } = col;\n      if (descending === true && ['asc', 'all'].includes(sortType)) return false;\n      if (descending === undefined && ['desc', 'all'].includes(sortType)) return true;\n    },\n    // 点击新排序字段，则默认按照降序排序；点击原字段，则排序字段不变仅切换排序方式\n    getSingleNextSort(col: Columns[0]): SortInfo {\n      const { colKey } = col;\n      const current = this.sortMap[colKey];\n      const next = this.getNextDescending(current, col);\n      if (next === undefined) return;\n      return { sortBy: colKey, descending: next };\n    },\n    getMultipleNextSort(col: PrimaryTableCol<DataType>): Array<SortInfo> {\n      if (!(this.sort instanceof Array)) return;\n      const { colKey } = col;\n      const result = [...this.sort];\n      for (let i = 0, len = this.sort.length; i < len; i++) {\n        if (this.sort[i].sortBy === colKey) {\n          const next = this.getSingleNextSort(col);\n          next ? (result[i] = next) : result.splice(i, 1);\n          return result;\n        }\n      }\n      result.push({ sortBy: colKey, descending: true });\n      return result;\n    },\n    getSorterColumns(columns: Columns): Columns {\n      const r = columns.map((item, index: number) => {\n        const column: PrimaryTableCol = { ...item };\n        if (column.children?.length) {\n          column.children = [...this.getSorterColumns(column.children)];\n        } else {\n          if (isFunction(column.sorter)) {\n            this.sorterFuncMap[column.colKey] = column.sorter;\n          }\n          const needSort = this.needSort(column);\n          if (needSort) {\n            const { sortType = 'all', colKey } = column;\n            const nextSort = this.getSingleNextSort(column);\n            const sorterButtonsProps = {\n              on: { click: () => this.handleSortHeaderClick(column) },\n              props: {\n                sortType,\n                sortOrder: this.getSortOrder(this.sortMap[colKey]?.descending),\n                nextSortOrder: this.getSortOrder(nextSort?.descending),\n              },\n              // class: `${prefix}-table-sort-icon`,\n            };\n            const title = getTitle(this, column, index);\n            column.title = () => (\n              <div class={`${prefix}-table__cell--sortable`}>\n                <div class={`${prefix}-table__cell--title`}>\n                  <div>{title}</div>\n                  {<SorterButton {...sorterButtonsProps} />}\n                </div>\n              </div>\n            );\n          }\n        }\n        return column;\n      });\n      this.handleDataSort();\n      return r;\n    },\n  },\n});\n"],"names":["Vue","extend","name","prefix","props","data","baseTableProps","columns","primaryTableProps","sort","multipleSort","sorterFuncMap","computed","sortArray","Array","isArray","sortMap","forEach","info","index","sortBy","localDataSort","Object","keys","length","methods","handleDataSort","formatedSort","newData","slice","a","b","sortResult","i","len","item","sortFunc","descending","JSON","stringify","emitEvent","needSort","column","sorter","sortType","getNextSortOrder","currentSortOrder","sorterTypes","idx","indexOf","handleSortHeaderClick","col","sortInfo","getMultipleNextSort","getSingleNextSort","currentDataSource","trigger","currentData","getSortColumn","colKey","find","getSortOrder","getNextDescending","current","includes","next","result","splice","push","getSorterColumns","r","map","children","isFunction","nextSort","sorterButtonsProps","on","click","sortOrder","nextSortOrder","title","getTitle"],"mappings":"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"}