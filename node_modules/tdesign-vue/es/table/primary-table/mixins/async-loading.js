/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

import _defineProperty from '@babel/runtime/helpers/defineProperty';
import Vue from 'vue';
import isString from 'lodash/isString';
import primaryTableProps from '../../primary-table-props.js';
import { Loading } from '../../../loading/index.js';
import { prefix } from '../../../config.js';
import { STATUS_CLASSNAMES } from '../../../utils/classnames.js';
import { emitEvent } from '../../../utils/event.js';
import { renderTNodeJSX } from '../../../utils/render-tnode.js';
import '../../../loading/loading.js';
import '../../../loading/icon/gradient.js';
import '../../../_common/js/loading/circle-adapter.js';
import '../../../_common/js/utils/set-style.js';
import '../../../_common/js/utils/helper.js';
import '@babel/runtime/helpers/objectWithoutProperties';
import '@babel/runtime/helpers/slicedToArray';
import '../../../utils/dom.js';
import 'raf';
import '../../../utils/easing.js';
import '../../../utils/transfer-dom.js';
import '../../../loading/props.js';
import '@babel/runtime/helpers/typeof';
import 'lodash/isObject';
import '../../../utils/withInstall.js';
import 'lodash/capitalize';
import './style/css.js';
import '../../../loading/type.js';
import '../../../loading/plugin.js';
import '../../../utils/helper.js';
import 'lodash/camelCase';

var ASYNC_LOADING_ROW = "async-loading-row";
var asyncLoadingMixin = Vue.extend({
  name: "".concat(prefix, "-primary-table-async-loading"),
  props: {
    asyncLoading: primaryTableProps.asyncLoading
  },
  data: function data() {
    return {
      pullDownLoading: false
    };
  },
  computed: {
    classes: function classes() {
      var _ref;

      return ["".concat(prefix, "-table__async-loading"), (_ref = {}, _defineProperty(_ref, STATUS_CLASSNAMES.loading, this.asyncLoading === "loading"), _defineProperty(_ref, STATUS_CLASSNAMES.loadMore, this.asyncLoading === "load-more"), _ref)];
    }
  },
  methods: {
    onLoadClick: function onLoadClick() {
      if (typeof this.asyncLoading !== "string") return;
      emitEvent(this, "async-loading-click", {
        status: this.asyncLoading
      });
    },
    renderAsyncLoadingRow: function renderAsyncLoadingRow() {
      var h = this.$createElement;
      var asyncLoadingNode = renderTNodeJSX(this, "asyncLoading");

      if (isString(asyncLoadingNode)) {
        var asyncLoading = this.asyncLoading;
        var loadingText = {
          "load-more": "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
          loading: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E"
        }[String(asyncLoading)];
        return h("div", {
          "class": this.classes,
          "on": {
            "click": this.onLoadClick
          }
        }, [h(Loading, {
          "attrs": {
            "loading": asyncLoading === "loading",
            "text": loadingText
          }
        })]);
      }

      if (![null, false, void 0].includes(asyncLoadingNode)) {
        return h("div", {
          "class": this.classes,
          "on": {
            "click": this.onLoadClick
          }
        }, [asyncLoadingNode]);
      }

      return null;
    }
  }
});

export { ASYNC_LOADING_ROW, asyncLoadingMixin as default };
//# sourceMappingURL=async-loading.js.map
