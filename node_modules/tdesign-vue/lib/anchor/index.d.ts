import { TdAnchorProps, TdAnchorTargetProps, TdAnchorItemProps } from './type';
import './style';
export * from './type';
export declare type AnchorProps = TdAnchorProps;
export declare type AnchorTargetProps = TdAnchorTargetProps;
export declare type AnchorItemProps = TdAnchorItemProps;
export declare const Anchor: import("vue/types/vue").ExtendedVue<import("./anchor").Anchor, {
    links: string[];
    active: string;
    activeLineStyle: boolean | {
        top: string;
        height: string;
        opacity: number;
    };
}, {
    getScrollContainer(): void;
    getAnchorTarget(link: string): HTMLElement;
    registerLink(link: string): void;
    unregisterLink(link: string): void;
    setCurrentActiveLink(link: string): Promise<void>;
    updateActiveLine(): void;
    emitChange(currentLink: string, prevLink: string): void;
    handleLinkClick(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }): void;
    handleScrollTo(link: string): Promise<void>;
    handleScroll(): void;
    renderCursor(): string | true | import("vue").VNode | import("vue/types/vnode").ScopedSlotReturnArray;
}, unknown, {
    affixProps: import("..").TdAffixProps;
    bounds: number;
    container: import("../common").ScrollContainer;
    cursor: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    size: "small" | "medium" | "large";
    targetOffset: number;
    onChange: (currentLink: string, prevLink: string) => void;
    onClick: (link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("./anchor").Anchor, {
    links: string[];
    active: string;
    activeLineStyle: boolean | {
        top: string;
        height: string;
        opacity: number;
    };
}, {
    getScrollContainer(): void;
    getAnchorTarget(link: string): HTMLElement;
    registerLink(link: string): void;
    unregisterLink(link: string): void;
    setCurrentActiveLink(link: string): Promise<void>;
    updateActiveLine(): void;
    emitChange(currentLink: string, prevLink: string): void;
    handleLinkClick(link: {
        href: string;
        title: string;
        e: MouseEvent;
    }): void;
    handleScrollTo(link: string): Promise<void>;
    handleScroll(): void;
    renderCursor(): string | true | import("vue").VNode | import("vue/types/vnode").ScopedSlotReturnArray;
}, unknown, {
    affixProps: import("..").TdAffixProps;
    bounds: number;
    container: import("../common").ScrollContainer;
    cursor: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    size: "small" | "medium" | "large";
    targetOffset: number;
    onChange: (currentLink: string, prevLink: string) => void;
    onClick: (link: {
        href: string;
        title: string;
        e: MouseEvent;
    }) => void;
}>>;
export declare const AnchorItem: import("vue/types/vue").ExtendedVue<import("./anchor-item").Anchor, unknown, {
    register(): void;
    unregister(): void;
    handleClick(e: MouseEvent): void;
    renderTitle(): import("vue/types/vnode").ScopedSlotReturnValue;
}, unknown, {
    href: string;
    target: "_self" | "_blank" | "_parent" | "_top";
    title: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("./anchor-item").Anchor, unknown, {
    register(): void;
    unregister(): void;
    handleClick(e: MouseEvent): void;
    renderTitle(): import("vue/types/vnode").ScopedSlotReturnValue;
}, unknown, {
    href: string;
    target: "_self" | "_blank" | "_parent" | "_top";
    title: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
}>>;
export declare const AnchorTarget: import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    copyText(): void;
}, unknown, {
    id: string;
    tag: string;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<import("vue").default, unknown, {
    copyText(): void;
}, unknown, {
    id: string;
    tag: string;
}>>;
export default Anchor;
