import './style';
export * from './interface';
export declare const Calendar: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").CalendarConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, import("./interface").CalendarData, {
    handleIE(): void;
    getCalendarWeekSlotData(item: import("./interface").CellColHeader): import("./type").CalendarWeek;
    getWeekDisplay(weekNum: number): string;
    checkMonthCellItemShowed(cellData: import("./type").CalendarCell): boolean;
    createCalendarCell(cellData: import("./type").CalendarCell): import("./type").CalendarCell;
    clickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    doubleClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    rightClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    getCellClickEventOptions(e: MouseEvent, cellData: import("./type").CalendarCell): import("./interface").CellEventOption;
    controllerChange(): void;
    onWeekendToggleClick(): void;
    checkMonthCellColHeaderVisibled(item: import("./interface").CellColHeader): boolean;
    checkControllerDisabled(name: string, propsName: string): boolean;
    checkControllerVisible(name: string): boolean;
    toCurrent(value?: import("./type").CalendarValue): void;
    checkMonthAndYearSelecterDisabled(year: number, month: number): boolean;
    renderControl(): JSX.Element;
}, {
    realFirstDayOfWeek: number;
    TEXT_MAP: import("./interface").TextConfigType;
    weekDipalyText: string[] | ((h: import("vue").CreateElement, props: import("./type").CalendarWeek) => import("vue/types/vnode").ScopedSlotReturnValue);
    calendarCls: Record<string, any>;
    calendarPanelCls: Record<string, any>;
    isWeekRender: boolean;
    rangeFromTo: import("./interface").CalendarRange;
    controllerOptions: import("./type").ControllerOptions;
    cellColHeaders: import("./interface").CellColHeader[];
    yearSelectOptionList: import("./interface").YearMonthOption[];
    monthSelectOptionList: import("./interface").YearMonthOption[];
    modeSelectOptionList: import("./interface").ModeOption[];
    monthCellsData: import("./type").CalendarCell[][];
    yearCellsData: import("./type").CalendarCell[][];
    controllerConfigData: Record<string, any>;
    isControllerVisible: boolean;
    weekendBtnText: string;
    weekendBtnVBind: object;
    currentBtnText: string;
    currentBtnVBind: object;
    isModeVisible: boolean;
    isYearVisible: boolean;
    isMonthVisible: boolean;
    isWeekendToggleVisible: boolean;
    isCurrentBtnVisible: boolean;
    isModeDisabled: boolean;
    isYearDisabled: boolean;
    isMonthDisabled: boolean;
    isWeekendToggleDisabled: boolean;
    isCurrentBtnDisabled: boolean;
    filterYearStr: string;
    filterMonthStr: string;
    filterYearMonth: {
        month: string;
        year: string;
    };
}, {
    cell: string | ((h: import("vue").CreateElement, props: import("./type").CalendarCell) => import("vue/types/vnode").ScopedSlotReturnValue);
    cellAppend: string | ((h: import("vue").CreateElement, props: import("./type").CalendarCell) => import("vue/types/vnode").ScopedSlotReturnValue);
    controllerConfig: any;
    fillWithZero: any;
    firstDayOfWeek: number;
    format: string;
    head: string | ((h: import("vue").CreateElement, props: import("./type").ControllerOptions) => import("vue/types/vnode").ScopedSlotReturnValue);
    isShowWeekendDefault: boolean;
    mode: "month" | "year";
    preventCellContextmenu: boolean;
    range: import("./type").CalendarValue[];
    theme: "full" | "card";
    value: import("./type").CalendarValue;
    week: string[] | ((h: import("vue").CreateElement, props: import("./type").CalendarWeek) => import("vue/types/vnode").ScopedSlotReturnValue);
    onCellClick: (options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void;
    onCellDoubleClick: (options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void;
    onCellRightClick: (options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void;
    onControllerChange: (options: import("./type").ControllerOptions) => void;
    onMonthChange: (options: {
        month: string;
        year: string;
    }) => void;
}> & import("vue").PluginObject<import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("..").CalendarConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, import("./interface").CalendarData, {
    handleIE(): void;
    getCalendarWeekSlotData(item: import("./interface").CellColHeader): import("./type").CalendarWeek;
    getWeekDisplay(weekNum: number): string;
    checkMonthCellItemShowed(cellData: import("./type").CalendarCell): boolean;
    createCalendarCell(cellData: import("./type").CalendarCell): import("./type").CalendarCell;
    clickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    doubleClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    rightClickCell(e: MouseEvent, cellData: import("./type").CalendarCell): void;
    getCellClickEventOptions(e: MouseEvent, cellData: import("./type").CalendarCell): import("./interface").CellEventOption;
    controllerChange(): void;
    onWeekendToggleClick(): void;
    checkMonthCellColHeaderVisibled(item: import("./interface").CellColHeader): boolean;
    checkControllerDisabled(name: string, propsName: string): boolean;
    checkControllerVisible(name: string): boolean;
    toCurrent(value?: import("./type").CalendarValue): void;
    checkMonthAndYearSelecterDisabled(year: number, month: number): boolean;
    renderControl(): JSX.Element;
}, {
    realFirstDayOfWeek: number;
    TEXT_MAP: import("./interface").TextConfigType;
    weekDipalyText: string[] | ((h: import("vue").CreateElement, props: import("./type").CalendarWeek) => import("vue/types/vnode").ScopedSlotReturnValue);
    calendarCls: Record<string, any>;
    calendarPanelCls: Record<string, any>;
    isWeekRender: boolean;
    rangeFromTo: import("./interface").CalendarRange;
    controllerOptions: import("./type").ControllerOptions;
    cellColHeaders: import("./interface").CellColHeader[];
    yearSelectOptionList: import("./interface").YearMonthOption[];
    monthSelectOptionList: import("./interface").YearMonthOption[];
    modeSelectOptionList: import("./interface").ModeOption[];
    monthCellsData: import("./type").CalendarCell[][];
    yearCellsData: import("./type").CalendarCell[][];
    controllerConfigData: Record<string, any>;
    isControllerVisible: boolean;
    weekendBtnText: string;
    weekendBtnVBind: object;
    currentBtnText: string;
    currentBtnVBind: object;
    isModeVisible: boolean;
    isYearVisible: boolean;
    isMonthVisible: boolean;
    isWeekendToggleVisible: boolean;
    isCurrentBtnVisible: boolean;
    isModeDisabled: boolean;
    isYearDisabled: boolean;
    isMonthDisabled: boolean;
    isWeekendToggleDisabled: boolean;
    isCurrentBtnDisabled: boolean;
    filterYearStr: string;
    filterMonthStr: string;
    filterYearMonth: {
        month: string;
        year: string;
    };
}, {
    cell: string | ((h: import("vue").CreateElement, props: import("./type").CalendarCell) => import("vue/types/vnode").ScopedSlotReturnValue);
    cellAppend: string | ((h: import("vue").CreateElement, props: import("./type").CalendarCell) => import("vue/types/vnode").ScopedSlotReturnValue);
    controllerConfig: any;
    fillWithZero: any;
    firstDayOfWeek: number;
    format: string;
    head: string | ((h: import("vue").CreateElement, props: import("./type").ControllerOptions) => import("vue/types/vnode").ScopedSlotReturnValue);
    isShowWeekendDefault: boolean;
    mode: "month" | "year";
    preventCellContextmenu: boolean;
    range: import("./type").CalendarValue[];
    theme: "full" | "card";
    value: import("./type").CalendarValue;
    week: string[] | ((h: import("vue").CreateElement, props: import("./type").CalendarWeek) => import("vue/types/vnode").ScopedSlotReturnValue);
    onCellClick: (options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void;
    onCellDoubleClick: (options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void;
    onCellRightClick: (options: {
        cell: import("./type").CalendarCell;
        e: MouseEvent;
    }) => void;
    onControllerChange: (options: import("./type").ControllerOptions) => void;
    onMonthChange: (options: {
        month: string;
        year: string;
    }) => void;
}>>;
export default Calendar;
