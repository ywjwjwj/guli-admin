{"version":3,"file":"badge.js","sources":["../../src/badge/badge.tsx"],"sourcesContent":["import Vue from 'vue';\nimport { prefix } from '../config';\nimport props from './props';\nimport { renderTNodeJSX } from '../utils/render-tnode';\n\nconst name = `${prefix}-badge`;\n\nexport default Vue.extend({\n  name: 'TBadge',\n\n  props: { ...props },\n\n  methods: {\n    getContent() {\n      if (this.dot) return '';\n      if (typeof this.count === 'function') {\n        return renderTNodeJSX(this, 'count');\n      }\n      if (isNaN(Number(this.count))) {\n        return this.count;\n      }\n      const count = Number(this.count);\n      return count > this.maxCount ? `${this.maxCount}+` : count;\n    },\n    isSmall() {\n      return this.size === 'small';\n    },\n    isZero() {\n      const content = this.getContent();\n      return content === 0 || content === '0';\n    },\n    isHidden() {\n      return !this.showZero && this.isZero();\n    },\n    getOffset() {\n      if (!this.offset) return {};\n      let [xOffset, yOffset]: Array<string | number> = this.offset;\n      xOffset = isNaN(Number(xOffset)) ? xOffset : `${xOffset}px`;\n      yOffset = isNaN(Number(yOffset)) ? yOffset : `${yOffset}px`;\n      return { xOffset, yOffset };\n    },\n  },\n\n  render() {\n    const { dot, shape, color } = this.$props;\n\n    const content = this.getContent();\n    const isHidden = this.isHidden();\n    const children = this.$slots.default;\n    const { xOffset, yOffset } = this.getOffset();\n    const badgeClassNames = [\n      {\n        [`${name}--dot`]: !!dot,\n        [`${name}--circle`]: !dot && shape === 'circle',\n        [`${name}--round`]: shape === 'round',\n        [`${name}--ribbon`]: shape === 'ribbon',\n        [`${prefix}-size-s`]: this.isSmall(),\n      },\n    ];\n    const inlineStyle = {\n      background: `${color}`,\n      right: xOffset,\n      top: yOffset,\n    };\n\n    return (\n      <div class={name}>\n        {children || null}\n        {isHidden ? null : (\n          <sup class={badgeClassNames} style={inlineStyle}>\n            {content}\n          </sup>\n        )}\n      </div>\n    );\n  },\n});\n"],"names":["name","prefix","Vue","extend","props","methods","getContent","dot","count","renderTNodeJSX","isNaN","Number","maxCount","isSmall","size","isZero","content","isHidden","showZero","getOffset","offset","_slicedToArray","xOffset","yOffset","render","$props","shape","color","children","$slots","badgeClassNames","_defineProperty","inlineStyle","background","right","top"],"mappings":"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"}