import { PopupProps } from '../popup';
import { TreeProps, TreeNodeModel } from '../tree';
import { TNode, TreeOptionData } from '../common';
export interface TdTreeSelectProps<DataOption extends TreeOptionData = TreeOptionData> {
    clearable?: boolean;
    collapsedItems?: TNode<{
        value: DataOption[];
        collapsedSelectedItems: DataOption[];
        count: number;
    }>;
    data?: Array<DataOption>;
    disabled?: boolean;
    empty?: string | TNode;
    filter?: (filterWords: string, option: DataOption) => boolean;
    filterable?: boolean;
    loading?: boolean;
    loadingText?: string | TNode;
    max?: number;
    minCollapsedNum?: number;
    multiple?: boolean;
    placeholder?: string;
    popupProps?: PopupProps;
    prefixIcon?: TNode;
    showCheckAlll?: boolean;
    size?: 'small' | 'medium' | 'large';
    treeProps?: TreeProps;
    value?: TreeSelectValue;
    defaultValue?: TreeSelectValue;
    valueDisplay?: TNode<{
        value: DataOption[];
        onClose: () => void;
    }>;
    valueType?: 'value' | 'object';
    onBlur?: (context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void;
    onChange?: (value: TreeSelectValue, context: {
        node: TreeNodeModel<DataOption>;
    }) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onFocus?: (context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void;
    onRemove?: (options: RemoveOptions<DataOption>) => void;
    onSearch?: (filterWords: string) => void;
}
export declare type TreeSelectValue = string | number | object | Array<TreeSelectValue>;
export interface RemoveOptions<T> {
    value: string | number | object;
    data: T;
    e: MouseEvent;
}
export interface TreeSelectNodeValue {
    value: TreeSelectValue;
    label: string;
}
