import { ScopedSlotReturnValue } from 'vue/types/vnode';
import { TreeSelectConfig } from '../config-provider/config-receiver';
import { TreeNodeModel, TreeNodeValue } from '../tree';
import { InputBlurEventParams, InputFocustEventParams } from '../input';
import { TreeSelectValue, TreeSelectNodeValue } from './type';
import { ClassName, TreeOptionData } from '../common';
import { RemoveOptions } from './interface';
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: TreeSelectConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue/types/umd") & import("vue").default, {
    formDisabled: any;
    visible: boolean;
    isHover: boolean;
    focusing: boolean;
    defaultProps: import("../popup").TdPopupProps;
    filterText: string;
    filterByText: any;
    actived: any[];
    expanded: any[];
    nodeInfo: any;
    treeKey: number;
}, {
    popupVisibleChange(visible: boolean): Promise<void>;
    removeTag(index: number, data: TreeOptionData, e?: MouseEvent): void;
    change(value: TreeSelectValue, node: TreeNodeModel<TreeOptionData>): void;
    clear(e: MouseEvent): void;
    focus(ctx: InputFocustEventParams[1]): void;
    blur(ctx: InputBlurEventParams[1]): void;
    remove(options: RemoveOptions<TreeOptionData>): void;
    search(filterWords: string): void;
    treeNodeChange(value: Array<TreeNodeValue>, context: {
        node: TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }): void;
    treeNodeActive(value: Array<TreeNodeValue>, context: {
        node: TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }): void;
    treeNodeExpand(value: Array<TreeNodeValue>): void;
    onInputChange(): void;
    getTreeData(): {
        label: any;
        value: any;
    }[];
    changeNodeInfo(): Promise<void>;
    getTreeNode(data: Array<TreeOptionData>, targetValue: TreeSelectValue): TreeSelectNodeValue | null;
    treeRerender(): void;
}, {
    tDisabled: boolean;
    classes: ClassName;
    popupClass: ClassName;
    isObjectValue: boolean;
    checked: TreeSelectValue[];
    showArrow: boolean;
    showLoading: boolean;
    showClose: boolean;
    showPlaceholder: boolean;
    showFilter: boolean;
    showTree: boolean;
    popupObject: import("../popup").TdPopupProps;
    selectedSingle: TreeSelectValue;
    selectedMultiple: TreeSelectValue[];
    multiLimitDisabled: boolean;
    filterPlaceholder: TreeSelectValue;
    loadingTextSlot: ScopedSlotReturnValue;
    emptySlot: ScopedSlotReturnValue;
    prefixIconSlot: ScopedSlotReturnValue;
    realLabel: string;
    realValue: string;
    tagList: TreeSelectValue[];
}, {
    clearable: boolean;
    collapsedItems: (h: import("vue").CreateElement, props: {
        value: TreeOptionData[];
        collapsedSelectedItems: TreeOptionData[];
        count: number;
    }) => ScopedSlotReturnValue;
    data: TreeOptionData[];
    disabled: boolean;
    empty: string | ((h: import("vue").CreateElement) => ScopedSlotReturnValue);
    filter: (filterWords: string, option: TreeOptionData) => boolean;
    filterable: boolean;
    loading: boolean;
    loadingText: string | ((h: import("vue").CreateElement) => ScopedSlotReturnValue);
    max: number;
    minCollapsedNum: number;
    multiple: boolean;
    placeholder: string;
    popupProps: import("../popup").TdPopupProps;
    prefixIcon: (h: import("vue").CreateElement) => ScopedSlotReturnValue;
    showCheckAlll: boolean;
    size: "small" | "medium" | "large";
    treeProps: import("../tree").TreeProps;
    value: TreeSelectValue;
    defaultValue: TreeSelectValue;
    valueDisplay: (h: import("vue").CreateElement, props: {
        value: TreeOptionData[];
        onClose: () => void;
    }) => ScopedSlotReturnValue;
    valueType: "object" | "value";
    onBlur: (context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void;
    onChange: (value: TreeSelectValue, context: {
        node: TreeNodeModel<TreeOptionData>;
    }) => void;
    onClear: (context: {
        e: MouseEvent;
    }) => void;
    onFocus: (context: {
        value: TreeSelectValue;
        e: FocusEvent;
    }) => void;
    onRemove: (options: import("./type").RemoveOptions<TreeOptionData>) => void;
    onSearch: (filterWords: string) => void;
}>;
export default _default;
