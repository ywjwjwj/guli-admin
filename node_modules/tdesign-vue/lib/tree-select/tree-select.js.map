{"version":3,"file":"tree-select.js","sources":["../../src/tree-select/tree-select.tsx"],"sourcesContent":["import { VNode } from 'vue';\nimport { ScopedSlotReturnValue } from 'vue/types/vnode';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isNumber from 'lodash/isNumber';\nimport isString from 'lodash/isString';\nimport isBoolean from 'lodash/isBoolean';\nimport isObject from 'lodash/isObject';\nimport isFunction from 'lodash/isFunction';\nimport isNil from 'lodash/isNil';\nimport { CloseCircleFilledIcon } from 'tdesign-icons-vue';\nimport Loading from '../loading';\nimport mixins from '../utils/mixins';\nimport getConfigReceiverMixins, { TreeSelectConfig } from '../config-provider/config-receiver';\nimport { renderTNodeJSX } from '../utils/render-tnode';\nimport { emitEvent } from '../utils/event';\nimport Popup, { PopupProps } from '../popup';\nimport Tag from '../tag';\nimport Tree, { TreeNodeModel, TreeNodeValue } from '../tree';\nimport Input, { InputValue, InputBlurEventParams, InputFocustEventParams } from '../input';\nimport FakeArrow from '../common-components/fake-arrow';\nimport CLASSNAMES from '../utils/classnames';\nimport props from './props';\nimport { TreeSelectValue, TdTreeSelectProps, TreeSelectNodeValue } from './type';\nimport { ClassName, TreeOptionData } from '../common';\nimport { prefix } from '../config';\nimport { RemoveOptions, NodeOptions } from './interface';\nimport { TreeInstanceFunctions } from '../tree/type';\n\nexport default mixins(getConfigReceiverMixins<Vue, TreeSelectConfig>('treeSelect')).extend({\n  name: 'TTreeSelect',\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  props,\n  data() {\n    return {\n      // 表单控制禁用态时的变量\n      formDisabled: undefined,\n      visible: false,\n      isHover: false,\n      focusing: false,\n      defaultProps: {\n        trigger: 'click',\n        placement: 'bottom-left',\n        overlayClassName: '',\n        overlayStyle: (trigger) => ({\n          width: `${trigger.offsetWidth}px`,\n        }),\n      } as PopupProps,\n      filterText: '',\n      filterByText: null,\n      actived: [],\n      expanded: [],\n      nodeInfo: null,\n      treeKey: 0,\n    };\n  },\n  watch: {\n    async value() {\n      await this.changeNodeInfo();\n      if (!this.multiple) {\n        this.actived = this.nodeInfo ? [this.nodeInfo.value] : [];\n      }\n    },\n    async data() {\n      await this.changeNodeInfo();\n      this.treeRerender();\n    },\n  },\n  computed: {\n    tDisabled(): boolean {\n      return this.formDisabled || this.disabled;\n    },\n    classes(): ClassName {\n      return [\n        `${prefix}-select`,\n        `${prefix}-select-polyfill`,\n        {\n          [CLASSNAMES.STATUS.disabled]: this.tDisabled,\n          [CLASSNAMES.STATUS.active]: this.visible,\n          [CLASSNAMES.SIZE[this.size]]: this.size,\n          [`${prefix}-has-prefix`]: this.prefixIconSlot,\n          [`${prefix}-select-selected`]: this.selectedSingle || !isEmpty(this.selectedMultiple),\n        },\n      ];\n    },\n    popupClass(): ClassName {\n      const { popupObject } = this;\n      return `${popupObject.overlayClassName} ${prefix}-select__dropdown narrow-scrollbar`;\n    },\n    isObjectValue(): boolean {\n      return this.valueType === 'object';\n    },\n    checked(): Array<TreeSelectValue> {\n      if (this.multiple) {\n        if (this.isObjectValue) {\n          return isArray(this.value) ? this.value.map((item) => (item as NodeOptions).value) : [];\n        }\n        return isArray(this.value) ? this.value : [];\n      }\n      return [];\n    },\n    showArrow(): boolean {\n      return (\n        !this.clearable\n        || !this.isHover\n        || this.tDisabled\n        || (!this.multiple && !this.value && this.value !== 0)\n        || (this.multiple && isArray(this.value) && isEmpty(this.value))\n      );\n    },\n    showLoading(): boolean {\n      return this.loading && !this.tDisabled;\n    },\n    showClose(): boolean {\n      return (\n        this.clearable\n        && this.isHover\n        && !this.tDisabled\n        && ((!this.multiple && (!!this.value || this.value === 0))\n          || (this.multiple && !isEmpty(this.value as Array<TreeSelectValue>)))\n      );\n    },\n    showPlaceholder(): boolean {\n      if (\n        !this.showFilter\n        && ((isString(this.value) && this.value === '' && !this.selectedSingle)\n          || (isArray(this.value) && isEmpty(this.value))\n          || isNil(this.value))\n      ) {\n        return true;\n      }\n      return false;\n    },\n    showFilter(): boolean {\n      if (this.tDisabled) {\n        return false;\n      }\n      if (!this.multiple && this.selectedSingle && (this.filterable || isFunction(this.filter))) {\n        return this.visible;\n      }\n      return this.filterable || isFunction(this.filter);\n    },\n    showTree(): boolean {\n      return !this.loading;\n    },\n    popupObject(): PopupProps {\n      const propsObject = this.popupProps ? { ...this.defaultProps, ...this.popupProps } : this.defaultProps;\n      return propsObject;\n    },\n    selectedSingle(): TreeSelectValue {\n      if (!this.multiple && (isString(this.value) || isNumber(this.value) || isObject(this.value))) {\n        if (this.nodeInfo) {\n          return (this.nodeInfo as NodeOptions).label;\n        }\n        return `${this.value}`;\n      }\n      return '';\n    },\n    selectedMultiple(): Array<TreeSelectValue> {\n      if (this.multiple && isArray(this.value) && !isEmpty(this.value)) {\n        return this.value;\n      }\n      return [];\n    },\n    multiLimitDisabled() {\n      if (this.multiple && this.max && isArray(this.value) && this.max <= this.value.length) {\n        return true;\n      }\n      return false;\n    },\n    filterPlaceholder(): TreeSelectValue {\n      if (this.multiple && isArray(this.value) && !isEmpty(this.value)) {\n        return '';\n      }\n      const single = this.selectedSingle instanceof Array ? this.selectedSingle[0] : this.selectedSingle;\n      if (!this.multiple && single) {\n        return single;\n      }\n      return this.placeholder;\n    },\n    loadingTextSlot(): ScopedSlotReturnValue {\n      const useLocale = !this.loadingText && !this.$scopedSlots.loadingText;\n      return useLocale ? (\n        <div class={`${prefix}-select__empty`}>{this.t(this.global.loadingText)}</div>\n      ) : (\n        renderTNodeJSX(this, 'loadingText')\n      );\n    },\n    emptySlot(): ScopedSlotReturnValue {\n      const useLocale = !this.empty && !this.$scopedSlots.empty;\n      return useLocale ? (\n        <div class={`${prefix}-select__empty`}>{this.t(this.global.empty)}</div>\n      ) : (\n        renderTNodeJSX(this, 'empty')\n      );\n    },\n    prefixIconSlot(): ScopedSlotReturnValue {\n      return renderTNodeJSX(this, 'prefixIcon');\n    },\n    realLabel(): string {\n      const { treeProps } = this;\n      if (!isEmpty(treeProps) && !isEmpty(treeProps.keys)) {\n        return treeProps.keys.label || 'label';\n      }\n      return 'label';\n    },\n    realValue(): string {\n      const { treeProps } = this;\n      if (!isEmpty(treeProps) && !isEmpty(treeProps.keys)) {\n        return treeProps.keys.value || 'value';\n      }\n      return 'value';\n    },\n    tagList(): Array<TreeSelectValue> {\n      if (this.nodeInfo && isArray(this.nodeInfo)) {\n        return this.nodeInfo.map((node) => node.label);\n      }\n      return this.selectedMultiple;\n    },\n  },\n  async mounted() {\n    if (!this.value && this.defaultValue) {\n      await this.change(this.defaultValue, null);\n    }\n    if (this.isObjectValue) {\n      this.actived = isArray(this.value)\n        ? this.value.map((item) => (item as NodeOptions).value)\n        : [(this.value as NodeOptions).value];\n    } else {\n      this.actived = isArray(this.value) ? this.value : [this.value];\n    }\n    this.changeNodeInfo();\n  },\n  methods: {\n    async popupVisibleChange(visible: boolean) {\n      await (this.visible = visible);\n      if (this.showFilter && this.visible) {\n        const searchInput = this.$refs.input as HTMLElement;\n        searchInput?.focus();\n        this.focusing = true;\n      }\n    },\n    removeTag(index: number, data: TreeOptionData, e?: MouseEvent) {\n      if (this.tDisabled) {\n        return;\n      }\n      this.remove({ value: this.value[index], data, e });\n      isArray(this.value) && this.value.splice(index, 1);\n      this.change(this.value, null);\n    },\n    change(value: TreeSelectValue, node: TreeNodeModel<TreeOptionData>) {\n      emitEvent<Parameters<TdTreeSelectProps['onChange']>>(this, 'change', value, { node });\n      this.changeNodeInfo();\n    },\n    clear(e: MouseEvent) {\n      const defaultValue: TreeSelectValue = this.multiple ? [] : '';\n      this.change(defaultValue, null);\n      this.actived = [];\n      this.filterText = '';\n      emitEvent<Parameters<TdTreeSelectProps['onClear']>>(this, 'clear', { e });\n    },\n    focus(ctx: InputFocustEventParams[1]) {\n      this.focusing = true;\n      emitEvent<Parameters<TdTreeSelectProps['onFocus']>>(this, 'focus', { value: this.value, ...ctx });\n    },\n    blur(ctx: InputBlurEventParams[1]) {\n      this.focusing = false;\n      this.filterText = '';\n      emitEvent<Parameters<TdTreeSelectProps['onBlur']>>(this, 'blur', { value: this.value, ...ctx });\n    },\n    remove(options: RemoveOptions<TreeOptionData>) {\n      emitEvent<Parameters<TdTreeSelectProps['onRemove']>>(this, 'remove', options);\n    },\n    search(filterWords: string) {\n      emitEvent<Parameters<TdTreeSelectProps['onSearch']>>(this, 'search', filterWords);\n    },\n    treeNodeChange(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent }) {\n      let current: TreeSelectValue = value;\n      if (this.isObjectValue) {\n        current = value.map((nodeValue) => this.getTreeNode(this.data, nodeValue));\n      }\n      this.change(current, context.node);\n      this.actived = value;\n    },\n    treeNodeActive(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<TreeOptionData>; e: MouseEvent }) {\n      // 多选模式屏蔽 Active 事件\n      if (this.multiple) {\n        return;\n      }\n      let current: TreeSelectValue = value;\n      if (this.isObjectValue) {\n        const nodeValue = isEmpty(value) ? '' : value[0];\n        current = this.getTreeNode(this.data, nodeValue);\n      } else {\n        current = isEmpty(value) ? '' : value[0];\n      }\n      this.change(current, context.node);\n      this.actived = value;\n      this.visible = false;\n    },\n    treeNodeExpand(value: Array<TreeNodeValue>) {\n      this.expanded = value;\n    },\n    onInputChange() {\n      this.filterByText = (node: TreeNodeModel<TreeOptionData>) => {\n        if (isFunction(this.filter)) {\n          const filter: boolean | Promise<boolean> = this.filter(this.filterText, node);\n          if (isBoolean(filter)) {\n            return filter;\n          }\n        }\n        return node.data[this.realLabel].indexOf(this.filterText) >= 0;\n      };\n      this.search(this.filterText);\n    },\n    // get tree data, even load async load\n    getTreeData() {\n      return ((this.$refs.tree as TreeInstanceFunctions)?.getItems() || []).map((item) => ({\n        label: item.data[this.realLabel],\n        value: item.data[this.realValue],\n      }));\n    },\n    async changeNodeInfo() {\n      await this.value;\n\n      if (!this.multiple && this.value) {\n        const nodeValue = this.isObjectValue ? (this.value as NodeOptions).value : this.value;\n        const node = this.getTreeNode(this.data, nodeValue);\n        if (!node) {\n          this.nodeInfo = { label: nodeValue, value: nodeValue };\n        } else {\n          this.nodeInfo = node;\n        }\n      } else if (this.multiple && isArray(this.value)) {\n        this.nodeInfo = this.value.map((value) => {\n          const nodeValue = this.isObjectValue ? (value as NodeOptions).value : value;\n          const node = this.getTreeNode(this.data, nodeValue);\n          if (!node) {\n            return { label: nodeValue, value: nodeValue };\n          }\n          return node;\n        });\n      } else {\n        this.nodeInfo = null;\n      }\n    },\n    getTreeNode(data: Array<TreeOptionData>, targetValue: TreeSelectValue): TreeSelectNodeValue | null {\n      for (let i = 0, len = data.length; i < len; i++) {\n        if (data[i][this.realValue] === targetValue) {\n          return { label: data[i][this.realLabel], value: data[i][this.realValue] };\n        }\n        const childrenData = data[i]?.children;\n        if (childrenData) {\n          const data = Array.isArray(childrenData) ? childrenData : this.getTreeData();\n          const result = this.getTreeNode(data, targetValue);\n          if (!isNil(result)) {\n            return result;\n          }\n        }\n      }\n      return null;\n    },\n    treeRerender() {\n      this.treeKey += 1;\n    },\n  },\n  render(): VNode {\n    const {\n      treeProps, popupObject, classes, popupClass, treeKey,\n    } = this;\n    const iconStyle = { 'font-size': this.size };\n    const treeItem = (\n      <Tree\n        ref=\"tree\"\n        v-show={this.showTree}\n        key={treeKey}\n        value={this.checked}\n        hover\n        data={this.data}\n        activable={!this.multiple}\n        checkable={this.multiple}\n        disabled={this.tDisabled || this.multiLimitDisabled}\n        empty={this.empty}\n        size={this.size}\n        filter={this.filterByText}\n        actived={this.actived}\n        expanded={this.expanded}\n        activeMultiple={this.multiple}\n        onChange={this.treeNodeChange}\n        onActive={this.treeNodeActive}\n        onExpand={this.treeNodeExpand}\n        expandOnClickNode={true}\n        checkStrictly={false}\n        {...{ props: treeProps }}\n      >\n        <template slot=\"empty\">{this.emptySlot}</template>\n      </Tree>\n    );\n    const searchInput = (\n      <Input\n        ref=\"input\"\n        v-show={this.showFilter}\n        v-model={this.filterText}\n        class={`${prefix}-select__input`}\n        size={this.size}\n        disabled={this.tDisabled}\n        placeholder={this.filterPlaceholder}\n        onChange={this.onInputChange}\n        onBlur={(value: InputValue, context: InputBlurEventParams[1]) => this.blur(context)}\n        onFocus={(value: InputValue, context: InputFocustEventParams[1]) => this.focus(context)}\n      />\n    );\n    const tagItem = !isEmpty(this.tagList) && (this.valueDisplay || this.$scopedSlots.valueDisplay)\n      ? renderTNodeJSX(this, 'valueDisplay', {\n        params: {\n          value: this.nodeInfo,\n          onClose: (index: number) => this.removeTag(index, null),\n        },\n      })\n      : this.tagList.map((label, index) => (\n            <Tag\n              v-show={this.minCollapsedNum <= 0 || index < this.minCollapsedNum}\n              key={index}\n              size={this.size}\n              closable={!this.tDisabled}\n              disabled={this.tDisabled}\n              maxWidth={300}\n              title={label}\n              onClose={(e: MouseEvent) => this.removeTag(index, null, e)}\n            >\n              {label}\n            </Tag>\n      ));\n    const selectedSingle = this.valueDisplay || this.$scopedSlots.valueDisplay ? (\n      renderTNodeJSX(this, 'valueDisplay', {\n        params: { value: this.nodeInfo || { [this.realLabel]: '', [this.realValue]: '' } },\n      })\n    ) : (\n        <span title={this.selectedSingle} class={`${prefix}-select__single`}>\n          {this.selectedSingle}\n        </span>\n    );\n    const collapsedItem = (this.collapsedItems || this.$scopedSlots.collapsedItems)\n      && this.minCollapsedNum > 0\n      && this.tagList.length > this.minCollapsedNum ? (\n        renderTNodeJSX(this, 'collapsedItems', {\n          params: {\n            count: this.tagList.length - this.minCollapsedNum,\n            value: this.selectedMultiple,\n            collapsedSelectedItems: this.selectedMultiple.slice(this.minCollapsedNum),\n          },\n        })\n      ) : (\n        <Tag v-show={this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum} size={this.size}>\n          {`+${this.tagList.length - this.minCollapsedNum}`}\n        </Tag>\n      );\n    return (\n      <div ref=\"treeSelect\" class={`${prefix}-select__wrap`}>\n        <Popup\n          ref=\"popup\"\n          class={`${prefix}-select__popup-reference`}\n          visible={this.visible}\n          disabled={this.tDisabled}\n          placement={popupObject.placement}\n          trigger={popupObject.trigger}\n          overlayStyle={popupObject.overlayStyle}\n          overlayClassName={popupClass}\n          on={{ 'visible-change': this.popupVisibleChange }}\n          expandAnimation={true}\n        >\n          <div class={classes} onmouseenter={() => (this.isHover = true)} onmouseleave={() => (this.isHover = false)}>\n            {this.prefixIconSlot && <span class={`${prefix}-select__left-icon`}>{this.prefixIconSlot[0]}</span>}\n            <span v-show={this.showPlaceholder} class={`${prefix}-select__placeholder`}>\n              {this.placeholder || this.global.placeholder}\n            </span>\n            {tagItem}\n            {collapsedItem}\n            {!this.multiple && !this.showPlaceholder && !this.showFilter && selectedSingle}\n            {searchInput}\n            {this.showArrow && !this.showLoading && (\n              <FakeArrow\n                overlayClassName={`${prefix}-select__right-icon ${prefix}-select__right-icon-polyfill`}\n                overlayStyle={iconStyle}\n                isActive={this.visible && !this.tDisabled}\n              />\n            )}\n            <CloseCircleFilledIcon\n              v-show={this.showClose && !this.showLoading}\n              class={[\n                `${prefix}-select__right-icon`,\n                `${prefix}-select__right-icon-polyfill`,\n                `${prefix}-select__right-icon-clear`,\n              ]}\n              size={this.size}\n              nativeOnClick={this.clear}\n            />\n            <Loading\n              v-show={this.showLoading}\n              class={`${prefix}-select__right-icon ${prefix}-select__right-icon-polyfill ${prefix}-select__active-icon`}\n              size=\"small\"\n            />\n          </div>\n          <div slot=\"content\">\n            <p v-show={this.showLoading} class={`${prefix}-select__loading-tips ${prefix}-select__right-icon-polyfill`}>\n              {this.loadingTextSlot}\n            </p>\n            {treeItem}\n          </div>\n        </Popup>\n      </div>\n    );\n  },\n});\n"],"names":["mixins","getConfigReceiverMixins","extend","name","model","prop","event","props","data","formDisabled","visible","isHover","focusing","defaultProps","trigger","placement","overlayClassName","overlayStyle","width","offsetWidth","filterText","filterByText","actived","expanded","nodeInfo","treeKey","watch","value","_asyncToGenerator","_regeneratorRuntime","changeNodeInfo","multiple","treeRerender","computed","tDisabled","disabled","classes","prefix","CLASSNAMES","STATUS","_defineProperty","active","SIZE","size","prefixIconSlot","selectedSingle","isEmpty","selectedMultiple","popupClass","popupObject","isObjectValue","valueType","checked","isArray","map","item","showArrow","clearable","showLoading","loading","showClose","showPlaceholder","showFilter","isString","isNil","filterable","isFunction","filter","showTree","propsObject","popupProps","isNumber","isObject","label","multiLimitDisabled","max","length","filterPlaceholder","single","Array","placeholder","loadingTextSlot","useLocale","loadingText","$scopedSlots","t","global","renderTNodeJSX","emptySlot","empty","realLabel","treeProps","keys","realValue","tagList","node","mounted","defaultValue","change","methods","popupVisibleChange","searchInput","$refs","input","focus","removeTag","index","e","remove","splice","emitEvent","clear","ctx","blur","options","search","filterWords","treeNodeChange","context","current","nodeValue","getTreeNode","treeNodeActive","treeNodeExpand","onInputChange","isBoolean","indexOf","getTreeData","tree","getItems","targetValue","i","len","childrenData","children","data2","result","render","iconStyle","treeItem","Tree","Input","tagItem","valueDisplay","params","onClose","Tag","minCollapsedNum","collapsedItem","collapsedItems","count","collapsedSelectedItems","slice","Popup","_mergeJSXProps","FakeArrow","CloseCircleFilledIcon","Loading"],"mappings":"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"}