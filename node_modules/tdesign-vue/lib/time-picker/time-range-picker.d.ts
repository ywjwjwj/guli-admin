import dayjs from 'dayjs';
import { TimePickerConfig } from '../config-provider/config-receiver';
import { TimePickerInstance, TimeInputEvent, InputTime, EPickerCols } from './interface';
import { PopupVisibleChangeContext } from '../popup';
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: TimePickerConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & TimePickerInstance & import("vue").default, {
    formDisabled: any;
    els: any[];
    focus: boolean;
    isShowPanel: boolean;
    time: dayjs.Dayjs[];
    inputTime: InputTime[];
}, {
    inputChange(event: TimeInputEvent): void;
    getFormatValues(): string[];
    onBlurDefault(e: Event): void;
    onFocusDefault(e: Event): void;
    panelVisibleChange(val: boolean, context?: PopupVisibleChangeContext): void;
    toggleInputMeridiem(index: number): void;
    pickTime(col: EPickerCols, change: string | number, index: number, value: Record<string, any>): void;
    makeSure(e: MouseEvent): void;
    updateInputTime(): void;
    clear(context: {
        e: MouseEvent;
    }): void;
    triggerUpdateValue(): void;
    handleTInputFocus(): void;
    renderInput(): JSX.Element;
}, {
    tDisabled: boolean;
    panelValue: dayjs.Dayjs[];
    textClassName: string;
}, {
    allowInput: boolean;
    clearable: boolean;
    disabled: boolean | boolean[];
    disableTime: (h: number, m: number, s: number, context: {
        partial: import("./type").TimeRangePickerPartial;
    }) => boolean;
    format: string;
    hideDisabledTime: boolean;
    placeholder: string | string[];
    size: "small" | "medium" | "large";
    steps: (string | number)[];
    value: import("./type").TimeRangeValue;
    defaultValue: import("./type").TimeRangeValue;
    onBlur: (context: {
        value: import("./type").TimeRangeValue;
        e: FocusEvent;
    }) => void;
    onChange: (value: import("./type").TimeRangeValue) => void;
    onFocus: (context: {
        value: import("./type").TimeRangeValue;
        e: FocusEvent;
    }) => void;
    onInput: (context: {
        input: string;
        value: import("./type").TimeRangeValue;
        e: InputEvent;
    }) => void;
}>;
export default _default;
