import { VNode } from 'vue';
import TStepItem from './step-item';
import { ClassName } from '../common';
import { TdStepsProps, TdStepItemProps } from './type';
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: import("../config-provider/config-receiver").ComponentConfigType;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & import("vue").default, {
    stepChildren: any[];
    indexMap: {};
}, {
    getOptions(): TdStepItemProps[];
    getOptionListBySlots(nodes: VNode[]): TdStepItemProps[];
    handleTheme(): "default" | "dot";
    handleStatus(item: TdStepItemProps, index: number): "error" | "default" | "finish" | "process";
    addItem(item: InstanceType<typeof TStepItem>): void;
    removeItem(item: InstanceType<typeof TStepItem>): void;
    handleChange(cur: TdStepsProps['current'], prev: TdStepsProps['current'], e: MouseEvent): void;
}, {
    baseClass: ClassName;
}, {
    current: string | number;
    defaultCurrent: string | number;
    direction: "vertical" | "horizontal";
    layout: "vertical" | "horizontal";
    options: TdStepItemProps[];
    readonly: boolean;
    sequence: "reverse" | "positive";
    theme: "default" | "dot";
    onChange: (current: string | number, previous: string | number, context?: {
        e?: MouseEvent;
    }) => void;
}>;
export default _default;
