import { TreeConfig } from '../config-provider/config-receiver';
import TreeNode from '../_common/js/tree/tree-node';
import { ClassName, TreeOptionData } from '../common';
import { TdTreeProps } from './type';
import { TreeNodeValue, TypeEventState, TreeNodeState, TypeTreeNodeModel, TypeTreeInstance, TypeTargetNode } from './interface';
declare const _default: import("vue/types/vue").ExtendedVue<{
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: TreeConfig;
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & TypeTreeInstance & import("vue").default, {
    store: any;
    nodesMap: any;
    mouseEvent: any;
    treeNodes: any[];
    treeScope: {
        checkProps: import("..").TdCheckboxProps;
        empty: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
        icon: boolean | ((h: import("vue").CreateElement, props: import("./type").TreeNodeModel<TreeOptionData>) => import("vue/types/vnode").ScopedSlotReturnValue);
        label: string | boolean | ((h: import("vue").CreateElement, props: import("./type").TreeNodeModel<TreeOptionData>) => import("vue/types/vnode").ScopedSlotReturnValue);
        line: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
        operations: (h: import("vue").CreateElement, props: import("./type").TreeNodeModel<TreeOptionData>) => import("vue/types/vnode").ScopedSlotReturnValue;
        scopedSlots: any;
    };
    transitionCD: any;
}, {
    renderItem(node: TreeNode): JSX.Element;
    getNodesMap(): any;
    refresh(): void;
    updateStoreConfig(): void;
    updateExpanded(): void;
    build(): void;
    rebuild(list: TdTreeProps['data']): void;
    toggleActived(item: TypeTargetNode): TreeNodeValue[];
    setActived(item: TypeTargetNode, isActived: boolean): import("../cascader/interface").TreeNodeValue[];
    toggleExpanded(item: TypeTargetNode): TreeNodeValue[];
    setExpanded(item: TypeTargetNode, isExpanded: boolean): TreeNodeValue[];
    toggleChecked(item: TypeTargetNode): TreeNodeValue[];
    setChecked(item: TypeTargetNode, isChecked: boolean): TreeNodeValue[];
    handleLoad(info: TypeEventState): void;
    handleClick(state: TypeEventState): void;
    handleChange(state: TypeEventState): void;
    setItem(value: TreeNodeValue, options: TreeNodeState): void;
    getItem(value: TreeNodeValue): TypeTreeNodeModel;
    getItems(value?: TreeNodeValue): TypeTreeNodeModel[];
    appendTo(para?: TreeNodeValue, item?: TreeOptionData | TreeOptionData[]): void;
    insertBefore(value: TreeNodeValue, item: TreeOptionData): void;
    insertAfter(value: TreeNodeValue, item: TreeOptionData): void;
    remove(value?: TreeNodeValue): any;
    getIndex(value: TreeNodeValue): number;
    getParent(value: TreeNodeValue): TypeTreeNodeModel;
    getParents(value: TreeNodeValue): TypeTreeNodeModel[];
    getPath(value: TreeNodeValue): TypeTreeNodeModel[];
}, {
    classList: ClassName;
}, {
    activable: boolean;
    actived: import("./type").TreeNodeValue[];
    defaultActived: import("./type").TreeNodeValue[];
    activeMultiple: boolean;
    checkable: boolean;
    checkProps: import("..").TdCheckboxProps;
    checkStrictly: boolean;
    data: TreeOptionData[];
    disableCheck: boolean | ((node: import("./type").TreeNodeModel<TreeOptionData>) => boolean);
    disabled: boolean;
    empty: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    expandAll: boolean;
    expanded: import("./type").TreeNodeValue[];
    defaultExpanded: import("./type").TreeNodeValue[];
    expandLevel: number;
    expandMutex: boolean;
    expandOnClickNode: boolean;
    expandParent: boolean;
    filter: (node: import("./type").TreeNodeModel<TreeOptionData>) => boolean;
    hover: boolean;
    icon: boolean | ((h: import("vue").CreateElement, props: import("./type").TreeNodeModel<TreeOptionData>) => import("vue/types/vnode").ScopedSlotReturnValue);
    keys: import("./type").TreeKeysType;
    label: string | boolean | ((h: import("vue").CreateElement, props: import("./type").TreeNodeModel<TreeOptionData>) => import("vue/types/vnode").ScopedSlotReturnValue);
    lazy: boolean;
    line: boolean | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    load: (node: import("./type").TreeNodeModel<TreeOptionData>) => Promise<TreeOptionData[]>;
    operations: (h: import("vue").CreateElement, props: import("./type").TreeNodeModel<TreeOptionData>) => import("vue/types/vnode").ScopedSlotReturnValue;
    transition: boolean;
    value: import("./type").TreeNodeValue[];
    defaultValue: import("./type").TreeNodeValue[];
    valueMode: "all" | "parentFirst" | "onlyLeaf";
    onActive: (value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void;
    onChange: (value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void;
    onClick: (context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }) => void;
    onExpand: (value: import("./type").TreeNodeValue[], context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
        e: MouseEvent;
    }) => void;
    onLoad: (context: {
        node: import("./type").TreeNodeModel<TreeOptionData>;
    }) => void;
}>;
export default _default;
