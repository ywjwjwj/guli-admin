{"version":3,"file":"td-tree.js","sources":["../../src/tree/td-tree.tsx"],"sourcesContent":["import { VNode } from 'vue';\nimport upperFirst from 'lodash/upperFirst';\nimport pick from 'lodash/pick';\nimport mixins from '../utils/mixins';\nimport getConfigReceiverMixins, { TreeConfig } from '../config-provider/config-receiver';\nimport TreeStore from '../_common/js/tree/tree-store';\nimport TreeNode from '../_common/js/tree/tree-node';\nimport TreeItem from './tree-item';\nimport props from './props';\nimport { renderTNodeJSX } from '../utils/render-tnode';\nimport { ClassName, TNodeReturnValue, TreeOptionData } from '../common';\nimport { TdTreeProps } from './type';\nimport {\n  TypeTdTreeProps,\n  TreeNodeValue,\n  TypeValueMode,\n  TypeEventState,\n  TreeNodeState,\n  TypeTreeNodeModel,\n  TypeTreeInstance,\n  TypeTargetNode,\n} from './interface';\nimport { CLASS_NAMES, FX } from './constants';\nimport { getMark, getNode, emitEvent } from './util';\n\nexport default mixins(getConfigReceiverMixins<TypeTreeInstance, TreeConfig>('tree')).extend({\n  name: 'TTree',\n  model: {\n    prop: 'value',\n    event: 'change',\n  },\n  props,\n  data() {\n    const {\n      checkProps, empty, icon, label, line, operations,\n    } = this;\n\n    return {\n      store: null,\n      nodesMap: null,\n      mouseEvent: null,\n      treeNodes: [],\n      treeScope: {\n        checkProps,\n        empty,\n        icon,\n        label,\n        line,\n        operations,\n        scopedSlots: null,\n      },\n      transitionCD: null,\n    };\n  },\n  computed: {\n    classList(): ClassName {\n      const list: Array<string> = [CLASS_NAMES.tree];\n      const {\n        disabled, hover, transition, checkable, expandOnClickNode,\n      } = this;\n      if (disabled) {\n        list.push(CLASS_NAMES.disabled);\n      }\n      if (hover) {\n        list.push(CLASS_NAMES.treeHoverable);\n      }\n      if (checkable) {\n        list.push(CLASS_NAMES.treeCheckable);\n      }\n      if (transition) {\n        list.push(CLASS_NAMES.treeTransition);\n      }\n      if (expandOnClickNode) {\n        list.push(CLASS_NAMES.treeBlockNode);\n      }\n      return list;\n    },\n  },\n  watch: {\n    data(list) {\n      this.rebuild(list);\n    },\n    value(nVal) {\n      this.store.replaceChecked(nVal);\n    },\n    expanded(nVal) {\n      this.store.replaceExpanded(nVal);\n    },\n    actived(nVal) {\n      this.store.replaceActived(nVal);\n    },\n  },\n  methods: {\n    // 创建单个 tree 节点\n    renderItem(node: TreeNode) {\n      const { treeScope } = this;\n      const treeItem = (\n        <TreeItem\n          key={node.value}\n          node={node}\n          treeScope={treeScope}\n          onClick={this.handleClick}\n          onChange={this.handleChange}\n        />\n      );\n      return treeItem;\n    },\n    // 获取视图节点映射关系\n    getNodesMap() {\n      let { nodesMap } = this;\n      if (!nodesMap) {\n        nodesMap = new Map();\n        this.nodesMap = nodesMap;\n      }\n      return nodesMap;\n    },\n    // 刷新树的视图状态\n    refresh() {\n      const { store } = this;\n      const nodesMap = this.getNodesMap();\n      const allNodes = store.getNodes();\n      const curNodesMap = new Map();\n      this.treeNodes = allNodes.map((node: TreeNode) => {\n        curNodesMap.set(node.value, 1);\n        // 维持住已经渲染的节点，不进行dom的增删\n        let nodeView = nodesMap.get(node.value);\n        // 如果需要展示，生成新的vnode\n        if (!nodeView && node.visible) {\n          // 初次仅渲染可显示的节点\n          // 不存在节点视图，则创建该节点视图并插入到当前位置\n          nodeView = this.renderItem(node);\n          nodesMap.set(node.value, nodeView);\n        }\n        return nodeView;\n      });\n\n      // 更新缓存后，被删除的节点要移除掉，避免内存泄露\n      this.$nextTick(() => {\n        const keys = [...nodesMap.keys()];\n        keys.forEach((value: string) => {\n          if (!curNodesMap.get(value)) {\n            nodesMap.delete(value);\n          }\n        });\n        curNodesMap.clear();\n      });\n    },\n    // 同步 Store 选项\n    updateStoreConfig() {\n      const { store } = this;\n      if (!store) return;\n      // 统一更新选项，然后在 store 统一识别属性更新\n      const storeProps = pick(this, [\n        'keys',\n        'expandAll',\n        'expandLevel',\n        'expandMutex',\n        'expandParent',\n        'activable',\n        'activeMultiple',\n        'disabled',\n        'checkable',\n        'checkStrictly',\n        'load',\n        'lazy',\n        'valueMode',\n        'filter',\n      ]);\n      store.setConfig(storeProps);\n    },\n    updateExpanded() {\n      const { store, expanded, expandParent } = this;\n      // 初始化展开状态\n      // 校验是否自动展开父节点\n      if (Array.isArray(expanded)) {\n        const expandedMap = new Map();\n        expanded.forEach((val) => {\n          expandedMap.set(val, true);\n          if (expandParent) {\n            const node = store.getNode(val);\n            node.getParents().forEach((tn: TypeTreeNodeModel) => {\n              expandedMap.set(tn.value, true);\n            });\n          }\n        });\n        const expandedArr = Array.from(expandedMap.keys());\n        store.setExpanded(expandedArr);\n      }\n    },\n    // 初始化树结构\n    build() {\n      let list = this.data;\n      const {\n        actived, value, valueMode, filter,\n      } = this;\n\n      const store = new TreeStore({\n        valueMode: valueMode as TypeValueMode,\n        filter,\n        onLoad: (info: TypeEventState) => {\n          this.handleLoad(info);\n        },\n        onUpdate: () => {\n          this.refresh();\n        },\n      });\n\n      // 初始化数据\n      this.store = store;\n      this.updateStoreConfig();\n\n      if (!Array.isArray(list)) {\n        list = [];\n      }\n      store.append(list);\n\n      // 刷新节点，必须在配置选中之前执行\n      // 这样选中态联动判断才能找到父节点\n      store.refreshNodes();\n\n      // 初始化选中状态\n      if (Array.isArray(value)) {\n        store.setChecked(value);\n      }\n\n      this.updateExpanded();\n\n      // 初始化激活状态\n      if (Array.isArray(actived)) {\n        store.setActived(actived);\n      }\n\n      // 树的数据初始化之后，需要立即进行一次视图刷新\n      this.refresh();\n    },\n    rebuild(list: TdTreeProps['data']) {\n      this.getNodesMap().clear();\n      this.treeNodes.length = 0;\n      const { store, value, actived } = this;\n      store.reload(list);\n      // 初始化选中状态\n      if (Array.isArray(value)) {\n        store.setChecked(value);\n      }\n      this.updateExpanded();\n      // 初始化激活状态\n      if (Array.isArray(actived)) {\n        store.setActived(actived);\n      }\n      store.refreshState();\n    },\n    toggleActived(item: TypeTargetNode): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      return this.setActived(node, !node.isActived());\n    },\n    setActived(item: TypeTargetNode, isActived: boolean) {\n      const node = getNode(this.store, item);\n      const actived = node.setActived(isActived);\n      const { mouseEvent } = this;\n      const ctx = {\n        node: node.getModel(),\n        e: mouseEvent,\n      };\n      emitEvent<Parameters<TypeTdTreeProps['onActive']>>(this, 'active', actived, ctx);\n      return actived;\n    },\n    toggleExpanded(item: TypeTargetNode): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      return this.setExpanded(node, !node.isExpanded());\n    },\n    setExpanded(item: TypeTargetNode, isExpanded: boolean): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      const expanded = node.setExpanded(isExpanded);\n      const { mouseEvent } = this;\n      const ctx = {\n        node: node.getModel(),\n        e: mouseEvent,\n      };\n      emitEvent<Parameters<TypeTdTreeProps['onExpand']>>(this, 'expand', expanded, ctx);\n      return expanded;\n    },\n    toggleChecked(item: TypeTargetNode): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      return this.setChecked(node, !node.isChecked());\n    },\n    setChecked(item: TypeTargetNode, isChecked: boolean): TreeNodeValue[] {\n      const node = getNode(this.store, item);\n      const checked = node.setChecked(isChecked);\n      const ctx = {\n        node: node.getModel(),\n      };\n      emitEvent<Parameters<TypeTdTreeProps['onChange']>>(this, 'change', checked, ctx);\n      return checked;\n    },\n    handleLoad(info: TypeEventState): void {\n      const { node } = info;\n      const ctx = {\n        node: node.getModel(),\n      };\n      const {\n        value, expanded, actived, store,\n      } = this;\n      if (value && value.length > 0) {\n        store.replaceChecked(value);\n      }\n      if (expanded && expanded.length > 0) {\n        store.replaceExpanded(expanded);\n      }\n      if (actived && actived.length > 0) {\n        store.replaceActived(actived);\n      }\n      emitEvent<Parameters<TypeTdTreeProps['onLoad']>>(this, 'load', ctx);\n    },\n    handleClick(state: TypeEventState): void {\n      const { expandOnClickNode } = this;\n      const { mouseEvent, event, node } = state;\n      if (!node || this.disabled || node.disabled) {\n        return;\n      }\n\n      this.mouseEvent = mouseEvent;\n\n      let shouldExpand = expandOnClickNode;\n      let shouldActive = true;\n      ['trigger', 'ignore'].forEach((markName) => {\n        const mark = getMark(markName, event.target as HTMLElement, event.currentTarget as HTMLElement);\n        const markValue = mark?.value || '';\n        if (markValue.indexOf('expand') >= 0) {\n          if (markName === 'trigger') {\n            shouldExpand = true;\n          } else if (markName === 'ignore') {\n            shouldExpand = false;\n          }\n        }\n        if (markValue.indexOf('active') >= 0) {\n          if (markName === 'ignore') {\n            shouldActive = false;\n          }\n        }\n      });\n\n      if (shouldExpand) {\n        this.toggleExpanded(node);\n      }\n      if (shouldActive) {\n        this.toggleActived(node);\n      }\n\n      const ctx = {\n        node: node.getModel(),\n        e: mouseEvent,\n      };\n      emitEvent<Parameters<TypeTdTreeProps['onClick']>>(this, 'click', ctx);\n\n      this.mouseEvent = null;\n    },\n    handleChange(state: TypeEventState): void {\n      const { disabled } = this;\n      const { node } = state;\n      if (!node || disabled || node.disabled) {\n        return;\n      }\n      this.toggleChecked(node);\n    },\n\n    // -------- 公共方法 start --------\n    setItem(value: TreeNodeValue, options: TreeNodeState): void {\n      const node: TreeNode = this.store.getNode(value);\n      const spec = options;\n      const keys = Object.keys(spec);\n      if (node && spec) {\n        ['expanded', 'actived', 'checked'].forEach((name) => {\n          if (keys.includes(name)) {\n            this[`set${upperFirst(name)}`](node, spec[name]);\n            delete spec[name];\n          }\n        });\n        node.set(spec);\n      }\n    },\n    getItem(value: TreeNodeValue): TypeTreeNodeModel {\n      const node: TreeNode = this.store.getNode(value);\n      return node?.getModel();\n    },\n    getItems(value?: TreeNodeValue): TypeTreeNodeModel[] {\n      const nodes = this.store.getNodes(value);\n      return nodes.map((node: TreeNode) => node.getModel());\n    },\n    appendTo(para?: TreeNodeValue, item?: TreeOptionData | TreeOptionData[]) {\n      let list = [];\n      if (Array.isArray(item)) {\n        list = item;\n      } else {\n        list = [item];\n      }\n      list.forEach((item) => {\n        const val = item?.value || '';\n        const node = getNode(this.store, val);\n        if (node) {\n          this.store.appendNodes(para, node);\n        } else {\n          this.store.appendNodes(para, item);\n        }\n      });\n    },\n    insertBefore(value: TreeNodeValue, item: TreeOptionData) {\n      const val = item?.value || '';\n      const node = getNode(this.store, val);\n      if (node) {\n        this.store.insertBefore(value, node);\n      } else {\n        this.store.insertBefore(value, item);\n      }\n    },\n    insertAfter(value: TreeNodeValue, item: TreeOptionData) {\n      const val = item?.value || '';\n      const node = getNode(this.store, val);\n      if (node) {\n        this.store.insertAfter(value, node);\n      } else {\n        this.store.insertAfter(value, item);\n      }\n    },\n    remove(value?: TreeNodeValue) {\n      return this.store.remove(value);\n    },\n    getIndex(value: TreeNodeValue): number {\n      return this.store.getNodeIndex(value);\n    },\n    getParent(value: TreeNodeValue): TypeTreeNodeModel {\n      const node = this.store.getParent(value);\n      return node?.getModel();\n    },\n    getParents(value: TreeNodeValue): TypeTreeNodeModel[] {\n      const nodes = this.store.getParents(value);\n      return nodes.map((node: TreeNode) => node.getModel());\n    },\n    getPath(value: TreeNodeValue): TypeTreeNodeModel[] {\n      const node = this.store.getNode(value);\n      let pathNodes = [];\n      if (node) {\n        pathNodes = node.getPath().map((node: TreeNode) => node.getModel());\n      }\n      return pathNodes;\n    },\n    // -------- 公共方法 end --------\n  },\n  created() {\n    this.build();\n  },\n  render(): VNode {\n    const {\n      classList,\n      treeNodes,\n      // 用于同步 slot 属性\n      treeScope,\n      $scopedSlots: scopedSlots,\n    } = this;\n\n    const scopeProps = pick(this, ['checkProps', 'disableCheck', 'icon', 'label', 'line', 'operations']);\n\n    this.updateStoreConfig();\n    Object.assign(treeScope, scopeProps);\n    treeScope.scopedSlots = scopedSlots;\n\n    let emptyNode: TNodeReturnValue = null;\n    let treeNodeList = null;\n\n    if (treeNodes.length <= 0) {\n      const useLocale = !this.empty && !this.$scopedSlots.empty;\n      emptyNode = (\n        <div class={CLASS_NAMES.treeEmpty}>{useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, 'empty')}</div>\n      );\n    }\n\n    treeNodeList = (\n      <transition-group\n        name={FX.treeNode}\n        tag=\"div\"\n        class={CLASS_NAMES.treeList}\n        enter-active-class={CLASS_NAMES.treeNodeEnter}\n        leave-active-class={CLASS_NAMES.treeNodeLeave}\n      >\n        {treeNodes}\n      </transition-group>\n    );\n\n    return <div class={classList}>{emptyNode || treeNodeList}</div>;\n  },\n});\n"],"names":["mixins","getConfigReceiverMixins","extend","name","model","prop","event","props","data","checkProps","empty","icon","label","line","operations","store","nodesMap","mouseEvent","treeNodes","treeScope","scopedSlots","transitionCD","computed","classList","list","CLASS_NAMES","tree","disabled","hover","transition","checkable","expandOnClickNode","push","treeHoverable","treeCheckable","treeTransition","treeBlockNode","watch","rebuild","value","nVal","replaceChecked","expanded","replaceExpanded","actived","replaceActived","methods","renderItem","node","treeItem","TreeItem","handleClick","handleChange","getNodesMap","Map","refresh","allNodes","getNodes","curNodesMap","map","set","nodeView","get","visible","$nextTick","keys","forEach","clear","updateStoreConfig","storeProps","pick","setConfig","updateExpanded","expandParent","Array","isArray","expandedMap","val","getNode","getParents","tn","expandedArr","from","setExpanded","build","valueMode","filter","TreeStore","onLoad","info","handleLoad","onUpdate","append","refreshNodes","setChecked","setActived","length","reload","refreshState","toggleActived","item","isActived","ctx","getModel","e","emitEvent","toggleExpanded","isExpanded","toggleChecked","isChecked","checked","state","shouldExpand","shouldActive","markName","mark","getMark","target","currentTarget","markValue","indexOf","setItem","options","spec","Object","includes","upperFirst","getItem","getItems","nodes","appendTo","para","item2","appendNodes","insertBefore","insertAfter","remove","getIndex","getNodeIndex","getParent","getPath","pathNodes","node2","created","render","$scopedSlots","scopeProps","assign","emptyNode","treeNodeList","useLocale","treeEmpty","t","global","renderTNodeJSX","FX","treeNode","treeNodeEnter","treeNodeLeave","treeList"],"mappings":"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"}