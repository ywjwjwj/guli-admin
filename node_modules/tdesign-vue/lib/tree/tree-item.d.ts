import Vue, { VNode, CreateElement } from 'vue';
import { TreeConfig } from '../config-provider/config-receiver';
import TreeNode from '../_common/js/tree/tree-node';
import { ClassName } from '../common';
export declare const TreeItemProps: {
    node: {
        type: typeof TreeNode;
    };
    treeScope: {
        type: ObjectConstructor;
    };
};
declare const _default: import("vue/types/vue").ExtendedVue<{
    keepAnimation: {
        ripple: boolean;
        expand: boolean;
        fade: boolean;
    };
} & Record<never, any> & import("../config-provider/config-receiver").ConfigComponent & Vue & {
    t<T>(pattern: T, placement?: import("../config-provider/config-receiver").Placement): string;
} & {
    global: TreeConfig;
}, {
    data: any;
    clicked: boolean;
}, {
    getStyles(): string;
    getClassList(): ClassName;
    renderLine(createElement: CreateElement): VNode;
    getFolderIcon(): import("vue/types/vnode").ScopedSlotReturnValue;
    renderIcon(createElement: CreateElement): VNode;
    renderLabel(createElement: CreateElement): VNode;
    renderOperations(createElement: CreateElement): VNode;
    renderItem(createElement: CreateElement): Array<VNode>;
    handleClick(evt: MouseEvent): void;
    handleChange(): void;
}, unknown, {
    node: TreeNode;
    treeScope: any;
}>;
export default _default;
