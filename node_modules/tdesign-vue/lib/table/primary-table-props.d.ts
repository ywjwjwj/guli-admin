import { TdPrimaryTableProps } from '../table/type';
import { PropType } from 'vue';
declare const _default: {
    asyncLoading: {
        type: PropType<"loading" | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue) | "load-more">;
    };
    columnController: {
        type: PropType<import("../table/type").TableColumnController>;
    };
    columnControllerContent: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    columns: {
        type: PropType<import("../table/type").PrimaryTableCol<import("../table/type").TableRowData>[]>;
        default: () => TdPrimaryTableProps['columns'];
    };
    dragSort: BooleanConstructor;
    expandedRow: {
        type: PropType<(h: import("vue").CreateElement, props: {
            row: import("../table/type").TableRowData;
            index: number;
        }) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    expandedRowKeys: {
        type: PropType<(string | number)[]>;
        default: () => TdPrimaryTableProps['expandedRowKeys'];
    };
    defaultExpandedRowKeys: {
        type: PropType<(string | number)[]>;
        default: () => TdPrimaryTableProps['defaultExpandedRowKeys'];
    };
    expandIcon: {
        type: PropType<(h: import("vue").CreateElement, props: import("../table/type").ExpandArrowRenderParams<import("../table/type").TableRowData>) => import("vue/types/vnode").ScopedSlotReturnValue>;
        default: boolean;
    };
    expandOnRowClick: BooleanConstructor;
    filterIcon: {
        type: PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    filterRow: {
        type: PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    filterValue: {
        type: PropType<import("../table/type").FilterValue>;
    };
    defaultFilterValue: {
        type: PropType<import("../table/type").FilterValue>;
    };
    multipleSort: BooleanConstructor;
    selectedRowKeys: {
        type: PropType<(string | number)[]>;
    };
    defaultSelectedRowKeys: {
        type: PropType<(string | number)[]>;
    };
    showDragCol: BooleanConstructor;
    sort: {
        type: PropType<import("../table/type").TableSort>;
    };
    defaultSort: {
        type: PropType<import("../table/type").TableSort>;
    };
    sortOnRowDraggable: BooleanConstructor;
    onAsyncLoadingClick: PropType<(context: {
        status: "loading" | "load-more";
    }) => void>;
    onCellClick: PropType<(context: import("../table/type").PrimaryTableCellEventContext<import("../table/type").TableRowData>) => void>;
    onChange: PropType<(data: import("../table/type").TableChangeData, context: import("../table/type").TableChangeContext<import("../table/type").TableRowData[]>) => void>;
    onDataChange: PropType<(data: import("../table/type").TableRowData[]) => void>;
    onDragSort: PropType<(context: import("../table/type").DragSortContext<import("../table/type").TableRowData>) => void>;
    onExpandChange: PropType<(expandedRowKeys: (string | number)[], options: import("../table/type").ExpandOptions<import("../table/type").TableRowData>) => void>;
    onFilterChange: PropType<(filterValue: import("../table/type").FilterValue, context: {
        col?: import("../table/type").PrimaryTableCol<import("../table/type").TableRowData>;
    }) => void>;
    onSelectChange: PropType<(selectedRowKeys: (string | number)[], options: import("../table/type").SelectOptions<import("../table/type").TableRowData>) => void>;
    onSortChange: PropType<(sort: import("../table/type").TableSort, options: import("../table/type").SortOptions<import("../table/type").TableRowData>) => void>;
};
export default _default;
