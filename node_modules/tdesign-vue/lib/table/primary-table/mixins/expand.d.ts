import Vue, { CreateElement, VNode } from 'vue';
import { TdPrimaryTableProps } from '../../type';
declare const _default: import("vue/types/vue").ExtendedVue<Vue, {
    hasExpandedColumn: boolean;
}, {
    getExpandRowHandler(): TdPrimaryTableProps['expandedRow'];
    getExpandColumns(columns: import("../../type").PrimaryTableCol<import("../../type").TableRowData>[]): import("../../type").PrimaryTableCol<import("../../type").TableRowData>[];
    renderExpandIconCell({ row, rowIndex }: Record<string, any>): VNode;
    renderExpandedRow(params: Parameters<TdPrimaryTableProps['expandedRow']>[1]): ReturnType<TdPrimaryTableProps['expandedRow']>;
    handleExpandChange(record?: Record<string, any>): void;
}, {
    reRowKey: string;
    columnLength: number;
    isFirstColumnFixed: boolean;
}, {
    expandedRowKeys: (string | number)[];
    expandedRow: (h: CreateElement, props: {
        row: import("../../type").TableRowData;
        index: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    expandIcon: boolean | ((h: CreateElement, props: import("../../type").ExpandArrowRenderParams<import("../../type").TableRowData>) => import("vue/types/vnode").ScopedSlotReturnValue);
    expandOnRowClick: boolean;
    data: import("../../type").TableRowData[];
    columns: import("../../type").BaseTableCol<import("../../type").TableRowData>[];
    rowKey: string;
}>;
export default _default;
