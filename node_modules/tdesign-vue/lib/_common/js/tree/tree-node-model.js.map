{"version":3,"file":"tree-node-model.js","sources":["../../../../src/_common/js/tree/tree-node-model.ts"],"sourcesContent":["import pick from 'lodash/pick';\nimport { TreeNode } from './tree-node';\nimport { OptionData } from '../common';\nimport {\n  TreeNodeValue,\n  TypeTreeNodeModel,\n  TypeTreeNodeData,\n  TypeTreeItem,\n  TreeNodeModelProps,\n} from './types';\nimport log from '../log/log';\n\n// 获取节点需要暴露的属性\nfunction getExposedProps(node: TreeNode): TreeNodeModelProps {\n  const props = pick(node, [\n    'value',\n    'label',\n    'data',\n    'actived',\n    'expanded',\n    'checked',\n    'indeterminate',\n    'loading',\n  ]) as TreeNodeModelProps;\n  return props;\n}\n\n// 封装对外暴露的对象\nexport function createNodeModel(node: TreeNode): TypeTreeNodeModel {\n  const props = getExposedProps(node);\n\n  const model: TypeTreeNodeModel = {\n    ...props,\n\n    // 获取节点所处层级\n    getLevel() {\n      return node.getLevel();\n    },\n\n    // 获取节点在 children 中的位置\n    getIndex() {\n      return node.getIndex();\n    },\n\n    // 判断节点是否为 children 中的第一个节点\n    isFirst() {\n      return node.isFirst();\n    },\n\n    // 判断节点是否为 children 中的最后一个节点\n    isLast() {\n      return node.isLast();\n    },\n\n    // 判断节点是否为叶节点\n    isLeaf() {\n      return node.isLeaf();\n    },\n\n    // 插入数据到节点之前\n    insertBefore(newData: TypeTreeItem) {\n      return node.insertBefore(newData);\n    },\n\n    // 插入数据到节点之后\n    insertAfter(newData: TypeTreeItem) {\n      return node.insertAfter(newData);\n    },\n\n    // 给当前节点添加子节点数据\n    appendData(data: TypeTreeNodeData | TypeTreeNodeData[]) {\n      return node.append(data);\n    },\n\n    // 返回路径节点数据集合\n    getPath(): TypeTreeNodeModel[] {\n      const nodes = node.getPath();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取单个父节点数据\n    getParent(): TypeTreeNodeModel {\n      return node.parent?.getModel();\n    },\n\n    // 获取所有父节点数据\n    getParents(): TypeTreeNodeModel[] {\n      const nodes = node.getParents();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 获取根节点\n    getRoot(): TypeTreeNodeModel {\n      const root = node.getRoot();\n      return root?.getModel();\n    },\n\n    // 获取兄弟节点，包含自己在内\n    getSiblings(): TypeTreeNodeModel[] {\n      const nodes = node.getSiblings();\n      return nodes.map((item: TreeNode) => item.getModel());\n    },\n\n    // 返回当前节点的第一层子节点数据集合\n    getChildren(deep?: boolean): boolean | TypeTreeNodeModel[] {\n      let childrenModel: boolean | TypeTreeNodeModel[] = false;\n      const { children } = node;\n      if (Array.isArray(children)) {\n        if (children.length > 0) {\n          if (deep) {\n            const nodes = node.walk();\n            nodes.shift();\n            childrenModel = nodes.map((item) => item.getModel());\n          } else {\n            childrenModel = children.map((item) => item.getModel());\n          }\n        } else {\n          childrenModel = false;\n        }\n      } else if (typeof children === 'boolean') {\n        childrenModel = children;\n      }\n      return childrenModel;\n    },\n\n    // 删除本节点，或者 value 指定的子节点\n    remove(value?: TreeNodeValue) {\n      if (!value) {\n        node.remove();\n        return;\n      }\n\n      const { tree } = node;\n      const targetNode = tree.getNode(value);\n      if (!targetNode) {\n        log.warnOnce('Tree', `\\`${value}\\` is not exist`);\n        return;\n      }\n\n      const parents = targetNode.getParents();\n      const parentValues = parents.map((pnode) => (pnode.value));\n      if (parentValues.indexOf(node.value) < 0) {\n        log.warnOnce('Tree', `\\`${value}\\` is not a childNode of current node`);\n        return;\n      }\n      targetNode.remove();\n    },\n\n    // 设置本节点携带的元数据\n    setData(data: OptionData) {\n      Object.assign(node.data, data);\n    },\n  };\n\n  return model;\n}\n\n// 更新封装对象\nexport function updateNodeModel(model: TypeTreeNodeModel, node: TreeNode) {\n  // 同步节点属性\n  const props = getExposedProps(node);\n  Object.assign(model, props);\n}\n"],"names":["getExposedProps","node","props","pick","createNodeModel","model","getLevel","getIndex","isFirst","isLast","isLeaf","insertBefore","newData","insertAfter","appendData","data","append","getPath","nodes","map","item","getModel","getParent","parent","getParents","getRoot","root","getSiblings","getChildren","deep","childrenModel","children","Array","isArray","length","walk","shift","remove","value","tree","targetNode","getNode","log","warnOnce","parents","parentValues","pnode","indexOf","setData","Object","assign","updateNodeModel"],"mappings":"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"}