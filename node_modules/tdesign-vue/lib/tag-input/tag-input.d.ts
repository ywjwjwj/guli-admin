import { InputValue } from '../input';
declare const _default: import("vue").ComponentOptions<import("vue").default, import("@vue/composition-api").ShallowUnwrapRef<{
    tagValue: import("@vue/composition-api").Ref<import("./type").TagInputValue>;
    tInputValue: import("@vue/composition-api").Ref<InputValue>;
    isHover: import("@vue/composition-api").Ref<boolean>;
    tagInputPlaceholder: import("@vue/composition-api").ComputedRef<string>;
    showClearIcon: import("@vue/composition-api").ComputedRef<boolean>;
    tagInputRef: import("@vue/composition-api").Ref<any>;
    setTInputValue: import("../hooks/useDefaultValue").ChangeHandler<InputValue, [context?: import("./type").InputValueChangeContext]>;
    addHover: (context: {
        e: MouseEvent;
    }) => void;
    cancelHover: (context: {
        e: MouseEvent;
    }) => void;
    onInputEnter: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onInnerEnter: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onInputBackspaceKeyUp: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    renderLabel: ({ displayNode, label }: {
        displayNode: any;
        label: any;
    }, h: import("vue").CreateElement) => any[];
    onWheel: ({ e }: {
        e: WheelEvent;
    }) => void;
    scrollToRightOnEnter: () => void;
    scrollToLeftOnLeave: () => void;
    onClick: () => void;
    onClearClick: (ctx: {
        e: MouseEvent;
    }) => void;
    onClose: (p: {
        e?: MouseEvent;
        index: number;
        item: string | number;
    }) => void;
    classes: import("@vue/composition-api").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}> & import("@vue/composition-api").Data, {}, {}, {
    autoWidth: BooleanConstructor;
    clearable: BooleanConstructor;
    collapsedItems: {
        type: import("vue").PropType<(h: import("vue").CreateElement, props: {
            value: import("./type").TagInputValue;
            collapsedTags: import("./type").TagInputValue;
            count: number;
        }) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    disabled: BooleanConstructor;
    dragSort: BooleanConstructor;
    excessTagsDisplayType: {
        type: import("vue").PropType<"scroll" | "break-line">;
        default: "scroll" | "break-line";
        validator(val: "scroll" | "break-line"): boolean;
    };
    inputProps: {
        type: import("vue").PropType<import("../input").TdInputProps>;
    };
    inputValue: {
        type: import("vue").PropType<InputValue>;
        default: any;
    };
    defaultInputValue: {
        type: import("vue").PropType<InputValue>;
    };
    label: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    max: {
        type: NumberConstructor;
    };
    minCollapsedNum: {
        type: NumberConstructor;
        default: number;
    };
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    readonly: BooleanConstructor;
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: "small" | "medium" | "large";
        validator(val: "small" | "medium" | "large"): boolean;
    };
    status: {
        type: import("vue").PropType<"error" | "success" | "warning">;
        validator(val: "error" | "success" | "warning"): boolean;
    };
    suffix: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    suffixIcon: {
        type: import("vue").PropType<(h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue>;
    };
    tag: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement, props: {
            value: string | number;
        }) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    tagProps: {
        type: import("vue").PropType<import("..").TdTagProps>;
    };
    tips: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    value: {
        type: import("vue").PropType<import("./type").TagInputValue>;
        default: any;
    };
    defaultValue: {
        type: import("vue").PropType<import("./type").TagInputValue>;
    };
    valueDisplay: {
        type: import("vue").PropType<string | ((h: import("vue").CreateElement, props: {
            value: import("./type").TagInputValue;
            onClose: (index: number, item?: any) => void;
        }) => import("vue/types/vnode").ScopedSlotReturnValue)>;
    };
    onBlur: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void>;
    onChange: import("vue").PropType<(value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void>;
    onClear: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onDragSort: import("vue").PropType<(context: {
        currentIndex: number;
        current: string | number;
        targetIndex: number;
        target: string | number;
    }) => void>;
    onEnter: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: InputValue;
    }) => void>;
    onFocus: import("vue").PropType<(value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void>;
    onInputChange: import("vue").PropType<(value: InputValue, context?: import("./type").InputValueChangeContext) => void>;
    onMouseenter: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onMouseleave: import("vue").PropType<(context: {
        e: MouseEvent;
    }) => void>;
    onPaste: import("vue").PropType<(context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void>;
    onRemove: import("vue").PropType<(context: import("./type").TagInputRemoveContext) => void>;
}, {
    value: import("./type").TagInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    inputValue: InputValue;
    minCollapsedNum: number;
    excessTagsDisplayType: "scroll" | "break-line";
    dragSort: boolean;
} & {
    max?: number;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    onChange?: (value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void;
    defaultValue?: import("./type").TagInputValue;
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: InputValue;
    }) => void;
    onFocus?: (value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").TagInputValue;
        collapsedTags: import("./type").TagInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").TagInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    onRemove?: (context: import("./type").TagInputRemoveContext) => void;
    inputProps?: unknown;
    defaultInputValue?: InputValue;
    tagProps?: unknown;
    onDragSort?: (context: {
        currentIndex: number;
        current: string | number;
        targetIndex: number;
        target: string | number;
    }) => void;
    onInputChange?: (value: InputValue, context?: import("./type").InputValueChangeContext) => void;
}> & Omit<import("vue").VueConstructor<import("vue").default>, never> & (new (...args: any[]) => import("@vue/composition-api").ComponentRenderProxy<{
    value: import("./type").TagInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    inputValue: InputValue;
    minCollapsedNum: number;
    excessTagsDisplayType: "scroll" | "break-line";
    dragSort: boolean;
} & {
    max?: number;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    onChange?: (value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void;
    defaultValue?: import("./type").TagInputValue;
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: InputValue;
    }) => void;
    onFocus?: (value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").TagInputValue;
        collapsedTags: import("./type").TagInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").TagInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    onRemove?: (context: import("./type").TagInputRemoveContext) => void;
    inputProps?: unknown;
    defaultInputValue?: InputValue;
    tagProps?: unknown;
    onDragSort?: (context: {
        currentIndex: number;
        current: string | number;
        targetIndex: number;
        target: string | number;
    }) => void;
    onInputChange?: (value: InputValue, context?: import("./type").InputValueChangeContext) => void;
}, import("@vue/composition-api").ShallowUnwrapRef<{
    tagValue: import("@vue/composition-api").Ref<import("./type").TagInputValue>;
    tInputValue: import("@vue/composition-api").Ref<InputValue>;
    isHover: import("@vue/composition-api").Ref<boolean>;
    tagInputPlaceholder: import("@vue/composition-api").ComputedRef<string>;
    showClearIcon: import("@vue/composition-api").ComputedRef<boolean>;
    tagInputRef: import("@vue/composition-api").Ref<any>;
    setTInputValue: import("../hooks/useDefaultValue").ChangeHandler<InputValue, [context?: import("./type").InputValueChangeContext]>;
    addHover: (context: {
        e: MouseEvent;
    }) => void;
    cancelHover: (context: {
        e: MouseEvent;
    }) => void;
    onInputEnter: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onInnerEnter: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    onInputBackspaceKeyUp: (value: InputValue, context: {
        e: KeyboardEvent;
    }) => void;
    renderLabel: ({ displayNode, label }: {
        displayNode: any;
        label: any;
    }, h: import("vue").CreateElement) => any[];
    onWheel: ({ e }: {
        e: WheelEvent;
    }) => void;
    scrollToRightOnEnter: () => void;
    scrollToLeftOnLeave: () => void;
    onClick: () => void;
    onClearClick: (ctx: {
        e: MouseEvent;
    }) => void;
    onClose: (p: {
        e?: MouseEvent;
        index: number;
        item: string | number;
    }) => void;
    classes: import("@vue/composition-api").ComputedRef<(string | {
        [x: string]: boolean;
    })[]>;
}>, import("@vue/composition-api").Data, {}, {}, {}, {}, {}, {
    value: import("./type").TagInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    inputValue: InputValue;
    minCollapsedNum: number;
    excessTagsDisplayType: "scroll" | "break-line";
    dragSort: boolean;
} & {
    max?: number;
    label?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    status?: "error" | "success" | "warning";
    tag?: string | ((h: import("vue").CreateElement, props: {
        value: string | number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    onChange?: (value: import("./type").TagInputValue, context: import("./type").TagInputChangeContext) => void;
    defaultValue?: import("./type").TagInputValue;
    suffix?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    suffixIcon?: (h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue;
    tips?: string | ((h: import("vue").CreateElement) => import("vue/types/vnode").ScopedSlotReturnValue);
    onBlur?: (value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onEnter?: (value: import("./type").TagInputValue, context: {
        e: KeyboardEvent;
        inputValue: InputValue;
    }) => void;
    onFocus?: (value: import("./type").TagInputValue, context: {
        inputValue: InputValue;
        e: FocusEvent;
    }) => void;
    onMouseenter?: (context: {
        e: MouseEvent;
    }) => void;
    onMouseleave?: (context: {
        e: MouseEvent;
    }) => void;
    onPaste?: (context: {
        e: ClipboardEvent;
        pasteValue: string;
    }) => void;
    collapsedItems?: (h: import("vue").CreateElement, props: {
        value: import("./type").TagInputValue;
        collapsedTags: import("./type").TagInputValue;
        count: number;
    }) => import("vue/types/vnode").ScopedSlotReturnValue;
    valueDisplay?: string | ((h: import("vue").CreateElement, props: {
        value: import("./type").TagInputValue;
        onClose: (index: number, item?: any) => void;
    }) => import("vue/types/vnode").ScopedSlotReturnValue);
    onRemove?: (context: import("./type").TagInputRemoveContext) => void;
    inputProps?: unknown;
    defaultInputValue?: InputValue;
    tagProps?: unknown;
    onDragSort?: (context: {
        currentIndex: number;
        current: string | number;
        targetIndex: number;
        target: string | number;
    }) => void;
    onInputChange?: (value: InputValue, context?: import("./type").InputValueChangeContext) => void;
}, {
    value: import("./type").TagInputValue;
    disabled: boolean;
    size: "small" | "medium" | "large";
    readonly: boolean;
    autoWidth: boolean;
    clearable: boolean;
    placeholder: string;
    inputValue: InputValue;
    minCollapsedNum: number;
    excessTagsDisplayType: "scroll" | "break-line";
    dragSort: boolean;
}, true>);
export default _default;
