import { PopupProps } from '../popup';
import { TNode, SizeEnum } from '../common';
export interface TdSelectProps<T extends SelectOption = SelectOption> {
    bordered?: boolean;
    clearable?: boolean;
    collapsedItems?: TNode<{
        value: T[];
        collapsedSelectedItems: T[];
        count: number;
    }>;
    creatable?: boolean;
    disabled?: boolean;
    empty?: string | TNode;
    filter?: (filterWords: string, option: T) => boolean | Promise<boolean>;
    filterable?: boolean;
    keys?: SelectKeysType;
    loading?: boolean;
    loadingText?: string | TNode;
    max?: number;
    minCollapsedNum?: number;
    multiple?: boolean;
    options?: Array<T>;
    panelBottomContent?: string | TNode;
    panelTopContent?: string | TNode;
    placeholder?: string;
    popupProps?: PopupProps;
    prefixIcon?: TNode;
    reserveKeyword?: boolean;
    showArrow?: boolean;
    size?: SizeEnum;
    value?: SelectValue;
    defaultValue?: SelectValue;
    valueDisplay?: TNode<{
        value: T[];
        onClose: () => void;
    }>;
    valueType?: 'value' | 'object';
    onBlur?: (context: {
        value: SelectValue;
        e: FocusEvent | KeyboardEvent;
    }) => void;
    onChange?: (value: SelectValue) => void;
    onClear?: (context: {
        e: MouseEvent;
    }) => void;
    onCreate?: (value: string | number) => void;
    onEnter?: (context: {
        inputValue: string;
        e: KeyboardEvent;
        value: SelectValue;
    }) => void;
    onFocus?: (context: {
        value: SelectValue;
        e: FocusEvent | KeyboardEvent;
    }) => void;
    onRemove?: (options: SelectRemoveContext<T>) => void;
    onSearch?: (filterWords: string) => void;
    onVisibleChange?: (visible: boolean) => void;
}
export interface TdOptionProps {
    content?: string | TNode;
    default?: string | TNode;
    disabled?: boolean;
    label?: string;
    value?: string | number;
}
export interface TdOptionGroupProps {
    divider?: boolean;
    label?: string;
}
export interface SelectKeysType {
    value?: string;
    label?: string;
}
export declare type SelectValue<T extends SelectOption = SelectOption> = string | number | T | Array<SelectValue<T>>;
export interface SelectRemoveContext<T> {
    value: string | number;
    data: T;
    e: MouseEvent | KeyboardEvent;
}
export declare type SelectOption = TdOptionProps | SelectOptionGroup;
export interface SelectOptionGroup extends TdOptionGroupProps {
    group: string;
    children: Array<TdOptionProps>;
}
