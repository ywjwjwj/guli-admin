/**
 * tdesign v0.38.1
 * (c) 2022 tdesign
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.Vue));
})(this, (function (exports, Vue) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);

  function _extends$1() {
    return _extends$1 = Object.assign || function (a) {
      for (var b, c = 1; c < arguments.length; c++) {
        for (var d in b = arguments[c], b) {
          Object.prototype.hasOwnProperty.call(b, d) && (a[d] = b[d]);
        }
      }

      return a;
    }, _extends$1.apply(this, arguments);
  }

  var normalMerge = ["attrs", "props", "domProps"],
      toArrayMerge = ["class", "style", "directives"],
      functionalMerge = ["on", "nativeOn"],
      mergeJsxProps = function mergeJsxProps(a) {
    return a.reduce(function (c, a) {
      for (var b in a) {
        if (!c[b]) c[b] = a[b];else if (-1 !== normalMerge.indexOf(b)) c[b] = _extends$1({}, c[b], a[b]);else if (-1 !== toArrayMerge.indexOf(b)) {
          var d = c[b] instanceof Array ? c[b] : [c[b]],
              e = a[b] instanceof Array ? a[b] : [a[b]];
          c[b] = d.concat(e);
        } else if (-1 !== functionalMerge.indexOf(b)) {
          for (var f in a[b]) {
            if (c[b][f]) {
              var g = c[b][f] instanceof Array ? c[b][f] : [c[b][f]],
                  h = a[b][f] instanceof Array ? a[b][f] : [a[b][f]];
              c[b][f] = g.concat(h);
            } else c[b][f] = a[b][f];
          }
        } else if ("hook" == b) for (var i in a[b]) {
          c[b][i] = c[b][i] ? mergeFn(c[b][i], a[b][i]) : a[b][i];
        } else c[b] = a[b];
      }

      return c;
    }, {});
  },
      mergeFn = function mergeFn(a, b) {
    return function () {
      a && a.apply(this, arguments), b && b.apply(this, arguments);
    };
  };

  var helper = mergeJsxProps;

  function _defineProperty$2(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var prefix = "t";

  var SIZE_CLASSNAMES = {
    small: "".concat(prefix, "-size-s"),
    medium: "".concat(prefix, "-size-m"),
    large: "".concat(prefix, "-size-l"),
    "default": "",
    xs: "".concat(prefix, "-size-xs"),
    xl: "".concat(prefix, "-size-xl"),
    block: "".concat(prefix, "-size-full-width")
  };
  var STATUS_CLASSNAMES = {
    loading: "".concat(prefix, "-is-loading"),
    loadMore: "".concat(prefix, "-is-load-more"),
    disabled: "".concat(prefix, "-is-disabled"),
    focused: "".concat(prefix, "-is-focused"),
    success: "".concat(prefix, "-is-success"),
    error: "".concat(prefix, "-is-error"),
    warning: "".concat(prefix, "-is-warning"),
    selected: "".concat(prefix, "-is-selected"),
    active: "".concat(prefix, "-is-active"),
    checked: "".concat(prefix, "-is-checked"),
    current: "".concat(prefix, "-is-current"),
    hidden: "".concat(prefix, "-is-hidden"),
    visible: "".concat(prefix, "-is-visible"),
    expanded: "".concat(prefix, "-is-expanded"),
    indeterminate: "".concat(prefix, "-is-indeterminate")
  };
  var ClASSNAMES = {
    SIZE: SIZE_CLASSNAMES,
    STATUS: STATUS_CLASSNAMES
  };

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$1(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function getIEVersion$1() {
    var _navigator = navigator,
        userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;

    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }

    if (isIE11) {
      return 11;
    }

    return Number.MAX_SAFE_INTEGER;
  }

  function ownKeys$2m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2m(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function circleAdapter(circleElem) {
    var _window, _window$getComputedSt2, _window2, _window2$navigator;

    var basicStyle = {};

    if (!circleElem) {
      return;
    }

    var _window$getComputedSt = (_window = window) === null || _window === void 0 ? void 0 : (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem),
        color = _window$getComputedSt.color,
        fontSize = _window$getComputedSt.fontSize;

    var ua = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$navigator = _window2.navigator) === null || _window2$navigator === void 0 ? void 0 : _window2$navigator.userAgent;
    var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);

    if (isSafari) {
      basicStyle = {
        transformOrigin: "-1px -1px",
        transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
      };
    }

    if (color && getIEVersion$1() > 11) {
      var matched = color.match(/[\d.]+/g);
      var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
      setStyle(circleElem, _objectSpread$2m(_objectSpread$2m({}, basicStyle), {}, {
        background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
      }));
    } else {
      setStyle(circleElem, _objectSpread$2m(_objectSpread$2m({}, basicStyle), {}, {
        background: ""
      }));
    }
  }

  var name$10 = "".concat(prefix, "-loading__gradient");
  var classname = "".concat(prefix, "-icon-loading");
  var GradientIcon = Vue__default["default"].extend({
    name: name$10,
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.updateColor();
      });
    },
    updated: function updated() {
      this.updateColor();
    },
    methods: {
      updateColor: function updateColor() {
        var circleElem = this.$refs.circle;
        circleAdapter(circleElem);
      }
    },
    render: function render() {
      var h = arguments[0];
      var classes = [name$10, classname];
      return h("svg", {
        "class": classes,
        "attrs": {
          "viewBox": "0 0 14 14",
          "version": "1.1",
          "width": "1em",
          "height": "1em",
          "xmlns": "http://www.w3.org/2000/svg"
        }
      }, [h("foreignObject", {
        "attrs": {
          "x": "1",
          "y": "1",
          "width": "12",
          "height": "12"
        }
      }, [h("div", {
        "class": "".concat(name$10, "-conic"),
        "ref": "circle"
      })])]);
    }
  });

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var performanceNow = createCommonjsModule(function (module) {
    // Generated by CoffeeScript 1.12.2
    (function () {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };

        hrtime = process.hrtime;

        getNanoSeconds = function getNanoSeconds() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };

        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime;
        };

        loadTime = Date.now();
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime;
        };

        loadTime = new Date().getTime();
      }
    }).call(commonjsGlobal);
  });

  var root$1 = typeof window === 'undefined' ? commonjsGlobal : window,
      vendors = ['moz', 'webkit'],
      suffix = 'AnimationFrame',
      raf = root$1['request' + suffix],
      caf = root$1['cancel' + suffix] || root$1['cancelRequest' + suffix];

  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root$1[vendors[i] + 'Request' + suffix];
    caf = root$1[vendors[i] + 'Cancel' + suffix] || root$1[vendors[i] + 'CancelRequest' + suffix];
  } // Some versions of FF have rAF but not cAF


  if (!raf || !caf) {
    var last = 0,
        id = 0,
        queue = [],
        frameDuration = 1000 / 60;

    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = performanceNow(),
            next = Math.max(0, frameDuration - (_now - last));

        last = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0); // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue

          queue.length = 0;

          for (var i = 0; i < cp.length; i++) {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          }
        }, Math.round(next));
      }

      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };

    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }

  var raf_1 = function raf_1(fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root$1, fn);
  };

  var cancel = function cancel() {
    caf.apply(root$1, arguments);
  };

  var polyfill = function polyfill(object) {
    if (!object) {
      object = root$1;
    }

    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };
  raf_1.cancel = cancel;
  raf_1.polyfill = polyfill;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  var freeGlobal = _typeof(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root = _freeGlobal || freeSelf || Function('return this')();
  var _root = root;

  /** Built-in value references. */

  var _Symbol2 = _root.Symbol;
  var _Symbol = _Symbol2;

  /** Used for built-in method references. */

  var objectProto$i = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$g = objectProto$i.hasOwnProperty;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString$1 = objectProto$i.toString;
  /** Built-in value references. */

  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */

  function getRawTag(value) {
    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }

    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$h = Object.prototype;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString = objectProto$h.toString;
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */

  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }

  var _objectToString = objectToString$1;

  /** `Object#toString` result references. */

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  /** Built-in value references. */

  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? _getRawTag(value) : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$1 = Array.isArray;
  var isArray_1 = isArray$1;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && _typeof(value) == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */

  var stringTag$4 = '[object String]';
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */

  function isString(value) {
    return typeof value == 'string' || !isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag$4;
  }

  var isString_1 = isString;

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);

    if (time < 1) {
      return change * time * time * time + start;
    }

    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  var isServer = Vue__default["default"].prototype.$isServer || typeof window === "undefined";

  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };

  var on = function () {
    if (!isServer && document.addEventListener) {
      return function (element, event, handler) {
        if (element && event && handler) {
          element.addEventListener(event, handler, false);
          return function () {
            return off(element, event, handler);
          };
        }
      };
    }

    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on".concat(event), handler);
        return function () {
          return off(element, event, handler);
        };
      }
    };
  }();
  var off = function () {
    if (!isServer && document.removeEventListener) {
      return function (element, event, handler) {
        if (element && event) {
          element.removeEventListener(event, handler, false);
        }
      };
    }

    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on".concat(event), handler);
      }
    };
  }();
  function once(element, event, handler) {
    var handlerFn = typeof handler === "function" ? handler : handler.handleEvent;

    var callback = function callback(evt) {
      handlerFn(evt);
      off(element, event, callback);
    };

    on(element, event, callback);
  }
  function hasClass(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");

    if (el.classList) {
      return el.classList.contains(cls);
    }

    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }
  function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }

    if (!el.classList) {
      el.className = curClass;
    }
  }
  function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }

    if (!el.classList) {
      el.className = trim(curClass);
    }
  }
  var getAttach = function getAttach(node) {
    var attachNode = typeof node === "function" ? node() : node;

    if (!attachNode) {
      return document.body;
    }

    if (isString_1(attachNode)) {
      return document.querySelector(attachNode);
    }

    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }

    return document.body;
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";

    if (isString_1(container)) {
      return document.querySelector(container);
    }

    if (typeof container === "function") {
      return container();
    }

    return container;
  };

  function isWindow(obj) {
    return obj && obj === obj.window;
  }

  function getScroll(target, isLeft) {
    if (typeof window === "undefined" || !target) {
      return 0;
    }

    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;

    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }

    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
        container = _opt$container === void 0 ? window : _opt$container,
        _opt$duration = opt.duration,
        duration = _opt$duration === void 0 ? 450 : _opt$duration,
        _opt$easing = opt.easing,
        easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);

        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }

        if (time < duration) {
          raf_1(fnc);
        } else {
          raf_1(res);
        }
      };

      raf_1(fnc);
    });
  }
  var isNodeOverflow = function isNodeOverflow(ele) {
    var _ele$clientWidth = ele.clientWidth,
        clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
        _ele$scrollWidth = ele.scrollWidth,
        scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;

    if (scrollWidth > clientWidth) {
      return true;
    }

    return false;
  };
  var scrollSelectedIntoView = function scrollSelectedIntoView(parentEle, selected) {
    if (Vue__default["default"].prototype.$isServer) return;

    if (!selected || selected.offsetParent !== parentEle) {
      parentEle.scrollTop = 0;
      return;
    }

    var selectedTop = selected.offsetTop;
    var selectedBottom = selectedTop + selected.offsetHeight;
    var parentScrollTop = parentEle.scrollTop;
    var parentViewBottom = parentScrollTop + parentEle.clientHeight;

    if (selectedTop < parentScrollTop) {
      parentEle.scrollTop = selectedTop;
    } else if (selectedBottom > parentViewBottom) {
      parentEle.scrollTop = selectedBottom - parentEle.clientHeight;
    }
  };
  var removeDom = function removeDom(el) {
    if (el.remove) {
      el.remove();
    } else {
      el.parentNode.removeChild(el);
    }
  };

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = _typeof(value);

    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$1;

  var RenderJsTypes = [Function, String, Number, Boolean, Object, Array];

  var getValueRenderWay = function getValueRenderWay(value) {
    if (["string", "number", "boolean"].includes(_typeof(value))) return "text"
    /* Text */
    ;

    if (_typeof(value) === "object") {
      if (!(value instanceof Array) && value && value.context instanceof Vue__default["default"]) {
        return "vnode"
        /* VNode */
        ;
      }

      return "jsonstring"
      /* JsonString */
      ;
    }

    return "unknown"
    /* Unknown */
    ;
  };

  Vue__default["default"].extend({
    name: "render-tnode-template",
    functional: true,
    props: {
      render: RenderJsTypes,
      params: null
    },
    render: function render(h, ctx) {
      var _renderMap;

      var _ctx$props = ctx.props,
          render = _ctx$props.render,
          params = _ctx$props.params;
      var renderResult = typeof render === "function" ? render(h, params) : render;
      var renderWay = getValueRenderWay(renderResult);

      var renderText = function renderText(c) {
        return ctx.__proto__._v(c);
      };

      var renderMap = (_renderMap = {}, _defineProperty$2(_renderMap, "text"
      /* Text */
      , function text(c) {
        return renderText(c);
      }), _defineProperty$2(_renderMap, "jsonstring"
      /* JsonString */
      , function jsonstring(c) {
        return renderText(JSON.stringify(c, null, 2));
      }), _defineProperty$2(_renderMap, "vnode"
      /* VNode */
      , function vnode(c) {
        return c;
      }), _renderMap);
      return renderMap[renderWay] ? renderMap[renderWay](renderResult) : h();
    }
  });
  var renderTNodeJSX = function renderTNodeJSX(vm, name, options) {
    var isSilent = Boolean(isObject_1(options) && "silent" in options && options.silent);

    if (vm.$scopedSlots[name] && vm[name] && vm[name] !== true && !isSilent) {
      console.warn("Both $scopedSlots.".concat(name, " and $props.").concat(name, " exist, $props.").concat(name, " is preferred"));
    }

    var params = _typeof(options) === "object" && "params" in options ? options.params : null;
    var defaultNode = _typeof(options) === "object" && "defaultNode" in options ? options.defaultNode : options;
    var propsNode = vm[name];
    if (propsNode === false) return;

    if (propsNode === true && defaultNode) {
      return vm.$scopedSlots[name] ? vm.$scopedSlots[name](params) : defaultNode;
    }

    if (typeof propsNode === "function") return propsNode(vm.$createElement, params);
    var isPropsEmpty = [void 0, params, ""].includes(propsNode);
    if (isPropsEmpty && vm.$scopedSlots[name]) return vm.$scopedSlots[name](params);
    return propsNode;
  };
  var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
    var defaultNode = _typeof(options) === "object" && "defaultNode" in options ? options.defaultNode : options;
    return renderTNodeJSX(vm, name, options) || defaultNode;
  };
  var renderContent = function renderContent(vm, name1, name2, options) {
    var params = _typeof(options) === "object" && "params" in options ? options.params : null;
    var defaultNode = _typeof(options) === "object" && "defaultNode" in options && options.defaultNode;
    defaultNode = _typeof(options) === "object" && "context" in options && options;
    var toParams = params ? {
      params: params
    } : void 0;
    var node1 = renderTNodeJSX(vm, name1, toParams);
    var node2 = renderTNodeJSX(vm, name2, toParams);
    var r = [void 0, null, ""].includes(node1) ? node2 : node1;
    return [void 0, null, ""].includes(r) ? defaultNode : r;
  };

  var TransferDom = {
    inserted: function inserted(el, binding) {
      if (!binding.value) return;
      var parentNode = getAttach(binding.value);
      parentNode === null || parentNode === void 0 ? void 0 : parentNode.appendChild(el);
    }
  };

  var props$11 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    delay: {
      type: Number,
      "default": 0
    },
    fullscreen: Boolean,
    indicator: {
      type: [Boolean, Function],
      "default": true
    },
    inheritColor: Boolean,
    loading: {
      type: Boolean,
      "default": true
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium"
    },
    text: {
      type: [String, Function]
    },
    zIndex: {
      type: Number
    }
  };

  function ownKeys$2l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2l(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$$ = "".concat(prefix, "-loading");
  var centerClass = "".concat(prefix, "-loading--center");
  var fullscreenClass = "".concat(prefix, "-loading__fullscreen");
  var lockClass$3 = "".concat(prefix, "-loading--lock");
  var overlayClass = "".concat(prefix, "-loading__overlay");
  var relativeClass = "".concat(prefix, "-loading__parent");
  var fullClass = "".concat(prefix, "-loading--full");
  var inheritColorClass = "".concat(prefix, "-loading--inherit-color");
  var _Loading = Vue__default["default"].extend({
    name: "TLoading",
    props: _objectSpread$2l({}, props$11),
    directives: {
      TransferDom: TransferDom
    },
    data: function data() {
      return {
        delayShowLoading: false
      };
    },
    created: function created() {
      this.delay && this.countDelay();
    },
    watch: {
      loading: {
        handler: function handler(value) {
          if (value) {
            this.countDelay();
            this.lockFullscreen && addClass(document.body, lockClass$3);
          } else {
            this.lockFullscreen && removeClass(document.body, lockClass$3);
          }
        },
        immediate: true
      }
    },
    computed: {
      styles: function styles() {
        var styles = {};

        if (this.zIndex !== void 0) {
          styles.zIndex = this.zIndex;
        }

        if (!["small", "medium", "large"].includes(this.size)) {
          styles["font-size"] = this.size;
        }

        return styles;
      },
      showText: function showText() {
        return Boolean(this.text || this.$scopedSlots.text);
      },
      baseClasses: function baseClasses() {
        return [centerClass, SIZE_CLASSNAMES[this.size], _defineProperty$2({}, inheritColorClass, this.inheritColor)];
      },
      hasContent: function hasContent() {
        return Boolean(this["default"] || this.$scopedSlots["default"] || this.content || this.$scopedSlots.content);
      },
      withContentClasses: function withContentClasses() {
        return this.baseClasses.concat([name$$, fullClass, _defineProperty$2({}, overlayClass, this.showOverlay)]);
      },
      fullScreenClasses: function fullScreenClasses() {
        return [name$$, fullscreenClass, centerClass, overlayClass];
      },
      attachClasses: function attachClasses() {
        return this.baseClasses.concat([name$$, fullClass, _defineProperty$2({}, overlayClass, this.showOverlay)]);
      },
      normalClasses: function normalClasses() {
        return this.baseClasses.concat([name$$]);
      },
      lockFullscreen: function lockFullscreen() {
        return this.preventScrollThrough && this.fullscreen;
      },
      delayCounted: function delayCounted() {
        return Boolean(!this.delay || this.delay && this.delayShowLoading);
      },
      showWrapLoading: function showWrapLoading() {
        return this.hasContent && this.loading && this.delayCounted;
      },
      showFullScreenLoading: function showFullScreenLoading() {
        return this.fullscreen && this.loading && this.delayCounted;
      },
      showAttachedLoading: function showAttachedLoading() {
        return this.attach && this.loading && this.delayCounted;
      }
    },
    methods: {
      countDelay: function countDelay() {
        var _this = this;

        this.delayShowLoading = false;
        var timer = setTimeout(function () {
          _this.delayShowLoading = true;
          clearTimeout(timer);
        }, this.delay);
      }
    },
    render: function render() {
      var h = arguments[0];
      var defaultIndicator = h(GradientIcon, {
        "attrs": {
          "size": this.size
        }
      });
      var indicator = this.loading && renderTNodeJSX(this, "indicator", defaultIndicator);
      var text = this.showText && h("div", {
        "class": "".concat(prefix, "-loading__text")
      }, [renderTNodeJSX(this, "text")]);

      if (this.fullscreen) {
        if (!this.showFullScreenLoading) return null;
        return h("div", {
          "class": this.fullScreenClasses,
          "style": this.styles,
          "directives": [{
            name: "transfer-dom",
            value: this.attach
          }]
        }, [h("div", {
          "class": this.baseClasses
        }, [indicator, text])]);
      }

      if (this.hasContent) {
        return h("div", {
          "class": relativeClass
        }, [renderContent(this, "default", "content"), this.showWrapLoading && h("div", {
          "class": this.withContentClasses,
          "style": this.styles
        }, [indicator, text])]);
      }

      if (this.attach) {
        if (!this.showAttachedLoading) return;
        return h("div", {
          "class": this.attachClasses,
          "style": this.styles,
          "directives": [{
            name: "transfer-dom",
            value: this.attach
          }]
        }, [indicator, text]);
      }

      return h("div", {
        "class": this.normalClasses,
        "style": this.styles
      }, [indicator, text]);
    }
  });

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  var _arrayMap = arrayMap;

  /** `Object#toString` result references. */

  var symbolTag$3 = '[object Symbol]';
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */

  function isSymbol(value) {
    return _typeof(value) == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag$3;
  }

  var isSymbol_1 = isSymbol;

  /** Used as references for various `Number` constants. */

  var INFINITY$3 = 1 / 0;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */

  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    if (isArray_1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }

    if (isSymbol_1(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$3 ? '-0' : result;
  }

  var _baseToString = baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */

  function toString$1(value) {
    return value == null ? '' : _baseToString(value);
  }

  var toString_1 = toString$1;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  var _baseSlice = baseSlice;

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */

  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : _baseSlice(array, start, end);
  }

  var _castSlice = castSlice;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
      rsComboMarksRange$3 = "\\u0300-\\u036f",
      reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsVarRange$2 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsZWJ$2 = "\\u200d";
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

  var reHasUnicode = RegExp('[' + rsZWJ$2 + rsAstralRange$2 + rsComboRange$3 + rsVarRange$2 + ']');
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
      rsComboMarksRange$2 = "\\u0300-\\u036f",
      reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
      rsVarRange$1 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral = '[' + rsAstralRange$1 + ']',
      rsCombo$2 = '[' + rsComboRange$2 + ']',
      rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$1 = '(?:' + rsCombo$2 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
      rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ$1 = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$1 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsSymbol = '(?:' + [rsNonAstral$1 + rsCombo$2 + '?', rsCombo$2, rsRegional$1, rsSurrPair$1, rsAstral].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode = RegExp(rsFitz$1 + '(?=' + rsFitz$1 + ')|' + rsSymbol + rsSeq$1, 'g');
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  var _unicodeToArray = unicodeToArray;

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function stringToArray(string) {
    return _hasUnicode(string) ? _unicodeToArray(string) : _asciiToArray(string);
  }

  var _stringToArray = stringToArray;

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */

  function createCaseFirst(methodName) {
    return function (string) {
      string = toString_1(string);
      var strSymbols = _hasUnicode(string) ? _stringToArray(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? _castSlice(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }

  var _createCaseFirst = createCaseFirst;

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */

  var upperFirst = _createCaseFirst('toUpperCase');
  var upperFirst_1 = upperFirst;

  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */

  function capitalize(string) {
    return upperFirst_1(toString_1(string).toLowerCase());
  }

  var capitalize_1 = capitalize;

  function ownKeys$2k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2k(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function withInstall(comp, dep) {
    var _c$options;

    var c = comp;
    var name = (c === null || c === void 0 ? void 0 : (_c$options = c.options) === null || _c$options === void 0 ? void 0 : _c$options.name) || c.name;

    c.install = function (Vue, config) {
      var defaults = {
        prefix: "t"
      };

      var installConfig = _objectSpread$2k(_objectSpread$2k({}, defaults), config);

      var defaultPrefix = capitalize_1(defaults.prefix);
      var componentName = name.replace(defaultPrefix, "").replace("-mapprops", "");
      componentName = capitalize_1(installConfig.prefix) + componentName;
      Vue.component(componentName, comp);

      if (dep && (Vue === null || Vue === void 0 ? void 0 : Vue._installedPlugins.indexOf(dep)) === -1) {
        Vue.use(dep);
      }
    };

    return comp;
  }

  function ownKeys$2j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2j(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var lockClass$2 = "".concat(prefix, "-loading--lock");
  var fullScreenLoadingInstance = null;

  function createLoading(options) {
    var props = _objectSpread$2j({}, options);

    var loading = new _Loading({
      propsData: _objectSpread$2j({}, props)
    }).$mount();
    var attach = getAttach(props.attach);

    if (attach) {
      attach.appendChild(loading.$el);
    } else {
      console.error("attach is not exist");
    }

    var loadingInstance = {
      hide: function hide() {
        loading.loading = false;
        loading.$el.parentNode.removeChild(loading.$el);
      }
    };
    return loadingInstance;
  }

  function produceLoading(props) {
    if (props === true) {
      fullScreenLoadingInstance = createLoading({
        fullscreen: true,
        loading: true,
        attach: "body"
      });
      return fullScreenLoadingInstance;
    }

    if (props === false) {
      removeClass(document.body, lockClass$2);
      fullScreenLoadingInstance.hide();
      fullScreenLoadingInstance = null;
      return;
    }

    return createLoading(props);
  }

  var LoadingPlugin = produceLoading;

  LoadingPlugin.install = function () {
    Vue__default["default"].prototype.$loading = produceLoading;
  };

  var Loading = withInstall(_Loading);

  var props$10 = {
    block: Boolean,
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    ghost: Boolean,
    icon: {
      type: Function
    },
    loading: Boolean,
    shape: {
      type: String,
      "default": "rectangle",
      validator: function validator(val) {
        return ["rectangle", "square", "round", "circle"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": void 0,
      validator: function validator(val) {
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "button",
      validator: function validator(val) {
        return ["submit", "reset", "button"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "base",
      validator: function validator(val) {
        return ["base", "outline", "dashed", "text"].includes(val);
      }
    },
    onClick: Function
  };

  var Ripple = {
    startTimeId: null,
    finishTimeId: null,
    inserted: function inserted(el, binding) {
      if (binding.value === false) return;
      var period = 200;
      var defaultBg = "rgba(0, 0, 0, 0.35)";
      var bg = binding.value === true || binding.value == null ? defaultBg : binding.value;
      var rippleContainer = document.createElement("div");
      var hasCreateContainer = false;
      var count = 0;
      el.addEventListener("pointerdown", function (e) {
        if (el.classList.contains("".concat(prefix, "-is-active")) || el.classList.contains("".concat(prefix, "-is-disabled")) || el.classList.contains("".concat(prefix, "-is-checked"))) {
          return;
        }

        if (e.button !== 0) return;

        if (bg === defaultBg && el !== null && el !== void 0 && el.dataset.ripple) {
          bg = el.dataset.ripple;
        }

        var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");

        if (cssVariable) {
          bg = cssVariable;
        }

        var elBorder = parseInt(getComputedStyle(el).borderWidth.replace("px", ""), 10);
        var border = elBorder > 0 ? elBorder : 0;
        var width = el.offsetWidth;
        var height = el.offsetHeight;
        var style = getComputedStyle(el);

        if (!hasCreateContainer) {
          hasCreateContainer = true;
          setStyle(rippleContainer, {
            position: "absolute",
            left: "".concat(0 - border, "px"),
            top: "".concat(0 - border, "px"),
            width: "".concat(width, "px"),
            height: "".concat(height, "px"),
            borderRadius: style.borderRadius,
            pointerEvents: "none",
            overflow: "hidden"
          });
          el.appendChild(rippleContainer);
        }

        var ripple = document.createElement("div");
        setStyle(ripple, {
          marginTop: "0",
          marginLeft: "0",
          right: "".concat(width, "px"),
          width: "".concat(width + 20, "px"),
          height: "100%",
          transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
          transform: "skewX(-8deg)",
          pointerEvents: "none",
          position: "absolute",
          zIndex: "0",
          backgroundColor: bg,
          opacity: "0.9"
        });
        var elMap = /* @__PURE__ */new WeakMap();

        for (var n = el.children.length, i = 0; i < n; ++i) {
          var child = el.children[i];

          if (child.style.zIndex === "" && child !== rippleContainer) {
            child.style.zIndex = "1";
            elMap.set(child, true);
          }
        }

        var initPosition = el.style.position ? el.style.position : getComputedStyle(el).position;

        if (initPosition === "" || initPosition === "static") {
          el.style.position = "relative";
        }

        rippleContainer.insertBefore(ripple, rippleContainer.firstChild);
        count += 1;
        clearTimeout(Ripple.startTimeId);
        Ripple.startTimeId = setTimeout(function () {
          ripple.style.transform = "translateX(".concat(width, "px)");
        }, 0);

        var handleClearRipple = function handleClearRipple() {
          ripple.style.backgroundColor = "rgba(0, 0, 0, 0)";
          el.removeEventListener("pointerup", handleClearRipple, false);
          el.removeEventListener("pointerleave", handleClearRipple, false);
          setTimeout(function () {
            rippleContainer.removeChild(ripple);
            count -= 1;
            if (count > 0) return;
            el.style.position = initPosition !== "static" ? initPosition : "";

            for (var _n = el.children.length, _i = 0; _i < _n; ++_i) {
              var _child = el.children[_i];

              if (elMap.has(_child)) {
                _child.style.zIndex = "";
                elMap["delete"](_child);
              }
            }

            el.removeChild(rippleContainer);
            hasCreateContainer = false;
          }, period * 2 + 100);
        };

        el.addEventListener("pointerup", handleClearRipple, false);
        el.addEventListener("pointerleave", handleClearRipple, false);
      });
    }
  };

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */

  var arrayProto = Array.prototype;
  /** Built-in value references. */

  var splice = arrayProto.splice;
  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `ListCache`.


  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;
  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */

  function stackClear() {
    this.__data__ = new _ListCache();
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  /** `Object#toString` result references. */

  var asyncTag = '[object AsyncFunction]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction$1(value) {
    if (!isObject_1(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    var tag = _baseGetTag(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$1;

  /** Used to detect overreaching core-js shims. */

  var coreJsData = _root['__core-js_shared__'];
  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();
  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */


  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$2 = funcProto$2.toString;
  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used for built-in method references. */

  var funcProto$1 = Function.prototype,
      objectProto$g = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$1 = funcProto$1.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$f = objectProto$g.hasOwnProperty;
  /** Used to detect if a method is native. */

  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$f).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */

  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }

    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue$1;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */

  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */

  var Map$1 = _getNative(_root, 'Map');
  var _Map = Map$1;

  /* Built-in method references that are verified to be native. */

  var nativeCreate = _getNative(Object, 'create');
  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */

  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
  /** Used for built-in method references. */

  var objectProto$f = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$e = objectProto$f.hasOwnProperty;
  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function hashGet(key) {
    var data = this.__data__;

    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }

    return hasOwnProperty$e.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */

  var objectProto$e = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$d = objectProto$e.hasOwnProperty;
  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? data[key] !== undefined : hasOwnProperty$d.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = _nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `Hash`.


  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;
  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash(),
      'map': new (_Map || _ListCache)(),
      'string': new _Hash()
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = _typeof(value);

    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */

  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */

  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `MapCache`.


  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;
  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE$2 = 200;
  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof _ListCache) {
      var pairs = data.__data__;

      if (!_Map || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new _MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  } // Add methods to `Stack`.


  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;
  var _Stack = Stack;

  var defineProperty = function () {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  var _defineProperty$1 = defineProperty;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty$1) {
      _defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq_1(object[key], value) || value === undefined && !(key in object)) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignMergeValue = assignMergeValue;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  var _createBaseFor = createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */

  var baseFor = _createBaseFor();
  var _baseFor = baseFor;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? _root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }

      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
  });

  /** Built-in value references. */

  var Uint8Array = _root.Uint8Array;
  var _Uint8Array = Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  var _copyArray = copyArray;

  /** Built-in value references. */

  var objectCreate = Object.create;
  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject_1(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  var _baseCreate = baseCreate;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /** Built-in value references. */

  var getPrototype = _overArg(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$d;
    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !_isPrototype(object) ? _baseCreate(_getPrototype(object)) : {};
  }

  var _initCloneObject = initCloneObject;

  /** `Object#toString` result references. */

  var argsTag$3 = '[object Arguments]';
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */

  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag$3;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */

  var objectProto$c = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$c = objectProto$c.hasOwnProperty;
  /** Built-in value references. */

  var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */

  var isArguments = _baseIsArguments(function () {
    return arguments;
  }()) ? _baseIsArguments : function (value) {
    return isObjectLike_1(value) && hasOwnProperty$c.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };
  var isArguments_1 = isArguments;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  var isLength_1 = isLength;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */

  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */

  function isArrayLikeObject(value) {
    return isObjectLike_1(value) && isArrayLike_1(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? _root.Buffer : undefined;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

    var isBuffer = nativeIsBuffer || stubFalse_1;
    module.exports = isBuffer;
  });

  /** `Object#toString` result references. */

  var objectTag$4 = '[object Object]';
  /** Used for built-in method references. */

  var funcProto = Function.prototype,
      objectProto$b = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString = funcProto.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$b = objectProto$b.hasOwnProperty;
  /** Used to infer the `Object` constructor. */

  var objectCtorString = funcToString.call(Object);
  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */

  function isPlainObject$1(value) {
    if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$4) {
      return false;
    }

    var proto = _getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty$b.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject$1;

  /** `Object#toString` result references. */

  var argsTag$2 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      boolTag$4 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$3 = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag$6 = '[object Map]',
      numberTag$4 = '[object Number]',
      objectTag$3 = '[object Object]',
      regexpTag$3 = '[object RegExp]',
      setTag$6 = '[object Set]',
      stringTag$3 = '[object String]',
      weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */

  function baseIsTypedArray(value) {
    return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */

    var freeProcess = moduleExports && _freeGlobal.process;
    /** Used to access faster Node.js helpers. */

    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        } // Legacy `process.binding('util')` for Node.js < 10.


        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  });

  /* Node.js helper references. */

  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */

  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
  var isTypedArray_1 = isTypedArray;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  var _safeGet = safeGet;

  /** Used for built-in method references. */

  var objectProto$a = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$a = objectProto$a.hasOwnProperty;
  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty$a.call(object, key) && eq_1(objValue, value)) || value === undefined && !(key in object)) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }

    return object;
  }

  var _copyObject = copyObject;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var _baseTimes = baseTimes;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */

  function isIndex(value, length) {
    var type = _typeof(value);

    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  var _isIndex = isIndex;

  /** Used for built-in method references. */

  var objectProto$9 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$9 = objectProto$9.hasOwnProperty;
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$9.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
      _isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */

  var objectProto$8 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$8 = objectProto$8.hasOwnProperty;
  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }

    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$8.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */

  function keysIn(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn;

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */

  function toPlainObject(value) {
    return _copyObject(value, keysIn_1(value));
  }

  var toPlainObject_1 = toPlainObject;

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = _safeGet(object, key),
        srcValue = _safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      _assignMergeValue(object, key, stacked);
      return;
    }

    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray_1(srcValue),
          isBuff = !isArr && isBuffer_1(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);
      newValue = srcValue;

      if (isArr || isBuff || isTyped) {
        if (isArray_1(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject_1(objValue)) {
          newValue = _copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = _cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = _cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {
        newValue = objValue;

        if (isArguments_1(objValue)) {
          newValue = toPlainObject_1(objValue);
        } else if (!isObject_1(objValue) || isFunction_1(objValue)) {
          newValue = _initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }

    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }

    _assignMergeValue(object, key, newValue);
  }

  var _baseMergeDeep = baseMergeDeep;

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }

    _baseFor(source, function (srcValue, key) {
      stack || (stack = new _Stack());

      if (isObject_1(srcValue)) {
        _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(_safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }

        _assignMergeValue(object, key, newValue);
      }
    }, keysIn_1);
  }

  var _baseMerge = baseMerge;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  var identity_1 = identity;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  var _apply = apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$3 = Math.max;
  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */

  function overRest(func, start, transform) {
    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax$3(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return _apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function () {
      return value;
    };
  }

  var constant_1 = constant;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var baseSetToString = !_defineProperty$1 ? identity_1 : function (func, string) {
    return _defineProperty$1(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant_1(string),
      'writable': true
    });
  };
  var _baseSetToString = baseSetToString;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeNow = Date.now;
  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var setToString = _shortOut(_baseSetToString);
  var _setToString = setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */

  function baseRest(func, start) {
    return _setToString(_overRest(func, start, identity_1), func + '');
  }

  var _baseRest = baseRest;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */

  function isIterateeCall(value, index, object) {
    if (!isObject_1(object)) {
      return false;
    }

    var type = _typeof(index);

    if (type == 'number' ? isArrayLike_1(object) && _isIndex(index, object.length) : type == 'string' && index in object) {
      return eq_1(object[index], value);
    }

    return false;
  }

  var _isIterateeCall = isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */

  function createAssigner(assigner) {
    return _baseRest(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }

      object = Object(object);

      while (++index < length) {
        var source = sources[index];

        if (source) {
          assigner(object, source, index, customizer);
        }
      }

      return object;
    });
  }

  var _createAssigner = createAssigner;

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */

  var mergeWith = _createAssigner(function (object, source, srcIndex, customizer) {
    _baseMerge(object, source, srcIndex, customizer);
  });
  var mergeWith_1 = mergeWith;

  var GLOBAL_CONFIG_ZH = {
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      total: "\u5171 {total} \u9879\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    calendar: {
      firstDayOfWeek: 1,
      fillWithZero: true,
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "\u4E00\u6708,\u4E8C\u6708,\u4E09\u6708,\u56DB\u6708,\u4E94\u6708,\u516D\u6708,\u4E03\u6708,\u516B\u6708,\u4E5D\u6708,\u5341\u6708,\u5341\u4E00\u6708,\u5341\u4E8C\u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      now: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u8BF7\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88",
      confirmBtnTheme: {
        "default": "primary",
        info: "primary",
        warning: "primary",
        danger: "primary",
        success: "primary"
      }
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: {
        content: "\u786E\u5B9A",
        size: "small"
      },
      cancel: {
        content: "\u53D6\u6D88",
        size: "small"
      },
      confirmBtnTheme: {
        "default": "primary",
        warning: "primary",
        danger: "primary"
      }
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      expandIcon: void 0,
      sortIcon: void 0
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9",
      clearIcon: void 0
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E",
      folderIcon: void 0
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    datePicker: {
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
      firstDayOfWeek: 1,
      rangeSeparator: " \u81F3 ",
      format: "YYYY-MM-DD",
      yearAriaLabel: "\u5E74",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    steps: {
      errorIcon: void 0
    },
    upload: {
      sizeLimitMessage: "\u6587\u4EF6\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
      cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20"
    },
    tag: {
      closeIcon: void 0
    },
    form: {
      requiredMark: true,
      errorMessage: {
        date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        required: "${name}\u5FC5\u586B",
        max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
        "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
        idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
        "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
        number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
      }
    },
    input: {
      placeholder: "\u8BF7\u8F93\u5165"
    }
  };

  function ownKeys$2i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2i(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getConfigReceiverMixins(componentName) {
    return Vue__default["default"].extend({
      name: "TConfigProvider",
      inject: {
        globalConfig: {
          "default": void 0
        }
      },
      computed: {
        global: function global() {
          var defaultData = GLOBAL_CONFIG_ZH[componentName];

          if (this.globalConfig && this.globalConfig[componentName]) {
            return _objectSpread$2i(_objectSpread$2i({}, defaultData), this.globalConfig[componentName]);
          }

          return defaultData;
        }
      },
      methods: {
        t: function t(pattern, placement) {
          if (typeof pattern === "string") {
            if (!placement) return pattern;
            var regx = /\{\s*([\w-]+)\s*\}/g;
            var translated = pattern.replace(regx, function (match, key) {
              if (placement) {
                return String(placement[key]);
              }

              return "";
            });
            return translated;
          }

          if (typeof pattern === "function") {
            return pattern(placement);
          }

          return "";
        }
      }
    });
  }
  function getKeepAnimationMixins() {
    return Vue__default["default"].extend({
      name: "TKeepAnimation",
      inject: {
        globalConfig: {
          "default": void 0
        }
      },
      computed: {
        keepAnimation: function keepAnimation() {
          var animationConfig = {
            include: ["ripple", "expand", "fade"],
            exclude: []
          };

          if (this.globalConfig && this.globalConfig.animation) {
            animationConfig = mergeWith_1(animationConfig, this.globalConfig.animation, function (objValue, srcValue) {
              if (Array.isArray(objValue)) {
                return srcValue;
              }
            });
          }

          var isKeep = function isKeep(type) {
            return animationConfig && !animationConfig.exclude.includes(type) && animationConfig.include.includes(type);
          };

          return {
            ripple: isKeep("ripple"),
            expand: isKeep("expand"),
            fade: isKeep("fade")
          };
        }
      }
    });
  }

  function mixins() {
    for (var _len = arguments.length, mixins2 = new Array(_len), _key = 0; _key < _len; _key++) {
      mixins2[_key] = arguments[_key];
    }

    return Vue__default["default"].extend({
      mixins: mixins2
    });
  }

  function ownKeys$2h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2h(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$_ = "".concat(prefix, "-button");
  var keepAnimationMixins$8 = getKeepAnimationMixins();
  var TButton = mixins(keepAnimationMixins$8).extend({
    name: "TButton",
    props: props$10,
    directives: {
      ripple: Ripple
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var buttonContent = renderContent(this, "default", "content");
      var icon = this.loading ? h(Loading, {
        "attrs": {
          "inheritColor": true
        }
      }) : renderTNodeJSX(this, "icon");
      var disabled = this.disabled || this.loading;
      var theme = this.theme;

      if (!this.theme) {
        if (this.variant === "base") {
          theme = "primary";
        } else {
          theme = "default";
        }
      }

      var buttonClass = ["".concat(name$_), ClASSNAMES.SIZE[this.size], "".concat(name$_, "--variant-").concat(this.variant), "".concat(name$_, "--theme-").concat(theme), (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, disabled), _defineProperty$2(_ref, ClASSNAMES.STATUS.loading, this.loading), _defineProperty$2(_ref, "".concat(name$_, "--shape-").concat(this.shape), this.shape !== "rectangle"), _defineProperty$2(_ref, "".concat(name$_, "--ghost"), this.ghost), _defineProperty$2(_ref, ClASSNAMES.SIZE.block, this.block), _ref)];
      buttonContent = buttonContent ? h("span", {
        "class": "".concat(name$_, "__text")
      }, [buttonContent]) : "";

      if (icon) {
        buttonContent = [icon, buttonContent];
      }

      var on = _objectSpread$2h({}, this.$listeners);

      if (typeof this.onClick === "function") {
        on.click = this.onClick;
      }

      var buttonAttrs = {
        attrs: {
          type: this.type,
          disabled: disabled
        }
      };
      return h("button", helper([{
        "directives": [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }],
        "class": buttonClass
      }, buttonAttrs, {
        "on": _objectSpread$2h({}, on)
      }]), [buttonContent]);
    }
  });

  var Button = withInstall(TButton);

  var props$$ = {
    align: {
      type: String,
      "default": "center",
      validator: function validator(val) {
        return ["left", "right", "center"].includes(val);
      }
    },
    content: {
      type: [String, Function]
    },
    dashed: Boolean,
    "default": {
      type: [String, Function]
    },
    layout: {
      type: String,
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    theme: {
      type: String,
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    }
  };

  function ownKeys$2g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2g(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$Z = "".concat(prefix, "-divider");
  var _Divider = Vue__default["default"].extend({
    name: "TDivider",
    props: _objectSpread$2g({}, props$$),
    render: function render() {
      var _ref;

      var h = arguments[0];
      var children = renderContent(this, "default", "content");

      if (this.theme) {
        console.warn("TDesign Divider Warn: `theme` is going to be deprecated, please use `layout` instead.");
      }

      var dividerClassNames = ["".concat(name$Z), ["".concat(name$Z, "--").concat(this.layout || this.theme || "horizontal")], (_ref = {}, _defineProperty$2(_ref, "".concat(name$Z, "--dashed"), !!this.dashed), _defineProperty$2(_ref, "".concat(name$Z, "--with-text"), !!children), _defineProperty$2(_ref, "".concat(name$Z, "--with-text-").concat(this.align), !!children), _ref)];
      return h("div", {
        "class": dividerClassNames
      }, [children && h("span", {
        "class": "".concat(name$Z, "__inner-text")
      }, [children])]);
    }
  });

  var Divider = withInstall(_Divider);

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var _excluded$A = ["attrs"];

  function ownKeys$2f(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2f(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2f(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function renderFn(createElement, node, rootData) {
    var iconAttrs = _objectSpread$2f(_objectSpread$2f({}, node.attrs), rootData.attrs);

    rootData.attrs;
        var restProps = _objectWithoutProperties(rootData, _excluded$A);

    return createElement(node.tag, _objectSpread$2f({
      attrs: iconAttrs
    }, restProps), (node.children || []).map(function (child) {
      return renderFn(createElement, child, {});
    }));
  }

  var classnames = createCommonjsModule(function (module) {
    /* global define */
    (function () {

      var hasOwn = {}.hasOwnProperty;

      function classNames() {
        var classes = [];

        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;

          var argType = _typeof(arg);

          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);

              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }

        return classes.join(' ');
      }

      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  });

  var _excluded$z = ["icon", "id"],
      _excluded2 = ["staticClass", "style", "icon", "id", "onClick"],
      _excluded3 = ["class", "staticClass", "style", "staticStyle", "attrs"];

  function ownKeys$2e(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2e(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2e(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function hump2Underline(s) {
    return s.replace(/([A-Z])/g, "-$1").toLowerCase().replace("view-box", "viewBox");
  }

  function jsonToUnderline(obj) {
    if (obj instanceof Array) {
      obj.forEach(function (v) {
        jsonToUnderline(v);
      });
    } else if (obj instanceof Object) {
      Object.keys(obj).forEach(function (key) {
        var newKey = hump2Underline(key);

        if (newKey !== key) {
          obj[newKey] = obj[key];
          delete obj[key];
        }

        jsonToUnderline(obj[newKey]);
      });
    }
  }

  var IconBase = Vue__default["default"].extend({
    functional: true,
    props: {
      icon: {
        type: Object
      },
      id: {
        type: String,
        "default": ""
      }
    },
    render: function render(createElement, context) {
      var _context$props = context.props,
          icon = _context$props.icon,
          id = _context$props.id,
          userProps = _objectWithoutProperties(_context$props, _excluded$z);

      var _context$data$props = context.data.props,
          staticClass = _context$data$props.staticClass,
          style = _context$data$props.style;
          _context$data$props.icon;
          _context$data$props.id;
          var onClick = _context$data$props.onClick,
          otherProps = _objectWithoutProperties(_context$data$props, _excluded2);

      var _context$data = context.data,
          customClassName = _context$data["class"],
          customStaticClassName = _context$data.staticClass,
          customStyle = _context$data.style,
          customStaticStyle = _context$data.staticStyle,
          attrs = _context$data.attrs,
          otherBinds = _objectWithoutProperties(_context$data, _excluded3);

      var domProps = otherBinds.domProps,
          on = otherBinds.on,
          nativeOn = otherBinds.nativeOn,
          directives = otherBinds.directives,
          scopedSlots = otherBinds.scopedSlots,
          slot = otherBinds.slot,
          key = otherBinds.key,
          ref = otherBinds.ref,
          refInFor = otherBinds.refInFor;
      var finalCls = classnames("t-icon", "t-icon-".concat(id), staticClass, customClassName, customStaticClassName);

      var finalStyle = _objectSpread$2e(_objectSpread$2e(_objectSpread$2e({}, style), customStyle), customStaticStyle);

      jsonToUnderline(icon);

      var _click = onClick || (on === null || on === void 0 ? void 0 : on.click);

      return renderFn(createElement, icon, {
        "class": void 0,
        staticClass: finalCls,
        props: _objectSpread$2e(_objectSpread$2e({}, userProps), otherProps),
        attrs: attrs,
        style: finalStyle,
        on: _objectSpread$2e(_objectSpread$2e({}, on), {}, {
          click: function click(e) {
            return _click === null || _click === void 0 ? void 0 : _click({
              e: e
            });
          }
        }, nativeOn),
        directives: directives,
        scopedSlots: scopedSlots,
        slot: slot,
        key: key,
        ref: ref,
        refInFor: refInFor,
        domProps: domProps
      });
    }
  });

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = {
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  };

  function useCommonClassName() {
    var classPrefix = ConfigContext.classPrefix;
    return {
      SIZE: {
        "default": "",
        xs: "".concat(classPrefix, "-size-xs"),
        small: "".concat(classPrefix, "-size-s"),
        medium: "".concat(classPrefix, "-size-m"),
        large: "".concat(classPrefix, "-size-l"),
        xl: "".concat(classPrefix, "-size-xl"),
        block: "".concat(classPrefix, "-size-full-width")
      },
      STATUS: {
        loading: "".concat(classPrefix, "-is-loading"),
        disabled: "".concat(classPrefix, "-is-disabled"),
        focused: "".concat(classPrefix, "-is-focused"),
        success: "".concat(classPrefix, "-is-success"),
        error: "".concat(classPrefix, "-is-error"),
        warning: "".concat(classPrefix, "-is-warning"),
        selected: "".concat(classPrefix, "-is-selected"),
        active: "".concat(classPrefix, "-is-active"),
        checked: "".concat(classPrefix, "-is-checked"),
        current: "".concat(classPrefix, "-is-current"),
        hidden: "".concat(classPrefix, "-is-hidden"),
        visible: "".concat(classPrefix, "-is-visible"),
        expanded: "".concat(classPrefix, "-is-expanded"),
        indeterminate: "".concat(classPrefix, "-is-indeterminate")
      }
    };
  }

  function useSizeProps(size) {
    if (size === void 0) {
      return {
        className: "",
        style: {}
      };
    }

    var COMMON_SIZE_CLASS_NAMES = useCommonClassName().SIZE;

    if (!(size in COMMON_SIZE_CLASS_NAMES)) {
      return {
        className: "",
        style: {
          fontSize: size
        }
      };
    }

    return {
      className: COMMON_SIZE_CLASS_NAMES[size],
      style: {}
    };
  }

  var _excluded$y = ["size"];

  function ownKeys$2d(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2d(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2d(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var AddRectangle = Vue__default["default"].extend({
    name: "AddRectangleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$y);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2d(_objectSpread$2d({}, otherProps || {}), {}, {
        id: "add-rectangle",
        icon: element$w,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$x = ["size"];

  function ownKeys$2c(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2c(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2c(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Add = Vue__default["default"].extend({
    name: "AddIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$x);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2c(_objectSpread$2c({}, otherProps || {}), {}, {
        id: "add",
        icon: element$v,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$w = ["size"];

  function ownKeys$2b(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2b(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2b(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var BrowseOff = Vue__default["default"].extend({
    name: "BrowseOffIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$w);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2b(_objectSpread$2b({}, otherProps || {}), {}, {
        id: "browse-off",
        icon: element$u,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$v = ["size"];

  function ownKeys$2a(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2a(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2a(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Browse = Vue__default["default"].extend({
    name: "BrowseIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$v);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2a(_objectSpread$2a({}, otherProps || {}), {}, {
        id: "browse",
        icon: element$t,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$u = ["size"];

  function ownKeys$29(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$29(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$29(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Calendar$1 = Vue__default["default"].extend({
    name: "CalendarIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$u);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$29(_objectSpread$29({}, otherProps || {}), {}, {
        id: "calendar",
        icon: element$s,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$t = ["size"];

  function ownKeys$28(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$28(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$28(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 5v6l4.5-3L6 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CaretRightSmall = Vue__default["default"].extend({
    name: "CaretRightSmallIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$t);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$28(_objectSpread$28({}, otherProps || {}), {}, {
        id: "caret-right-small",
        icon: element$r,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$s = ["size"];

  function ownKeys$27(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$27(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$27(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckCircleFilled = Vue__default["default"].extend({
    name: "CheckCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$s);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$27(_objectSpread$27({}, otherProps || {}), {}, {
        id: "check-circle-filled",
        icon: element$q,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$r = ["size"];

  function ownKeys$26(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$26(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$26(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Check = Vue__default["default"].extend({
    name: "CheckIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$r);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$26(_objectSpread$26({}, otherProps || {}), {}, {
        id: "check",
        icon: element$p,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$q = ["size"];

  function ownKeys$25(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$25(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$25(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronDown = Vue__default["default"].extend({
    name: "ChevronDownIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$q);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$25(_objectSpread$25({}, otherProps || {}), {}, {
        id: "chevron-down",
        icon: element$o,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$p = ["size"];

  function ownKeys$24(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$24(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$24(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeftDouble = Vue__default["default"].extend({
    name: "ChevronLeftDoubleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$p);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$24(_objectSpread$24({}, otherProps || {}), {}, {
        id: "chevron-left-double",
        icon: element$n,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$o = ["size"];

  function ownKeys$23(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$23(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$23(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeft = Vue__default["default"].extend({
    name: "ChevronLeftIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$o);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$23(_objectSpread$23({}, otherProps || {}), {}, {
        id: "chevron-left",
        icon: element$m,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$n = ["size"];

  function ownKeys$22(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$22(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$22(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightCircle = Vue__default["default"].extend({
    name: "ChevronRightCircleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$n);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$22(_objectSpread$22({}, otherProps || {}), {}, {
        id: "chevron-right-circle",
        icon: element$l,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$m = ["size"];

  function ownKeys$21(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$21(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$21(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightDouble = Vue__default["default"].extend({
    name: "ChevronRightDoubleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$m);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$21(_objectSpread$21({}, otherProps || {}), {}, {
        id: "chevron-right-double",
        icon: element$k,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$l = ["size"];

  function ownKeys$20(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$20(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$20(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRight = Vue__default["default"].extend({
    name: "ChevronRightIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$l);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$20(_objectSpread$20({}, otherProps || {}), {}, {
        id: "chevron-right",
        icon: element$j,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$k = ["size"];

  function ownKeys$1$(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1$(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1$(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronUp = Vue__default["default"].extend({
    name: "ChevronUpIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$k);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1$(_objectSpread$1$({}, otherProps || {}), {}, {
        id: "chevron-up",
        icon: element$i,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$j = ["size"];

  function ownKeys$1_(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1_(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1_(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseCircleFilled = Vue__default["default"].extend({
    name: "CloseCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$j);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1_(_objectSpread$1_({}, otherProps || {}), {}, {
        id: "close-circle-filled",
        icon: element$h,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$i = ["size"];

  function ownKeys$1Z(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1Z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1Z(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Close = Vue__default["default"].extend({
    name: "CloseIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$i);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1Z(_objectSpread$1Z({}, otherProps || {}), {}, {
        id: "close",
        icon: element$g,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$h = ["size"];

  function ownKeys$1Y(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1Y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1Y(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Delete = Vue__default["default"].extend({
    name: "DeleteIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$h);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1Y(_objectSpread$1Y({}, otherProps || {}), {}, {
        id: "delete",
        icon: element$f,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$g = ["size"];

  function ownKeys$1X(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1X(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1X(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Ellipsis = Vue__default["default"].extend({
    name: "EllipsisIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$g);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1X(_objectSpread$1X({}, otherProps || {}), {}, {
        id: "ellipsis",
        icon: element$e,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$f = ["size"];

  function ownKeys$1W(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1W(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1W(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ErrorCircleFilled = Vue__default["default"].extend({
    name: "ErrorCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$f);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1W(_objectSpread$1W({}, otherProps || {}), {}, {
        id: "error-circle-filled",
        icon: element$d,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$e = ["size"];

  function ownKeys$1V(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1V(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1V(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2h-1v9h1V2zm.1 10.8H7.4V14h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Error$1 = Vue__default["default"].extend({
    name: "ErrorIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$e);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1V(_objectSpread$1V({}, otherProps || {}), {}, {
        id: "error",
        icon: element$c,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$d = ["size"];

  function ownKeys$1U(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1U(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1U(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var FileCopy = Vue__default["default"].extend({
    name: "FileCopyIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$d);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1U(_objectSpread$1U({}, otherProps || {}), {}, {
        id: "file-copy",
        icon: element$b,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$c = ["size"];

  function ownKeys$1T(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1T(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1T(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Filter = Vue__default["default"].extend({
    name: "FilterIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$c);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1T(_objectSpread$1T({}, otherProps || {}), {}, {
        id: "filter",
        icon: element$a,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$b = ["size"];

  function ownKeys$1S(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1S(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1S(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var HelpCircleFilled = Vue__default["default"].extend({
    name: "HelpCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$b);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1S(_objectSpread$1S({}, otherProps || {}), {}, {
        id: "help-circle-filled",
        icon: element$9,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$a = ["size"];

  function ownKeys$1R(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1R(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1R(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var InfoCircleFilled = Vue__default["default"].extend({
    name: "InfoCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$a);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1R(_objectSpread$1R({}, otherProps || {}), {}, {
        id: "info-circle-filled",
        icon: element$8,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$9 = ["size"];

  function ownKeys$1Q(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1Q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1Q(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 8.5h6v-1H5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var MinusRectangle = Vue__default["default"].extend({
    name: "MinusRectangleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$9);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1Q(_objectSpread$1Q({}, otherProps || {}), {}, {
        id: "minus-rectangle",
        icon: element$7,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$8 = ["size"];

  function ownKeys$1P(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1P(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 7.35h9v1.3h-9v-1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Remove = Vue__default["default"].extend({
    name: "RemoveIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$8);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1P(_objectSpread$1P({}, otherProps || {}), {}, {
        id: "remove",
        icon: element$6,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$7 = ["size"];

  function ownKeys$1O(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1O(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1O(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Round = Vue__default["default"].extend({
    name: "RoundIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$7);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1O(_objectSpread$1O({}, otherProps || {}), {}, {
        id: "round",
        icon: element$5,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$6 = ["size"];

  function ownKeys$1N(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1N(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1N(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Search$1 = Vue__default["default"].extend({
    name: "SearchIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$6);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1N(_objectSpread$1N({}, otherProps || {}), {}, {
        id: "search",
        icon: element$4,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$5 = ["size"];

  function ownKeys$1M(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1M(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1M(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Setting = Vue__default["default"].extend({
    name: "SettingIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$5);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1M(_objectSpread$1M({}, otherProps || {}), {}, {
        id: "setting",
        icon: element$3,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$4 = ["size"];

  function ownKeys$1L(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1L(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1L(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var TimeFilled = Vue__default["default"].extend({
    name: "TimeFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$4);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1L(_objectSpread$1L({}, otherProps || {}), {}, {
        id: "time-filled",
        icon: element$2,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$3 = ["size"];

  function ownKeys$1K(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1K(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1K(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Time = Vue__default["default"].extend({
    name: "TimeIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$3);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1K(_objectSpread$1K({}, otherProps || {}), {}, {
        id: "time",
        icon: element$1,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$2 = ["size"];

  function ownKeys$1J(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1J(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1J(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Upload$1 = Vue__default["default"].extend({
    name: "UploadIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties(props, _excluded$2);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$1J(_objectSpread$1J({}, otherProps || {}), {}, {
        id: "upload",
        icon: element,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  function checkScriptAndLoad(url, className) {
    if (window) {
      if (!document || !url || typeof url !== "string") return;

      if (document.querySelectorAll(".".concat(className, "[src=\"").concat(url, "\"]")).length > 0) {
        return;
      }

      var svg = document.createElement("script");
      svg.setAttribute("class", className);
      svg.setAttribute("src", url);
      document.body.appendChild(svg);
    }
  }

  var props$_ = {
    name: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": void 0
    },
    url: {
      type: [String, Array],
      "default": void 0
    },
    loadDefaultIcons: {
      type: Boolean,
      "default": true
    },
    onClick: Function
  };

  function ownKeys$1I(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$1I(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$1I(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var classPrefix = ConfigContext.classPrefix;
  var tName = "".concat(classPrefix, "-icon");
  var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.0.3/fonts/index.js";

  var _Icon = Vue__default["default"].extend({
    name: "Icon",
    props: props$_,
    computed: {
      iconName: function iconName() {
        return this.url ? this.name : "".concat(tName, "-").concat(this.name);
      },
      classes: function classes() {
        var _useSizeProps = useSizeProps(this.size),
            sizeClassName = _useSizeProps.className;

        var iconName = this.url ? this.name : "".concat(tName, "-").concat(this.name);
        var arr = [tName, iconName, sizeClassName];
        return arr;
      },
      iconStyle: function iconStyle() {
        if (["small", "medium", "large"].includes(this.size)) return {};
        return {
          "font-size": this.size
        };
      }
    },
    methods: {
      handleClick: function handleClick(e) {
        var _this$onClick;

        this.$emit("click", {
          e: e
        });
        (_this$onClick = this.onClick) === null || _this$onClick === void 0 ? void 0 : _this$onClick.call(this, {
          e: e
        });
      }
    },
    mounted: function mounted() {
      var finalUrl = [];

      if (this.url) {
        finalUrl = this.url instanceof Array ? this.url.concat() : [this.url];
      }

      if (this.loadDefaultIcons) {
        finalUrl.push(CDN_ICONFONT_URL);
      }

      Array.from(new Set(finalUrl)).forEach(function (url) {
        checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
      });
    },
    render: function render() {
      var h = arguments[0];
      var attrs = {
        href: "#".concat(this.iconName)
      };
      return h("svg", {
        "class": this.classes,
        "style": this.iconStyle,
        "on": {
          "click": this.handleClick
        }
      }, [h("use", {
        "attrs": _objectSpread$1I({}, attrs)
      })]);
    }
  });

  var Icon$1 = _Icon;

  var Icon = withInstall(Icon$1);

  var calcSize = function calcSize(width) {
    var size = "xs";

    if (width < 768) {
      size = "xs";
    } else if (width >= 768 && width < 992) {
      size = "sm";
    } else if (width >= 992 && width < 1200) {
      size = "md";
    } else if (width >= 1200 && width < 1400) {
      size = "lg";
    } else if (width >= 1400 && width < 1880) {
      size = "xl";
    } else {
      size = "xxl";
    }

    return size;
  };

  var props$Z = {
    flex: {
      type: [String, Number]
    },
    lg: {
      type: [Number, Object]
    },
    md: {
      type: [Number, Object]
    },
    offset: {
      type: Number,
      "default": 0
    },
    order: {
      type: Number,
      "default": 0
    },
    pull: {
      type: Number,
      "default": 0
    },
    push: {
      type: Number,
      "default": 0
    },
    sm: {
      type: [Number, Object]
    },
    span: {
      type: Number,
      "default": 12
    },
    tag: {
      type: String,
      "default": "div"
    },
    xl: {
      type: [Number, Object]
    },
    xs: {
      type: [Number, Object]
    },
    xxl: {
      type: [Number, Object]
    }
  };

  function ownKeys$1H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1H(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$Y = "".concat(prefix, "-col");
  var _Col = Vue__default["default"].extend({
    name: "TCol",
    props: _objectSpread$1H({}, props$Z),
    inject: ["rowContext"],
    data: function data() {
      return {
        size: "md"
      };
    },
    computed: {
      classes: function classes() {
        var _this = this,
            _objectSpread3;

        var span = this.span,
            order = this.order,
            offset = this.offset,
            push = this.push,
            pull = this.pull;
        var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
        var sizeClasses = allSizes.reduce(function (acc, currSize) {
          var _objectSpread2;

          var sizeProp = _this[currSize];
          var sizeObject = {};

          if (typeof sizeProp === "number") {
            sizeObject.span = sizeProp;
          } else if (isObject_1(sizeProp)) {
            sizeObject = sizeProp || {};
          }

          return _objectSpread$1H(_objectSpread$1H({}, acc), {}, (_objectSpread2 = {}, _defineProperty$2(_objectSpread2, "".concat(name$Y, "-").concat(currSize, "-").concat(sizeObject.span), sizeObject.span !== void 0), _defineProperty$2(_objectSpread2, "".concat(name$Y, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), _defineProperty$2(_objectSpread2, "".concat(name$Y, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), _defineProperty$2(_objectSpread2, "".concat(name$Y, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), _defineProperty$2(_objectSpread2, "".concat(name$Y, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0), _objectSpread2));
        }, {});
        return _objectSpread$1H((_objectSpread3 = {}, _defineProperty$2(_objectSpread3, "".concat(name$Y), true), _defineProperty$2(_objectSpread3, "".concat(name$Y, "-").concat(span), span !== void 0), _defineProperty$2(_objectSpread3, "".concat(name$Y, "-order-").concat(order), order), _defineProperty$2(_objectSpread3, "".concat(name$Y, "-offset-").concat(offset), offset), _defineProperty$2(_objectSpread3, "".concat(name$Y, "-push-").concat(push), push), _defineProperty$2(_objectSpread3, "".concat(name$Y, "-pull-").concat(pull), pull), _objectSpread3), sizeClasses);
      }
    },
    mounted: function mounted() {
      this.updateSize();
      window.addEventListener("resize", this.updateSize);
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener("resize", this.updateSize);
    },
    methods: {
      updateSize: function updateSize() {
        this.size = calcSize(window.innerWidth);
      },
      parseFlex: function parseFlex(flex) {
        if (typeof flex === "number") {
          return "".concat(flex, " ").concat(flex, " 0");
        }

        if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
          return "0 0 ".concat(flex);
        }

        return flex;
      },
      calcColPadding: function calcColPadding(gutter, currentSize) {
        var paddingObj = {};

        if (typeof gutter === "number") {
          Object.assign(paddingObj, {
            paddingLeft: "".concat(gutter / 2, "px"),
            paddingRight: "".concat(gutter / 2, "px")
          });
        } else if (Array.isArray(gutter) && gutter.length) {
          if (typeof gutter[0] === "number") {
            Object.assign(paddingObj, {
              paddingLeft: "".concat(gutter[0] / 2, "px"),
              paddingRight: "".concat(gutter[0] / 2, "px")
            });
          }

          if (isObject_1(gutter[0]) && gutter[0][currentSize]) {
            Object.assign(paddingObj, {
              paddingLeft: "".concat(gutter[0][currentSize] / 2, "px"),
              paddingRight: "".concat(gutter[0][currentSize] / 2, "px")
            });
          }
        } else if (isObject_1(gutter) && gutter[currentSize]) {
          Object.assign(paddingObj, {
            paddingLeft: "".concat(gutter[currentSize] / 2, "px"),
            paddingRight: "".concat(gutter[currentSize] / 2, "px")
          });
        }

        return paddingObj;
      }
    },
    render: function render() {
      var h = arguments[0];
      var flex = this.flex,
          tag = this.tag,
          classes = this.classes;
      var colStyle = {};
      flex && (colStyle.flex = this.parseFlex(flex));
      var rowContext = this.rowContext;

      if (rowContext) {
        var rowGutter = rowContext.gutter;
        Object.assign(colStyle, this.calcColPadding(rowGutter, this.size));
      }

      return h(tag, {
        "class": classes,
        "style": colStyle
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var props$Y = {
    align: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    gutter: {
      type: [Number, Object, Array],
      "default": 0
    },
    justify: {
      type: String,
      "default": "start",
      validator: function validator(val) {
        return ["start", "end", "center", "space-around", "space-between"].includes(val);
      }
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  function ownKeys$1G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1G(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$X = "".concat(prefix, "-row");
  var _Row = Vue__default["default"].extend({
    name: "TRow",
    props: _objectSpread$1G({}, props$Y),
    data: function data() {
      return {
        size: "md"
      };
    },
    provide: function provide() {
      return {
        rowContext: {
          gutter: this.gutter
        }
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        var justify = this.justify,
            align = this.align;
        return [name$X, (_ref = {}, _defineProperty$2(_ref, "".concat(name$X, "--").concat(justify), justify), _defineProperty$2(_ref, "".concat(name$X, "--").concat(align), align), _ref)];
      }
    },
    mounted: function mounted() {
      this.updateSize();
      this.handleIE();
      window.addEventListener("resize", this.updateSize);
    },
    watch: {
      gutter: function gutter() {
        this.handleIE();
      },
      size: function size() {
        this.handleIE();
      }
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener("resize", this.updateSize);
    },
    methods: {
      updateSize: function updateSize() {
        this.size = calcSize(window.innerWidth);
      },
      handleIE: function handleIE() {
        if (getIEVersion$1() <= 11) {
          var rowGap = this.rowGap(this.gutter, this.size);

          if (rowGap) {
            this.$el.setAttribute("row-gap", "".concat(rowGap));
          }
        }
      },
      calcRowStyle: function calcRowStyle(gutter, currentSize) {
        var rowStyle = {};

        if (typeof gutter === "number") {
          Object.assign(rowStyle, {
            marginLeft: "".concat(gutter / -2, "px"),
            marginRight: "".concat(gutter / -2, "px")
          });
        } else if (Array.isArray(gutter) && gutter.length) {
          if (typeof gutter[0] === "number") {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[0] / -2, "px"),
              marginRight: "".concat(gutter[0] / -2, "px")
            });
          }

          if (typeof gutter[1] === "number") {
            Object.assign(rowStyle, {
              rowGap: "".concat(gutter[1], "px")
            });
          }

          if (isObject_1(gutter[0]) && gutter[0][currentSize] !== void 0) {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
              marginRight: "".concat(gutter[0][currentSize] / -2, "px")
            });
          }

          if (isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
            Object.assign(rowStyle, {
              rowGap: "".concat(gutter[1][currentSize], "px")
            });
          }
        } else if (isObject_1(gutter) && gutter[currentSize]) {
          if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
              marginRight: "".concat(gutter[currentSize][0] / -2, "px")
            });
            Object.assign(rowStyle, {
              rowGap: "".concat(gutter[currentSize][1], "px")
            });
          } else {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[currentSize] / -2, "px"),
              marginRight: "".concat(gutter[currentSize] / -2, "px")
            });
          }
        }

        return rowStyle;
      },
      rowGap: function rowGap(gutter, currentSize) {
        var rowGap;

        if (Array.isArray(gutter) && gutter.length) {
          if (typeof gutter[1] === "number") {
            var _gutter = _slicedToArray(gutter, 2);

            rowGap = _gutter[1];
          }

          if (isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
            rowGap = gutter[1][currentSize];
          }
        } else if (isObject_1(gutter) && gutter[currentSize]) {
          if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
            var _gutter$currentSize = _slicedToArray(gutter[currentSize], 2);

            rowGap = _gutter$currentSize[1];
          }
        }

        return rowGap;
      }
    },
    render: function render() {
      var h = arguments[0];
      var tag = this.tag,
          classes = this.classes;
      var rowStyle = this.calcRowStyle(this.gutter, this.size);
      var attributes = {
        "class": classes,
        style: rowStyle,
        attrs: {}
      };
      return h(tag, helper([{}, attributes]), [this.$slots["default"]]);
    }
  });

  var Col = withInstall(_Col);
  var Row = withInstall(_Row);

  var name$W = "".concat(prefix, "-layout");
  var _Layout = Vue__default["default"].extend({
    name: "TLayout",
    data: function data() {
      return {
        hasSider: false
      };
    },
    provide: function provide() {
      return {
        layout: this
      };
    },
    methods: {
      renderContent: function renderContent() {
        return this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : "";
      }
    },
    computed: {
      classes: function classes() {
        return [name$W, _defineProperty$2({}, "".concat(name$W, "--with-sider"), this.hasSider)];
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("section", {
        "class": this.classes
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var props$X = {
    height: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$1F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1F(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Header = Vue__default["default"].extend({
    name: "THeader",
    props: _objectSpread$1F({}, props$X),
    render: function render() {
      var h = arguments[0];
      var styles = this.height ? {
        height: this.height
      } : {};
      return h("header", {
        "class": "".concat(prefix, "-layout__header"),
        "style": styles
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var props$W = {
    height: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$1E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1E(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Footer = Vue__default["default"].extend({
    name: "TFooter",
    props: _objectSpread$1E({}, props$W),
    methods: {
      renderContent: function renderContent() {
        return this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : "";
      }
    },
    render: function render() {
      var h = arguments[0];
      var styles = this.height ? {
        height: this.height
      } : {};
      return h("footer", {
        "class": "".concat(prefix, "-layout__footer"),
        "style": styles
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var props$V = {
    width: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$1D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1D(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Aside = Vue__default["default"].extend({
    name: "TAside",
    props: _objectSpread$1D({}, props$V),
    data: function data() {
      return {};
    },
    inject: {
      layout: {
        "default": void 0
      }
    },
    mounted: function mounted() {
      this.layout.hasSider = true;
    },
    destroyed: function destroyed() {
      this.layout.hasSider = false;
    },
    render: function render() {
      var h = arguments[0];
      var styles = this.width ? {
        width: this.width
      } : {};
      return h("aside", {
        "class": "".concat(prefix, "-layout__sider"),
        "style": styles
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var _Content = Vue__default["default"].extend({
    name: "TContent",
    render: function render() {
      var h = arguments[0];
      return h("main", {
        "class": "".concat(prefix, "-layout__content")
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var Aside = withInstall(_Aside);
  var Layout = withInstall(_Layout);
  var Header = withInstall(_Header);
  var Footer = withInstall(_Footer);
  var Content = withInstall(_Content);

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var runtime_1 = createCommonjsModule(function (module) {
    var runtime = function (exports) {

      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined$1; // More compressible than void 0.

      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
        return obj[key];
      }

      try {
        // IE 8 has a broken Object.defineProperty that only works on DOM objects.
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.

        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
      }

      exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.

      var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.


      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

      if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }

      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = GeneratorFunctionPrototype;
      define(Gp, "constructor", GeneratorFunctionPrototype);
      define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
      GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      exports.isGeneratorFunction = function (genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
      };

      exports.mark = function (genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          define(genFun, toStringTagSymbol, "GeneratorFunction");
        }

        genFun.prototype = Object.create(Gp);
        return genFun;
      }; // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.


      exports.awrap = function (arg) {
        return {
          __await: arg
        };
      };

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;

            if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
              return PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              });
            }

            return PromiseImpl.resolve(value).then(function (unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration.
              result.value = unwrapped;
              resolve(result);
            }, function (error) {
              // If a rejected Promise was yielded, throw the rejection back
              // into the async generator function so it can be handled there.
              return invoke("throw", error, resolve, reject);
            });
          }
        }

        var previousPromise;

        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        } // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).


        this._invoke = enqueue;
      }

      defineIteratorMethods(AsyncIterator.prototype);
      define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      });
      exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.

      exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        if (PromiseImpl === void 0) PromiseImpl = Promise;
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      };

      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }

          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            } // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


            return doneResult();
          }

          context.method = method;
          context.arg = arg;

          while (true) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }

              context.dispatchException(context.arg);
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;
            var record = tryCatch(innerFn, self, context);

            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done ? GenStateCompleted : GenStateSuspendedYield;

              if (record.arg === ContinueSentinel) {
                continue;
              }

              return {
                value: record.arg,
                done: context.done
              };
            } else if (record.type === "throw") {
              state = GenStateCompleted; // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.

              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      } // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.


      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (method === undefined$1) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;

          if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined$1;
              maybeInvokeDelegate(delegate, context);

              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }

            context.method = "throw";
            context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);

        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }

        var info = record.arg;

        if (!info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }

        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

          context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.

          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined$1;
          }
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        } // The delegate iterator is finished, so forget it and continue with
        // the outer generator.


        context.delegate = null;
        return ContinueSentinel;
      } // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.


      defineIteratorMethods(Gp);
      define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.

      define(Gp, iteratorSymbol, function () {
        return this;
      });
      define(Gp, "toString", function () {
        return "[object Generator]";
      });

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };

        if (1 in locs) {
          entry.catchLoc = locs[1];
        }

        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }

        this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }

      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{
          tryLoc: "root"
        }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }

      exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        keys.reverse(); // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.

        return function next() {
          while (keys.length) {
            var key = keys.pop();

            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          } // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.


          next.done = true;
          return next;
        };
      };

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];

          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }

          if (typeof iterable.next === "function") {
            return iterable;
          }

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }

              next.value = undefined$1;
              next.done = true;
              return next;
            };

            return next.next = next;
          }
        } // Return an iterator with no values.


        return {
          next: doneResult
        };
      }

      exports.values = values;

      function doneResult() {
        return {
          value: undefined$1,
          done: true
        };
      }

      Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          this.prev = 0;
          this.next = 0; // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.

          this.sent = this._sent = undefined$1;
          this.done = false;
          this.delegate = null;
          this.method = "next";
          this.arg = undefined$1;
          this.tryEntries.forEach(resetTryEntry);

          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                this[name] = undefined$1;
              }
            }
          }
        },
        stop: function stop() {
          this.done = true;
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;

          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }

          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) {
            throw exception;
          }

          var context = this;

          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined$1;
            }

            return !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }

          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;

          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }

          return this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }

          if (record.type === "break" || record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }

          return ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          } // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.


          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };

          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined$1;
          }

          return ContinueSentinel;
        }
      }; // Regardless of whether this script is executing as a CommonJS module
      // or not, return the runtime object so that we can declare the variable
      // regeneratorRuntime in the outer scope, which allows this module to be
      // injected easily by `bin/regenerator --include-runtime script.js`.

      return exports;
    }( // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
    module.exports );

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      // This module should not be running in strict mode, so the above
      // assignment should always work unless something is misconfigured. Just
      // in case runtime.js accidentally runs in strict mode, in modern engines
      // we can explicitly access globalThis. In older engines we can escape
      // strict mode using a global Function call. This could conceivably fail
      // if a Content Security Policy forbids using Function, but in that case
      // the proper solution is to fix the accidental strict mode problem. If
      // you've misconfigured your bundler to force strict mode and applied a
      // CSP to forbid Function, and you're not willing to fix either of those
      // problems, please detail your unique predicament in a GitHub issue.
      if ((typeof globalThis === "undefined" ? "undefined" : _typeof(globalThis)) === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  });

  var regenerator = runtime_1;

  var affixProps = {
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    offsetBottom: {
      type: Number,
      "default": 0
    },
    offsetTop: {
      type: Number,
      "default": 0
    },
    zIndex: {
      type: Number
    },
    onFixedChange: Function
  };

  function ownKeys$1C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1C(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$V = "".concat(prefix, "-affix");
  var _Affix = Vue__default["default"].extend({
    name: "TAffix",
    props: _objectSpread$1C({}, affixProps),
    data: function data() {
      return {
        fixedTop: false,
        oldWidthHeight: {
          width: "0px",
          height: "0px"
        }
      };
    },
    watch: {
      offsetTop: function offsetTop() {
        this.calcInitValue();
      },
      offsetBottom: function offsetBottom() {
        this.calcInitValue();
      }
    },
    methods: {
      handleScroll: function handleScroll() {
        var _this = this;

        if (!this.ticking) {
          window.requestAnimationFrame(function () {
            var _this$$el$getBounding = _this.$el.getBoundingClientRect(),
                top = _this$$el$getBounding.top;

            var containerTop = 0;

            if (_this.scrollContainer instanceof HTMLElement) {
              containerTop = _this.scrollContainer.getBoundingClientRect().top;
            }

            var calcTop = top - containerTop;
            var calcBottom = containerTop + _this.containerHeight - _this.offsetBottom;

            if (_this.offsetTop !== void 0 && calcTop <= _this.offsetTop) {
              _this.fixedTop = containerTop + _this.offsetTop;
            } else if (_this.offsetBottom !== void 0 && top >= calcBottom) {
              _this.fixedTop = calcBottom;
            } else {
              _this.fixedTop = false;
            }

            _this.ticking = false;

            _this.$emit("fixedChange", _this.fixedTop !== false, {
              top: _this.fixedTop
            });

            if (isFunction_1(_this.onFixedChange)) _this.onFixedChange(_this.fixedTop !== false, {
              top: _this.fixedTop
            });
          });
          this.ticking = true;
        }
      },
      calcInitValue: function calcInitValue() {
        var scrollContainer = this.scrollContainer;
        var containerHeight = scrollContainer[scrollContainer instanceof Window ? "innerHeight" : "clientHeight"];
        this.containerHeight = containerHeight - this.$el.clientHeight;

        var _ref = this.$el.querySelector(".".concat(name$V)) || this.$el,
            clientWidth = _ref.clientWidth,
            clientHeight = _ref.clientHeight;

        this.oldWidthHeight = {
          width: "".concat(clientWidth, "px"),
          height: "".concat(clientHeight, "px")
        };
        this.handleScroll();
      }
    },
    mounted: function mounted() {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this2.$nextTick();

              case 2:
                _this2.scrollContainer = getScrollContainer(_this2.container);

                _this2.calcInitValue();

                on(_this2.scrollContainer, "scroll", _this2.handleScroll);
                on(window, "resize", _this2.calcInitValue);
                if (!(_this2.scrollContainer instanceof Window)) on(window, "scroll", _this2.handleScroll);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    },
    destroyed: function destroyed() {
      if (!this.scrollContainer) return;
      off(this.scrollContainer, "scroll", this.handleScroll);
      off(window, "resize", this.calcInitValue);
      if (!(this.scrollContainer instanceof Window)) off(window, "scroll", this.handleScroll);
    },
    render: function render() {
      var h = arguments[0];
      var children = this.$slots["default"],
          oldWidthHeight = this.oldWidthHeight,
          fixedTop = this.fixedTop,
          zIndex = this.zIndex;

      if (fixedTop !== false) {
        return h("div", [h("div", {
          "style": oldWidthHeight
        }), h("div", {
          "class": name$V,
          "style": {
            zIndex: zIndex,
            top: "".concat(fixedTop, "px"),
            width: oldWidthHeight.width
          }
        }, [children])]);
      }

      return h("div", [children]);
    }
  });

  var Affix = withInstall(_Affix);

  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
        top = _target$getBoundingCl.top;

    if (container === window) {
      return top - document.documentElement.clientTop;
    }

    return top - container.getBoundingClientRect().top;
  }

  var props$U = {
    affixProps: {
      type: Object
    },
    bounds: {
      type: Number,
      "default": 5
    },
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    cursor: {
      type: Function
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    targetOffset: {
      type: Number,
      "default": 0
    },
    onChange: Function,
    onClick: Function
  };

  var COMPONENT_NAME$1 = "".concat(prefix, "-anchor");

  function ownKeys$1B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1B(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ANCHOR_LINE_CLASSNAME = "".concat(COMPONENT_NAME$1, "__line");
  var ANCHOR_LINE_CURSOR_CLASSNAME = "".concat(COMPONENT_NAME$1, "__line-cursor");
  var _Anchor = Vue__default["default"].extend({
    name: "TAnchor",
    props: _objectSpread$1B({}, props$U),
    provide: function provide() {
      return {
        tAnchor: this
      };
    },
    data: function data() {
      return {
        links: [],
        active: "",
        activeLineStyle: false
      };
    },
    watch: {
      attach: function attach() {
        if (this.scrollContainer) {
          off(this.scrollContainer, "scroll", this.handleScroll);
        }

        this.getScrollContainer();
      }
    },
    methods: {
      getScrollContainer: function getScrollContainer$1() {
        var container = this.container;
        this.scrollContainer = getScrollContainer(container);
        on(this.scrollContainer, "scroll", this.handleScroll);
        this.handleScroll();
      },
      getAnchorTarget: function getAnchorTarget(link) {
        var matcher = link.match(ANCHOR_SHARP_REGEXP);

        if (!matcher) {
          return;
        }

        var anchor = document.getElementById(matcher[1]);

        if (!anchor) {
          return;
        }

        return anchor;
      },
      registerLink: function registerLink(link) {
        var links = this.links;

        if (!ANCHOR_SHARP_REGEXP.test(link) || links.indexOf(link) !== -1) {
          return;
        }

        links.push(link);
      },
      unregisterLink: function unregisterLink(link) {
        this.links = this.links.filter(function (each) {
          return each !== link;
        });
      },
      setCurrentActiveLink: function setCurrentActiveLink(link) {
        var _this = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var active;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  active = _this.active;

                  if (!(active === link)) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _this.active = link;

                  _this.emitChange(link, active);

                  _context.next = 7;
                  return Vue__default["default"].nextTick();

                case 7:
                  _this.updateActiveLine();

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      updateActiveLine: function updateActiveLine() {
        var ele = this.$el.querySelector(".".concat(ClASSNAMES.STATUS.active, ">a"));

        if (!ele) {
          this.activeLineStyle = false;
          return;
        }

        var top = ele.offsetTop,
            height = ele.offsetHeight;
        this.activeLineStyle = {
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        };
      },
      emitChange: function emitChange(currentLink, prevLink) {
        this.$emit("change", currentLink, prevLink);

        if (this.onChange) {
          this.onChange(currentLink, prevLink);
        }
      },
      handleLinkClick: function handleLinkClick(link) {
        this.$emit("click", link);

        if (this.onClick) {
          this.onClick(link);
        }
      },
      handleScrollTo: function handleScrollTo(link) {
        var _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var anchor, scrollContainer, targetOffset, scrollTop, offsetTop, top;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  anchor = _this2.getAnchorTarget(link);

                  _this2.setCurrentActiveLink(link);

                  if (anchor) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return");

                case 4:
                  _this2.handleScrollLock = true;
                  scrollContainer = _this2.scrollContainer, targetOffset = _this2.targetOffset;
                  scrollTop = getScroll(scrollContainer);
                  offsetTop = getOffsetTop(anchor, scrollContainer);
                  top = scrollTop + offsetTop - targetOffset;
                  _context2.next = 11;
                  return scrollTo(top, {
                    container: scrollContainer
                  });

                case 11:
                  _this2.handleScrollLock = false;

                case 12:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      },
      handleScroll: function handleScroll() {
        var _this3 = this;

        if (this.handleScrollLock) return;
        var links = this.links,
            bounds = this.bounds,
            targetOffset = this.targetOffset;
        var filters = [];
        var active = "";
        links.forEach(function (link) {
          var anchor = _this3.getAnchorTarget(link);

          if (!anchor) {
            return;
          }

          var top = getOffsetTop(anchor, _this3.scrollContainer);

          if (top < bounds + targetOffset) {
            filters.push({
              link: link,
              top: top
            });
          }
        });

        if (filters.length) {
          var latest = filters.reduce(function (prev, cur) {
            return prev.top > cur.top ? prev : cur;
          });
          active = latest.link;
        }

        this.setCurrentActiveLink(active);
      },
      renderCursor: function renderCursor() {
        var h = this.$createElement;
        var titleContent = renderTNodeJSX(this, "cursor");
        return titleContent || h("div", {
          "class": ANCHOR_LINE_CURSOR_CLASSNAME
        });
      }
    },
    mounted: function mounted() {
      var _this4 = this;

      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        var active;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                active = _this4.active;

                _this4.getScrollContainer();

                if (!active) {
                  _context3.next = 6;
                  break;
                }

                _context3.next = 5;
                return Vue__default["default"].nextTick();

              case 5:
                _this4.handleScrollTo(active);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    destroyed: function destroyed() {
      if (!this.scrollContainer) return;
      off(this.scrollContainer, "scroll", this.handleScroll);
    },
    render: function render() {
      var h = arguments[0];
      var children = this.$scopedSlots["default"],
          size = this.size,
          affixProps = this.affixProps,
          activeLineStyle = this.activeLineStyle;
      var className = [COMPONENT_NAME$1, ClASSNAMES.SIZE[size]];
      var content = h("div", {
        "class": className
      }, [h("div", {
        "class": ANCHOR_LINE_CLASSNAME
      }, [h("div", {
        "class": "".concat(ANCHOR_LINE_CURSOR_CLASSNAME, "-wrapper"),
        "style": activeLineStyle
      }, [this.renderCursor()])]), children && children(null)]);

      if (affixProps) {
        return h(Affix, {
          "props": _objectSpread$1B({}, affixProps)
        }, [content]);
      }

      return content;
    }
  });

  var props$T = {
    href: {
      type: String,
      "default": "",
      required: true
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_self", "_blank", "_parent", "_top"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    }
  };

  function ownKeys$1A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1A(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var CLASSNAME_PREFIX = "".concat(COMPONENT_NAME$1, "__item");
  var _AnchorItem = Vue__default["default"].extend({
    name: "TAnchorItem",
    props: _objectSpread$1A(_objectSpread$1A({}, props$T), {}, {
      href: {
        type: String,
        required: true,
        validator: function validator(v) {
          return ANCHOR_SHARP_REGEXP.test(v);
        }
      }
    }),
    inject: {
      tAnchor: {
        "default": void 0
      }
    },
    watch: {
      href: {
        immediate: true,
        handler: function handler() {
          this.unregister();
          this.register();
        }
      }
    },
    destroyed: function destroyed() {
      this.unregister();
    },
    methods: {
      register: function register() {
        this.tAnchor.registerLink(this.href);
      },
      unregister: function unregister() {
        var href = this.href;
        if (!href) return;
        this.tAnchor.unregisterLink(href);
      },
      handleClick: function handleClick(e) {
        var href = this.href,
            tAnchor = this.tAnchor,
            title = this.title;
        tAnchor.handleScrollTo(href);
        tAnchor.handleLinkClick({
          href: href,
          title: typeof title === "string" ? title : void 0,
          e: e
        });
      },
      renderTitle: function renderTitle() {
        var title = this.title,
            $scopedSlots = this.$scopedSlots;
        var titleSlot = $scopedSlots.title;
        var titleVal;

        if (typeof title === "string") {
          titleVal = title;
        } else if (typeof title === "function") {
          titleVal = title(this.$createElement);
        } else if (titleSlot) {
          titleVal = titleSlot(null);
        }

        return titleVal;
      }
    },
    render: function render() {
      var _wrapperClass;

      var h = arguments[0];
      var href = this.href,
          target = this.target,
          $scopedSlots = this.$scopedSlots,
          tAnchor = this.tAnchor;
      var children = $scopedSlots["default"],
          titleSlot = $scopedSlots.title;
      var title = this.renderTitle();
      var titleAttr = typeof title === "string" ? title : null;
      var isActive = tAnchor.active === href;
      var wrapperClass = (_wrapperClass = {}, _defineProperty$2(_wrapperClass, CLASSNAME_PREFIX, true), _defineProperty$2(_wrapperClass, ClASSNAMES.STATUS.active, isActive), _wrapperClass);

      var titleClass = _defineProperty$2({}, "".concat(CLASSNAME_PREFIX, "-link"), true);

      return h("div", {
        "class": wrapperClass
      }, [h("a", {
        "attrs": {
          "href": href,
          "title": titleAttr,
          "target": target
        },
        "class": titleClass,
        "on": {
          "click": this.handleClick
        }
      }, [titleSlot ? titleSlot(null) : title]), children && children(null)]);
    }
  });

  /*!
   * clipboard.js v2.0.10
   * https://clipboardjs.com/
   *
   * Licensed MIT © Zeno Rocha
   */
  var clipboard = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      return (
        /******/
        function () {
          // webpackBootstrap

          /******/
          var __webpack_modules__ = {
            /***/
            686:
            /***/
            function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

              __webpack_require__.d(__webpack_exports__, {
                "default": function _default() {
                  return (
                    /* binding */
                    clipboard
                  );
                }
              }); // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js


              var tiny_emitter = __webpack_require__(279);

              var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter); // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js


              var listen = __webpack_require__(370);

              var listen_default = /*#__PURE__*/__webpack_require__.n(listen); // EXTERNAL MODULE: ./node_modules/select/src/select.js


              var src_select = __webpack_require__(817);

              var select_default = /*#__PURE__*/__webpack_require__.n(src_select);

              /**
               * Executes a given operation type.
               * @param {String} type
               * @return {Boolean}
               */

              function command(type) {
                try {
                  return document.execCommand(type);
                } catch (err) {
                  return false;
                }
              }

              /**
               * Cut action wrapper.
               * @param {String|HTMLElement} target
               * @return {String}
               */

              var ClipboardActionCut = function ClipboardActionCut(target) {
                var selectedText = select_default()(target);
                command('cut');
                return selectedText;
              };
              /* harmony default export */


              var actions_cut = ClipboardActionCut;

              /**
               * Creates a fake textarea element with a value.
               * @param {String} value
               * @return {HTMLElement}
               */

              function createFakeElement(value) {
                var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
                var fakeElement = document.createElement('textarea'); // Prevent zooming on iOS

                fakeElement.style.fontSize = '12pt'; // Reset box model

                fakeElement.style.border = '0';
                fakeElement.style.padding = '0';
                fakeElement.style.margin = '0'; // Move element out of screen horizontally

                fakeElement.style.position = 'absolute';
                fakeElement.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                fakeElement.style.top = "".concat(yPosition, "px");
                fakeElement.setAttribute('readonly', '');
                fakeElement.value = value;
                return fakeElement;
              }

              /**
               * Copy action wrapper.
               * @param {String|HTMLElement} target
               * @param {Object} options
               * @return {String}
               */

              var ClipboardActionCopy = function ClipboardActionCopy(target) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                  container: document.body
                };
                var selectedText = '';

                if (typeof target === 'string') {
                  var fakeElement = createFakeElement(target);
                  options.container.appendChild(fakeElement);
                  selectedText = select_default()(fakeElement);
                  command('copy');
                  fakeElement.remove();
                } else {
                  selectedText = select_default()(target);
                  command('copy');
                }

                return selectedText;
              };
              /* harmony default export */


              var actions_copy = ClipboardActionCopy;

              function _typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return _typeof(obj);
              }
              /**
               * Inner function which performs selection from either `text` or `target`
               * properties and then executes copy or cut operations.
               * @param {Object} options
               */


              var ClipboardActionDefault = function ClipboardActionDefault() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Defines base properties passed from constructor.

                var _options$action = options.action,
                    action = _options$action === void 0 ? 'copy' : _options$action,
                    container = options.container,
                    target = options.target,
                    text = options.text; // Sets the `action` to be performed which can be either 'copy' or 'cut'.

                if (action !== 'copy' && action !== 'cut') {
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                } // Sets the `target` property using an element that will be have its content copied.


                if (target !== undefined) {
                  if (target && _typeof(target) === 'object' && target.nodeType === 1) {
                    if (action === 'copy' && target.hasAttribute('disabled')) {
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }

                    if (action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                      throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                    }
                  } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                  }
                } // Define selection strategy based on `text` property.


                if (text) {
                  return actions_copy(text, {
                    container: container
                  });
                } // Defines which selection strategy based on `target` property.


                if (target) {
                  return action === 'cut' ? actions_cut(target) : actions_copy(target, {
                    container: container
                  });
                }
              };
              /* harmony default export */


              var actions_default = ClipboardActionDefault;

              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  clipboard_typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  clipboard_typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return clipboard_typeof(obj);
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }

                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                  }
                });
                if (superClass) _setPrototypeOf(subClass, superClass);
              }

              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                  o.__proto__ = p;
                  return o;
                };

                return _setPrototypeOf(o, p);
              }

              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();

                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived),
                      result;

                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;

                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }

                  return _possibleConstructorReturn(this, result);
                };
              }

              function _possibleConstructorReturn(self, call) {
                if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }

                return _assertThisInitialized(self);
              }

              function _assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return self;
              }

              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;

                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
                  return true;
                } catch (e) {
                  return false;
                }
              }

              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
              }
              /**
               * Helper function to retrieve attribute value.
               * @param {String} suffix
               * @param {Element} element
               */


              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);

                if (!element.hasAttribute(attribute)) {
                  return;
                }

                return element.getAttribute(attribute);
              }
              /**
               * Base class which takes one or more elements, adds event listeners to them,
               * and instantiates a new `ClipboardAction` on each click.
               */


              var Clipboard = /*#__PURE__*/function (_Emitter) {
                _inherits(Clipboard, _Emitter);

                var _super = _createSuper(Clipboard);
                /**
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 * @param {Object} options
                 */


                function Clipboard(trigger, options) {
                  var _this;

                  _classCallCheck(this, Clipboard);

                  _this = _super.call(this);

                  _this.resolveOptions(options);

                  _this.listenClick(trigger);

                  return _this;
                }
                /**
                 * Defines if attributes would be resolved using internal setter functions
                 * or custom functions that were passed in the constructor.
                 * @param {Object} options
                 */


                _createClass(Clipboard, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                    this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                    this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                    this.container = clipboard_typeof(options.container) === 'object' ? options.container : document.body;
                  }
                  /**
                   * Adds a click event listener to the passed trigger.
                   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                   */

                }, {
                  key: "listenClick",
                  value: function listenClick(trigger) {
                    var _this2 = this;

                    this.listener = listen_default()(trigger, 'click', function (e) {
                      return _this2.onClick(e);
                    });
                  }
                  /**
                   * Defines a new `ClipboardAction` on each click event.
                   * @param {Event} e
                   */

                }, {
                  key: "onClick",
                  value: function onClick(e) {
                    var trigger = e.delegateTarget || e.currentTarget;
                    var action = this.action(trigger) || 'copy';
                    var text = actions_default({
                      action: action,
                      container: this.container,
                      target: this.target(trigger),
                      text: this.text(trigger)
                    }); // Fires an event based on the copy operation result.

                    this.emit(text ? 'success' : 'error', {
                      action: action,
                      text: text,
                      trigger: trigger,
                      clearSelection: function clearSelection() {
                        if (trigger) {
                          trigger.focus();
                        }

                        document.activeElement.blur();
                        window.getSelection().removeAllRanges();
                      }
                    });
                  }
                  /**
                   * Default `action` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultAction",
                  value: function defaultAction(trigger) {
                    return getAttributeValue('action', trigger);
                  }
                  /**
                   * Default `target` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultTarget",
                  value: function defaultTarget(trigger) {
                    var selector = getAttributeValue('target', trigger);

                    if (selector) {
                      return document.querySelector(selector);
                    }
                  }
                  /**
                   * Allow fire programmatically a copy action
                   * @param {String|HTMLElement} target
                   * @param {Object} options
                   * @returns Text copied.
                   */

                }, {
                  key: "defaultText",

                  /**
                   * Default `text` lookup function.
                   * @param {Element} trigger
                   */
                  value: function defaultText(trigger) {
                    return getAttributeValue('text', trigger);
                  }
                  /**
                   * Destroy lifecycle.
                   */

                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function copy(target) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                      container: document.body
                    };
                    return actions_copy(target, options);
                  }
                  /**
                   * Allow fire programmatically a cut action
                   * @param {String|HTMLElement} target
                   * @returns Text cutted.
                   */

                }, {
                  key: "cut",
                  value: function cut(target) {
                    return actions_cut(target);
                  }
                  /**
                   * Returns the support of the given action, or all actions if no action is
                   * given.
                   * @param {String} [action]
                   */

                }, {
                  key: "isSupported",
                  value: function isSupported() {
                    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
                    var actions = typeof action === 'string' ? [action] : action;
                    var support = !!document.queryCommandSupported;
                    actions.forEach(function (action) {
                      support = support && !!document.queryCommandSupported(action);
                    });
                    return support;
                  }
                }]);

                return Clipboard;
              }(tiny_emitter_default());
              /* harmony default export */


              var clipboard = Clipboard;
              /***/
            },

            /***/
            828:
            /***/
            function _(module) {
              var DOCUMENT_NODE_TYPE = 9;
              /**
               * A polyfill for Element.matches()
               */

              if (typeof Element !== 'undefined' && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
              }
              /**
               * Finds the closest parent that matches a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @return {Function}
               */


              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (typeof element.matches === 'function' && element.matches(selector)) {
                    return element;
                  }

                  element = element.parentNode;
                }
              }

              module.exports = closest;
              /***/
            },

            /***/
            438:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var closest = __webpack_require__(828);
              /**
               * Delegates event to a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function _delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                element.addEventListener(type, listenerFn, useCapture);
                return {
                  destroy: function destroy() {
                    element.removeEventListener(type, listenerFn, useCapture);
                  }
                };
              }
              /**
               * Delegates event to a selector.
               *
               * @param {Element|String|Array} [elements]
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function delegate(elements, selector, type, callback, useCapture) {
                // Handle the regular Element usage
                if (typeof elements.addEventListener === 'function') {
                  return _delegate.apply(null, arguments);
                } // Handle Element-less usage, it defaults to global delegation


                if (typeof type === 'function') {
                  // Use `document` as the first parameter, then apply arguments
                  // This is a short way to .unshift `arguments` without running into deoptimizations
                  return _delegate.bind(null, document).apply(null, arguments);
                } // Handle Selector-based usage


                if (typeof elements === 'string') {
                  elements = document.querySelectorAll(elements);
                } // Handle Array-like based usage


                return Array.prototype.map.call(elements, function (element) {
                  return _delegate(element, selector, type, callback, useCapture);
                });
              }
              /**
               * Finds closest match and invokes callback.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Function}
               */


              function listener(element, selector, type, callback) {
                return function (e) {
                  e.delegateTarget = closest(e.target, selector);

                  if (e.delegateTarget) {
                    callback.call(element, e);
                  }
                };
              }

              module.exports = delegate;
              /***/
            },

            /***/
            879:
            /***/
            function _(__unused_webpack_module, exports) {
              /**
               * Check if argument is a HTML element.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.node = function (value) {
                return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
              };
              /**
               * Check if argument is a list of HTML elements.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.nodeList = function (value) {
                var type = Object.prototype.toString.call(value);
                return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));
              };
              /**
               * Check if argument is a string.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.string = function (value) {
                return typeof value === 'string' || value instanceof String;
              };
              /**
               * Check if argument is a function.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.fn = function (value) {
                var type = Object.prototype.toString.call(value);
                return type === '[object Function]';
              };
              /***/

            },

            /***/
            370:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var is = __webpack_require__(879);

              var delegate = __webpack_require__(438);
              /**
               * Validates all params and calls the right
               * listener function based on its target type.
               *
               * @param {String|HTMLElement|HTMLCollection|NodeList} target
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listen(target, type, callback) {
                if (!target && !type && !callback) {
                  throw new Error('Missing required arguments');
                }

                if (!is.string(type)) {
                  throw new TypeError('Second argument must be a String');
                }

                if (!is.fn(callback)) {
                  throw new TypeError('Third argument must be a Function');
                }

                if (is.node(target)) {
                  return listenNode(target, type, callback);
                } else if (is.nodeList(target)) {
                  return listenNodeList(target, type, callback);
                } else if (is.string(target)) {
                  return listenSelector(target, type, callback);
                } else {
                  throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
                }
              }
              /**
               * Adds an event listener to a HTML element
               * and returns a remove listener function.
               *
               * @param {HTMLElement} node
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);
                return {
                  destroy: function destroy() {
                    node.removeEventListener(type, callback);
                  }
                };
              }
              /**
               * Add an event listener to a list of HTML elements
               * and returns a remove listener function.
               *
               * @param {NodeList|HTMLCollection} nodeList
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function (node) {
                  node.addEventListener(type, callback);
                });
                return {
                  destroy: function destroy() {
                    Array.prototype.forEach.call(nodeList, function (node) {
                      node.removeEventListener(type, callback);
                    });
                  }
                };
              }
              /**
               * Add an event listener to a selector
               * and returns a remove listener function.
               *
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }

              module.exports = listen;
              /***/
            },

            /***/
            817:
            /***/
            function _(module) {
              function select(element) {
                var selectedText;

                if (element.nodeName === 'SELECT') {
                  element.focus();
                  selectedText = element.value;
                } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                  var isReadOnly = element.hasAttribute('readonly');

                  if (!isReadOnly) {
                    element.setAttribute('readonly', '');
                  }

                  element.select();
                  element.setSelectionRange(0, element.value.length);

                  if (!isReadOnly) {
                    element.removeAttribute('readonly');
                  }

                  selectedText = element.value;
                } else {
                  if (element.hasAttribute('contenteditable')) {
                    element.focus();
                  }

                  var selection = window.getSelection();
                  var range = document.createRange();
                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);
                  selectedText = selection.toString();
                }

                return selectedText;
              }

              module.exports = select;
              /***/
            },

            /***/
            279:
            /***/
            function _(module) {
              function E() {// Keep this empty so it's easier to inherit from
                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
              }

              E.prototype = {
                on: function on(name, callback, ctx) {
                  var e = this.e || (this.e = {});
                  (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx: ctx
                  });
                  return this;
                },
                once: function once(name, callback, ctx) {
                  var self = this;

                  function listener() {
                    self.off(name, listener);
                    callback.apply(ctx, arguments);
                  }
                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },
                emit: function emit(name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i = 0;
                  var len = evtArr.length;

                  for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                  }

                  return this;
                },
                off: function off(name, callback) {
                  var e = this.e || (this.e = {});
                  var evts = e[name];
                  var liveEvents = [];

                  if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                      if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
                    }
                  } // Remove event from queue to prevent memory leak
                  // Suggested by https://github.com/lazd
                  // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910


                  liveEvents.length ? e[name] = liveEvents : delete e[name];
                  return this;
                }
              };
              module.exports = E;
              module.exports.TinyEmitter = E;
              /***/
            }
            /******/

          };
          /************************************************************************/

          /******/
          // The module cache

          /******/

          var __webpack_module_cache__ = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/
            // Check if module is in cache

            /******/
            if (__webpack_module_cache__[moduleId]) {
              /******/
              return __webpack_module_cache__[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed

              /******/
              // no module.loaded needed

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
            /******/

            /******/
            // Return the exports of the module

            /******/


            return module.exports;
            /******/
          }
          /******/

          /************************************************************************/

          /******/

          /* webpack/runtime/compat get default export */

          /******/


          !function () {
            /******/
            // getDefaultExport function for compatibility with non-harmony modules

            /******/
            __webpack_require__.n = function (module) {
              /******/
              var getter = module && module.__esModule ?
              /******/
              function () {
                return module['default'];
              } :
              /******/
              function () {
                return module;
              };
              /******/

              __webpack_require__.d(getter, {
                a: getter
              });
              /******/


              return getter;
              /******/
            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/define property getters */

          /******/

          !function () {
            /******/
            // define getter functions for harmony exports

            /******/
            __webpack_require__.d = function (exports, definition) {
              /******/
              for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                  /******/
                  Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key]
                  });
                  /******/
                }
                /******/

              }
              /******/

            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/hasOwnProperty shorthand */

          /******/

          !function () {
            /******/
            __webpack_require__.o = function (obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
            /******/

          }();
          /******/

          /************************************************************************/

          /******/
          // module exports must be returned from runtime so entry inlining is disabled

          /******/
          // startup

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(686);
          /******/
        }()["default"]
      );
    });
  });
  var clipboard$1 = /*@__PURE__*/getDefaultExportFromCjs(clipboard);

  function copyText(_text) {
    var div = document.createElement("div");
    var clip = new clipboard$1(div, {
      text: function text() {
        return _text;
      }
    });
    div.click();
    clip.destroy();
    div.remove();
  }

  var THEME_LIST = ["info", "success", "warning", "error", "question", "loading"];
  var DISTANCE$1 = "32px";
  var PLACEMENT_OFFSET$1 = {
    top: {
      top: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "top-left": {
      left: DISTANCE$1,
      top: DISTANCE$1
    },
    "top-right": {
      right: DISTANCE$1,
      top: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-right": {
      right: DISTANCE$1,
      bottom: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-left": {
      left: DISTANCE$1,
      bottom: DISTANCE$1
    }
  };
  var PLACEMENT_LIST = Object.keys(PLACEMENT_OFFSET$1);

  var props$S = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["info", "success", "warning", "error", "question", "loading"].includes(val);
      }
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  var ANIMATION_OPTION = {
    duration: 200,
    easing: "linear"
  };

  function fadeIn(dom, placement) {
    if (!dom) return;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeInKeyframes = getFadeInKeyframes(placement, offsetWidth, offsetHeight);
    if (!fadeInKeyframes) return;
    var styleAfterFadeIn = fadeInKeyframes[fadeInKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeIn);
    dom.animate && dom.animate(fadeInKeyframes, ANIMATION_OPTION);
  }

  function fadeOut(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeOutKeyframes = getFadeOutKeyframes(placement, offsetHeight);
    if (!fadeOutKeyframes) return onFinish();
    var styleAfterFadeOut = fadeOutKeyframes[fadeOutKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeOut);
    var animation = dom.animate && dom.animate(fadeOutKeyframes, ANIMATION_OPTION);

    if (animation) {
      animation.onfinish = function () {
        dom.style.display = "none";
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  }

  function setDomStyleAfterAnimation(dom, styleAfterAnimation) {
    var keys = Object.keys(styleAfterAnimation);

    for (var i = 0; i < keys.length; i += 1) {
      var key = keys[i];
      dom.style[key] = styleAfterAnimation[key];
    }
  }

  function getFadeInKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;

    if (["top-left", "left", "bottom-left"].includes(placement)) {
      return [{
        opacity: 0,
        marginLeft: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginLeft: "0"
      }];
    }

    if (["top-right", "right", "bottom-right"].includes(placement)) {
      return [{
        opacity: 0,
        marginRight: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginRight: "0"
      }];
    }

    if (["top", "center"].includes(placement)) {
      return [{
        opacity: 0,
        marginTop: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        marginTop: "0"
      }];
    }

    if (["bottom"].includes(placement)) {
      return [{
        opacity: 0,
        transform: "translate3d(0, ".concat(offsetHeight, "px, 0)")
      }, {
        opacity: 1,
        transform: "translate3d(0, 0, 0)"
      }];
    }
  }

  function getFadeOutKeyframes(placement, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;

    if (["bottom-left", "bottom", "bottom-right"].includes(placement)) {
      var marginOffset2 = "".concat(offsetHeight, "px");
      return [{
        opacity: 1,
        marginTop: "0px"
      }, {
        opacity: 0,
        marginTop: marginOffset2
      }];
    }

    var marginOffset = "-".concat(offsetHeight, "px");
    return [{
      opacity: 1,
      marginTop: "0px"
    }, {
      opacity: 0,
      marginTop: marginOffset
    }];
  }

  function ownKeys$1z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1z(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$U = "".concat(prefix, "-message");
  var _Message = Vue__default["default"].extend({
    name: "TMessage",
    components: {
      InfoCircleFilledIcon: InfoCircleFilled,
      CheckCircleFilledIcon: CheckCircleFilled,
      ErrorCircleFilledIcon: ErrorCircleFilled,
      HelpCircleFilledIcon: HelpCircleFilled,
      CloseIcon: Close,
      Loading: Loading
    },
    props: _objectSpread$1z(_objectSpread$1z({}, props$S), {}, {
      placement: String
    }),
    data: function data() {
      return {
        timer: null
      };
    },
    computed: {
      classes: function classes() {
        var _this = this;

        var status = {};
        THEME_LIST.forEach(function (t) {
          status["".concat(prefix, "-is-").concat(t)] = _this.theme === t;
        });
        return [name$U, status, _defineProperty$2({}, "".concat(prefix, "-is-closable"), this.closeBtn || this.$scopedSlots.closeBtn)];
      }
    },
    created: function created() {
      this.duration && this.setTimer();
    },
    mounted: function mounted() {
      var msgDom = this.$refs.msg;
      fadeIn(msgDom, this.$props.placement);
    },
    methods: {
      setTimer: function setTimer() {
        var _this2 = this;

        if (!this.duration) {
          return;
        }

        this.timer = Number(setTimeout(function () {
          _this2.clearTimer();

          var msgDom = _this2.$refs.msg;
          fadeOut(msgDom, _this2.$props.placement, function () {
            _this2.$emit("duration-end");
          });

          if (_this2.onDurationEnd) {
            _this2.onDurationEnd();
          }
        }, this.duration));
      },
      clearTimer: function clearTimer() {
        this.duration && clearTimeout(this.timer);
      },
      close: function close(e) {
        this.$emit("close-btn-click", {
          e: e
        });

        if (this.onCloseBtnClick) {
          this.onCloseBtnClick({
            e: e
          });
        }
      },
      renderClose: function renderClose() {
        var h = this.$createElement;
        var defaultClose = h("close-icon");
        return h("span", {
          "class": "".concat(name$U, "__close"),
          "on": {
            "click": this.close
          }
        }, [renderTNodeJSX(this, "closeBtn", defaultClose)]);
      },
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        if (this.icon === false) return;
        if (typeof this.icon === "function") return this.icon(this.$createElement);

        if (this.$scopedSlots.icon) {
          return this.$scopedSlots.icon(null);
        }

        var component = {
          info: InfoCircleFilled,
          success: CheckCircleFilled,
          warning: ErrorCircleFilled,
          error: ErrorCircleFilled,
          question: HelpCircleFilled,
          loading: Loading
        }[this.theme];
        return h(component);
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "ref": "msg",
        "class": this.classes,
        "on": {
          "mouseenter": this.clearTimer,
          "mouseleave": this.setTimer
        }
      }, [this.renderIcon(), renderContent(this, "default", "content"), this.renderClose()]);
    }
  });

  function ownKeys$1y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1y(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_Z_INDEX$1 = 6e3;

  var getUniqueId = function () {
    var id = 0;
    return function () {
      id += 1;
      return id;
    };
  }();

  var name$T = "".concat(prefix, "-message__list");
  var MessageList = Vue__default["default"].extend({
    name: name$T,
    components: {
      TMessage: _Message
    },
    props: {
      zIndex: Number,
      placement: String
    },
    data: function data() {
      return {
        list: []
      };
    },
    computed: {
      styles: function styles() {
        return _objectSpread$1y(_objectSpread$1y({}, PLACEMENT_OFFSET$1[this.placement]), {}, {
          zIndex: this.zIndex !== DEFAULT_Z_INDEX$1 ? this.zIndex : DEFAULT_Z_INDEX$1
        });
      }
    },
    methods: {
      add: function add(msg) {
        var mg = _objectSpread$1y(_objectSpread$1y({}, msg), {}, {
          key: getUniqueId(),
          placement: this.placement
        });

        this.list.push(mg);
        return this.list.length - 1;
      },
      remove: function remove(index) {
        this.list.splice(index, 1);
      },
      removeAll: function removeAll() {
        this.list = [];
      },
      getOffset: function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      },
      msgStyles: function msgStyles(item) {
        return item.offset && {
          position: "relative",
          left: this.getOffset(item.offset[0]),
          top: this.getOffset(item.offset[1])
        };
      },
      getListeners: function getListeners(index) {
        var _this = this;

        return {
          "close-btn-click": function closeBtnClick() {
            return _this.remove(index);
          },
          "duration-end": function durationEnd() {
            return _this.remove(index);
          }
        };
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      if (!this.list.length) return;
      return h("div", {
        "class": name$T,
        "style": this.styles
      }, [this.list.map(function (item, index) {
        return h("t-message", {
          "key": item.key,
          "style": _this2.msgStyles(item),
          "props": _objectSpread$1y({}, item),
          "on": _objectSpread$1y({}, _this2.getListeners(index))
        });
      })]);
    }
  });

  function ownKeys$1x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1x(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var instanceMap$1 = /* @__PURE__ */new Map();

  function handleParams(params) {
    var options = _objectSpread$1x({
      duration: 3e3,
      attach: "body",
      zIndex: DEFAULT_Z_INDEX$1,
      placement: "top"
    }, params);

    options.content = params.content;
    return options;
  }

  var MessageFunction = function MessageFunction(props) {
    var options = handleParams(props);
    var attach = options.attach,
        placement = options.placement;
    var attachDom = getAttach(attach);

    if (!instanceMap$1.get(attachDom)) {
      instanceMap$1.set(attachDom, {});
    }

    var p = instanceMap$1.get(attachDom)[placement];

    if (!p) {
      var instance = new MessageList({
        propsData: {
          zIndex: options.zIndex,
          placement: options.placement
        }
      }).$mount();
      instance.add(options);
      instanceMap$1.get(attachDom)[placement] = instance;
      attachDom.appendChild(instance.$el);
    } else {
      p.add(options);
    }

    return new Promise(function (resolve) {
      var ins = instanceMap$1.get(attachDom)[placement];
      ins.$nextTick(function () {
        var msg = ins.$children;
        resolve(msg[msg.length - 1]);
      });
    });
  };

  var showThemeMessage = function showThemeMessage(theme, params, duration) {
    var options = {
      theme: theme
    };

    if (typeof params === "string") {
      options.content = params;
    } else if (_typeof(params) === "object" && !(params instanceof Array)) {
      options = _objectSpread$1x(_objectSpread$1x({}, options), params);
    }

    (duration || duration === 0) && (options.duration = duration);
    return MessageFunction(options);
  };

  var extraApi$2 = {
    info: function info(params, duration) {
      return showThemeMessage("info", params, duration);
    },
    success: function success(params, duration) {
      return showThemeMessage("success", params, duration);
    },
    warning: function warning(params, duration) {
      return showThemeMessage("warning", params, duration);
    },
    error: function error(params, duration) {
      return showThemeMessage("error", params, duration);
    },
    question: function question(params, duration) {
      return showThemeMessage("question", params, duration);
    },
    loading: function loading(params, duration) {
      return showThemeMessage("loading", params, duration);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      if (instanceMap$1 instanceof Map) {
        instanceMap$1.forEach(function (attach) {
          Object.keys(attach).forEach(function (placement) {
            var instance = attach[placement];
            instance.list = [];
          });
        });
      }
    }
  };
  var MessagePlugin = showThemeMessage;
  Object.keys(extraApi$2).forEach(function (funcName) {
    MessagePlugin[funcName] = extraApi$2[funcName];
  });

  MessagePlugin.install = function () {
    Vue__default["default"].prototype.$message = MessagePlugin;
  };

  var props$R = {
    id: {
      type: String,
      "default": "",
      required: true
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min$1 = Math.min;
  var round = Math.round;

  function getBoundingClientRect(element, includeScale) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    var rect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (isHTMLElement(element) && includeScale) {
      var offsetHeight = element.offsetHeight;
      var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
      // Fallback to 1 in case both values are `0`

      if (offsetWidth > 0) {
        scaleX = round(rect.width) / offsetWidth || 1;
      }

      if (offsetHeight > 0) {
        scaleY = round(rect.height) / offsetHeight || 1;
      }
    }

    return {
      width: rect.width / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
    var isIE = navigator.userAgent.indexOf('Trident') !== -1;

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min, value, max$1) {
    return max(min, min$1(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    {
      var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
    // can be obscured underneath it.
    // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
    // if it isn't open, so if this isn't available, the popper will be detected
    // to overflow the bottom of the screen too early.

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
      // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
      // errors due to floating point numbers, so we need to check precision.
      // Safari returns a number <= 0, usually < -1 when pinch-zoomed
      // Feature detection fails in mobile emulation mode in Chrome.
      // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
      // 0.001
      // Fallback here: "Not Safari" userAgent

      if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element) {
    var rect = getBoundingClientRect(element);
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min$1(min, tetherMin) : min, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$2(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

            break;

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle$1(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$2(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }

    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }

    return accumulator;
  }

  var _arrayReduce = arrayReduce;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  var _basePropertyOf = basePropertyOf;

  /** Used to map Latin Unicode letters to basic Latin letters. */

  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };
  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

  var deburrLetter = _basePropertyOf(deburredLetters);
  var _deburrLetter = deburrLetter;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  /** Used to compose unicode character classes. */

  var rsComboMarksRange$1 = "\\u0300-\\u036f",
      reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
  /** Used to compose unicode capture groups. */

  var rsCombo$1 = '[' + rsComboRange$1 + ']';
  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */

  var reComboMark = RegExp(rsCombo$1, 'g');
  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */

  function deburr(string) {
    string = toString_1(string);
    return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
  }

  var deburr_1 = deburr;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  var _asciiWords = asciiWords;

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  var _hasUnicodeWord = hasUnicodeWord;

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
      rsComboMarksRange = "\\u0300-\\u036f",
      reComboHalfMarksRange = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange = "\\u20d0-\\u20ff",
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = "\\u2700-\\u27bf",
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = "\\u2000-\\u206f",
      rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = "\\ufe0e\\ufe0f",
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  /** Used to compose unicode capture groups. */

  var rsApos$1 = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = "\\ud83c[\\udffb-\\udfff]",
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = "\\u200d";
  /** Used to compose unicode regexes. */

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;
  /** Used to match complex or compound words. */

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  var _unicodeWords = unicodeWords;

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */

  function words(string, pattern, guard) {
    string = toString_1(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
    }

    return string.match(pattern) || [];
  }

  var words_1 = words;

  /** Used to compose unicode capture groups. */

  var rsApos = "['\u2019]";
  /** Used to match apostrophes. */

  var reApos = RegExp(rsApos, 'g');
  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */

  function createCompounder(callback) {
    return function (string) {
      return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
    };
  }

  var _createCompounder = createCompounder;

  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */

  var camelCase = _createCompounder(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize_1(word) : word);
  });
  var camelCase_1 = camelCase;

  var _excluded$1 = ["from", "to", "direction"];

  function ownKeys$1w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1w(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function omit(obj, fields) {
    var shallowCopy = _objectSpread$1w({}, obj);

    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }

    return shallowCopy;
  }
  function firstUpperCase$1(str) {
    return str.toLowerCase().replace(/( |^)[a-z]/g, function (_char) {
      return _char.toUpperCase();
    });
  }
  function getBackgroundColor(color) {
    if (typeof color === "string") {
      return color;
    }

    if (Array.isArray(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }

      return "linear-gradient( ".concat(color.join(","), " )");
    }

    var from = color.from,
        to = color.to,
        _color$direction = color.direction,
        direction = _color$direction === void 0 ? "to right" : _color$direction,
        rest = _objectWithoutProperties$1(color, _excluded$1);

    var keys = Object.keys(rest);

    if (keys.length) {
      keys = keys.sort(function (a, b) {
        return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }

    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  }
  function getPropsApiByEvent(eventName) {
    return camelCase_1("on-".concat(eventName));
  }
  function getIEVersion() {
    var _navigator = navigator,
        userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;

    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }

    if (isIE11) {
      return 11;
    }

    return Number.MAX_SAFE_INTEGER;
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = typeof maxCharacter === "number";

    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }

      return 0;
    }

    var len = 0;

    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;

      if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }

      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }

      len += currentStringLength;
    }

    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }

    return len;
  }
  function pxCompat(param) {
    return typeof param === "number" ? "".concat(param, "px") : param;
  }

  var popupProps = {
    attach: {
      type: [String, Function],
      "default": "body"
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    disabled: Boolean,
    hideEmptyPopup: Boolean,
    overlayClassName: {
      type: [String, Object, Array]
    },
    overlayStyle: {
      type: [Boolean, Object, Function]
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    showArrow: Boolean,
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: Boolean,
    defaultVisible: {
      type: Boolean,
      "default": void 0
    },
    zIndex: {
      type: Number
    },
    onScroll: Function,
    onVisibleChange: Function
  };

  function ownKeys$1v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1v(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function isContentRectChanged(rect1, rect2) {
    if (!rect1 || !rect2) return;

    if (["width", "height", "x", "y"].some(function (k) {
      return rect1[k] !== rect2[k];
    })) {
      return true;
    }

    return false;
  }

  var Ref = Vue__default["default"].extend({
    data: function data() {
      return {
        contentRect: null
      };
    },
    mounted: function mounted() {
      var _window;

      if ((_window = window) !== null && _window !== void 0 && _window.ResizeObserver && this.$el) {
        var el = this.$el;
        var vm = this;
        var ro = new ResizeObserver(function () {
          var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

          var _ref = entries[0] || {},
              contentRect = _ref.contentRect;

          if (isContentRectChanged(contentRect, vm.contentRect)) {
            vm.contentRect = contentRect;
            vm.$emit("resize", _objectSpread$1v({}, contentRect));
            return;
          }

          if (!vm.contentRect) {
            vm.contentRect = contentRect;
          }
        });
        ro.observe(el);
        this.$on("hook:destroyed", function () {
          ro.unobserve(el);
        });
      }
    },
    render: function render() {
      var _children$;

      var h = arguments[0];
      var children = this.$slots["default"] || [];

      if (children.length > 1 || !((_children$ = children[0]) !== null && _children$ !== void 0 && _children$.tag)) {
        return h("span", [children]);
      }

      return children[0];
    }
  });
  var Container = Vue__default["default"].extend({
    props: {
      parent: Object,
      visible: Boolean,
      attach: popupProps.attach
    },
    data: function data() {
      return {
        content: null
      };
    },
    mounted: function mounted() {
      var _this = this;

      if (this.visible) {
        this.mountContent();
      }

      this.$watch("visible", function (visible) {
        if (visible) {
          _this.mountContent();
        }
      });
    },
    destroyed: function destroyed() {
      this.unmountContent();
    },
    methods: {
      mountContent: function mountContent() {
        this.$createElement;
        if (this.content) return;
        var parent = this;
        var elm = document.createElement("div");
        elm.style.cssText = "position: absolute; top: 0px; left: 0px; width: 100%";
        elm.appendChild(document.createElement("div"));
        this.content = new this.$root.constructor({
          parent: parent,
          render: function render() {
            var h = arguments[0];
            return h("div", [parent.$slots.content]);
          },
          mounted: function mounted() {
            parent.$emit("mounted");
          },
          destroyed: function destroyed() {
            parent.content = null;
            removeDom(elm);
          }
        });
        getAttach(this.attach).appendChild(elm);
        this.content.$mount(elm.children[0]);
      },
      unmountContent: function unmountContent() {
        var _this$content;

        (_this$content = this.content) === null || _this$content === void 0 ? void 0 : _this$content.$destroy();
      },
      updateContent: function updateContent() {
        var _this$content2;

        (_this$content2 = this.content) === null || _this$content2 === void 0 ? void 0 : _this$content2.$forceUpdate();
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      return h(Ref, {
        "on": {
          "resize": function resize(ev) {
            return _this2.$emit("refResize", ev);
          }
        }
      }, [this.$slots["default"]]);
    }
  });

  function ownKeys$1u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1u(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$S = "".concat(prefix, "-popup");
  var showTimeout = 250;
  var hideTimeout = 150;
  var triggers = ["click", "hover", "focus", "context-menu"];

  function getPopperPlacement(placement) {
    return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
  }

  var Popup$1 = Vue__default["default"].extend({
    name: "TPopup",
    provide: function provide() {
      return {
        popup: this
      };
    },
    inject: {
      popup: {
        "default": void 0
      }
    },
    props: _objectSpread$1u(_objectSpread$1u({}, popupProps), {}, {
      expandAnimation: {
        type: Boolean
      }
    }),
    data: function data() {
      return {
        name: name$S,
        popper: null,
        timeout: null,
        hasDocumentEvent: false,
        visibleState: 0,
        mouseInRange: false,
        contentClicked: false,
        refClicked: false
      };
    },
    computed: {
      overlayClasses: function overlayClasses() {
        var _ref;

        var base = ["".concat(name$S, "__content"), (_ref = {}, _defineProperty$2(_ref, "".concat(name$S, "__content--text"), this.content === "string"), _defineProperty$2(_ref, "".concat(name$S, "__content--arrow"), this.showArrow), _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, this.disabled), _ref)];
        return base.concat(this.overlayClassName);
      },
      hasTrigger: function hasTrigger() {
        var _this = this;

        return triggers.reduce(function (map, trigger) {
          return _objectSpread$1u(_objectSpread$1u({}, map), {}, _defineProperty$2({}, trigger, _this.trigger.includes(trigger)));
        }, {});
      }
    },
    watch: {
      visible: function visible(val) {
        var _this2 = this;

        var reference = this.$el;
        var hasTrigger = this.hasTrigger;

        if (val) {
          this.preventClosing(true);

          if (!this.hasDocumentEvent) {
            on(document, "click", this.handleDocumentClick);
            this.hasDocumentEvent = true;
          }

          if (reference && hasTrigger.focus) {
            once(reference, "keydown", function (ev) {
              if (ev.code === "Escape") {
                _this2.handleClose({
                  trigger: "keydown-esc"
                });
              }
            });
          }
        } else {
          this.preventClosing(false);
          off(document, "click", this.handleDocumentClick);
          this.hasDocumentEvent = false;
          this.mouseInRange = false;
        }
      },
      overlayStyle: function overlayStyle() {
        if (this.popper) {
          this.popper.update();
          this.updateOverlayStyle();
        }
      },
      contentClicked: function contentClicked(clicked) {
        if (this.popup) {
          this.popup.contentClicked = clicked;
        }
      }
    },
    mounted: function mounted() {
      var _this3 = this;

      var reference = this.$el;
      var hasTrigger = this.hasTrigger;

      if (hasTrigger.hover) {
        on(reference, "mouseenter", function () {
          return _this3.handleOpen({
            trigger: "trigger-element-hover"
          });
        });
        on(reference, "mouseleave", function () {
          return _this3.handleClose({
            trigger: "trigger-element-hover"
          });
        });
        on(reference, "click", function () {
          _this3.refClicked = true;
        });
      } else if (hasTrigger.focus) {
        on(reference, "focusin", function () {
          return _this3.handleOpen({
            trigger: "trigger-element-focus"
          });
        });
        on(reference, "focusout", function () {
          return _this3.handleClose({
            trigger: "trigger-element-blur"
          });
        });
      } else if (hasTrigger.click) {
        on(reference, "click", function (e) {
          _this3.refClicked = true;
          _this3.visibleState = 0;

          _this3.handleToggle({
            e: e,
            trigger: "trigger-element-click"
          });

          if (getIEVersion() < 11) {
            _this3.handleDocumentClick();
          }
        });
      } else if (hasTrigger["context-menu"]) {
        on(reference, "contextmenu", function (e) {
          e.preventDefault();
          e.button === 2 && _this3.handleToggle({
            trigger: "context-menu"
          });
        });
      }
    },
    updated: function updated() {
      var _this$$refs$container;

      (_this$$refs$container = this.$refs.container) === null || _this$$refs$container === void 0 ? void 0 : _this$$refs$container.updateContent();
    },
    destroyed: function destroyed() {
      this.destroyPopper();
    },
    methods: {
      createPopper: function createPopper$1() {
        var _this$popper,
            _this4 = this;

        var reference = this.$el;
        var currentPlacement = this.placement;
        var popperElm = this.$refs.popper;
        if (!popperElm) return;
        (_this$popper = this.popper) === null || _this$popper === void 0 ? void 0 : _this$popper.destroy();
        this.popper = createPopper(reference, popperElm, {
          modifiers: getIEVersion() > 9 ? [] : [{
            name: "computeStyles",
            options: {
              gpuAcceleration: false
            }
          }],
          placement: getPopperPlacement(currentPlacement),
          onFirstUpdate: function onFirstUpdate() {
            _this4.$nextTick(_this4.updatePopper);
          }
        });
      },
      updatePopper: function updatePopper() {
        if (this.popper) {
          this.popper.update();
          return;
        }

        this.createPopper();
      },
      updateOverlayStyle: function updateOverlayStyle() {
        var overlayStyle = this.overlayStyle;
        var referenceElm = this.$el;
        if (!this.$refs) return;
        var refOverlayElm = this.$refs.overlay;

        if (typeof overlayStyle === "function" && referenceElm && refOverlayElm) {
          var userOverlayStyle = overlayStyle(referenceElm, refOverlayElm);
          this.setOverlayStyle(userOverlayStyle);
        } else if (_typeof(overlayStyle) === "object" && refOverlayElm) {
          this.setOverlayStyle(overlayStyle);
        }
      },
      setOverlayStyle: function setOverlayStyle(styles) {
        if (!this.$refs) return;
        var refOverlayElm = this.$refs.overlay;

        if (_typeof(styles) === "object" && refOverlayElm) {
          setStyle(refOverlayElm, styles);
        }
      },
      destroyPopper: function destroyPopper() {
        var _this$popper2;

        (_this$popper2 = this.popper) === null || _this$popper2 === void 0 ? void 0 : _this$popper2.destroy();
        this.popper = null;

        if (this.destroyOnClose) {
          var _this$$refs$container2;

          (_this$$refs$container2 = this.$refs.container) === null || _this$$refs$container2 === void 0 ? void 0 : _this$$refs$container2.unmountContent();
        }
      },
      handleToggle: function handleToggle(context) {
        this.emitPopVisible(!this.visible, context);
      },
      handleOpen: function handleOpen(context) {
        var _this5 = this;

        clearTimeout(this.timeout);
        this.timeout = setTimeout(function () {
          _this5.emitPopVisible(true, context);
        }, this.hasTrigger.click ? 0 : showTimeout);
      },
      handleClose: function handleClose(context) {
        var _this6 = this;

        clearTimeout(this.timeout);
        this.timeout = setTimeout(function () {
          _this6.emitPopVisible(false, context);
        }, this.hasTrigger.click ? 0 : hideTimeout);
      },
      handleDocumentClick: function handleDocumentClick() {
        var _this7 = this;

        if (this.contentClicked || this.refClicked) {
          this.refClicked = false;
          setTimeout(function () {
            _this7.contentClicked = false;
          });
          return;
        }

        this.visibleState = 0;
        this.emitPopVisible(false, {
          trigger: "document"
        });
      },
      emitPopVisible: function emitPopVisible(val, context) {
        if (this.disabled || val === this.visible) return;
        if (!val && this.visibleState > 1) return;
        if (val && this.mouseInRange) return;
        this.$emit("visible-change", val, context);

        if (typeof this.onVisibleChange === "function") {
          this.onVisibleChange(val, context);
        }
      },
      onMouseEnter: function onMouseEnter() {
        this.mouseInRange = true;
        this.handleOpen({});
      },
      onMouseLeave: function onMouseLeave(ev) {
        if (this.visibleState > 1) {
          var rect = this.$refs.popper.getBoundingClientRect();
          if (ev.x > rect.x && ev.x < rect.x + rect.width && ev.y > rect.y && ev.y < rect.y + rect.height) return;
        }

        this.mouseInRange = false;
        this.handleClose({});
        var parent = this.popup;

        if (parent !== null && parent !== void 0 && parent.mouseInRange) {
          parent.onMouseLeave(ev);
        }
      },
      onBeforeEnter: function onBeforeEnter() {
        if (this.visible) {
          this.updatePopper();
        }
      },
      onAfterEnter: function onAfterEnter() {
        if (this.visible) {
          this.updatePopper();
        }
      },
      preventClosing: function preventClosing(preventing) {
        var parent = this.popup;
        parent === null || parent === void 0 ? void 0 : parent.preventClosing(preventing);

        if (preventing) {
          this.visibleState += 1;
        } else if (this.visibleState) {
          this.visibleState -= 1;

          if (!this.visibleState) {
            this.emitPopVisible(false, {});

            if (parent !== null && parent !== void 0 && parent.hasTrigger.hover && !(parent !== null && parent !== void 0 && parent.mouseInRange)) {
              parent.emitPopVisible(false, {});
            }
          }
        }
      }
    },
    render: function render(h) {
      var _this8 = this;

      var visible = this.visible,
          destroyOnClose = this.destroyOnClose,
          hasTrigger = this.hasTrigger,
          onScroll = this.onScroll;
      var ref = renderContent(this, "default", "triggerElement");
      var content = renderTNodeJSX(this, "content");

      if (this.hideEmptyPopup && ["", void 0, null].includes(content)) {
        return ref;
      }

      var overlay = visible || !destroyOnClose ? h("div", {
        "class": name$S,
        ref: "popper",
        directives: destroyOnClose ? void 0 : [{
          name: "show",
          rawName: "v-show",
          value: visible,
          expression: "visible"
        }],
        on: _objectSpread$1u({
          mousedown: function mousedown() {
            _this8.contentClicked = true;
          },
          mouseup: function mouseup() {
            setTimeout(function () {
              _this8.contentClicked = false;
            });
          }
        }, hasTrigger.hover && {
          mouseenter: this.onMouseEnter,
          mouseleave: this.onMouseLeave
        })
      }, [h("div", {
        "class": this.overlayClasses,
        ref: "overlay",
        on: onScroll ? {
          scroll: function scroll(e) {
            onScroll({
              e: e
            });
          }
        } : void 0
      }, [content, this.showArrow && h("div", {
        "class": "".concat(name$S, "__arrow")
      })])]) : null;
      return h(Container, {
        "ref": "container",
        "on": {
          "mounted": function mounted() {
            if (visible) {
              _this8.updatePopper();

              _this8.updateOverlayStyle();
            }
          },
          "refResize": function refResize() {
            if (visible) {
              _this8.updatePopper();
            }
          }
        },
        "attrs": {
          "parent": this,
          "visible": visible,
          "attach": this.attach
        }
      }, [h("transition", {
        "slot": "content",
        "attrs": {
          "name": this.expandAnimation ? "".concat(name$S, "--animation-expand") : "".concat(name$S, "--animation"),
          "appear": true
        },
        "on": {
          "beforeEnter": this.onBeforeEnter,
          "afterEnter": this.onAfterEnter,
          "afterLeave": this.destroyPopper
        }
      }, [(visible || !destroyOnClose) && overlay]), ref]);
    }
  });

  var _excluded = ["name"];

  function ownKeys$1t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1t(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var defaultModel = {
    prop: "value",
    event: "input"
  };

  function toCamel(str) {
    return str.replace(/-([a-z])/ig, function (m, letter) {
      return letter.toUpperCase();
    });
  }

  function getPropOptionMap(props) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var propOptionMap = {};
    var model = options.model;

    function parseProp(propOption) {
      var propName = propOption.name,
          others = _objectWithoutProperties$1(propOption, _excluded);

      var camelName = propName.replace(/^[a-z]/, function (letter) {
        return letter.toUpperCase();
      });
      var defaultName = "default".concat(camelName);
      var dataName = "data".concat(camelName);
      var events = [];

      if (propOption.event) {
        events = events.concat(propOption.event);
      } else if (model.prop === propName) {
        events = events.concat(model.event);
      } else {
        events = events.concat("update:".concat(propName));
      }

      return _objectSpread$1t({
        events: events,
        defaultName: defaultName,
        dataName: dataName
      }, others);
    }

    props.forEach(function (prop) {
      var defaultOption = {
        alias: []
      };
      var propOption;

      if (typeof prop === "string") {
        propOption = _objectSpread$1t(_objectSpread$1t({}, defaultOption), {}, {
          name: prop
        });
      } else {
        propOption = _objectSpread$1t(_objectSpread$1t({}, defaultOption), prop);
      }

      propOptionMap[propOption.name] = parseProp(propOption);
    });
    return propOptionMap;
  }

  function mapProps (props) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    function mapProps(componentConstructor) {
      var component = componentConstructor.prototype ? componentConstructor.prototype.constructor.options : componentConstructor;
      var model = options.model || defaultModel;
      var propOptionMap = getPropOptionMap(props, {
        model: model
      });

      var defineProps = _objectSpread$1t({}, component.props);

      var defineWatches = {};
      var defineEvents = [];
      var defineMethods = {};
      var propsKeys = Object.keys(component.props);
      var camelPropsKeys = propsKeys.map(function (key) {
        return toCamel(key);
      });
      Object.keys(propOptionMap).forEach(function (propName) {
        var _propOptionMap$propNa = propOptionMap[propName],
            events = _propOptionMap$propNa.events,
            alias = _propOptionMap$propNa.alias,
            defaultName = _propOptionMap$propNa.defaultName,
            dataName = _propOptionMap$propNa.dataName;
        defineProps[propName] = component.props[propName];
        defineProps[defaultName] = component.props[defaultName];

        if (alias) {
          alias.forEach(function (prop) {
            defineProps[prop] = defineProps[propName];
          });
        }

        defineEvents = defineEvents.concat(events);
        defineWatches[defaultName] = {
          handler: function handler(v) {
            if (defaultName in this.$vnode.componentOptions.propsData && !(propName in this.$vnode.componentOptions.propsData)) {
              this.$data[dataName] = v;
            }
          },
          immediate: true
        };
        alias.forEach(function (aliasItem) {
          defineWatches[aliasItem] = {
            handler: function handler(v) {
              if (aliasItem in this.$vnode.componentOptions.propsData && !(propName in this.$vnode.componentOptions.propsData)) {
                this.$data[dataName] = v;
              }
            },
            immediate: true
          };
        });
        defineWatches[propName] = {
          handler: function handler(v) {
            if (propName in this.$vnode.componentOptions.propsData) {
              this.$data[dataName] = v;
            }
          },
          immediate: true
        };
      });

      if (component.methods) {
        Object.keys(component.methods).forEach(function (key) {
          defineMethods[key] = function () {
            if (this.$refs.component) {
              var _this$$refs$component;

              return (_this$$refs$component = this.$refs.component)[key].apply(_this$$refs$component, arguments);
            }
          };
        });
      }

      var name = component.name;
      return Vue__default["default"].extend({
        name: "".concat(name, "-mapprops"),
        inheritAttrs: false,
        model: {
          prop: model.prop,
          event: Array.isArray(model.event) ? model.event[0] : model.event
        },
        data: function data() {
          var data = {};
          Object.keys(propOptionMap).forEach(function (propName) {
            var dataName = propOptionMap[propName].dataName;
            data[dataName] = void 0;
          });
          return _objectSpread$1t({}, data);
        },
        props: _objectSpread$1t({}, defineProps),
        computed: {
          _listeners: function _listeners() {
            var _this = this;

            var others = {};
            Object.keys(this.$listeners).forEach(function (event) {
              if (defineEvents.indexOf(event) === -1) {
                others[event] = function () {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  _this.$emit.apply(_this, [event].concat(args));
                };
              }
            });
            return others;
          }
        },
        watch: defineWatches,
        render: function render(h) {
          var _this2 = this;

          var propMap = {};
          var handlerMap = {};
          Object.keys(propOptionMap).forEach(function (propName) {
            var _propOptionMap$propNa2 = propOptionMap[propName],
                dataName = _propOptionMap$propNa2.dataName,
                events = _propOptionMap$propNa2.events;

            if (propName in _this2.$vnode.componentOptions.propsData || typeof _this2[dataName] !== "undefined") {
              propMap[propName] = _this2[dataName];
            }

            handlerMap[events[0]] = function (v) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }

              return _this2.updateData.apply(_this2, [propName, v].concat(args));
            };
          });
          var attrs = {};
          Object.keys(this.$attrs).forEach(function (attrName) {
            var camelAttrKey = toCamel(attrName);

            if (camelPropsKeys.indexOf(camelAttrKey) === -1) {
              attrs[attrName] = _this2.$attrs[attrName];
            }
          });
          return h(component, {
            props: _objectSpread$1t(_objectSpread$1t({}, this.$props), propMap),
            attrs: _objectSpread$1t({}, attrs),
            on: _objectSpread$1t(_objectSpread$1t({}, this._listeners), handlerMap),
            scopedSlots: _objectSpread$1t({}, this.$scopedSlots),
            ref: "component"
          });
        },
        methods: _objectSpread$1t({
          updateData: function updateData(propName, v) {
            var _this3 = this;

            for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
              args[_key3 - 2] = arguments[_key3];
            }

            propOptionMap[propName].events.forEach(function (event) {
              _this3.$emit.apply(_this3, [event, v].concat(args));
            });

            if (!(propName in this.$vnode.componentOptions.propsData)) {
              this[propOptionMap[propName].dataName] = v;
              return true;
            }
          }
        }, defineMethods)
      });
    }

    return mapProps;
  }

  var Popup = withInstall(mapProps(["visible"], {
    model: {
      prop: "visible",
      event: "visible-change"
    }
  })(Popup$1));

  function ownKeys$1s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1s(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _AnchorTarget = Vue__default["default"].extend({
    name: "TAnchorTarget",
    components: {
      TPopup: Popup,
      FileCopyIcon: FileCopy
    },
    props: _objectSpread$1s({}, props$R),
    methods: {
      copyText: function copyText$1() {
        var a = document.createElement("a");
        a.href = "#".concat(this.id);

        copyText(a.href);

        MessagePlugin.success("\u94FE\u63A5\u590D\u5236\u6210\u529F", 1e3);
      }
    },
    render: function render() {
      var h = arguments[0];
      var Tag = this.tag,
          children = this.$scopedSlots["default"],
          id = this.id;
      var className = ["".concat(COMPONENT_NAME$1, "__target")];
      var iconClassName = "".concat(COMPONENT_NAME$1, "__copy");
      return h(Tag, {
        "attrs": {
          "id": id
        },
        "class": className
      }, [children && children(null), h("t-popup", {
        "attrs": {
          "content": "\u590D\u5236\u94FE\u63A5",
          "placement": "top",
          "showArrow": true
        },
        "class": iconClassName
      }, [h("file-copy-icon", {
        "nativeOn": {
          "click": this.copyText
        }
      })])]);
    }
  });

  var Anchor = withInstall(_Anchor);
  var AnchorItem = withInstall(_AnchorItem);
  var AnchorTarget = withInstall(_AnchorTarget);

  var props$Q = {
    maxItemWidth: {
      type: String,
      "default": void 0
    },
    options: {
      type: Array
    },
    separator: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        return ["light"].includes(val);
      }
    }
  };

  var props$P = {
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "primary", "success", "danger", "warning", "light"].includes(val);
      }
    }
  };

  function ownKeys$1r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1r(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Tooltip = Vue__default["default"].extend({
    name: "TTooltip",
    components: {
      Popup: Popup$1
    },
    props: _objectSpread$1r(_objectSpread$1r({}, popupProps), props$P),
    data: function data() {
      return {
        timer: null,
        tooltipVisible: false
      };
    },
    computed: {
      tooltipOverlayClassName: function tooltipOverlayClassName() {
        return ["".concat(prefix, "-tooltip"), _defineProperty$2({}, "".concat(prefix, "-tooltip--").concat(this.theme), this.theme), this.overlayClassName];
      }
    },
    watch: {
      visible: function visible(_visible) {
        if (this.timer && !_visible) {
          clearTimeout(this.timer);
          this.timer = null;
        }
      }
    },
    created: function created() {
      var _this = this;

      if (this.duration && this.visible) {
        this.timer = setTimeout(function () {
          _this.$emit("visible-change", false);

          clearTimeout(_this.timer);
          _this.timer = null;
        }, this.duration);
      }
    },
    methods: {
      onTipVisibleChange: function onTipVisibleChange(val, ctx) {
        if (this.timer && (ctx === null || ctx === void 0 ? void 0 : ctx.trigger) !== "document") return;
        this.$emit("visible-change", val);
      },
      getPopupProps: function getPopupProps() {
        var _this2 = this;

        var r = _objectSpread$1r(_objectSpread$1r({
          showArrow: true
        }, this.$props), {}, {
          content: function content() {
            return renderTNodeJSX(_this2, "content");
          },
          "default": function _default() {
            return renderContent(_this2, "default", "triggerElement");
          },
          overlayClassName: this.tooltipOverlayClassName
        });

        return r;
      },
      updatedTooltip: function updatedTooltip() {
        this.$refs.popup && this.$refs.popup.updatePopper();
      }
    },
    render: function render() {
      var h = arguments[0];
      return h(Popup$1, helper([{
        "ref": "popup",
        "attrs": {
          "visible": this.visible
        }
      }, {
        "props": this.getPopupProps()
      }, {}, {
        "on": {
          "visible-change": this.onTipVisibleChange
        }
      }]));
    }
  });

  var Tooltip = withInstall(mapProps(["visible"], {
    model: {
      prop: "visible",
      event: "visible-change"
    }
  })(_Tooltip));

  var props$O = {
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    maxWidth: {
      type: String,
      "default": void 0
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    }
  };

  function ownKeys$1q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1q(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$R = "".concat(prefix, "-breadcrumb__item");
  var separatorClass = "".concat(prefix, "-breadcrumb__separator");
  var disableClass = "".concat(prefix, "-is-disabled");
  var linkClass = "".concat(prefix, "-link");
  var maxLengthClass = "".concat(prefix, "-breadcrumb__inner");
  var textFlowClass = "".concat(prefix, "-breadcrumb--text-overflow");
  var gestureClass = "".concat(prefix, "-gestureClass");
  var localTBreadcrumbOrigin = {
    separator: "",
    theme: "light",
    $slots: {
      separator: ""
    },
    maxItemWidth: void 0
  };
  var _BreadcrumbItem = Vue__default["default"].extend({
    name: "TBreadcrumbItem",
    props: _objectSpread$1q({}, props$O),
    inject: ["tBreadcrumb"],
    data: function data() {
      return {
        localTBreadcrumb: localTBreadcrumbOrigin,
        themeClassName: "",
        $router: null,
        isCutOff: false
      };
    },
    components: {
      Tooltip: Tooltip
    },
    computed: {
      maxWithStyle: function maxWithStyle() {
        var localTBreadcrumb = this.localTBreadcrumb;
        var maxItemWidth = localTBreadcrumb.maxItemWidth;
        var maxWith = this.maxWidth || maxItemWidth || "120";
        return {
          "max-width": "".concat(maxWith, "px")
        };
      }
    },
    watch: {
      tBreadcrumb: {
        immediate: true,
        handler: function handler(v) {
          this.localTBreadcrumb = v;
        }
      }
    },
    created: function created() {
      var tBreadcrumb = this.localTBreadcrumb;
      this.themeClassName = tBreadcrumb.theme;
    },
    mounted: function mounted() {
      this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
    },
    beforeUpdate: function beforeUpdate() {
      this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
    },
    methods: {
      bindEvent: function bindEvent() {
        var to = this.to;
        var router = this.router || this.$router;

        if (to && router) {
          this.replace ? router.replace(to) : router.push(to);
        }
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var localTBreadcrumb = this.localTBreadcrumb,
          href = this.href,
          target = this.target,
          to = this.to,
          disabled = this.disabled;
      var separator = localTBreadcrumb.separator;
      var separatorSlot = localTBreadcrumb.$slots.separator;
      var separatorPropContent = typeof separator === "function" ? separator() : separator;
      var separatorContent = separatorPropContent || separatorSlot || h(ChevronRight);
      var itemClass = [name$R, this.themeClassName];
      var textClass = [textFlowClass];

      if (disabled) {
        textClass.push(disableClass);
      }

      if (this.$listeners.click) {
        textClass.push(gestureClass);
      }

      var clickEvent = to && !disabled ? {
        on: {
          click: this.bindEvent
        }
      } : {};
      var textContent = h("span", {
        "ref": "breadcrumbText",
        "class": maxLengthClass,
        "style": this.maxWithStyle
      }, [this.$slots["default"]]);
      var itemContent = h("span", helper([{
        "class": textClass,
        "on": _objectSpread$1q({}, this.$listeners)
      }, clickEvent]), [textContent]);

      if (href && !disabled) {
        textClass.push(linkClass);
        itemContent = h("a", {
          "class": textClass,
          "attrs": {
            "href": href,
            "target": target
          },
          "on": _objectSpread$1q({}, this.$listeners)
        }, [textContent]);
      }

      return h("div", {
        "class": itemClass
      }, [this.isCutOff ? h(Tooltip, {
        "attrs": {
          "content": function content() {
            return _this.$slots["default"];
          }
        }
      }, [itemContent]) : itemContent, h("span", {
        "class": separatorClass
      }, [separatorContent])]);
    }
  });

  function ownKeys$1p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1p(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$Q = "".concat(prefix, "-breadcrumb");
  var _Breadcrumb = Vue__default["default"].extend({
    name: "TBreadcrumb",
    props: _objectSpread$1p({}, props$Q),
    components: {
      BreadcrumbItem: _BreadcrumbItem
    },
    provide: function provide() {
      return {
        tBreadcrumb: this
      };
    },
    render: function render() {
      var h = arguments[0];
      var content = this.$slots["default"];

      if (this.options && this.options.length) {
        content = this.options.map(function (option, index) {
          return h(_BreadcrumbItem, {
            "key": index,
            "attrs": {
              "maxWidth": option.maxWidth,
              "disabled": option.disabled,
              "href": option.href,
              "target": option.target,
              "to": option.to,
              "router": option.router,
              "replace": option.replace
            }
          }, [option["default"] || option.content]);
        });
      }

      return h("div", {
        "class": name$Q
      }, [content]);
    }
  });

  var BreadcrumbItem = withInstall(_BreadcrumbItem);
  var Breadcrumb = withInstall(_Breadcrumb);

  var itemProps = {
    active: Boolean,
    content: {
      type: [String, Function],
      "default": ""
    },
    disabled: Boolean,
    divider: Boolean,
    value: {
      type: [String, Number, Object]
    },
    onClick: Function
  };

  function emitEvent(vm, eventName) {
    var emitEventName;
    var emitEventMethodName;

    if (typeof eventName === "string") {
      emitEventName = eventName;
      emitEventMethodName = getPropsApiByEvent(eventName);
    } else {
      emitEventName = eventName.event;
      emitEventMethodName = eventName.method;
    }

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (vm.$listeners["".concat(emitEventName)]) {
      vm.$emit.apply(vm, [emitEventName].concat(args));
    }

    if (typeof vm.$props[emitEventMethodName] === "function") {
      var _vm$$props;

      (_vm$$props = vm.$props)[emitEventMethodName].apply(_vm$$props, args);
    }
  }

  function ownKeys$1o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1o(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$P = "".concat(prefix, "-dropdown__item");
  var keepAnimationMixins$7 = getKeepAnimationMixins();
  var _DropdownItem = mixins(keepAnimationMixins$7).extend({
    name: "TDropdownItem",
    components: {
      ChevronRightIcon: ChevronRight,
      TDivider: Divider
    },
    directives: {
      ripple: Ripple
    },
    inject: {
      dropdown: {
        "default": void 0
      }
    },
    props: _objectSpread$1o(_objectSpread$1o({}, itemProps), {}, {
      path: {
        type: String,
        "default": ""
      },
      hasChildren: {
        type: Boolean,
        "default": false
      }
    }),
    data: function data() {
      return {
        focused: false
      };
    },
    methods: {
      renderSuffix: function renderSuffix() {
        var h = this.$createElement;
        return this.hasChildren ? h(ChevronRight, {
          "class": "".concat(name$P, "-icon")
        }) : null;
      },
      handleItemClick: function handleItemClick(e) {
        if (!this.hasChildren && !this.disabled) {
          var data = {
            value: this.value,
            path: this.path,
            content: this.content
          };
          emitEvent(this, "item-hover", this.path);
          emitEvent(this, "click", data, {
            e: e
          });
          this.dropdown.handleMenuClick(data, {
            e: e
          });
        }
      },
      handleMouseover: function handleMouseover() {
        emitEvent(this, "hover", this.path);
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var classes = [name$P, (_ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-dropdown--suffix"), this.hasChildren), _defineProperty$2(_ref, STATUS_CLASSNAMES.disabled, this.disabled), _defineProperty$2(_ref, STATUS_CLASSNAMES.active, this.active), _ref)];
      return h("div", [h("div", {
        "directives": [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }],
        "class": classes,
        "on": {
          "click": this.handleItemClick,
          "mouseover": this.handleMouseover
        }
      }, [h("div", {
        "class": "".concat(name$P, "-content")
      }, [h("span", {
        "class": "".concat(name$P, "-text")
      }, [renderContent(this, "content", "default")])]), this.renderSuffix()]), this.divider ? h(Divider) : null]);
    }
  });

  var name$O = "".concat(prefix, "-dropdown__menu");
  var _DropdownMenu = Vue__default["default"].extend({
    name: "TDropdownMenu",
    inject: {
      dropdown: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        path: ""
      };
    },
    methods: {
      isActive: function isActive(item, pathPrefix) {
        var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var itemPath = "".concat(pathPrefix, "/").concat(item.value);

        if (excludeSelf && this.path === itemPath) {
          return false;
        }

        return this.path.indexOf(itemPath) === 0;
      },
      handleHoverItem: function handleHoverItem(path) {
        this.path = path;
      },
      handleItemClick: function handleItemClick(data, context, idx) {
        var _this$dropdown$option, _this$dropdown$option2;

        (_this$dropdown$option = (_this$dropdown$option2 = this.dropdown.options[idx]).onClick) === null || _this$dropdown$option === void 0 ? void 0 : _this$dropdown$option.call(_this$dropdown$option2, data, context);
      },
      renderMenuColumn: function renderMenuColumn(children, showSubmenu, pathPrefix) {
        var _this = this;

        var h = this.$createElement;
        var menuClass = ["".concat(name$O, "-column"), "narrow-scrollbar", {
          submenu__visible: showSubmenu
        }];
        var _this$dropdown = this.dropdown,
            maxHeight = _this$dropdown.maxHeight,
            maxColumnWidth = _this$dropdown.maxColumnWidth,
            minColumnWidth = _this$dropdown.minColumnWidth;
        return h("div", {
          "class": menuClass,
          "style": {
            maxHeight: "".concat(maxHeight, "px"),
            maxWidth: pxCompat(maxColumnWidth),
            minWidth: pxCompat(minColumnWidth)
          }
        }, [children.map(function (item, idx) {
          return h(_DropdownItem, {
            "key": idx,
            "attrs": {
              "disabled": item.disabled,
              "active": _this.isActive(item, pathPrefix) || item.active,
              "value": item.value,
              "content": item.content,
              "divider": item.divider,
              "hasChildren": item.children && item.children.length > 0,
              "path": "".concat(pathPrefix, "/").concat(item.value)
            },
            "on": {
              "click": function click(data, context) {
                return _this.handleItemClick(data, context, idx);
              },
              "hover": _this.handleHoverItem
            }
          });
        })]);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      var columns = [];
      var menuItems = this.dropdown.options;
      var pathPrefix = "";

      if (this.$scopedSlots["default"]) {
        return h("div", {
          "class": name$O
        }, [h("div", {
          "class": ["".concat(name$O, "__column"), "narrow-scrollbar"],
          "style": {
            maxHeight: "".concat(this.dropdown.maxHeight, "px"),
            maxWidth: "".concat(this.dropdown.maxColumnWidth, "px"),
            minWidth: "".concat(this.dropdown.minColumnWidth, "px")
          }
        }, [renderTNodeJSX(this, "default")])]);
      }

      while (menuItems && menuItems.length) {
        var activeItem = menuItems.find(function (item) {
          return _this2.isActive(item, pathPrefix, false);
        });
        columns.push(this.renderMenuColumn(menuItems, !!activeItem, pathPrefix));

        if (activeItem) {
          pathPrefix = "".concat(pathPrefix, "/").concat(activeItem.value);
          menuItems = activeItem.children || [];
        } else {
          menuItems = [];
        }
      }

      return h("div", {
        "class": name$O
      }, [columns]);
    }
  });

  var props$N = {
    direction: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        return ["left", "right"].includes(val);
      }
    },
    disabled: Boolean,
    hideAfterItemClick: {
      type: Boolean,
      "default": true
    },
    maxColumnWidth: {
      type: [String, Number],
      "default": 100
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    minColumnWidth: {
      type: [String, Number],
      "default": 10
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placement: {
      type: String,
      "default": "bottom-left",
      validator: function validator(val) {
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    onClick: Function
  };

  function ownKeys$1n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1n(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$N = "".concat(prefix, "-dropdown");
  var _Dropdown = Vue__default["default"].extend({
    name: "TDropdown",
    props: _objectSpread$1n({}, props$N),
    provide: function provide() {
      return {
        dropdown: this
      };
    },
    methods: {
      handleMenuClick: function handleMenuClick(data, context) {
        if (this.hideAfterItemClick) {
          var popupElem = this.$refs.popupElem;
          popupElem.handleClose();
        }

        emitEvent(this, "click", data, context);
      }
    },
    render: function render() {
      var h = arguments[0];
      var trigger = this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : "";
      var contentSlot = this.$scopedSlots.dropdown ? this.$scopedSlots.dropdown(null) : "";
      var popupProps = {
        props: _objectSpread$1n(_objectSpread$1n(_objectSpread$1n({}, this.$attrs), this.popupProps), {}, {
          disabled: this.disabled,
          placement: this.placement,
          trigger: this.trigger,
          overlayClassName: this.popupProps && this.popupProps.overlayClassName ? [name$N, this.popupProps.overlayClassName] : name$N
        }),
        ref: "popup"
      };
      return h(Popup, helper([{}, popupProps, {
        "ref": "popupElem",
        "attrs": {
          "expandAnimation": true
        }
      }]), [h("template", {
        "slot": "content",
        "attrs": {
          "role": "dropdown"
        }
      }, [contentSlot || h(_DropdownMenu)]), trigger]);
    }
  });

  var Dropdown = withInstall(_Dropdown);
  var DropdownItem = withInstall(_DropdownItem);
  var DropdownMenu = withInstall(_DropdownMenu);

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }

      return t;
    };

    return _assign.apply(this, arguments);
  };

  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
        m = s && o[s],
        i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function next() {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
        r,
        ar = [],
        e;

    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
        ar.push(r.value);
      }
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }

    return ar;
  }

  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  /**
   * Displays a warning message (using console.error) with a stack trace if the
   * function is called inside of active component.
   *
   * @param message warning message to be displayed
   */


  function warn$1(message) {
    var _a;

    warn(message, (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.proxy);
  }

  var activeEffectScope;
  var effectScopeStack = [];

  var EffectScopeImpl =
  /** @class */
  function () {
    function EffectScopeImpl(vm) {
      this.active = true;
      this.effects = [];
      this.cleanups = [];
      this.vm = vm;
    }

    EffectScopeImpl.prototype.run = function (fn) {
      if (this.active) {
        try {
          this.on();
          return fn();
        } finally {
          this.off();
        }
      } else {
        warn$1("cannot run an inactive effect scope.");
      }

      return;
    };

    EffectScopeImpl.prototype.on = function () {
      if (this.active) {
        effectScopeStack.push(this);
        activeEffectScope = this;
      }
    };

    EffectScopeImpl.prototype.off = function () {
      if (this.active) {
        effectScopeStack.pop();
        activeEffectScope = effectScopeStack[effectScopeStack.length - 1];
      }
    };

    EffectScopeImpl.prototype.stop = function () {
      if (this.active) {
        this.vm.$destroy();
        this.effects.forEach(function (e) {
          return e.stop();
        });
        this.cleanups.forEach(function (cleanup) {
          return cleanup();
        });
        this.active = false;
      }
    };

    return EffectScopeImpl;
  }();

  /** @class */
  (function (_super) {
    __extends(EffectScope, _super);

    function EffectScope(detached) {
      if (detached === void 0) {
        detached = false;
      }

      var _this = this;

      var vm = undefined;
      withCurrentInstanceTrackingDisabled(function () {
        vm = defineComponentInstance(getVueConstructor());
      });
      _this = _super.call(this, vm) || this;

      if (!detached) {
        recordEffectScope(_this);
      }

      return _this;
    }

    return EffectScope;
  })(EffectScopeImpl);

  function recordEffectScope(effect, scope) {
    var _a;

    scope = scope || activeEffectScope;

    if (scope && scope.active) {
      scope.effects.push(effect);
      return;
    } // destory on parent component unmounted


    var vm = (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.proxy;
    vm && vm.$on('hook:destroyed', function () {
      return effect.stop();
    });
  }

  function getCurrentScope() {
    return activeEffectScope;
  }
  /**
   * @internal
   **/


  function getCurrentScopeVM() {
    var _a, _b;

    return ((_a = getCurrentScope()) === null || _a === void 0 ? void 0 : _a.vm) || ((_b = getCurrentInstance()) === null || _b === void 0 ? void 0 : _b.proxy);
  }
  /**
   * @internal
   **/


  function bindCurrentScopeToVM(vm) {
    if (!vm.scope) {
      var scope_1 = new EffectScopeImpl(vm.proxy);
      vm.scope = scope_1;
      vm.proxy.$on('hook:destroyed', function () {
        return scope_1.stop();
      });
    }

    return vm.scope;
  }

  var vueDependency = undefined;

  try {
    var requiredVue = require('vue');

    if (requiredVue && isVue(requiredVue)) {
      vueDependency = requiredVue;
    } else if (requiredVue && 'default' in requiredVue && isVue(requiredVue["default"])) {
      vueDependency = requiredVue["default"];
    }
  } catch (_a) {// not available
  }

  var vueConstructor = null;
  var currentInstance = null;
  var currentInstanceTracking = true;
  var PluginInstalledFlag = '__composition_api_installed__';

  function isVue(obj) {
    return obj && isFunction(obj) && obj.name === 'Vue';
  }

  function isVueRegistered(Vue) {
    // resolve issue: https://github.com/vuejs/composition-api/issues/876#issue-1087619365
    return vueConstructor && hasOwn(Vue, PluginInstalledFlag);
  }

  function getVueConstructor() {
    {
      assert(vueConstructor, "must call Vue.use(VueCompositionAPI) before using any function.");
    }

    return vueConstructor;
  } // returns registered vue or `vue` dependency


  function getRegisteredVueOrDefault() {
    var constructor = vueConstructor || vueDependency;

    {
      assert(constructor, "No vue dependency found.");
    }

    return constructor;
  }

  function setVueConstructor(Vue) {
    // @ts-ignore
    if (vueConstructor && Vue.__proto__ !== vueConstructor.__proto__) {
      warn('[vue-composition-api] another instance of Vue installed');
    }

    vueConstructor = Vue;
    Object.defineProperty(Vue, PluginInstalledFlag, {
      configurable: true,
      writable: true,
      value: true
    });
  }
  /**
   * For `effectScope` to create instance without populate the current instance
   * @internal
   **/


  function withCurrentInstanceTrackingDisabled(fn) {
    var prev = currentInstanceTracking;
    currentInstanceTracking = false;

    try {
      fn();
    } finally {
      currentInstanceTracking = prev;
    }
  }

  function setCurrentInstance(instance) {
    if (!currentInstanceTracking) return;
    var prev = currentInstance;
    prev === null || prev === void 0 ? void 0 : prev.scope.off();
    currentInstance = instance;
    currentInstance === null || currentInstance === void 0 ? void 0 : currentInstance.scope.on();
  }

  function getCurrentInstance() {
    return currentInstance;
  }

  var instanceMapCache = new WeakMap();

  function toVue3ComponentInstance(vm) {
    if (instanceMapCache.has(vm)) {
      return instanceMapCache.get(vm);
    }

    var instance = {
      proxy: vm,
      update: vm.$forceUpdate,
      type: vm.$options,
      uid: vm._uid,
      // $emit is defined on prototype and it expected to be bound
      emit: vm.$emit.bind(vm),
      parent: null,
      root: null // to be immediately set

    };
    bindCurrentScopeToVM(instance); // map vm.$props =

    var instanceProps = ['data', 'props', 'attrs', 'refs', 'vnode', 'slots'];
    instanceProps.forEach(function (prop) {
      proxy(instance, prop, {
        get: function get() {
          return vm["$".concat(prop)];
        }
      });
    });
    proxy(instance, 'isMounted', {
      get: function get() {
        // @ts-expect-error private api
        return vm._isMounted;
      }
    });
    proxy(instance, 'isUnmounted', {
      get: function get() {
        // @ts-expect-error private api
        return vm._isDestroyed;
      }
    });
    proxy(instance, 'isDeactivated', {
      get: function get() {
        // @ts-expect-error private api
        return vm._inactive;
      }
    });
    proxy(instance, 'emitted', {
      get: function get() {
        // @ts-expect-error private api
        return vm._events;
      }
    });
    instanceMapCache.set(vm, instance);

    if (vm.$parent) {
      instance.parent = toVue3ComponentInstance(vm.$parent);
    }

    if (vm.$root) {
      instance.root = toVue3ComponentInstance(vm.$root);
    }

    return instance;
  }

  var toString = function toString(x) {
    return Object.prototype.toString.call(x);
  };

  function isNative(Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
  }

  var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  var noopFn = function noopFn(_) {
    return _;
  };

  function proxy(target, key, _a) {
    var get = _a.get,
        set = _a.set;
    Object.defineProperty(target, key, {
      enumerable: true,
      configurable: true,
      get: get || noopFn,
      set: set || noopFn
    });
  }

  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  function hasOwn(obj, key) {
    return Object.hasOwnProperty.call(obj, key);
  }

  function assert(condition, msg) {
    if (!condition) {
      throw new Error("[vue-composition-api] ".concat(msg));
    }
  }

  function isPrimitive(value) {
    return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
    _typeof(value) === 'symbol' || typeof value === 'boolean';
  }

  function isArray(x) {
    return Array.isArray(x);
  }

  var objectToString = Object.prototype.toString;

  var toTypeString = function toTypeString(value) {
    return objectToString.call(value);
  };

  var isMap$1 = function isMap(val) {
    return toTypeString(val) === '[object Map]';
  };

  var isSet$1 = function isSet(val) {
    return toTypeString(val) === '[object Set]';
  };

  var MAX_VALID_ARRAY_LENGTH = 4294967295; // Math.pow(2, 32) - 1

  function isValidArrayIndex(val) {
    var n = parseFloat(String(val));
    return n >= 0 && Math.floor(n) === n && isFinite(val) && n <= MAX_VALID_ARRAY_LENGTH;
  }

  function isObject(val) {
    return val !== null && _typeof(val) === 'object';
  }

  function isPlainObject(x) {
    return toString(x) === '[object Object]';
  }

  function isFunction(x) {
    return typeof x === 'function';
  }

  function isUndef(v) {
    return v === undefined || v === null;
  }

  function warn(msg, vm) {
    var Vue = getRegisteredVueOrDefault();
    if (!Vue || !Vue.util) console.warn("[vue-composition-api] ".concat(msg));else Vue.util.warn(msg, vm);
  }

  function logError(err, vm, info) {
    {
      warn("Error in ".concat(info, ": \"").concat(err.toString(), "\""), vm);
    }

    if (typeof window !== 'undefined' && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err;
    }
  }
  /**
   * Object.is polyfill
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   * */


  function isSame$1(value1, value2) {
    if (value1 === value2) {
      return value1 !== 0 || 1 / value1 === 1 / value2;
    } else {
      return value1 !== value1 && value2 !== value2;
    }
  }

  function getCurrentInstanceForFn(hook, target) {
    target = target || getCurrentInstance();

    if (!target) {
      warn("".concat(hook, " is called when there is no active component instance to be ") + "associated with. " + "Lifecycle injection APIs can only be used during execution of setup().");
    }

    return target;
  }

  function defineComponentInstance(Ctor, options) {
    if (options === void 0) {
      options = {};
    }

    var silent = Ctor.config.silent;
    Ctor.config.silent = true;
    var vm = new Ctor(options);
    Ctor.config.silent = silent;
    return vm;
  }

  function isComponentInstance(obj) {
    var Vue = getVueConstructor();
    return Vue && obj instanceof Vue;
  }

  function createSlotProxy(vm, slotName) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      if (!vm.$scopedSlots[slotName]) {
        return warn("slots.".concat(slotName, "() got called outside of the \"render()\" scope"), vm);
      }

      return vm.$scopedSlots[slotName].apply(vm, args);
    };
  }

  function resolveSlots(slots, normalSlots) {
    var res;

    if (!slots) {
      res = {};
    } else if (slots._normalized) {
      // fast path 1: child component re-render only, parent did not change
      return slots._normalized;
    } else {
      res = {};

      for (var key in slots) {
        if (slots[key] && key[0] !== '$') {
          res[key] = true;
        }
      }
    } // expose normal slots on scopedSlots


    for (var key in normalSlots) {
      if (!(key in res)) {
        res[key] = true;
      }
    }

    return res;
  }

  var vueInternalClasses;

  var getVueInternalClasses = function getVueInternalClasses() {
    if (!vueInternalClasses) {
      var vm = defineComponentInstance(getVueConstructor(), {
        computed: {
          value: function value() {
            return 0;
          }
        }
      }); // to get Watcher class

      var Watcher = vm._computedWatchers.value.constructor; // to get Dep class

      var Dep = vm._data.__ob__.dep.constructor;
      vueInternalClasses = {
        Watcher: Watcher,
        Dep: Dep
      };
      vm.$destroy();
    }

    return vueInternalClasses;
  };

  function createSymbol(name) {
    return hasSymbol ? Symbol["for"](name) : name;
  }

  var WatcherPreFlushQueueKey = createSymbol('composition-api.preFlushQueue');
  var WatcherPostFlushQueueKey = createSymbol('composition-api.postFlushQueue'); // must be a string, symbol key is ignored in reactive

  var RefKey = 'composition-api.refKey';
  var accessModifiedSet = new WeakMap();
  var rawSet = new WeakMap();
  var readonlySet = new WeakMap();
  /**
   * Set a property on an object. Adds the new property, triggers change
   * notification and intercept it's subsequent access if the property doesn't
   * already exist.
   */

  function set$1(target, key, val) {
    var Vue = getVueConstructor(); // @ts-expect-error https://github.com/vuejs/vue/pull/12132

    var _a = Vue.util,
        warn = _a.warn,
        defineReactive = _a.defineReactive;

    if ((isUndef(target) || isPrimitive(target))) {
      warn("Cannot set reactive property on undefined, null, or primitive value: ".concat(target));
    }

    var ob = target.__ob__;

    function ssrMockReactivity() {
      // in SSR, there is no __ob__. Mock for reactivity check
      if (ob && isObject(val) && !hasOwn(val, '__ob__')) {
        mockReactivityDeep(val);
      }
    }

    if (isArray(target)) {
      if (isValidArrayIndex(key)) {
        target.length = Math.max(target.length, key);
        target.splice(key, 1, val);
        ssrMockReactivity();
        return val;
      } else if (key === 'length' && val !== target.length) {
        target.length = val;
        ob === null || ob === void 0 ? void 0 : ob.dep.notify();
        return val;
      }
    }

    if (key in target && !(key in Object.prototype)) {
      target[key] = val;
      ssrMockReactivity();
      return val;
    }

    if (target._isVue || ob && ob.vmCount) {
      warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
      return val;
    }

    if (!ob) {
      target[key] = val;
      return val;
    }

    defineReactive(ob.value, key, val); // IMPORTANT: define access control before trigger watcher

    defineAccessControl(target, key, val);
    ssrMockReactivity();
    ob.dep.notify();
    return val;
  }

  var RefImpl =
  /** @class */
  function () {
    function RefImpl(_a) {
      var get = _a.get,
          set = _a.set;
      proxy(this, 'value', {
        get: get,
        set: set
      });
    }

    return RefImpl;
  }();

  function createRef(options, isReadonly, isComputed) {
    if (isReadonly === void 0) {
      isReadonly = false;
    }

    if (isComputed === void 0) {
      isComputed = false;
    }

    var r = new RefImpl(options); // add effect to differentiate refs from computed

    if (isComputed) r.effect = true; // seal the ref, this could prevent ref from being observed
    // It's safe to seal the ref, since we really shouldn't extend it.
    // related issues: #79

    var sealed = Object.seal(r);
    if (isReadonly) readonlySet.set(sealed, true);
    return sealed;
  }

  function ref(raw) {
    var _a;

    if (isRef(raw)) {
      return raw;
    }

    var value = reactive((_a = {}, _a[RefKey] = raw, _a));
    return createRef({
      get: function get() {
        return value[RefKey];
      },
      set: function set(v) {
        return value[RefKey] = v;
      }
    });
  }

  function isRef(value) {
    return value instanceof RefImpl;
  }

  function toRefs(obj) {
    if (!isReactive(obj)) {
      warn("toRefs() expects a reactive object but received a plain one.");
    }

    if (!isPlainObject(obj)) return obj;
    var ret = {};

    for (var key in obj) {
      ret[key] = toRef(obj, key);
    }

    return ret;
  }

  function toRef(object, key) {
    if (!(key in object)) set$1(object, key, undefined);
    var v = object[key];
    if (isRef(v)) return v;
    return createRef({
      get: function get() {
        return object[key];
      },
      set: function set(v) {
        return object[key] = v;
      }
    });
  }

  function isRaw(obj) {
    var _a;

    return Boolean(obj && hasOwn(obj, '__ob__') && _typeof(obj.__ob__) === 'object' && ((_a = obj.__ob__) === null || _a === void 0 ? void 0 : _a.__raw__));
  }

  function isReactive(obj) {
    var _a;

    return Boolean(obj && hasOwn(obj, '__ob__') && _typeof(obj.__ob__) === 'object' && !((_a = obj.__ob__) === null || _a === void 0 ? void 0 : _a.__raw__));
  }
  /**
   * Proxing property access of target.
   * We can do unwrapping and other things here.
   */


  function setupAccessControl(target) {
    if (!isPlainObject(target) || isRaw(target) || isArray(target) || isRef(target) || isComponentInstance(target) || accessModifiedSet.has(target)) return;
    accessModifiedSet.set(target, true);
    var keys = Object.keys(target);

    for (var i = 0; i < keys.length; i++) {
      defineAccessControl(target, keys[i]);
    }
  }
  /**
   * Auto unwrapping when access property
   */


  function defineAccessControl(target, key, val) {
    if (key === '__ob__') return;
    if (isRaw(target[key])) return;
    var getter;
    var setter;
    var property = Object.getOwnPropertyDescriptor(target, key);

    if (property) {
      if (property.configurable === false) {
        return;
      }

      getter = property.get;
      setter = property.set;

      if ((!getter || setter
      /* not only have getter */
      ) && arguments.length === 2) {
        val = target[key];
      }
    }

    setupAccessControl(val);
    proxy(target, key, {
      get: function getterHandler() {
        var value = getter ? getter.call(target) : val; // if the key is equal to RefKey, skip the unwrap logic

        if (key !== RefKey && isRef(value)) {
          return value.value;
        } else {
          return value;
        }
      },
      set: function setterHandler(newVal) {
        if (getter && !setter) return; // If the key is equal to RefKey, skip the unwrap logic
        // If and only if "value" is ref and "newVal" is not a ref,
        // the assignment should be proxied to "value" ref.

        if (key !== RefKey && isRef(val) && !isRef(newVal)) {
          val.value = newVal;
        } else if (setter) {
          setter.call(target, newVal);
          val = newVal;
        } else {
          val = newVal;
        }

        setupAccessControl(newVal);
      }
    });
  }

  function observe(obj) {
    var Vue = getRegisteredVueOrDefault();
    var observed;

    if (Vue.observable) {
      observed = Vue.observable(obj);
    } else {
      var vm = defineComponentInstance(Vue, {
        data: {
          $$state: obj
        }
      });
      observed = vm._data.$$state;
    } // in SSR, there is no __ob__. Mock for reactivity check


    if (!hasOwn(observed, '__ob__')) {
      mockReactivityDeep(observed);
    }

    return observed;
  }
  /**
   * Mock __ob__ for object recursively
   */


  function mockReactivityDeep(obj, seen) {
    var e_1, _a;

    if (seen === void 0) {
      seen = new Set();
    }

    if (seen.has(obj) || hasOwn(obj, '__ob__') || !Object.isExtensible(obj)) return;
    def(obj, '__ob__', mockObserver(obj));
    seen.add(obj);

    try {
      for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;
        var value = obj[key];

        if (!(isPlainObject(value) || isArray(value)) || isRaw(value) || !Object.isExtensible(value)) {
          continue;
        }

        mockReactivityDeep(value, seen);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }

  function mockObserver(value) {
    if (value === void 0) {
      value = {};
    }

    return {
      value: value,
      dep: {
        notify: noopFn,
        depend: noopFn,
        addSub: noopFn,
        removeSub: noopFn
      }
    };
  }

  function createObserver() {
    return observe({}).__ob__;
  }
  /**
   * Make obj reactivity
   */


  function reactive(obj) {
    if (!isObject(obj)) {
      {
        warn('"reactive()" must be called on an object.');
      }

      return obj;
    }

    if (!(isPlainObject(obj) || isArray(obj)) || isRaw(obj) || !Object.isExtensible(obj)) {
      return obj;
    }

    var observed = observe(obj);
    setupAccessControl(observed);
    return observed;
  }

  var genName = function genName(name) {
    return "on".concat(name[0].toUpperCase() + name.slice(1));
  };

  function createLifeCycle(lifeCyclehook) {
    return function (callback, target) {
      var instance = getCurrentInstanceForFn(genName(lifeCyclehook), target);
      return instance && injectHookOption(getVueConstructor(), instance, lifeCyclehook, callback);
    };
  }

  function injectHookOption(Vue, instance, hook, val) {
    var options = instance.proxy.$options;
    var mergeFn = Vue.config.optionMergeStrategies[hook];
    var wrappedHook = wrapHookCall(instance, val);
    options[hook] = mergeFn(options[hook], wrappedHook);
    return wrappedHook;
  }

  function wrapHookCall(instance, fn) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var prev = getCurrentInstance();
      setCurrentInstance(instance);

      try {
        return fn.apply(void 0, __spreadArray([], __read(args), false));
      } finally {
        setCurrentInstance(prev);
      }
    };
  }
  var onMounted = createLifeCycle('mounted');
  var onUnmounted = createLifeCycle('destroyed');
  var fallbackVM;

  function flushPreQueue() {
    flushQueue(this, WatcherPreFlushQueueKey);
  }

  function flushPostQueue() {
    flushQueue(this, WatcherPostFlushQueueKey);
  }

  function hasWatchEnv(vm) {
    return vm[WatcherPreFlushQueueKey] !== undefined;
  }

  function installWatchEnv(vm) {
    vm[WatcherPreFlushQueueKey] = [];
    vm[WatcherPostFlushQueueKey] = [];
    vm.$on('hook:beforeUpdate', flushPreQueue);
    vm.$on('hook:updated', flushPostQueue);
  }

  function getWatcherOption(options) {
    return _assign({
      immediate: false,
      deep: false,
      flush: 'pre'
    }, options);
  }

  function getWatchEffectOption(options) {
    return _assign({
      flush: 'pre'
    }, options);
  }

  function getWatcherVM() {
    var vm = getCurrentScopeVM();

    if (!vm) {
      if (!fallbackVM) {
        fallbackVM = defineComponentInstance(getVueConstructor());
      }

      vm = fallbackVM;
    } else if (!hasWatchEnv(vm)) {
      installWatchEnv(vm);
    }

    return vm;
  }

  function flushQueue(vm, key) {
    var queue = vm[key];

    for (var index = 0; index < queue.length; index++) {
      queue[index]();
    }

    queue.length = 0;
  }

  function queueFlushJob(vm, fn, mode) {
    // flush all when beforeUpdate and updated are not fired
    var fallbackFlush = function fallbackFlush() {
      vm.$nextTick(function () {
        if (vm[WatcherPreFlushQueueKey].length) {
          flushQueue(vm, WatcherPreFlushQueueKey);
        }

        if (vm[WatcherPostFlushQueueKey].length) {
          flushQueue(vm, WatcherPostFlushQueueKey);
        }
      });
    };

    switch (mode) {
      case 'pre':
        fallbackFlush();
        vm[WatcherPreFlushQueueKey].push(fn);
        break;

      case 'post':
        fallbackFlush();
        vm[WatcherPostFlushQueueKey].push(fn);
        break;

      default:
        assert(false, "flush must be one of [\"post\", \"pre\", \"sync\"], but got ".concat(mode));
        break;
    }
  }

  function createVueWatcher(vm, getter, callback, options) {
    var index = vm._watchers.length; // @ts-ignore: use undocumented options

    vm.$watch(getter, callback, {
      immediate: options.immediateInvokeCallback,
      deep: options.deep,
      lazy: options.noRun,
      sync: options.sync,
      before: options.before
    });
    return vm._watchers[index];
  } // We have to monkeypatch the teardown function so Vue will run
  // runCleanup() when it tears down the watcher on unmounted.


  function patchWatcherTeardown(watcher, runCleanup) {
    var _teardown = watcher.teardown;

    watcher.teardown = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      _teardown.apply(watcher, args);

      runCleanup();
    };
  }

  function createWatcher(vm, source, cb, options) {
    var _a;

    if (!cb) {
      if (options.immediate !== undefined) {
        warn("watch() \"immediate\" option is only respected when using the " + "watch(source, callback, options?) signature.");
      }

      if (options.deep !== undefined) {
        warn("watch() \"deep\" option is only respected when using the " + "watch(source, callback, options?) signature.");
      }
    }

    var flushMode = options.flush;
    var isSync = flushMode === 'sync';
    var cleanup;

    var registerCleanup = function registerCleanup(fn) {
      cleanup = function cleanup() {
        try {
          fn();
        } catch ( // FIXME: remove any
        error) {
          logError(error, vm, 'onCleanup()');
        }
      };
    }; // cleanup before running getter again


    var runCleanup = function runCleanup() {
      if (cleanup) {
        cleanup();
        cleanup = null;
      }
    };

    var createScheduler = function createScheduler(fn) {
      if (isSync ||
      /* without a current active instance, ignore pre|post mode */
      vm === fallbackVM) {
        return fn;
      }

      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return queueFlushJob(vm, function () {
          fn.apply(void 0, __spreadArray([], __read(args), false));
        }, flushMode);
      };
    }; // effect watch


    if (cb === null) {
      var running_1 = false;

      var getter_1 = function getter_1() {
        // preventing the watch callback being call in the same execution
        if (running_1) {
          return;
        }

        try {
          running_1 = true;
          source(registerCleanup);
        } finally {
          running_1 = false;
        }
      };

      var watcher_1 = createVueWatcher(vm, getter_1, noopFn, {
        deep: options.deep || false,
        sync: isSync,
        before: runCleanup
      });
      patchWatcherTeardown(watcher_1, runCleanup); // enable the watcher update

      watcher_1.lazy = false;
      var originGet = watcher_1.get.bind(watcher_1); // always run watchEffect

      watcher_1.get = createScheduler(originGet);
      return function () {
        watcher_1.teardown();
      };
    }

    var deep = options.deep;
    var isMultiSource = false;
    var getter;

    if (isRef(source)) {
      getter = function getter() {
        return source.value;
      };
    } else if (isReactive(source)) {
      getter = function getter() {
        return source;
      };

      deep = true;
    } else if (isArray(source)) {
      isMultiSource = true;

      getter = function getter() {
        return source.map(function (s) {
          if (isRef(s)) {
            return s.value;
          } else if (isReactive(s)) {
            return traverse(s);
          } else if (isFunction(s)) {
            return s();
          } else {
            warn("Invalid watch source: ".concat(JSON.stringify(s), ".\n          A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types."), vm);
            return noopFn;
          }
        });
      };
    } else if (isFunction(source)) {
      getter = source;
    } else {
      getter = noopFn;
      warn("Invalid watch source: ".concat(JSON.stringify(source), ".\n      A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types."), vm);
    }

    if (deep) {
      var baseGetter_1 = getter;

      getter = function getter() {
        return traverse(baseGetter_1());
      };
    }

    var applyCb = function applyCb(n, o) {
      if (!deep && isMultiSource && n.every(function (v, i) {
        return isSame$1(v, o[i]);
      })) return; // cleanup before running cb again

      runCleanup();
      return cb(n, o, registerCleanup);
    };

    var callback = createScheduler(applyCb);

    if (options.immediate) {
      var originalCallback_1 = callback; // `shiftCallback` is used to handle the first sync effect run.
      // The subsequent callbacks will redirect to `callback`.

      var _shiftCallback_ = function shiftCallback_1(n, o) {
        _shiftCallback_ = originalCallback_1; // o is undefined on the first call

        return applyCb(n, isArray(n) ? [] : o);
      };

      callback = function callback(n, o) {
        return _shiftCallback_(n, o);
      };
    } // @ts-ignore: use undocumented option "sync"


    var stop = vm.$watch(getter, callback, {
      immediate: options.immediate,
      deep: deep,
      sync: isSync
    }); // Once again, we have to hack the watcher for proper teardown

    var watcher = vm._watchers[vm._watchers.length - 1]; // if the return value is reactive and deep:true
    // watch for changes, this might happen when new key is added

    if (isReactive(watcher.value) && ((_a = watcher.value.__ob__) === null || _a === void 0 ? void 0 : _a.dep) && deep) {
      watcher.value.__ob__.dep.addSub({
        update: function update() {
          // this will force the source to be revaluated and the callback
          // executed if needed
          watcher.run();
        }
      });
    }

    patchWatcherTeardown(watcher, runCleanup);
    return function () {
      stop();
    };
  }

  function watchEffect(effect, options) {
    var opts = getWatchEffectOption(options);
    var vm = getWatcherVM();
    return createWatcher(vm, effect, null, opts);
  }


  function watch(source, cb, options) {
    var callback = null;

    if (isFunction(cb)) {
      // source watch
      callback = cb;
    } else {
      // effect watch
      {
        warn("`watch(fn, options?)` signature has been moved to a separate API. " + "Use `watchEffect(fn, options?)` instead. `watch` now only " + "supports `watch(source, cb, options?) signature.");
      }

      options = cb;
      callback = null;
    }

    var opts = getWatcherOption(options);
    var vm = getWatcherVM();
    return createWatcher(vm, source, callback, opts);
  }

  function traverse(value, seen) {
    if (seen === void 0) {
      seen = new Set();
    }

    if (!isObject(value) || seen.has(value) || rawSet.has(value)) {
      return value;
    }

    seen.add(value);

    if (isRef(value)) {
      traverse(value.value, seen);
    } else if (isArray(value)) {
      for (var i = 0; i < value.length; i++) {
        traverse(value[i], seen);
      }
    } else if (isSet$1(value) || isMap$1(value)) {
      value.forEach(function (v) {
        traverse(v, seen);
      });
    } else if (isPlainObject(value)) {
      for (var key in value) {
        traverse(value[key], seen);
      }
    }

    return value;
  } // implement


  function computed(getterOrOptions) {
    var vm = getCurrentScopeVM();
    var getter;
    var setter;

    if (isFunction(getterOrOptions)) {
      getter = getterOrOptions;
    } else {
      getter = getterOrOptions.get;
      setter = getterOrOptions.set;
    }

    var computedSetter;
    var computedGetter;

    if (vm && !vm.$isServer) {
      var _a = getVueInternalClasses(),
          Watcher_1 = _a.Watcher,
          Dep_1 = _a.Dep;

      var watcher_1;

      computedGetter = function computedGetter() {
        if (!watcher_1) {
          watcher_1 = new Watcher_1(vm, getter, noopFn, {
            lazy: true
          });
        }

        if (watcher_1.dirty) {
          watcher_1.evaluate();
        }

        if (Dep_1.target) {
          watcher_1.depend();
        }

        return watcher_1.value;
      };

      computedSetter = function computedSetter(v) {
        if (!setter) {
          warn('Write operation failed: computed value is readonly.', vm);
          return;
        }

        if (setter) {
          setter(v);
        }
      };
    } else {
      // fallback
      var computedHost_1 = defineComponentInstance(getVueConstructor(), {
        computed: {
          $$state: {
            get: getter,
            set: setter
          }
        }
      });
      vm && vm.$on('hook:destroyed', function () {
        return computedHost_1.$destroy();
      });

      computedGetter = function computedGetter() {
        return computedHost_1.$$state;
      };

      computedSetter = function computedSetter(v) {
        if (!setter) {
          warn('Write operation failed: computed value is readonly.', vm);
          return;
        }

        computedHost_1.$$state = v;
      };
    }

    return createRef({
      get: computedGetter,
      set: computedSetter
    }, !setter, true);
  }

  var NOT_FOUND = {};

  function resolveInject(provideKey, vm) {
    var source = vm;

    while (source) {
      // @ts-ignore
      if (source._provided && hasOwn(source._provided, provideKey)) {
        //@ts-ignore
        return source._provided[provideKey];
      }

      source = source.$parent;
    }

    return NOT_FOUND;
  }

  function provide(key, value) {
    var _a;

    var vm = (_a = getCurrentInstanceForFn('provide')) === null || _a === void 0 ? void 0 : _a.proxy;
    if (!vm) return;

    if (!vm._provided) {
      var provideCache_1 = {};
      proxy(vm, '_provided', {
        get: function get() {
          return provideCache_1;
        },
        set: function set(v) {
          return Object.assign(provideCache_1, v);
        }
      });
    }

    vm._provided[key] = value;
  }

  function inject(key, defaultValue, treatDefaultAsFactory) {
    var _a;

    if (treatDefaultAsFactory === void 0) {
      treatDefaultAsFactory = false;
    }

    var vm = (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.proxy;

    if (!vm) {
      warn("inject() can only be used inside setup() or functional components.");
      return;
    }

    if (!key) {
      warn("injection \"".concat(String(key), "\" not found."), vm);
      return defaultValue;
    }

    var val = resolveInject(key, vm);

    if (val !== NOT_FOUND) {
      return val;
    }

    if (defaultValue === undefined && "development" !== 'production') {
      warn("Injection \"".concat(String(key), "\" not found"), vm);
    }

    return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue() : defaultValue;
  }

  Object.freeze({}) ;

  var nextTick = function nextTick() {
    var _a;

    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return (_a = getVueConstructor()) === null || _a === void 0 ? void 0 : _a.nextTick.apply(this, args);
  };

  var fallbackCreateElement;

  var createElement = function createElement() {
    var _a;

    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var instance = (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.proxy;

    if (!instance) {
      warn('`createElement()` has been called outside of render function.');

      if (!fallbackCreateElement) {
        fallbackCreateElement = defineComponentInstance(getVueConstructor()).$createElement;
      }

      return fallbackCreateElement.apply(fallbackCreateElement, args);
    }

    return instance.$createElement.apply(instance, args);
  };

  function set$2(vm, key, value) {
    var state = vm.__composition_api_state__ = vm.__composition_api_state__ || {};
    state[key] = value;
  }

  function get$1(vm, key) {
    return (vm.__composition_api_state__ || {})[key];
  }

  var vmStateManager = {
    set: set$2,
    get: get$1
  };

  function asVmProperty(vm, propName, propValue) {
    var props = vm.$options.props;

    if (!(propName in vm) && !(props && hasOwn(props, propName))) {
      if (isRef(propValue)) {
        proxy(vm, propName, {
          get: function get() {
            return propValue.value;
          },
          set: function set(val) {
            propValue.value = val;
          }
        });
      } else {
        proxy(vm, propName, {
          get: function get() {
            if (isReactive(propValue)) {
              propValue.__ob__.dep.depend();
            }

            return propValue;
          },
          set: function set(val) {
            propValue = val;
          }
        });
      }

      {
        // expose binding to Vue Devtool as a data property
        // delay this until state has been resolved to prevent repeated works
        vm.$nextTick(function () {
          if (Object.keys(vm._data).indexOf(propName) !== -1) {
            return;
          }

          if (isRef(propValue)) {
            proxy(vm._data, propName, {
              get: function get() {
                return propValue.value;
              },
              set: function set(val) {
                propValue.value = val;
              }
            });
          } else {
            proxy(vm._data, propName, {
              get: function get() {
                return propValue;
              },
              set: function set(val) {
                propValue = val;
              }
            });
          }
        });
      }
    } else {
      if (props && hasOwn(props, propName)) {
        warn("The setup binding property \"".concat(propName, "\" is already declared as a prop."), vm);
      } else {
        warn("The setup binding property \"".concat(propName, "\" is already declared."), vm);
      }
    }
  }

  function updateTemplateRef(vm) {
    var rawBindings = vmStateManager.get(vm, 'rawBindings') || {};
    if (!rawBindings || !Object.keys(rawBindings).length) return;
    var refs = vm.$refs;
    var oldRefKeys = vmStateManager.get(vm, 'refs') || [];

    for (var index = 0; index < oldRefKeys.length; index++) {
      var key = oldRefKeys[index];
      var setupValue = rawBindings[key];

      if (!refs[key] && setupValue && isRef(setupValue)) {
        setupValue.value = null;
      }
    }

    var newKeys = Object.keys(refs);
    var validNewKeys = [];

    for (var index = 0; index < newKeys.length; index++) {
      var key = newKeys[index];
      var setupValue = rawBindings[key];

      if (refs[key] && setupValue && isRef(setupValue)) {
        setupValue.value = refs[key];
        validNewKeys.push(key);
      }
    }

    vmStateManager.set(vm, 'refs', validNewKeys);
  }

  function afterRender(vm) {
    var stack = [vm._vnode];

    while (stack.length) {
      var vnode = stack.pop();
      if (vnode.context) updateTemplateRef(vnode.context);

      if (vnode.children) {
        for (var i = 0; i < vnode.children.length; ++i) {
          stack.push(vnode.children[i]);
        }
      }
    }
  }

  function updateVmAttrs(vm, ctx) {
    var e_1, _a;

    if (!vm) {
      return;
    }

    var attrBindings = vmStateManager.get(vm, 'attrBindings');

    if (!attrBindings && !ctx) {
      // fix 840
      return;
    }

    if (!attrBindings) {
      var observedData = reactive({});
      attrBindings = {
        ctx: ctx,
        data: observedData
      };
      vmStateManager.set(vm, 'attrBindings', attrBindings);
      proxy(ctx, 'attrs', {
        get: function get() {
          return attrBindings === null || attrBindings === void 0 ? void 0 : attrBindings.data;
        },
        set: function set() {
          warn("Cannot assign to '$attrs' because it is a read-only property", vm);
        }
      });
    }

    var source = vm.$attrs;

    var _loop_1 = function _loop_1(attr) {
      if (!hasOwn(attrBindings.data, attr)) {
        proxy(attrBindings.data, attr, {
          get: function get() {
            // to ensure it always return the latest value
            return vm.$attrs[attr];
          }
        });
      }
    };

    try {
      for (var _b = __values(Object.keys(source)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var attr = _c.value;

        _loop_1(attr);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }

  function resolveScopedSlots(vm, slotsProxy) {
    var parentVNode = vm.$options._parentVnode;
    if (!parentVNode) return;
    var prevSlots = vmStateManager.get(vm, 'slots') || [];
    var curSlots = resolveSlots(parentVNode.data.scopedSlots, vm.$slots); // remove staled slots

    for (var index = 0; index < prevSlots.length; index++) {
      var key = prevSlots[index];

      if (!curSlots[key]) {
        delete slotsProxy[key];
      }
    } // proxy fresh slots


    var slotNames = Object.keys(curSlots);

    for (var index = 0; index < slotNames.length; index++) {
      var key = slotNames[index];

      if (!slotsProxy[key]) {
        slotsProxy[key] = createSlotProxy(vm, key);
      }
    }

    vmStateManager.set(vm, 'slots', slotNames);
  }

  function activateCurrentInstance(instance, fn, onError) {
    var preVm = getCurrentInstance();
    setCurrentInstance(instance);

    try {
      return fn(instance);
    } catch ( // FIXME: remove any
    err) {
      if (onError) {
        onError(err);
      } else {
        throw err;
      }
    } finally {
      setCurrentInstance(preVm);
    }
  }

  function mixin(Vue) {
    Vue.mixin({
      beforeCreate: functionApiInit,
      mounted: function mounted() {
        afterRender(this);
      },
      beforeUpdate: function beforeUpdate() {
        updateVmAttrs(this);
      },
      updated: function updated() {
        afterRender(this);
      }
    });
    /**
     * Vuex init hook, injected into each instances init hooks list.
     */

    function functionApiInit() {
      var vm = this;
      var $options = vm.$options;
      var setup = $options.setup,
          render = $options.render;

      if (render) {
        // keep currentInstance accessible for createElement
        $options.render = function () {
          var _this = this;

          var args = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }

          return activateCurrentInstance(toVue3ComponentInstance(vm), function () {
            return render.apply(_this, args);
          });
        };
      }

      if (!setup) {
        return;
      }

      if (!isFunction(setup)) {
        {
          warn('The "setup" option should be a function that returns a object in component definitions.', vm);
        }

        return;
      }

      var data = $options.data; // wrapper the data option, so we can invoke setup before data get resolved

      $options.data = function wrappedData() {
        initSetup(vm, vm.$props);
        return isFunction(data) ? data.call(vm, vm) : data || {};
      };
    }

    function initSetup(vm, props) {
      if (props === void 0) {
        props = {};
      }

      var setup = vm.$options.setup;
      var ctx = createSetupContext(vm);
      var instance = toVue3ComponentInstance(vm);
      instance.setupContext = ctx; // fake reactive for `toRefs(props)`

      def(props, '__ob__', createObserver()); // resolve scopedSlots and slots to functions

      resolveScopedSlots(vm, ctx.slots);
      var binding;
      activateCurrentInstance(instance, function () {
        // make props to be fake reactive, this is for `toRefs(props)`
        binding = setup(props, ctx);
      });
      if (!binding) return;

      if (isFunction(binding)) {
        // keep typescript happy with the binding type.
        var bindingFunc_1 = binding; // keep currentInstance accessible for createElement

        vm.$options.render = function () {
          resolveScopedSlots(vm, ctx.slots);
          return activateCurrentInstance(instance, function () {
            return bindingFunc_1();
          });
        };

        return;
      } else if (isObject(binding)) {
        if (isReactive(binding)) {
          binding = toRefs(binding);
        }

        vmStateManager.set(vm, 'rawBindings', binding);
        var bindingObj_1 = binding;
        Object.keys(bindingObj_1).forEach(function (name) {
          var bindingValue = bindingObj_1[name];

          if (!isRef(bindingValue)) {
            if (!isReactive(bindingValue)) {
              if (isFunction(bindingValue)) {
                var copy_1 = bindingValue;
                bindingValue = bindingValue.bind(vm);
                Object.keys(copy_1).forEach(function (ele) {
                  bindingValue[ele] = copy_1[ele];
                });
              } else if (!isObject(bindingValue)) {
                bindingValue = ref(bindingValue);
              } else if (hasReactiveArrayChild(bindingValue)) {
                // creates a custom reactive properties without make the object explicitly reactive
                // NOTE we should try to avoid this, better implementation needed
                customReactive(bindingValue);
              }
            } else if (isArray(bindingValue)) {
              bindingValue = ref(bindingValue);
            }
          }

          asVmProperty(vm, name, bindingValue);
        });
        return;
      }

      {
        assert(false, "\"setup\" must return a \"Object\" or a \"Function\", got \"".concat(Object.prototype.toString.call(binding).slice(8, -1), "\""));
      }
    }

    function customReactive(target, seen) {
      if (seen === void 0) {
        seen = new Set();
      }

      if (seen.has(target)) return;
      if (!isPlainObject(target) || isRef(target) || isReactive(target) || isRaw(target)) return;
      var Vue = getVueConstructor(); // @ts-expect-error https://github.com/vuejs/vue/pull/12132

      var defineReactive = Vue.util.defineReactive;
      Object.keys(target).forEach(function (k) {
        var val = target[k];
        defineReactive(target, k, val);

        if (val) {
          seen.add(val);
          customReactive(val, seen);
        }

        return;
      });
    }

    function hasReactiveArrayChild(target, visited) {
      if (visited === void 0) {
        visited = new Map();
      }

      if (visited.has(target)) {
        return visited.get(target);
      }

      visited.set(target, false);

      if (isArray(target) && isReactive(target)) {
        visited.set(target, true);
        return true;
      }

      if (!isPlainObject(target) || isRaw(target) || isRef(target)) {
        return false;
      }

      return Object.keys(target).some(function (x) {
        return hasReactiveArrayChild(target[x], visited);
      });
    }

    function createSetupContext(vm) {
      var ctx = {
        slots: {}
      };
      var propsPlain = ['root', 'parent', 'refs', 'listeners', 'isServer', 'ssrContext'];
      var methodReturnVoid = ['emit'];
      propsPlain.forEach(function (key) {
        var srcKey = "$".concat(key);
        proxy(ctx, key, {
          get: function get() {
            return vm[srcKey];
          },
          set: function set() {
            warn("Cannot assign to '".concat(key, "' because it is a read-only property"), vm);
          }
        });
      });
      updateVmAttrs(vm, ctx);
      methodReturnVoid.forEach(function (key) {
        var srcKey = "$".concat(key);
        proxy(ctx, key, {
          get: function get() {
            return function () {
              var args = [];

              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }

              var fn = vm[srcKey];
              fn.apply(vm, args);
            };
          }
        });
      });

      return ctx;
    }
  }
  /**
   * Helper that recursively merges two data objects together.
   */


  function mergeData(from, to) {
    if (!from) return to;
    if (!to) return from;
    var key;
    var toVal;
    var fromVal;
    var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

    for (var i = 0; i < keys.length; i++) {
      key = keys[i]; // in case the object is already observed...

      if (key === '__ob__') continue;
      toVal = to[key];
      fromVal = from[key];

      if (!hasOwn(to, key)) {
        to[key] = fromVal;
      } else if (toVal !== fromVal && isPlainObject(toVal) && !isRef(toVal) && isPlainObject(fromVal) && !isRef(fromVal)) {
        mergeData(fromVal, toVal);
      }
    }

    return to;
  }

  function _install(Vue) {
    if (isVueRegistered(Vue)) {
      {
        warn('[vue-composition-api] already installed. Vue.use(VueCompositionAPI) should be called only once.');
      }

      return;
    }

    {
      if (Vue.version) {
        if (Vue.version[0] !== '2' || Vue.version[1] !== '.') {
          warn("[vue-composition-api] only works with Vue 2, v".concat(Vue.version, " found."));
        }
      } else {
        warn('[vue-composition-api] no Vue version found');
      }
    }

    Vue.config.optionMergeStrategies.setup = function (parent, child) {
      return function mergedSetupFn(props, context) {
        return mergeData(isFunction(parent) ? parent(props, context) || {} : undefined, isFunction(child) ? child(props, context) || {} : undefined);
      };
    };

    setVueConstructor(Vue);
    mixin(Vue);
  }

  var Plugin = {
    install: function install(Vue) {
      return _install(Vue);
    }
  }; // implementation, close to no-op

  function defineComponent(options) {
    return options;
  }

  if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use(Plugin);
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  var props$M = {
    collapsed: Boolean,
    expanded: {
      type: Array
    },
    defaultExpanded: {
      type: Array
    },
    expandMutex: Boolean,
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    width: {
      type: [String, Number, Array],
      "default": "232px"
    },
    onChange: Function,
    onExpand: Function
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  var getTreePaths = function getTreePaths(node, val, ans) {
    if (!node) return;

    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return [].concat(_toConsumableArray(ans), [node.value]);
      var target = getTreePaths(child, val, [].concat(_toConsumableArray(ans), [node.value]));
      if (target) return target;
    }
  };

  var getTreeSameParentNodes = function getTreeSameParentNodes(node, val) {
    if (!node) return;

    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return node.children;
      var target = getTreeSameParentNodes(child, val);
      if (target) return target;
    }
  };

  var DFS = function DFS(root, val) {
    if (root.value === val) return root;

    if (root.children.length > 0) {
      for (var i = 0, len = root.children.length; i < len; i++) {
        var res = DFS(root.children[i], val);
        if (res) return res;
      }
    }
  };

  var VMenu = /*#__PURE__*/function () {
    function VMenu(options) {
      _classCallCheck(this, VMenu);

      _defineProperty$2(this, "data", null);

      _defineProperty$2(this, "cache", /* @__PURE__ */new Set());

      _defineProperty$2(this, "isMutex", false);

      _defineProperty$2(this, "expandValues", null);

      var root = {
        value: null,
        parent: null,
        children: []
      };
      this.data = root;
      this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;
      this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);
    }

    _createClass(VMenu, [{
      key: "add",
      value: function add(item) {
        var value = item.value,
            parent = item.parent,
            vnode = item.vnode;
        var node = {
          value: value,
          parent: parent,
          vnode: vnode,
          children: []
        };
        this.cache.forEach(function (data, v2, set) {
          if (item.value === data.parent) {
            node.children.push(data);
            set["delete"](data);
          }
        });

        if (item.parent == null) {
          this.data.children.push(node);
          node.parent = this.data;
        } else if (this.data.children.length > 0) {
          var pNode = DFS(this.data, parent);

          if (pNode) {
            pNode.children.push(node);
          } else {
            this.cache.add(node);
          }
        } else {
          this.cache.add(node);
        }
      }
    }, {
      key: "select",
      value: function select(val) {
        var activeValues = getTreePaths(this.data, val, []) || [];
        activeValues.push(val);
        return activeValues.filter(function (val2) {
          return val2 != null;
        });
      }
    }, {
      key: "expand",
      value: function expand(val) {
        var _this = this;

        if (this.expandValues.has(val)) {
          this.expandValues["delete"](val);
          return _toConsumableArray(this.expandValues);
        }

        this.expandValues.add(val);

        if (!this.isMutex) {
          return _toConsumableArray(this.expandValues);
        }

        var sameParentNodes = getTreeSameParentNodes(this.data, val);
        var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function (node) {
          var _node$children;

          return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;
        }).map(function (child) {
          return child.value;
        }));
        this.expandValues.forEach(function (val2) {
          var isHit = sameLevelSubmenuValues.has(val2);

          if (isHit) {
            _this.expandValues["delete"](val2);
          }
        });
        return _toConsumableArray(this.expandValues);
      }
    }, {
      key: "getChild",
      value: function getChild(value) {
        var target = DFS(this.data, value);
        return target ? target.children : [];
      }
    }]);

    return VMenu;
  }();

  function ownKeys$1m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1m(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Menu = defineComponent({
    name: "TMenu",
    props: _objectSpread$1m({}, props$M),
    model: {
      prop: "value",
      event: "change"
    },
    setup: function setup(props2, ctx) {
      var mode = ref(props2.expandType);
      var theme = computed(function () {
        return props2.theme;
      });
      var isMutex = computed(function () {
        return props2.expandMutex;
      });
      var menuClass = computed(function () {
        return ["".concat(prefix, "-default-menu"), "".concat(prefix, "-menu--").concat(props2.theme), _defineProperty$2({}, "".concat(prefix, "-is-collapsed"), props2.collapsed)];
      });
      var innerClasses = computed(function () {
        return ["".concat(prefix, "-menu"), _defineProperty$2({}, "".concat(prefix, "-menu--scroll"), mode.value !== "popup"), "narrow-scrollbar"];
      });
      var styles = computed(function () {
        var width = props2.width;
        var expandWidth = typeof width === "number" ? "".concat(width, "px") : width;
        return {
          height: "100%",
          width: props2.collapsed ? "64px" : expandWidth
        };
      });
      var activeValue = ref(props2.defaultValue || props2.value);
      var activeValues = ref([]);
      var expandValues = ref(props2.expanded || []);

      var deliver = function deliver(evt) {
        var func = "on".concat(evt[0].toUpperCase() + evt.slice(1));
        return function (val) {
          if (typeof props2[func] === "function") {
            props2[func](val);
          }

          ctx.emit(evt, val);
        };
      };

      var emitChange = deliver("change");
      var emitExpand = deliver("expand");
      watchEffect(function () {
        mode.value = props2.collapsed ? "popup" : props2.expandType;
      });
      var vMenu = new VMenu({
        isMutex: isMutex.value,
        expandValues: expandValues.value
      });
      provide("TdMenu", {
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues,
        mode: mode,
        theme: theme,
        isHead: false,
        vMenu: vMenu,
        select: function select(value) {
          emitChange(value);
        },
        open: function open(value, type) {
          var expanded = _toConsumableArray(expandValues.value);

          if (mode.value === "normal") {
            expanded = vMenu.expand(value);
          } else {
            var index = expanded.indexOf(value);

            if (type === "add") {
              if (index === -1) {
                expanded.push(value);
              }
            } else if (type === "remove") {
              expanded.splice(index, 1);
            }
          }

          emitExpand(expanded);
        }
      });
      watch(function () {
        return props2.expanded;
      }, function (value) {
        expandValues.value = value;
        vMenu.expandValues = new Set(value);
      });

      var updateActiveValues = function updateActiveValues(value) {
        activeValue.value = value;
        activeValues.value = vMenu.select(value);
      };

      watch(function () {
        return props2.value;
      }, updateActiveValues);
      watch(function () {
        return props2.defaultValue;
      }, updateActiveValues);
      onMounted(function () {
        activeValues.value = vMenu.select(activeValue.value);
      });
      return {
        styles: styles,
        menuClass: menuClass,
        innerClasses: innerClasses,
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues
      };
    },
    render: function render() {
      var h = arguments[0];

      if (this.$slots.options) {
        console.warn("TDesign Warn: `options` slot is going to be deprecated, please use `operations` for slot instead.");
      }

      var operations = renderContent(this, "operations", "options");
      var logo = renderTNodeJSX(this, "logo");
      return h("div", {
        "class": this.menuClass,
        "style": this.styles
      }, [h("div", {
        "class": "".concat(prefix, "-default-menu__inner")
      }, [logo && h("div", {
        "class": "".concat(prefix, "-menu__logo")
      }, [logo]), h("ul", {
        "class": this.innerClasses
      }, [renderContent(this, "default", "content")]), operations && h("div", {
        "class": "".concat(prefix, "-menu__operations")
      }, [operations])])]);
    }
  });

  var props$L = {
    expanded: {
      type: Array
    },
    defaultExpanded: {
      type: Array
    },
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onChange: Function,
    onExpand: Function
  };

  /**
   * Converts `string` to
   * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the kebab cased string.
   * @example
   *
   * _.kebabCase('Foo Bar');
   * // => 'foo-bar'
   *
   * _.kebabCase('fooBar');
   * // => 'foo-bar'
   *
   * _.kebabCase('__FOO_BAR__');
   * // => 'foo-bar'
   */

  var kebabCase = _createCompounder(function (result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
  });
  var kebabCase_1 = kebabCase;

  var props$K = {
    addable: Boolean,
    disabled: Boolean,
    list: {
      type: Array
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        return ["normal", "card"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onAdd: Function,
    onChange: Function,
    onRemove: Function
  };

  var tabPanelProps = {
    "default": {
      type: Function
    },
    destroyOnHide: {
      type: Boolean,
      "default": true
    },
    disabled: Boolean,
    label: {
      type: [String, Function]
    },
    panel: {
      type: [String, Function]
    },
    removable: Boolean,
    value: {
      type: [String, Number]
    },
    onRemove: Function
  };

  function ownKeys$1l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1l(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TabPanel = Vue__default["default"].extend({
    name: "TTabPanel",
    props: _objectSpread$1l({}, tabPanelProps),
    inject: {
      parent: {
        "default": null
      }
    },
    computed: {
      active: function active() {
        var _ref = this.parent || {},
            value = _ref.value;

        return this.value === value;
      }
    },
    updated: function updated() {
      var _this$parent, _this$parent$updatePa;

      (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : (_this$parent$updatePa = _this$parent.updatePanels) === null || _this$parent$updatePa === void 0 ? void 0 : _this$parent$updatePa.call(_this$parent, {
        force: true
      });
    },
    render: function render() {
      var h = arguments[0];
      var destroyOnHide = this.destroyOnHide,
          active = this.active;
      if (destroyOnHide && !active) return null;
      return h("div", {
        "class": "".concat(prefix, "-tab-panel"),
        "directives": [{
          name: "show",
          value: active
        }]
      }, [renderContent(this, "default", "panel")]);
    }
  });

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */

  var now = function now() {
    return _root.Date.now();
  };

  var now_1 = now;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */

  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}

    return index;
  }

  var _trimmedEndIndex = trimmedEndIndex;

  /** Used to match leading whitespace. */

  var reTrimStart = /^\s+/;
  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */

  function baseTrim(string) {
    return string ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }

  var _baseTrim = baseTrim;

  /** Used as references for various `Number` constants. */

  var NAN = 0 / 0;
  /** Used to detect bad signed hexadecimal string values. */

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  /** Used to detect binary string values. */

  var reIsBinary = /^0b[01]+$/i;
  /** Used to detect octal string values. */

  var reIsOctal = /^0o[0-7]+$/i;
  /** Built-in method references without a dependency on `root`. */

  var freeParseInt = parseInt;
  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */

  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol_1(value)) {
      return NAN;
    }

    if (isObject_1(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject_1(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = _baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  var toNumber_1 = toNumber;

  /** Error message constants. */

  var FUNC_ERROR_TEXT$2 = 'Expected a function';
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$2 = Math.max,
      nativeMin$1 = Math.min;
  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */

  function debounce$1(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }

    wait = toNumber_1(wait) || 0;

    if (isObject_1(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$2(toNumber_1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time; // Start the timer for the trailing edge.

      timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.

      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }

    function timerExpired() {
      var time = now_1();

      if (shouldInvoke(time)) {
        return trailingEdge(time);
      } // Restart the timer.


      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.

      if (trailing && lastArgs) {
        return invokeFunc(time);
      }

      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }

      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now_1());
    }

    function debounced() {
      var time = now_1(),
          isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }

        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }

      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }

      return result;
    }

    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  var debounce_1 = debounce$1;

  var keepAnimationMixins$6 = getKeepAnimationMixins();
  var TTabNavItem = mixins(keepAnimationMixins$6).extend({
    name: "TTabNavItem",
    components: {
      CloseIcon: Close
    },
    directives: {
      ripple: Ripple
    },
    props: {
      index: Number,
      active: {
        type: Boolean
      },
      theme: props$K.theme,
      size: props$K.size,
      placement: props$K.placement,
      label: {
        type: null
      },
      disabled: tabPanelProps.disabled,
      removable: tabPanelProps.removable,
      value: tabPanelProps.value
    },
    computed: {
      navItemClass: function navItemClass() {
        var _ref;

        return _ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-tabs__nav-item"), true), _defineProperty$2(_ref, "".concat(prefix, "-tabs__nav--card"), this.theme === "card"), _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), this.disabled), _defineProperty$2(_ref, "".concat(prefix, "-is-active"), this.active), _defineProperty$2(_ref, "".concat(prefix, "-is-left"), this.placement === "left"), _defineProperty$2(_ref, "".concat(prefix, "-is-right"), this.placement === "right"), _defineProperty$2(_ref, "".concat(prefix, "-size-m"), this.size === "medium"), _defineProperty$2(_ref, "".concat(prefix, "-size-l"), this.size === "large"), _ref;
      }
    },
    methods: {
      removeBtnClick: function removeBtnClick(e) {
        e.stopPropagation();
        emitEvent(this, "remove", {
          e: e,
          value: this.value,
          index: this.index
        });
      },
      onClickNav: function onClickNav(_ref2) {
        var e = _ref2.e;
        if (this.disabled) return;
        emitEvent(this, "click", e);
      },
      renderCardItem: function renderCardItem() {
        var h = this.$createElement;
        return h("div", {
          "class": this.navItemClass,
          "on": {
            "click": this.onClickNav
          },
          "directives": [{
            name: "ripple",
            value: this.keepAnimation.ripple
          }]
        }, [h("span", {
          "class": "".concat(prefix, "-tabs__nav-item-text-wrapper")
        }, [this.label]), this.removable && !this.disabled ? h(Close, {
          "class": "remove-btn",
          "nativeOn": {
            "click": this.removeBtnClick
          }
        }) : null]);
      },
      renderNormalItem: function renderNormalItem() {
        var _ref3;

        var h = this.$createElement;
        return h("div", {
          "class": this.navItemClass,
          "on": {
            "click": this.onClickNav
          }
        }, [h("div", {
          "class": ["".concat(prefix, "-tabs__nav-item-wrapper"), (_ref3 = {}, _defineProperty$2(_ref3, "".concat(prefix, "-is-disabled"), this.disabled), _defineProperty$2(_ref3, "".concat(prefix, "-is-active"), this.active), _ref3)],
          "directives": [{
            name: "ripple",
            value: this.keepAnimation.ripple
          }]
        }, [h("span", {
          "class": "".concat(prefix, "-tabs__nav-item-text-wrapper")
        }, [this.label])])]);
      }
    },
    render: function render() {
      return this.theme === "card" ? this.renderCardItem() : this.renderNormalItem();
    }
  });

  function ownKeys$1k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1k(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var getDomWidth = function getDomWidth(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  };

  var getActiveTabEl = function getActiveTabEl(navs, value) {
    for (var i = 0; i < navs.length; i++) {
      if (navs[i].componentOptions.propsData.value === value) {
        var _navs$i$componentInst;

        return (_navs$i$componentInst = navs[i].componentInstance) === null || _navs$i$componentInst === void 0 ? void 0 : _navs$i$componentInst.$el;
      }
    }

    return null;
  };

  var getLeftCoverWidth = function getLeftCoverWidth(o) {
    var leftOperationsZoneWidth = getDomWidth(o.leftZone);
    var leftIconWidth = getDomWidth(o.leftIcon);

    if (o.totalWidthBeforeActiveTab === 0) {
      return leftOperationsZoneWidth - leftIconWidth;
    }

    return leftOperationsZoneWidth;
  };

  var getRightCoverWidth = function getRightCoverWidth(o) {
    var rightOperationsZoneWidth = getDomWidth(o.rightZone);
    var rightIconWidth = getDomWidth(o.rightIcon);
    var wrapWidth = getDomWidth(o.wrap);

    if (Math.abs(o.totalWidthBeforeActiveTab + o.activeTabWidth - wrapWidth) < 1) {
      return rightOperationsZoneWidth - rightIconWidth;
    }

    return rightOperationsZoneWidth;
  };

  var TTabNav = Vue__default["default"].extend({
    name: "TTabNav",
    components: {
      TTabNavItem: TTabNavItem,
      ChevronLeftIcon: ChevronLeft,
      ChevronRightIcon: ChevronRight,
      AddIcon: Add
    },
    props: {
      theme: props$K.theme,
      panels: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      value: props$K.value,
      placement: props$K.placement,
      size: props$K.size,
      disabled: props$K.disabled,
      addable: props$K.addable
    },
    data: function data() {
      return {
        scrollLeft: 0,
        canToLeft: false,
        canToRight: false,
        navBarStyle: {}
      };
    },
    computed: {
      navs: function navs() {
        var _this = this;

        var h = this.$createElement;
        return this.panels.map(function (panel, index) {
          return h(TTabNavItem, {
            "ref": "tabItem".concat(index),
            "key": panel.value,
            "attrs": {
              "index": index,
              "theme": _this.theme,
              "size": _this.size,
              "placement": _this.placement,
              "label": renderTNodeJSX(panel, "label", "\u9009\u9879\u5361".concat(index + 1)),
              "active": panel.value === _this.value,
              "disabled": _this.disabled || panel.disabled,
              "removable": panel.removable,
              "value": panel.value
            },
            "on": {
              "click": function click(e) {
                return _this.tabClick(e, panel);
              },
              "remove": _this.removeBtnClick
            }
          });
        });
      },
      wrapTransformStyle: function wrapTransformStyle() {
        if (["left", "right"].includes(this.placement.toLowerCase())) return {};
        return {
          transform: "translate(".concat(-this.scrollLeft, "px, 0)")
        };
      },
      dataCanUpdateNavBarStyle: function dataCanUpdateNavBarStyle() {
        return [this.scrollLeft, this.placement, this.theme, this.navs, this.value];
      },
      dataCanUpdateArrow: function dataCanUpdateArrow() {
        return [this.scrollLeft, this.placement, this.navs];
      },
      iconBaseClass: function iconBaseClass() {
        var _ref;

        return _ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-tabs__btn"), true), _defineProperty$2(_ref, "".concat(prefix, "-size-m"), this.size === "medium"), _defineProperty$2(_ref, "".concat(prefix, "-size-l"), this.size === "large"), _ref;
      },
      leftIconClass: function leftIconClass() {
        return _objectSpread$1k(_defineProperty$2({}, "".concat(prefix, "-tabs__btn--left"), true), this.iconBaseClass);
      },
      rightIconClass: function rightIconClass() {
        return _objectSpread$1k(_defineProperty$2({}, "".concat(prefix, "-tabs__btn--right"), true), this.iconBaseClass);
      },
      addIconClass: function addIconClass() {
        return _objectSpread$1k(_defineProperty$2({}, "".concat(prefix, "-tabs__add-btn"), true), this.iconBaseClass);
      },
      navContainerClass: function navContainerClass() {
        var _ref2;

        return _ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-tabs__nav-container"), true), _defineProperty$2(_ref2, "".concat(prefix, "-tabs__nav--card"), this.theme === "card"), _defineProperty$2(_ref2, "".concat(prefix, "-is-").concat(this.placement), true), _defineProperty$2(_ref2, "".concat(prefix, "-is-addable"), this.theme === "card" && this.addable), _ref2;
      },
      navScrollContainerClass: function navScrollContainerClass() {
        var _ref3;

        return _ref3 = {}, _defineProperty$2(_ref3, "".concat(prefix, "-tabs__nav-scroll"), true), _defineProperty$2(_ref3, "".concat(prefix, "-is-scrollable"), this.canToLeft || this.canToRight), _ref3;
      },
      navsWrapClass: function navsWrapClass() {
        return ["".concat(prefix, "-tabs__nav-wrap"), "".concat(prefix, "-is-smooth"), _defineProperty$2({}, "".concat(prefix, "-is-vertical"), this.placement === "left" || this.placement === "right")];
      },
      navBarClass: function navBarClass() {
        return ["".concat(prefix, "-tabs__bar"), "".concat(prefix, "-is-").concat(this.placement)];
      },
      navsContainerStyle: function navsContainerStyle() {
        return this.addable ? {
          "min-height": "48px"
        } : null;
      }
    },
    watch: {
      dataCanUpdateArrow: function dataCanUpdateArrow() {
        var _this2 = this;

        this.$nextTick(function () {
          _this2.calculateCanShowArrow();
        });
      },
      dataCanUpdateNavBarStyle: function dataCanUpdateNavBarStyle() {
        var _this3 = this;

        this.$nextTick(function () {
          _this3.calculateNavBarStyle();
        });
      },
      value: function value() {
        var _this4 = this;

        this.$nextTick(function () {
          _this4.moveActiveTabIntoView();
        });
      },
      navs: function navs() {
        var _this5 = this;

        this.$nextTick(function () {
          _this5.fixScrollLeft();
        });
      }
    },
    methods: {
      calculateCanShowArrow: function calculateCanShowArrow() {
        this.calculateCanToLeft();
        this.calculateCanToRight();
      },
      calculateCanToLeft: function calculateCanToLeft() {
        if (["left", "right"].includes(this.placement.toLowerCase())) {
          this.canToLeft = false;
        }

        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;

        if (!wrap || !container) {
          this.canToLeft = false;
        }

        var leftOperationsZoneWidth = getDomWidth(this.$refs.leftOperationsZone);
        var leftIconWidth = getDomWidth(this.$refs.leftIcon);
        this.canToLeft = this.scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;
      },
      calculateCanToRight: function calculateCanToRight() {
        if (["left", "right"].includes(this.placement.toLowerCase())) {
          this.canToRight = false;
        }

        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;

        if (!wrap || !container) {
          this.canToRight = false;
        }

        var rightOperationsZoneWidth = getDomWidth(this.$refs.rightOperationsZone);
        var rightIconWidth = getDomWidth(this.$refs.rightIcon);
        this.canToRight = this.scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;
      },
      calculateNavBarStyle: function calculateNavBarStyle() {
        var _this6 = this;

        var getNavBarStyle = function getNavBarStyle() {
          var _this6$navs$i$compone4, _this6$navs$i$compone5, _ref5;

          if (_this6.theme === "card") return {};

          var getPropName = function getPropName() {
            if (["left", "right"].includes(_this6.placement.toLowerCase())) {
              return ["height", "top"];
            }

            return ["width", "left"];
          };

          var offset = 0;

          var _getPropName = getPropName(),
              _getPropName2 = _slicedToArray(_getPropName, 2),
              sizePropName = _getPropName2[0],
              offsetPropName = _getPropName2[1];

          var i = 0;

          for (; i < _this6.navs.length; i++) {
            var _this6$navs$i$compone, _this6$navs$i$compone2, _this6$navs$i$compone3;

            if (((_this6$navs$i$compone = _this6.navs[i].componentInstance) === null || _this6$navs$i$compone === void 0 ? void 0 : _this6$navs$i$compone.value) === _this6.value) {
              break;
            }

            offset += ((_this6$navs$i$compone2 = _this6.navs[i].componentInstance) === null || _this6$navs$i$compone2 === void 0 ? void 0 : (_this6$navs$i$compone3 = _this6$navs$i$compone2.$el) === null || _this6$navs$i$compone3 === void 0 ? void 0 : _this6$navs$i$compone3["client".concat(firstUpperCase$1(sizePropName))]) || 0;
          }

          if (!_this6.navs[i]) return {};
          return _ref5 = {}, _defineProperty$2(_ref5, offsetPropName, "".concat(offset, "px")), _defineProperty$2(_ref5, sizePropName, "".concat(((_this6$navs$i$compone4 = _this6.navs[i].componentInstance) === null || _this6$navs$i$compone4 === void 0 ? void 0 : (_this6$navs$i$compone5 = _this6$navs$i$compone4.$el) === null || _this6$navs$i$compone5 === void 0 ? void 0 : _this6$navs$i$compone5["client".concat(firstUpperCase$1(sizePropName))]) || 0, "px")), _ref5;
        };

        this.navBarStyle = getNavBarStyle();
      },
      watchDomChange: function watchDomChange() {
        var _this7 = this;

        var onResize = debounce_1(function () {
          _this7.resetScrollPosition();
        }, 300);
        window.addEventListener("resize", onResize);
        this.$once("beforeDestroy", function () {
          window.removeEventListener("resize", onResize);
        });
        if (!this.$refs.navsContainer) return;
        if (!window.ResizeObserver) return;
        var resizeObserver = new window.ResizeObserver(onResize);
        resizeObserver.observe(this.$refs.navsContainer);
        this.$once("beforeDestroy", function () {
          resizeObserver.disconnect();
        });
      },
      resetScrollPosition: function resetScrollPosition() {
        this.fixScrollLeft();
        this.calculateCanShowArrow();
      },
      handleScrollToLeft: function handleScrollToLeft() {
        var container = this.$refs.navsContainer;
        if (!container) return;
        var leftOperationsZoneWidth = getDomWidth(this.$refs.leftOperationsZone);
        var leftIconWidth = getDomWidth(this.$refs.leftIcon);
        var containerWidth = getDomWidth(container);
        this.scrollLeft = Math.max(-(leftOperationsZoneWidth - leftIconWidth), this.scrollLeft - containerWidth);
      },
      handleScrollToRight: function handleScrollToRight() {
        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;
        var rightOperationsZoneWidth = getDomWidth(this.$refs.rightOperationsZone);
        var rightIconWidth = getDomWidth(this.$refs.rightIcon);
        var containerWidth = getDomWidth(container);
        var wrapWidth = getDomWidth(wrap);
        this.scrollLeft = Math.min(this.scrollLeft + containerWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);
      },
      shouldMoveToLeftSide: function shouldMoveToLeftSide(activeTabEl) {
        var _this8 = this;

        var totalWidthBeforeActiveTab = activeTabEl.offsetLeft;
        var container = this.$refs.navsContainer;
        if (!container) return;
        var leftCoverWidth = getLeftCoverWidth({
          leftZone: this.$refs.leftOperationsZone,
          leftIcon: this.$refs.leftIcon,
          totalWidthBeforeActiveTab: totalWidthBeforeActiveTab
        });

        var isCurrentTabHiddenInLeftZone = function isCurrentTabHiddenInLeftZone() {
          return _this8.scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;
        };

        if (isCurrentTabHiddenInLeftZone()) {
          this.scrollLeft = totalWidthBeforeActiveTab - leftCoverWidth;
          return true;
        }

        return false;
      },
      shouldMoveToRightSide: function shouldMoveToRightSide(activeTabEl) {
        var _this9 = this;

        var totalWidthBeforeActiveTab = activeTabEl.offsetLeft;
        var activeTabWidth = activeTabEl.offsetWidth;
        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;
        if (!container || !wrap) return;
        var containerWidth = getDomWidth(container);
        var rightCoverWidth = getRightCoverWidth({
          rightZone: this.$refs.rightOperationsZone,
          rightIcon: this.$refs.rightIcon,
          wrap: wrap,
          totalWidthBeforeActiveTab: totalWidthBeforeActiveTab,
          activeTabWidth: activeTabWidth
        });

        var isCurrentTabHiddenInRightZone = function isCurrentTabHiddenInRightZone() {
          return _this9.scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;
        };

        if (isCurrentTabHiddenInRightZone()) {
          this.scrollLeft = totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;
          return true;
        }

        return false;
      },
      moveActiveTabIntoView: function moveActiveTabIntoView() {
        var _this10 = this;

        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          needCheckUpdate: true
        },
            needCheckUpdate = _ref6.needCheckUpdate;

        if (["left", "right"].includes(this.placement)) {
          return false;
        }

        var activeTabEl = getActiveTabEl(this.navs, this.value);

        if (!activeTabEl) {
          if (needCheckUpdate) {
            this.$once("hook:updated", function () {
              _this10.moveActiveTabIntoView({
                needCheckUpdate: false
              });
            });
          }

          return false;
        }

        return this.shouldMoveToLeftSide(activeTabEl) || this.shouldMoveToRightSide(activeTabEl);
      },
      fixIfLastItemNotTouchRightSide: function fixIfLastItemNotTouchRightSide(containerWidth, wrapWidth) {
        var rightOperationsZoneWidth = getDomWidth(this.$refs.rightOperationsZone);

        if (this.scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {
          this.scrollLeft = wrapWidth + rightOperationsZoneWidth - containerWidth;
          return true;
        }

        return false;
      },
      fixIfItemTotalWidthIsLessThenContainerWidth: function fixIfItemTotalWidthIsLessThenContainerWidth(containerWidth, wrapWidth) {
        if (wrapWidth <= containerWidth) {
          this.scrollLeft = 0;
          return true;
        }

        return false;
      },
      fixScrollLeft: function fixScrollLeft() {
        if (["left", "right"].includes(this.placement.toLowerCase())) return;
        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;
        if (!wrap || !container) return false;
        var containerWidth = getDomWidth(container);
        var wrapWidth = getDomWidth(wrap);
        return this.fixIfItemTotalWidthIsLessThenContainerWidth(containerWidth, wrapWidth) || this.fixIfLastItemNotTouchRightSide(containerWidth, wrapWidth);
      },
      handleAddTab: function handleAddTab(e) {
        emitEvent(this, "add", {
          e: e
        });
      },
      tabClick: function tabClick(event, nav) {
        var value = nav.value,
            disabled = nav.disabled;

        if (disabled || this.value === value) {
          return false;
        }

        emitEvent(this, "change", value);
      },
      removeBtnClick: function removeBtnClick(_ref7) {
        var e = _ref7.e,
            value = _ref7.value,
            index = _ref7.index;
        emitEvent(this, "remove", {
          e: e,
          value: value,
          index: index
        });
      },
      renderArrows: function renderArrows() {
        var h = this.$createElement;
        return [h("div", {
          "ref": "leftOperationsZone",
          "class": ["".concat(prefix, "-tabs__operations"), "".concat(prefix, "-tabs__operations--left")]
        }, [h("transition", {
          "attrs": {
            "name": "fade",
            "mode": "out-in",
            "appear": true
          }
        }, [this.canToLeft ? h("div", {
          "ref": "leftIcon",
          "class": this.leftIconClass,
          "on": {
            "click": this.handleScrollToLeft
          }
        }, [h(ChevronLeft)]) : null])]), h("div", {
          "ref": "rightOperationsZone",
          "class": ["".concat(prefix, "-tabs__operations"), "".concat(prefix, "-tabs__operations--right")]
        }, [h("transition", {
          "attrs": {
            "name": "fade",
            "mode": "out-in",
            "appear": true
          }
        }, [this.canToRight ? h("div", {
          "ref": "rightIcon",
          "class": this.rightIconClass,
          "on": {
            "click": this.handleScrollToRight
          }
        }, [h(ChevronRight)]) : null]), this.theme === "card" && this.addable ? h("div", {
          "class": this.addIconClass,
          "on": {
            "click": this.handleAddTab
          }
        }, [h(Add)]) : null])];
      },
      renderNavs: function renderNavs() {
        var h = this.$createElement;
        return h("div", {
          "class": this.navContainerClass
        }, [h("div", {
          "class": this.navScrollContainerClass
        }, [h("div", {
          "ref": "navsWrap",
          "class": this.navsWrapClass,
          "style": this.wrapTransformStyle
        }, [this.renderNavBar(), this.navs])])]);
      },
      renderNavBar: function renderNavBar() {
        var h = this.$createElement;
        if (this.theme === "card") return null;
        return h("div", {
          "class": this.navBarClass,
          "style": this.navBarStyle
        });
      }
    },
    mounted: function mounted() {
      var _this11 = this;

      this.$nextTick(function () {
        _this11.watchDomChange();

        _this11.calculateNavBarStyle();

        _this11.calculateCanShowArrow();
      });
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "ref": "navsContainer",
        "class": ["".concat(prefix, "-tabs__nav")],
        "style": this.navsContainerStyle
      }, [this.renderArrows(), this.renderNavs()]);
    }
  });

  function ownKeys$1j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1j(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Tabs = Vue__default["default"].extend(_objectSpread$1j(_objectSpread$1j({
    name: "TTabs",
    model: {
      prop: "value",
      event: "change"
    },
    components: {
      TTabPanel: _TabPanel,
      TTabNav: TTabNav
    }
  }, {
    listPanels: null
  }), {}, {
    props: _objectSpread$1j({}, props$K),
    provide: function provide() {
      return {
        parent: this
      };
    },
    data: function data() {
      return {
        panels: []
      };
    },
    watch: {
      list: {
        handler: function handler() {
          this.listPanels = this.createListPanels();
        },
        deep: true
      }
    },
    mounted: function mounted() {
      this.updatePanels();
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        _this.updatePanels();
      });
    },
    methods: {
      updatePanels: function updatePanels() {
        var _this2 = this;

        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$force = _ref.force,
            force = _ref$force === void 0 ? false : _ref$force;

        if (!this.listPanels) {
          this.panels = this.panels || [];
          return;
        }

        var newPanels = this.listPanels.map(function (panel) {
          return panel.componentInstance;
        }).filter(Boolean).filter(function (child) {
          var _child$$vnode;

          return kebabCase_1(child === null || child === void 0 ? void 0 : (_child$$vnode = child.$vnode) === null || _child$$vnode === void 0 ? void 0 : _child$$vnode.tag).endsWith("".concat(prefix, "-tab-panel"));
        });

        var isUnchange = function isUnchange() {
          return newPanels.length === _this2.panels.length && _this2.panels.every(function (panel, index) {
            return panel === newPanels[index];
          });
        };

        if (isUnchange() && !force) return;
        this.panels = newPanels;
      },
      onAddTab: function onAddTab(e) {
        emitEvent(this, "add", {
          e: e
        });
      },
      onChangeTab: function onChangeTab(value) {
        emitEvent(this, "change", value);
      },
      onRemoveTab: function onRemoveTab(_ref2) {
        var e = _ref2.e,
            value = _ref2.value,
            index = _ref2.index;
        var panel = this.panels[index];
        var eventData = {
          value: value,
          index: index,
          e: e
        };
        emitEvent(this, "remove", eventData);
        if (!panel) return;
        emitEvent(panel, "remove", eventData);
      },
      renderHeader: function renderHeader() {
        var _ref3;

        var h = this.$createElement;
        var tabNavProps = {
          theme: this.theme,
          value: this.value,
          size: this.size,
          disabled: this.disabled,
          placement: this.placement,
          addable: this.addable,
          panels: this.panels
        };
        return h("div", {
          "class": (_ref3 = {}, _defineProperty$2(_ref3, "".concat(prefix, "-tabs__header"), true), _defineProperty$2(_ref3, "".concat(prefix, "-is-").concat(this.placement), true), _ref3)
        }, [h(TTabNav, helper([{}, {
          "props": tabNavProps
        }, {
          "on": {
            "change": this.onChangeTab,
            "add": this.onAddTab,
            "remove": this.onRemoveTab
          }
        }]))]);
      },
      createListPanels: function createListPanels() {
        var _this3 = this;

        var h = this.$createElement;
        return this.list.map(function (item) {
          return h(_TabPanel, helper([{}, {
            "props": _objectSpread$1j({}, item)
          }, {
            "on": {
              "remove": _this3.onRemoveTab
            }
          }]));
        });
      },
      renderList: function renderList() {
        if (!this.listPanels) {
          return this.createListPanels();
        }

        return this.listPanels;
      },
      renderContent: function renderContent() {
        var _this$$scopedSlots$de, _this$$scopedSlots;

        var h = this.$createElement;
        this.listPanels = this.list ? this.renderList() : ((_this$$scopedSlots$de = (_this$$scopedSlots = this.$scopedSlots)["default"]) === null || _this$$scopedSlots$de === void 0 ? void 0 : _this$$scopedSlots$de.call(_this$$scopedSlots, {})) || [];
        return h("div", {
          "class": ["".concat(prefix, "-tabs__content")]
        }, [this.listPanels]);
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": ["".concat(prefix, "-tabs")]
      }, [this.placement !== "bottom" ? [this.renderHeader(), this.renderContent()] : [this.renderContent(), this.renderHeader()]]);
    }
  }));

  var Tabs = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Tabs));
  var TabPanel = withInstall(_TabPanel);

  var _HeadMenu = defineComponent({
    name: "THeadMenu",
    props: props$L,
    model: {
      prop: "value",
      event: "change"
    },
    components: {
      Tabs: Tabs,
      TabPanel: TabPanel
    },
    setup: function setup(props2, ctx) {
      var activeValue = ref(props2.defaultValue || props2.value);
      var activeValues = ref([]);
      var expandValues = ref(props2.defaultExpanded || props2.expanded || []);
      var theme = computed(function () {
        return props2.theme;
      });
      var menuClass = computed(function () {
        return ["".concat(prefix, "-menu"), "".concat(prefix, "-head-menu"), "".concat(prefix, "-menu--").concat(props2.theme)];
      });
      var mode = ref(props2.expandType);
      var submenu = reactive([]);

      var deliver = function deliver(evt) {
        var func = "on".concat(evt[0].toUpperCase() + evt.slice(1));
        return function (val) {
          if (typeof props2[func] === "function") {
            props2[func](val);
          }

          ctx.emit(evt, val);
        };
      };

      var emitChange = deliver("change");
      var emitExpand = deliver("expand");
      var vMenu = new VMenu({
        isMutex: true,
        expandValues: expandValues.value
      });
      provide("TdMenu", {
        mode: mode,
        theme: theme,
        vMenu: vMenu,
        isHead: true,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        select: function select(value) {
          emitChange(value);
        },
        open: function open(value, type) {
          var expanded = _toConsumableArray(expandValues.value);

          var index = expanded.indexOf(value);

          if (mode.value === "popup") {
            if (type === "add") {
              if (index === -1) {
                expanded.push(value);
              }
            } else if (type === "remove") {
              expanded.splice(index, 1);
            }
          } else {
            expanded.splice(0, 1);

            if (index === -1) {
              expanded.push(value);
            }
          }

          emitExpand(expanded);
        }
      });

      var handleTabChange = function handleTabChange(value) {
        emitChange(value);
      };

      var handleSubmenuExpand = function handleSubmenuExpand(value) {
        var ans = vMenu.getChild(value);
        submenu.length = 0;
        submenu.push.apply(submenu, _toConsumableArray(ans));
      };

      watch(function () {
        return props2.expanded;
      }, function (value) {
        expandValues.value = value;

        if (mode.value === "normal") {
          handleSubmenuExpand(value[0]);
        }
      });

      var updateActiveValues = function updateActiveValues(value) {
        activeValue.value = value;
        activeValues.value = vMenu.select(value);
      };

      watch(function () {
        return props2.value;
      }, updateActiveValues);
      watch(function () {
        return props2.defaultValue;
      }, updateActiveValues);
      watch(function () {
        return props2.expandType;
      }, function (value) {
        mode.value = value;
      });
      onMounted(function () {
        var _expandValues$value;

        activeValues.value = vMenu.select(activeValue.value);

        if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
          handleSubmenuExpand(expandValues.value[0]);
        }
      });
      return {
        mode: mode,
        menuClass: menuClass,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        submenu: submenu,
        handleTabChange: handleTabChange
      };
    },
    methods: {
      renderNormalSubmenu: function renderNormalSubmenu() {
        var h = this.$createElement;
        if (this.submenu.length === 0) return null;
        return h("ul", {
          "class": ["".concat(prefix, "-head-menu__submenu"), "".concat(prefix, "-submenu")]
        }, [h("t-tabs", {
          "attrs": {
            "value": this.activeValue
          },
          "on": {
            "change": this.handleTabChange
          }
        }, [this.submenu.map(function (item) {
          return h("t-tab-panel", {
            "attrs": {
              "value": item.value,
              "label": item.vnode[0].text
            }
          });
        })])]);
      }
    },
    render: function render() {
      var h = arguments[0];

      if (this.$slots.options) {
        console.warn("TDesign Warn: `options` slot is going to be deprecated, please use `operations` for slot instead.");
      }

      var operations = renderContent(this, "operations", "options");
      var logo = renderTNodeJSX(this, "logo");
      return h("div", {
        "class": this.menuClass
      }, [h("div", {
        "class": "".concat(prefix, "-head-menu__inner")
      }, [logo && h("div", {
        "class": "".concat(prefix, "-menu__logo")
      }, [logo]), h("ul", {
        "class": "".concat(prefix, "-menu")
      }, [renderContent(this, "default", "content")]), operations && h("div", {
        "class": "".concat(prefix, "-menu__operations")
      }, [operations])]), this.mode === "normal" && this.renderNormalSubmenu()]);
    }
  });

  var props$J = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function
    },
    title: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  var name$M = "".concat(prefix, "-fake-arrow");
  var FakeArrow = Vue__default["default"].extend({
    name: name$M,
    props: {
      isActive: {
        type: Boolean
      },
      overlayClassName: {
        type: [String, Object, Array]
      },
      overlayStyle: {
        type: Object
      }
    },
    computed: {
      classes: function classes() {
        return [name$M, _defineProperty$2({}, "".concat(name$M, "--active"), this.isActive), this.overlayClassName];
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("svg", {
        "class": this.classes,
        "attrs": {
          "width": "16",
          "height": "16",
          "viewBox": "0 0 16 16",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg"
        },
        "style": this.overlayStyle
      }, [h("path", {
        "attrs": {
          "d": "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
          "stroke": "black",
          "stroke-opacity": "0.9",
          "stroke-width": "1.3"
        }
      })]);
    }
  });

  function ownKeys$1i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1i(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$5 = getKeepAnimationMixins();
  var _Submenu = defineComponent({
    name: "TSubmenu",
    components: {
      FakeArrow: FakeArrow
    },
    mixins: [keepAnimationMixins$5],
    directives: {
      ripple: Ripple
    },
    props: props$J,
    setup: function setup(props2, ctx) {
      var menu = inject("TdMenu");
      var theme = menu.theme,
          activeValues = menu.activeValues,
          expandValues = menu.expandValues,
          mode = menu.mode,
          isHead = menu.isHead,
          open = menu.open;
      var submenu = inject("TdSubmenu", null);
      var isActive = computed(function () {
        return activeValues.value.indexOf(props2.value) > -1;
      });
      var popupVisible = ref(false);
      var rippleColor = computed(function () {
        return theme.value === "light" ? "#E7E7E7" : "#383838";
      });
      var isOpen = computed(function () {
        if (mode.value === "popup") {
          return popupVisible.value;
        }

        return expandValues ? expandValues.value.includes(props2.value) : false;
      });
      var isNested = ref(false);
      var classes = computed(function () {
        var _ref;

        return ["".concat(prefix, "-submenu"), (_ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), props2.disabled), _defineProperty$2(_ref, "".concat(prefix, "-is-opened"), isOpen.value), _ref)];
      });
      var popupClass = computed(function () {
        var _ref2;

        return ["".concat(prefix, "-menu__popup"), (_ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-is-opened"), popupVisible.value), _defineProperty$2(_ref2, "".concat(prefix, "-is-vertical"), !isHead), _ref2)];
      });
      var submenuClass = computed(function () {
        var _ref3;

        return ["".concat(prefix, "-menu__item"), (_ref3 = {}, _defineProperty$2(_ref3, "".concat(prefix, "-is-disabled"), props2.disabled), _defineProperty$2(_ref3, "".concat(prefix, "-is-opened"), isOpen.value), _defineProperty$2(_ref3, "".concat(prefix, "-is-active"), isActive.value), _ref3)];
      });
      var subClass = computed(function () {
        return ["".concat(prefix, "-menu__sub"), _defineProperty$2({}, "".concat(prefix, "-is-opened"), isOpen.value)];
      });
      var arrowClass = computed(function () {
        return [_defineProperty$2({}, "".concat(prefix, "-fake-arrow--active"), isOpen.value)];
      });

      var handleMouseEnter = function handleMouseEnter() {
        if (props2.disabled) return;
        popupVisible.value = true;
      };

      var handleMouseLeave = function handleMouseLeave() {
        popupVisible.value = false;
      };

      var handleSubmenuItemClick = function handleSubmenuItemClick() {
        if (props2.disabled) return;
        open(props2.value);
      };

      watch(popupVisible, function (visible) {
        menu.open(props2.value, visible ? "add" : "remove");
      });
      provide("TdSubmenu", {
        value: props2.value
      });
      onMounted(function () {
        var _menu$vMenu, _instance$parent$vnod;

        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value
        });
        var instance = getCurrentInstance();
        isNested.value = /submenu/i.test((_instance$parent$vnod = instance.parent.vnode) === null || _instance$parent$vnod === void 0 ? void 0 : _instance$parent$vnod.tag);

        if (ctx.refs.popup) {
          var rect = ctx.refs.popupInner.getBoundingClientRect();
          var $popup = ctx.refs.popup;
          $popup.style.setProperty("--popup-max-height", "".concat(rect.height, "px"));
          $popup.style.setProperty("--popup-width", "".concat(rect.width, "px"));
        }
      });
      return {
        mode: mode,
        isHead: isHead,
        isNested: isNested,
        classes: classes,
        subClass: subClass,
        arrowClass: arrowClass,
        popupClass: popupClass,
        submenuClass: submenuClass,
        rippleColor: rippleColor,
        handleMouseEnter: handleMouseEnter,
        handleMouseLeave: handleMouseLeave,
        handleSubmenuItemClick: handleSubmenuItemClick
      };
    },
    methods: {
      renderHeadSubmenu: function renderHeadSubmenu() {
        var h = this.$createElement;
        var rippleVal = this.keepAnimation.ripple ? this.rippleColor : false;
        var normalSubmenu = [h("div", {
          "directives": [{
            name: "ripple",
            value: rippleVal
          }],
          "class": this.submenuClass,
          "on": {
            "click": this.handleSubmenuItemClick
          }
        }, [renderTNodeJSX(this, "title")]), h("ul", {
          "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
        }, [renderContent(this, "default", "content")])];
        var popupSubmenu = [h("div", {
          "class": this.submenuClass
        }, [renderTNodeJSX(this, "title"), h("fake-arrow", {
          "attrs": {
            "overlayClassName": this.arrowClass,
            "overlayStyle": {
              transform: "rotate(".concat(this.isNested ? -90 : 0, "deg)")
            }
          }
        })]), h("div", {
          "ref": "popup",
          "class": this.popupClass
        }, [h("ul", {
          "ref": "popupInner",
          "class": "".concat(prefix, "-menu__popup-wrapper")
        }, [renderContent(this, "default", "content")])])];
        return this.mode === "normal" ? normalSubmenu : popupSubmenu;
      },
      renderSubmenu: function renderSubmenu() {
        var _this$$parent$$vnode;

        var h = this.$createElement;
        var hasContent = this.$slots.content || this.$slots["default"];
        var icon = renderTNodeJSX(this, "icon");
        var child = renderContent(this, "default", "content");
        var paddingLeft = 44;

        if (/submenu/i.test((_this$$parent$$vnode = this.$parent.$vnode) === null || _this$$parent$$vnode === void 0 ? void 0 : _this$$parent$$vnode.tag)) {
          paddingLeft += 16;
        }

        var needRotate = this.mode === "popup" && this.isNested;
        var rippleVal = this.keepAnimation.ripple ? this.rippleColor : false;
        var normalSubmenu = [h("div", {
          "directives": [{
            name: "ripple",
            value: rippleVal
          }],
          "class": this.submenuClass,
          "on": {
            "click": this.handleSubmenuItemClick
          }
        }, [icon, h("span", {
          "class": ["".concat(prefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title")]), hasContent && h("fake-arrow", {
          "attrs": {
            "overlayClassName": this.arrowClass,
            "overlayStyle": {
              transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
            }
          }
        })]), h("ul", {
          "attrs": {
            "level": this.level
          },
          "class": this.subClass,
          "style": {
            "--padding-left": "".concat(paddingLeft, "px")
          }
        }, [child])];
        var popupSubmenu = [h("div", {
          "class": this.submenuClass
        }, [icon, h("span", {
          "class": ["".concat(prefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title")]), h("fake-arrow", {
          "attrs": {
            "overlayClassName": this.arrowClass,
            "overlayStyle": {
              transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
            }
          }
        })]), h("div", {
          "ref": "popup",
          "class": this.popupClass
        }, [h("ul", {
          "ref": "popupInner",
          "class": "".concat(prefix, "-menu__popup-wrapper")
        }, [child])])];
        return this.mode === "normal" ? normalSubmenu : popupSubmenu;
      }
    },
    render: function render() {
      var h = arguments[0];
      var child = null;
      var events = {};

      if (this.mode === "popup") {
        events = {
          mouseenter: this.handleMouseEnter,
          mouseleave: this.handleMouseLeave
        };
      }

      if (Object.keys(this.$slots).length > 0) {
        child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
      }

      return h("li", {
        "class": this.classes,
        "on": _objectSpread$1i({}, events)
      }, [child]);
    }
  });

  var props$I = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      validator: function validator(val) {
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    },
    value: {
      type: [String, Number]
    },
    onClick: Function
  };

  function ownKeys$1h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1h(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$4 = getKeepAnimationMixins();
  var _MenuItem = defineComponent({
    name: "TMenuItem",
    mixins: [keepAnimationMixins$4],
    props: _objectSpread$1h({}, props$I),
    directives: {
      ripple: Ripple
    },
    setup: function setup(props2, ctx) {
      var menu = inject("TdMenu");
      var submenu = inject("TdSubmenu", null);
      var active = computed(function () {
        return menu.activeValue.value === props2.value;
      });
      var classes = computed(function () {
        var _ref;

        return ["".concat(prefix, "-menu__item"), (_ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-is-active"), active.value), _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), props2.disabled), _defineProperty$2(_ref, "".concat(prefix, "-menu__item--plain"), !ctx.slots.icon && !props2.icon), _defineProperty$2(_ref, "".concat(prefix, "-submenu__item"), !!submenu && !menu.isHead), _ref)];
      });

      var handleClick = function handleClick() {
        if (props2.disabled) return;
        menu.select(props2.value);
        ctx.emit("click");

        if (props2.href) {
          window.open(props2.href, props2.target);
        } else if (props2.to) {
          var router = props2.router || ctx.root.$router;
          var methods = props2.replace ? "replace" : "push";
          router[methods](props2.to)["catch"](function (err) {
            if (err.name !== "NavigationDuplicated" && !err.message.includes("Avoided redundant navigation to current location")) {
              throw err;
            }
          });
        }
      };

      onMounted(function () {
        var _menu$vMenu;

        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: ctx.slots["default"] && ctx.slots["default"]()
        });
      });
      return {
        menu: menu,
        active: active,
        classes: classes,
        handleClick: handleClick
      };
    },
    render: function render() {
      var h = arguments[0];
      return h("li", {
        "directives": [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }],
        "class": this.classes,
        "on": {
          "click": this.handleClick
        }
      }, [renderTNodeJSX(this, "icon"), h("span", {
        "class": ["".concat(prefix, "-menu__content")]
      }, [renderContent(this, "default", "content")])]);
    }
  });

  var props$H = {
    title: {
      type: [String, Function]
    }
  };

  var _MenuGroup = defineComponent({
    name: "TMenuGroup",
    props: props$H,
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": "".concat(prefix, "-menu-group")
      }, [h("div", {
        "class": "".concat(prefix, "-menu-group__title")
      }, [this.title]), this.$slots["default"]]);
    }
  });

  var Menu = withInstall(mapProps([{
    name: "value",
    event: ["change", "update:value"]
  }, {
    name: "expanded",
    event: ["expand", "update:expanded"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Menu), Plugin);
  var HeadMenu = withInstall(mapProps([{
    name: "value",
    event: ["change", "update:value"]
  }, {
    name: "expanded",
    event: ["expand", "update:expanded"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_HeadMenu), Plugin);
  var Submenu = withInstall(_Submenu, Plugin);
  var MenuItem = withInstall(_MenuItem, Plugin);
  var MenuGroup = withInstall(_MenuGroup, Plugin);

  var name$L = "".concat(prefix, "-addon");
  var _Addon = Vue__default["default"].extend({
    name: "TAddon",
    props: {
      prepend: [String, Function],
      append: [String, Function]
    },
    methods: {
      renderAddon: function renderAddon(h, type, addon) {
        var addonNode;

        if (this.$scopedSlots[type]) {
          addonNode = this.$scopedSlots[type](null);
        } else if (typeof addon === "string") {
          addonNode = addon;
        } else if (typeof addon === "function") {
          addonNode = addon(h);
        } else {
          addonNode = null;
        }

        return addonNode ? h("span", {
          "class": "".concat(name$L, "__").concat(type)
        }, [addonNode]) : addonNode;
      }
    },
    render: function render(h) {
      var _ref;

      var prepend = this.renderAddon(h, "prepend", this.prepend);
      var append = this.renderAddon(h, "append", this.append);
      var defaultSlot = this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : [null];
      var className = [name$L, (_ref = {}, _defineProperty$2(_ref, "".concat(name$L, "--prepend"), prepend), _defineProperty$2(_ref, "".concat(name$L, "--append"), append), _ref)];

      if (!prepend && !append) {
        return defaultSlot[0];
      }

      return h("div", {
        "class": className
      }, [prepend, defaultSlot[0], append]);
    }
  });

  var props$G = {
    align: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    autocomplete: {
      type: String,
      "default": ""
    },
    autofocus: Boolean,
    autoWidth: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    format: {
      type: Function
    },
    inputClass: {
      type: [String, Object, Array]
    },
    label: {
      type: [String, Function]
    },
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    showClearIconOnEmpty: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    type: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "number", "url", "tel", "password", "search", "submit", "hidden"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCompositionend: Function,
    onCompositionstart: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onWheel: Function
  };

  function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$K = "".concat(prefix, "-input");
  var INPUT_WRAP_CLASS = "".concat(prefix, "-input__wrap");
  var INPUT_TIPS_CLASS = "".concat(prefix, "-input__tips");

  function getValidAttrs$1(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }

  var _Input = mixins(getConfigReceiverMixins("input")).extend({
    name: "TInput",
    inheritAttrs: false,
    props: _objectSpread$1g({}, props$G),
    data: function data() {
      return {
        formDisabled: void 0,
        isHover: false,
        focused: false,
        renderType: this.type,
        inputValue: this.value
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      tPlaceholder: function tPlaceholder() {
        var _this$placeholder;

        return (_this$placeholder = this.placeholder) !== null && _this$placeholder !== void 0 ? _this$placeholder : this.t(this.global.placeholder);
      },
      showClear: function showClear() {
        return this.value && !this.disabled && this.clearable && this.isHover && !this.readonly || this.showClearIconOnEmpty;
      },
      inputAttrs: function inputAttrs() {
        return getValidAttrs$1({
          autofocus: this.autofocus,
          disabled: this.tDisabled,
          readonly: this.readonly,
          autocomplete: this.autocomplete,
          placeholder: this.tPlaceholder,
          maxlength: this.maxlength,
          name: this.name || void 0,
          type: this.renderType,
          unselectable: this.readonly ? "on" : "off"
        });
      },
      inputClasses: function inputClasses() {
        var _ref;

        return [name$K, ClASSNAMES.SIZE[this.size] || "", (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty$2(_ref, ClASSNAMES.STATUS.focused, this.focused), _defineProperty$2(_ref, "".concat(prefix, "-is-").concat(this.status), this.status), _defineProperty$2(_ref, "".concat(prefix, "-align-").concat(this.align), this.align !== "left"), _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), this.tDisabled), _defineProperty$2(_ref, "".concat(prefix, "-is-readonly"), this.readonly), _defineProperty$2(_ref, "".concat(name$K, "--focused"), this.focused), _defineProperty$2(_ref, "".concat(name$K, "--auto-width"), this.autoWidth), _ref)];
      }
    },
    watch: {
      autofocus: {
        handler: function handler(val) {
          var _this = this;

          if (val === true) {
            this.$nextTick(function () {
              _this.$refs.inputRef.focus();
            });
          }
        },
        immediate: true
      },
      value: {
        handler: function handler(val) {
          this.inputValue = val;
        },
        immediate: true
      }
    },
    created: function created() {
      this.composing = false;

      if (this.autoWidth) {
        this.addListenders();
      }
    },
    methods: {
      addListenders: function addListenders() {
        var _this2 = this;

        this.$watch(function () {
          return _this2.value + _this2.placeholder;
        }, function () {
          if (!_this2.autoWidth) return;

          _this2.$nextTick(function () {
            _this2.updateInputWidth();
          });
        }, {
          immediate: true
        });
      },
      mouseEvent: function mouseEvent(v) {
        this.isHover = v;
      },
      renderIcon: function renderIcon(h, icon, iconType) {
        if (typeof icon === "function") {
          return icon(h);
        }

        if (this.$scopedSlots[kebabCase_1(iconType)]) {
          return this.$scopedSlots[kebabCase_1(iconType)](null);
        }

        if (this.$scopedSlots[camelCase_1(iconType)]) {
          return this.$scopedSlots[camelCase_1(iconType)](null);
        }

        return null;
      },
      setInputValue: function setInputValue() {
        var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var input = this.$refs.inputRef;
        if (!input) return;
        var sV = String(v);

        if (input.value !== sV) {
          input.value = sV;
        }
      },
      focus: function focus() {
        var input = this.$refs.inputRef;
        input === null || input === void 0 ? void 0 : input.focus();
      },
      blur: function blur() {
        var input = this.$refs.inputRef;
        input === null || input === void 0 ? void 0 : input.blur();
      },
      handleInput: function handleInput(e) {
        var isCheckInputType = e.inputType && e.inputType === "insertCompositionText";
        if (e.isComposing || isCheckInputType) return;
        this.inputValueChangeHandle(e);
      },
      handleKeydown: function handleKeydown(e) {
        if (this.tDisabled) return;
        var code = e.code || e.key;

        if (code === "Enter" || code === "NumpadEnter") {
          emitEvent(this, "enter", this.value, {
            e: e
          });
        } else {
          emitEvent(this, "keydown", this.value, {
            e: e
          });
        }
      },
      handleKeyUp: function handleKeyUp(e) {
        if (this.tDisabled) return;
        emitEvent(this, "keyup", this.value, {
          e: e
        });
      },
      handleKeypress: function handleKeypress(e) {
        if (this.tDisabled) return;
        emitEvent(this, "keypress", this.value, {
          e: e
        });
      },
      onHandlePaste: function onHandlePaste(e) {
        if (this.tDisabled) return;
        var clipData = e.clipboardData || window.clipboardData;
        emitEvent(this, "paste", {
          e: e,
          pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
        });
      },
      onHandleMousewheel: function onHandleMousewheel(e) {
        emitEvent(this, "wheel", {
          e: e
        });
      },
      emitPassword: function emitPassword() {
        var renderType = this.renderType;
        var toggleType = renderType === "password" ? "text" : "password";
        this.renderType = toggleType;
      },
      emitClear: function emitClear(e) {
        emitEvent(this, "clear", {
          e: e
        });
        emitEvent(this, "change", "", {
          e: e
        });
        this.focus();
        this.emitFocus(e);
      },
      emitFocus: function emitFocus(e) {
        this.inputValue = this.value;
        if (this.tDisabled) return;
        this.focused = true;
        emitEvent(this, "focus", this.value, {
          e: e
        });
      },
      formatAndEmitBlur: function formatAndEmitBlur(e) {
        if (this.format) {
          this.inputValue = this.format(this.value);
        }

        this.focused = false;
        emitEvent(this, "blur", this.value, {
          e: e
        });
      },
      compositionendHandler: function compositionendHandler(e) {
        this.inputValueChangeHandle(e);
      },
      onRootClick: function onRootClick(e) {
        var _this$$refs$inputRef;

        (_this$$refs$inputRef = this.$refs.inputRef) === null || _this$$refs$inputRef === void 0 ? void 0 : _this$$refs$inputRef.focus();
        this.$emit("click", e);
      },
      inputValueChangeHandle: function inputValueChangeHandle(e) {
        var _this3 = this;

        var target = e.target;
        var val = target.value;

        if (this.maxcharacter && this.maxcharacter >= 0) {
          var stringInfo = getCharacterLength(val, this.maxcharacter);
          val = _typeof(stringInfo) === "object" && stringInfo.characters;
        }

        emitEvent(this, "change", val, {
          e: e
        });
        this.$nextTick(function () {
          return _this3.setInputValue(_this3.value);
        });
      },
      onInputMouseenter: function onInputMouseenter(e) {
        var _this$onMouseenter;

        this.mouseEvent(true);
        (_this$onMouseenter = this.onMouseenter) === null || _this$onMouseenter === void 0 ? void 0 : _this$onMouseenter.call(this, {
          e: e
        });
      },
      onInputMouseleave: function onInputMouseleave(e) {
        var _this$onMouseleave;

        this.mouseEvent(false);
        (_this$onMouseleave = this.onMouseleave) === null || _this$onMouseleave === void 0 ? void 0 : _this$onMouseleave.call(this, {
          e: e
        });
      },
      updateInputWidth: function updateInputWidth() {
        var pre = this.$refs.inputPreRef;
        if (!pre) return;
        var width = pre.offsetWidth;
        this.$refs.inputRef.style.width = "".concat(width, "px");
      }
    },
    render: function render(h) {
      var _ref2;

      var inputEvents = getValidAttrs$1({
        focus: this.emitFocus,
        blur: this.formatAndEmitBlur,
        keydown: this.handleKeydown,
        keyup: this.handleKeyUp,
        keypress: this.handleKeypress,
        paste: this.onHandlePaste,
        change: function change() {}
      });
      var wrapperAttrs = omit(this.$attrs, Object.keys(this.inputAttrs));
      var wrapperEvents = omit(this.$listeners, [].concat(_toConsumableArray(Object.keys(inputEvents)), ["input", "paste"]));
      var prefixIcon = this.renderIcon(h, this.prefixIcon, "prefix-icon");
      var suffixIcon = this.renderIcon(h, this.suffixIcon, "suffix-icon");
      var label = renderTNodeJSX(this, "label");
      var suffix = renderTNodeJSX(this, "suffix");
      var labelContent = label ? h("div", {
        "class": "".concat(name$K, "__prefix")
      }, [label]) : null;
      var suffixContent = suffix ? h("div", {
        "class": "".concat(name$K, "__suffix")
      }, [suffix]) : null;

      if (this.showClear) {
        suffixIcon = h(CloseCircleFilled, {
          "class": "".concat(name$K, "__suffix-clear"),
          "nativeOn": {
            "click": this.emitClear
          }
        });
      }

      if (this.type === "password") {
        if (this.renderType === "password") {
          suffixIcon = h(BrowseOff, {
            "class": "".concat(name$K, "__suffix-clear"),
            "nativeOn": {
              "click": this.emitPassword
            }
          });
        } else if (this.renderType === "text") {
          suffixIcon = h(Browse, {
            "class": "".concat(name$K, "__suffix-clear"),
            "nativeOn": {
              "click": this.emitPassword
            }
          });
        }
      }

      var classes = [this.inputClasses, this.inputClass, (_ref2 = {}, _defineProperty$2(_ref2, "".concat(name$K, "--prefix"), prefixIcon || labelContent), _defineProperty$2(_ref2, "".concat(name$K, "--suffix"), suffixIcon || suffixContent), _ref2)];
      var inputNode = h("div", {
        "class": classes,
        "on": _objectSpread$1g({
          "click": this.onRootClick,
          "mouseenter": this.onInputMouseenter,
          "mouseleave": this.onInputMouseleave,
          "wheel": this.onHandleMousewheel
        }, wrapperEvents),
        "attrs": _objectSpread$1g({}, wrapperAttrs)
      }, [prefixIcon ? h("span", {
        "class": ["".concat(name$K, "__prefix"), "".concat(name$K, "__prefix-icon")]
      }, [prefixIcon]) : null, labelContent, h("input", {
        "attrs": _objectSpread$1g({}, this.inputAttrs),
        "on": _objectSpread$1g(_objectSpread$1g({}, inputEvents), {}, {
          "input": this.handleInput,
          "compositionend": this.compositionendHandler
        }),
        "ref": "inputRef",
        "class": "".concat(name$K, "__inner"),
        "domProps": {
          "value": this.inputValue
        }
      }), this.autoWidth && h("span", {
        "ref": "inputPreRef",
        "class": "".concat(prefix, "-input__input-pre")
      }, [this.value || this.tPlaceholder]), suffixContent, suffixIcon ? h("span", {
        "class": ["".concat(name$K, "__suffix"), "".concat(name$K, "__suffix-icon"), _defineProperty$2({}, "".concat(name$K, "__clear"), this.showClear)]
      }, [suffixIcon]) : null]);
      var tips = renderTNodeJSX(this, "tips");
      return h("div", {
        "class": INPUT_WRAP_CLASS
      }, [inputNode, tips && h("div", {
        "class": "".concat(INPUT_TIPS_CLASS, " ").concat(prefix, "-input__tips--").concat(this.status || "normal")
      }, [tips])]);
    }
  });

  var name$J = "".concat(prefix, "-input-group");
  var _InputGroup = Vue__default["default"].extend({
    name: "TInputGroup",
    props: {
      separate: {
        type: Boolean,
        "default": false
      }
    },
    computed: {
      classes: function classes() {
        return [name$J, _defineProperty$2({}, "".concat(name$J, "--separate"), this.separate)];
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": this.classes
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var Addon = withInstall(_Addon);
  var Input = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Input));
  var InputGroup = withInstall(_InputGroup);

  var props$F = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    autoWidth: Boolean,
    decimalPlaces: {
      type: Number,
      "default": void 0
    },
    disabled: Boolean,
    format: {
      type: Function
    },
    max: {
      type: Number,
      "default": Infinity
    },
    min: {
      type: Number,
      "default": -Infinity
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    step: {
      type: Number,
      "default": 1
    },
    theme: {
      type: String,
      "default": "row",
      validator: function validator(val) {
        if (!val) return true;
        return ["column", "row", "normal"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Number,
      "default": void 0
    },
    defaultValue: {
      type: Number,
      "default": void 0
    },
    onBlur: Function,
    onChange: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function
  };

  function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$I = "".concat(prefix, "-input-number");
  var _InputNumber = Vue__default["default"].extend({
    name: "TInputNumber",
    props: _objectSpread$1f({}, props$F),
    components: {
      AddIcon: Add,
      RemoveIcon: Remove,
      ChevronDownIcon: ChevronDown,
      ChevronUpIcon: ChevronUp,
      TButton: Button,
      TInput: Input
    },
    data: function data() {
      return {
        formDisabled: void 0,
        userInput: null,
        filterValue: null,
        isError: false,
        inputting: false
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      disabledReduce: function disabledReduce() {
        return this.tDisabled || this.isError || Number(this.value) - this.step < this.min;
      },
      disabledAdd: function disabledAdd() {
        return this.tDisabled || this.isError || Number(this.value) + this.step > this.max;
      },
      valueDecimalPlaces: function valueDecimalPlaces() {
        var tempVal = this.filterValue !== null && !isNaN(Number(this.filterValue)) && !isNaN(parseFloat(this.filterValue)) ? this.filterValue : String(this.value);
        var tempIndex = tempVal.indexOf(".") + 1;
        return tempIndex > 0 ? tempVal.length - tempIndex : 0;
      },
      stepDecimalPlaces: function stepDecimalPlaces() {
        var tempVal = String(this.step);
        var tempIndex = tempVal.indexOf(".") + 1;
        return tempIndex > 0 ? tempVal.length - tempIndex : 0;
      },
      digitsNum: function digitsNum() {
        if (this.decimalPlaces !== void 0) {
          if (this.decimalPlaces < this.stepDecimalPlaces) {
            console.warn("decimal places of step should be less than decimal-places");
          }

          return this.decimalPlaces;
        }

        return this.valueDecimalPlaces > this.stepDecimalPlaces ? this.valueDecimalPlaces : this.stepDecimalPlaces;
      },
      reduceClasses: function reduceClasses() {
        return {
          "class": ["".concat(name$I, "__decrease"), _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.disabledReduce)]
        };
      },
      reduceEvents: function reduceEvents() {
        return {
          on: {
            click: this.handleReduce
          }
        };
      },
      addClasses: function addClasses() {
        return {
          "class": ["".concat(name$I, "__increase"), _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.disabledAdd)]
        };
      },
      addEvents: function addEvents() {
        return {
          on: {
            click: this.handleAdd
          }
        };
      },
      cmptWrapClasses: function cmptWrapClasses() {
        var _ref3;

        return {
          "class": [name$I, ClASSNAMES.SIZE[this.size], (_ref3 = {}, _defineProperty$2(_ref3, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty$2(_ref3, "".concat(prefix, "-is-controls-right"), this.theme === "column"), _defineProperty$2(_ref3, "".concat(name$I, "--").concat(this.theme), this.theme), _defineProperty$2(_ref3, "".concat(name$I, "--auto-width"), this.autoWidth), _ref3)]
        };
      },
      inputEvents: function inputEvents() {
        return {
          on: {
            blur: this.handleBlur,
            focus: this.handleFocus,
            keydown: this.handleKeydown,
            keyup: this.handleKeyup,
            keypress: this.handleKeypress
          }
        };
      },
      inputAttrs: function inputAttrs() {
        return {
          attrs: {
            disabled: this.tDisabled,
            readonly: this.readonly,
            autocomplete: "off",
            ref: "refInputElem",
            placeholder: this.placeholder,
            unselectable: this.readonly ? "on" : "off",
            tips: this.tips,
            autoWidth: this.autoWidth,
            align: this.align || (this.theme === "row" ? "center" : void 0),
            status: this.isError ? "error" : this.status
          }
        };
      },
      displayValue: function displayValue() {
        if (this.inputting && this.userInput !== null) {
          return this.filterValue;
        }

        if (this.value === void 0 || this.value === null) return "";
        return this.format && !this.inputting ? this.format(this.value) : this.value.toFixed(this.digitsNum);
      }
    },
    methods: {
      decreaseIcon: function decreaseIcon() {
        var h = this.$createElement;
        return this.theme === "column" ? h("chevron-down-icon", {
          "attrs": {
            "size": this.size
          }
        }) : h("remove-icon", {
          "attrs": {
            "size": this.size
          }
        });
      },
      increaseIcon: function increaseIcon() {
        var h = this.$createElement;
        return this.theme === "column" ? h("chevron-up-icon", {
          "attrs": {
            "size": this.size
          }
        }) : h("add-icon", {
          "attrs": {
            "size": this.size
          }
        });
      },
      handleAdd: function handleAdd(e) {
        if (this.disabledAdd || this.readonly) return;
        this.handleAction(this.getClickValue("add"), "add", e);
      },
      handleReduce: function handleReduce(e) {
        if (this.disabledReduce || this.readonly) return;
        this.handleAction(this.getClickValue("reduce"), "reduce", e);
      },
      getClickValue: function getClickValue(op) {
        var value = this.value || 0;
        var addOrReduce = {
          add: 1,
          reduce: -1
        }[op];
        var clickVal = this.toDecimalPlaces(value + addOrReduce * this.step);

        if (this.value === void 0) {
          clickVal = Math.min(Math.max(clickVal, this.min), this.max);
        }

        return Number(clickVal.toFixed(this.digitsNum));
      },
      handleInput: function handleInput(val, e) {
        this.userInput = val;
        this.filterValue = this.toValidStringNumber(this.userInput);
        this.userInput = "";
        if (!this.isValid(this.filterValue) || Number(this.filterValue) === this.value) return;
        this.updateValue(Number(this.filterValue));
        this.handleAction(Number(this.filterValue), "input", e);
      },
      handleAction: function handleAction(value, actionType, e) {
        if (actionType !== "input") {
          this.clearInput();
        }

        this.handleChange(value, {
          type: actionType,
          e: e
        });
      },
      toValidStringNumber: function toValidStringNumber(s) {
        var filterVal = s.replace(/[^\d.eE。-]/g, "").replace("\u3002", ".");

        if (this.multiE(filterVal) || this.multiDot(filterVal) || this.multiNegative(filterVal)) {
          filterVal = filterVal.substring(0, filterVal.length - 1);
        }

        return filterVal;
      },
      toValidNumber: function toValidNumber(s) {
        if (s === "") return void 0;
        var val = Number(s);
        if (isNaN(val) || isNaN(parseFloat(s))) return this.value;
        if (val > this.max) return this.max;
        if (val < this.min) return this.min;
        return parseFloat(s);
      },
      handleChange: function handleChange(value, ctx) {
        this.updateValue(value);
        emitEvent(this, "change", value, ctx);
      },
      handleBlur: function handleBlur(e) {
        var _this = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this.handleEndInput(e);

                case 2:
                  _this.clearFilterValue();

                  emitEvent(_this, "blur", _this.value, {
                    e: e
                  });

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      handleFocus: function handleFocus(e) {
        this.handleStartInput();
        emitEvent(this, "focus", this.value, {
          e: e
        });
      },
      handleKeydownEnter: function handleKeydownEnter(e) {
        if (!["Enter", "NumpadEnter"].includes(e.code || e.key)) return;
        emitEvent(this, "enter", this.value, {
          e: e
        });
      },
      handleKeydown: function handleKeydown(e) {
        emitEvent(this, "keydown", this.value, {
          e: e
        });
        this.handleKey(e);
      },
      handleKey: function handleKey(e) {
        var keyEvent = {
          ArrowUp: this.handleAdd,
          ArrowDown: this.handleReduce,
          Enter: this.handleKeydownEnter,
          NumpadEnter: this.handleKeydownEnter
        };
        var code = e.code || e.key;

        if (keyEvent[code] !== void 0) {
          keyEvent[code](e);
        }
      },
      handleKeyup: function handleKeyup(e) {
        emitEvent(this, "keyup", this.value, {
          e: e
        });
      },
      handleKeypress: function handleKeypress(e) {
        emitEvent(this, "keypress", this.value, {
          e: e
        });
      },
      handleStartInput: function handleStartInput() {
        this.inputting = true;
        if (this.value === void 0 || this.value === null) return;
        this.filterValue = this.value.toFixed(this.digitsNum);
      },
      handleEndInput: function handleEndInput(e) {
        this.inputting = false;
        var value = this.toValidNumber(this.filterValue);

        if (value !== void 0) {
          value = this.toDecimalPlaces(value);
        }

        if (value !== this.value) {
          this.updateValue(value);
          this.handleAction(value, "input", e);
        }

        this.isError = false;
      },
      updateValue: function updateValue(v) {
        this.$emit("input", v);
      },
      handleInputError: function handleInputError(visible) {
        this.isError = visible;
      },
      isValid: function isValid(v) {
        var numV = Number(v);

        if (this.empty(v) || isNaN(numV)) {
          this.handleInputError(true);
          return false;
        }

        return this.isValidNumber(numV);
      },
      isValidNumber: function isValidNumber(v) {
        if (v > this.max) {
          this.handleInputError(true);
          return false;
        }

        if (v < this.min) {
          this.handleInputError(true);
          return false;
        }

        this.isError = false;
        return true;
      },
      empty: function empty(v) {
        return !v && !v.replace(" ", "");
      },
      clearInput: function clearInput() {
        this.userInput = null;
      },
      clearFilterValue: function clearFilterValue() {
        this.filterValue = "";
      },
      multiE: function multiE(s) {
        var m = s.match(/[e]/gi);
        return m === null ? false : m.length > 1;
      },
      multiDot: function multiDot(s) {
        var m = s.match(/[.]/g);
        return m === null ? false : m.length > 1;
      },
      multiNegative: function multiNegative(s) {
        var m = s.match(/[-]/g);
        return m === null ? false : m.length > 2;
      },
      toDecimalPlaces: function toDecimalPlaces(value) {
        var decimalPlaces = this.decimalPlaces === void 0 ? this.digitsNum : this.decimalPlaces;
        var factor = Math.pow(10, decimalPlaces);
        return Math.round(value * factor) / factor;
      }
    },
    watch: {
      value: {
        immediate: true,
        handler: function handler(v) {
          if (v !== void 0) {
            this.isValidNumber(v);
          }
        }
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      return h("div", helper([{}, this.cmptWrapClasses]), [this.theme !== "normal" && h("t-button", helper([{}, this.reduceClasses, {}, this.reduceEvents, {
        "attrs": {
          "variant": "outline",
          "shape": "square",
          "icon": this.decreaseIcon
        }
      }])), h("t-input", helper([{}, this.inputAttrs, {}, this.inputEvents, {
        "attrs": {
          "value": this.displayValue
        },
        "on": {
          "change": function change(val, _ref4) {
            var e = _ref4.e;
            return _this2.handleInput(val, e);
          }
        }
      }])), this.theme !== "normal" && h("t-button", helper([{}, this.addClasses, {}, this.addEvents, {
        "attrs": {
          "variant": "outline",
          "shape": "square",
          "icon": this.increaseIcon
        }
      }]))]);
    }
  });

  var InputNumber = withInstall(mapProps(["value"])(_InputNumber));

  /** Used to match property names within property paths. */

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;
  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */

  function isKey(value, object) {
    if (isArray_1(value)) {
      return false;
    }

    var type = _typeof(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol_1(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  var _isKey = isKey;

  /** Error message constants. */

  var FUNC_ERROR_TEXT$1 = 'Expected a function';
  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || _MapCache)();
    return memoized;
  } // Expose `MapCache`.


  memoize.Cache = _MapCache;
  var memoize_1 = memoize;

  /** Used as the maximum memoize cache size. */

  var MAX_MEMOIZE_SIZE = 500;
  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */

  function memoizeCapped(func) {
    var result = memoize_1(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped;

  /** Used to match property names within property paths. */

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /** Used to match backslashes in property paths. */

  var reEscapeChar = /\\(\\)?/g;
  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */

  var stringToPath = _memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46
    /* . */
    ) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var _stringToPath = stringToPath;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */

  function castPath(value, object) {
    if (isArray_1(value)) {
      return value;
    }

    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }

  var _castPath = castPath;

  /** Used as references for various `Number` constants. */

  var INFINITY$2 = 1 / 0;
  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */

  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
  }

  var _toKey = toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */

  function baseGet(object, path) {
    path = _castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  var _baseGet = baseGet;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get;

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */

  function baseSet(object, path, value, customizer) {
    if (!isObject_1(object)) {
      return object;
    }

    path = _castPath(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = _toKey(path[index]),
          newValue = value;

      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject_1(objValue) ? objValue : _isIndex(path[index + 1]) ? [] : {};
        }
      }

      _assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  var _baseSet = baseSet;

  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */

  function set(object, path, value) {
    return object == null ? object : _baseSet(object, path, value);
  }

  var set_1 = set;

  var props$E = {
    closable: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function,
      "default": void 0
    },
    maxWidth: {
      type: [String, Number]
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        return ["square", "round", "mark"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "primary", "warning", "danger", "success"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "dark",
      validator: function validator(val) {
        return ["dark", "light", "outline", "light-outline"].includes(val);
      }
    },
    onClick: Function,
    onClose: Function
  };

  function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$H = "".concat(prefix, "-tag");
  var _Tag = mixins(getConfigReceiverMixins("tag")).extend({
    name: "TTag",
    props: _objectSpread$1e({}, props$E),
    computed: {
      tagClass: function tagClass() {
        var _ref;

        return ["".concat(name$H), "".concat(name$H, "--").concat(this.theme), ClASSNAMES.SIZE[this.size], "".concat(name$H, "--").concat(this.variant), this.shape !== "square" && "".concat(name$H, "--").concat(this.shape), (_ref = {}, _defineProperty$2(_ref, "".concat(name$H, "--ellipsis"), this.maxWidth), _defineProperty$2(_ref, "".concat(name$H, "--close"), this.closable), _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), this.disabled), _defineProperty$2(_ref, "".concat(name$H, "--disabled"), this.disabled), _ref)];
      },
      tagStyle: function tagStyle() {
        if (this.maxWidth) return {
          maxWidth: "".concat(this.maxWidth, "px")
        };
        return {};
      }
    },
    methods: {
      handleClose: function handleClose(e) {
        if (this.disabled) return;
        emitEvent(this, "close", {
          e: e
        });
      },
      handleClick: function handleClick(e) {
        if (this.disabled) return;
        emitEvent(this, "click", {
          e: e
        });
      },
      getCloseIcon: function getCloseIcon() {
        var _this = this;

        var h = this.$createElement;
        if (!this.closable) return null;
        var iconClassName = "".concat(prefix, "-tag__icon-close");

        if (this.global.closeIcon) {
          return this.global.closeIcon(function (component, b) {
            var tProps = _typeof(b) === "object" && "attrs" in b ? b.attrs : {};
            return _this.$createElement(component, {
              props: _objectSpread$1e({}, tProps),
              "class": iconClassName,
              nativeOn: {
                click: _this.handleClose
              }
            });
          });
        }

        return h(Close, {
          "nativeOn": {
            "click": this.handleClose
          },
          "class": iconClassName
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      var closeIcon = this.getCloseIcon();
      var tagContent = renderContent(this, "default", "content");
      var tagContentWithMaxWidth = h("span", {
        "style": this.tagStyle,
        "class": "".concat(name$H, "--text")
      }, [tagContent]);
      var icon = renderTNodeJSX(this, "icon");
      return h("span", {
        "class": this.tagClass,
        "on": {
          "click": this.handleClick
        }
      }, [icon, this.maxWidth ? tagContentWithMaxWidth : tagContent, closeIcon]);
    }
  });

  var props$D = {
    checked: Boolean,
    defaultChecked: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    onChange: Function,
    onClick: Function
  };

  function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$G = "".concat(prefix, "-tag");
  var _CheckTag = Vue__default["default"].extend({
    name: "TCheckTag",
    props: _objectSpread$1d({}, props$D),
    computed: {
      tagClass: function tagClass() {
        var _ref;

        return ["".concat(name$G), "".concat(name$G, "--check"), "".concat(name$G, "--default"), ClASSNAMES.SIZE[this.size], (_ref = {}, _defineProperty$2(_ref, "".concat(name$G, "--checked"), !this.disabled && this.checked), _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), this.disabled), _defineProperty$2(_ref, "".concat(name$G, "--disabled"), this.disabled), _ref)];
      }
    },
    methods: {
      handleClick: function handleClick(e) {
        if (!this.disabled) {
          emitEvent(this, "click", {
            e: e
          });
          emitEvent(this, "change", !this.checked);
        }
      }
    },
    render: function render() {
      var h = arguments[0];
      var tagContent = renderContent(this, "default", "content");
      return h("span", {
        "class": this.tagClass,
        "on": {
          "click": this.handleClick
        }
      }, [tagContent]);
    }
  });

  var Tag = withInstall(_Tag);
  var CheckTag = withInstall(mapProps(["checked"], {
    model: {
      prop: "checked",
      event: "change"
    }
  })(_CheckTag));

  var props$C = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    label: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */

  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new _MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  } // Add methods to `SetCache`.


  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;
  var _SetCache = SetCache;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  var _baseFindIndex = baseFindIndex;

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  var _baseIsNaN = baseIsNaN;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  var _strictIndexOf = strictIndexOf;

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseIndexOf(array, value, fromIndex) {
    return value === value ? _strictIndexOf(array, value, fromIndex) : _baseFindIndex(array, _baseIsNaN, fromIndex);
  }

  var _baseIndexOf = baseIndexOf;

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && _baseIndexOf(array, value, 0) > -1;
  }

  var _arrayIncludes = arrayIncludes;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  var _arrayIncludesWith = arrayIncludesWith;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMin = Math.min;
  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */

  function baseIntersection(arrays, iteratee, comparator) {
    var includes = comparator ? _arrayIncludesWith : _arrayIncludes,
        length = arrays[0].length,
        othLength = arrays.length,
        othIndex = othLength,
        caches = Array(othLength),
        maxLength = Infinity,
        result = [];

    while (othIndex--) {
      var array = arrays[othIndex];

      if (othIndex && iteratee) {
        array = _arrayMap(array, _baseUnary(iteratee));
      }

      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new _SetCache(othIndex && array) : undefined;
    }

    array = arrays[0];
    var index = -1,
        seen = caches[0];

    outer: while (++index < length && result.length < maxLength) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (!(seen ? _cacheHas(seen, computed) : includes(result, computed, comparator))) {
        othIndex = othLength;

        while (--othIndex) {
          var cache = caches[othIndex];

          if (!(cache ? _cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }

        if (seen) {
          seen.push(computed);
        }

        result.push(value);
      }
    }

    return result;
  }

  var _baseIntersection = baseIntersection;

  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */

  function castArrayLikeObject(value) {
    return isArrayLikeObject_1(value) ? value : [];
  }

  var _castArrayLikeObject = castArrayLikeObject;

  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */

  var intersection = _baseRest(function (arrays) {
    var mapped = _arrayMap(arrays, _castArrayLikeObject);
    return mapped.length && mapped[0] === arrays[0] ? _baseIntersection(mapped) : [];
  });
  var intersection_1 = intersection;

  var checkboxProps = {
    checkAll: Boolean,
    checked: Boolean,
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    indeterminate: Boolean,
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    readonly: Boolean,
    value: {
      type: [String, Number]
    },
    onChange: Function
  };

  function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$F = "".concat(prefix, "-checkbox");
  var _Checkbox = Vue__default["default"].extend({
    name: "TCheckbox",
    inheritAttrs: false,
    props: _objectSpread$1c({}, checkboxProps),
    inject: {
      checkboxGroup: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        formDisabled: void 0
      };
    },
    computed: {
      labelClasses: function labelClasses() {
        var _ref;

        return ["".concat(name$F), (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.checked, this.checked$), _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, this.disabled$), _defineProperty$2(_ref, ClASSNAMES.STATUS.indeterminate, this.indeterminate$), _ref)];
      },
      disabled$: function disabled$() {
        var _this$checkboxGroup, _this$checkboxGroup2;

        if (this.formDisabled) return this.formDisabled;

        if (!this.checkAll && !this.checked$ && (_this$checkboxGroup = this.checkboxGroup) !== null && _this$checkboxGroup !== void 0 && _this$checkboxGroup.maxExceeded) {
          return true;
        }

        if (this.disabled !== void 0) return this.disabled;
        return !!((_this$checkboxGroup2 = this.checkboxGroup) !== null && _this$checkboxGroup2 !== void 0 && _this$checkboxGroup2.disabled);
      },
      name$: function name$() {
        var _this$checkboxGroup3;

        return this.name || ((_this$checkboxGroup3 = this.checkboxGroup) === null || _this$checkboxGroup3 === void 0 ? void 0 : _this$checkboxGroup3.name);
      },
      checked$: function checked$() {
        var _this$checkboxGroup4;

        if (this.checkAll) return (_this$checkboxGroup4 = this.checkboxGroup) === null || _this$checkboxGroup4 === void 0 ? void 0 : _this$checkboxGroup4.isCheckAll;
        return this.checkboxGroup ? !!this.checkboxGroup.checkedMap[this.value] : this.checked;
      },
      indeterminate$: function indeterminate$() {
        var _this$checkboxGroup5;

        if (this.checkAll) return (_this$checkboxGroup5 = this.checkboxGroup) === null || _this$checkboxGroup5 === void 0 ? void 0 : _this$checkboxGroup5.indeterminate;
        return this.indeterminate;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("label", {
        "class": this.labelClasses
      }, [h("input", helper([{
        "attrs": {
          "type": "checkbox"
        }
      }, {
        "on": _objectSpread$1c({}, omit(this.$listeners, ["checked", "change"]))
      }, {
        "class": "".concat(name$F, "__former"),
        "attrs": {
          "disabled": this.disabled$,
          "readonly": this.readonly,
          "indeterminate": this.indeterminate$,
          "name": this.name$
        },
        "domProps": {
          "value": this.value,
          "checked": this.checked$
        },
        "on": {
          "change": this.handleChange
        }
      }])), h("span", {
        "class": "".concat(name$F, "__input")
      }), h("span", {
        "class": "".concat(name$F, "__label")
      }, [renderContent(this, "default", "label")])]);
    },
    methods: {
      handleChange: function handleChange(e) {
        var _this$checkboxGroup6;

        var value = !this.checked$;
        emitEvent(this, "change", value, {
          e: e
        });
        e.stopPropagation();
        this === null || this === void 0 ? void 0 : (_this$checkboxGroup6 = this.checkboxGroup) === null || _this$checkboxGroup6 === void 0 ? void 0 : _this$checkboxGroup6.$emit("checked-change", {
          checked: value,
          checkAll: this.checkAll,
          e: e,
          option: this.$props
        });
      }
    }
  });

  var checkboxGroupProps = {
    disabled: Boolean,
    max: {
      type: Number,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    value: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function
  };

  function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$E = "".concat(prefix, "-checkbox-group");
  var CheckboxGroup$1 = Vue__default["default"].extend({
    name: "TCheckboxGroup",
    components: {
      Checkbox: _Checkbox
    },
    props: _objectSpread$1b({}, checkboxGroupProps),
    data: function data() {
      return {
        checkedMap: {},
        optionList: []
      };
    },
    provide: function provide() {
      return {
        checkboxGroup: this
      };
    },
    watch: {
      values: {
        immediate: true,
        handler: function handler() {
          if (this.value instanceof Array) {
            var map = {};
            this.value.forEach(function (item) {
              map[item] = true;
            });
            this.checkedMap = map;
          }
        }
      },
      options: {
        immediate: true,
        handler: function handler() {
          var _this = this;

          if (!this.options) return [];
          this.optionList = this.options.map(function (item) {
            var r = {};

            if (_typeof(item) !== "object") {
              r = {
                label: String(item),
                value: item
              };
            } else {
              r = _objectSpread$1b({}, item);
              r.disabled = r.disabled === void 0 ? _this.disabled : r.disabled;
            }

            return r;
          });
        }
      }
    },
    computed: {
      values: function values() {
        if (this.value instanceof Array) {
          return this.value.join();
        }

        return "";
      },
      intersectionLen: function intersectionLen() {
        var values = this.optionList.map(function (item) {
          return item.value;
        });

        if (this.value instanceof Array) {
          var n = intersection_1(this.value, values);
          return n.length;
        }

        return 0;
      },
      isCheckAll: function isCheckAll() {
        if (this.value instanceof Array && this.value.length !== this.optionList.length - 1) {
          return false;
        }

        return this.intersectionLen === this.optionList.length - 1;
      },
      indeterminate: function indeterminate() {
        return !this.isCheckAll && this.intersectionLen < this.optionList.length && this.intersectionLen !== 0;
      },
      maxExceeded: function maxExceeded() {
        return this.max !== void 0 && this.value.length === this.max;
      }
    },
    mounted: function mounted() {
      var _this$options;

      if (this.$scopedSlots["default"] && (_this$options = this.options) !== null && _this$options !== void 0 && _this$options.length) {
        console.warn("TDesign CheckboxGroup Warn: both `options` and slot exist, rendered by `options`");
      }
    },
    created: function created() {
      this.$on("checked-change", this.onCheckedChange);
    },
    render: function render() {
      var _this$options2,
          _this2 = this;

      var h = arguments[0];
      var children = null;

      if ((_this$options2 = this.options) !== null && _this$options2 !== void 0 && _this$options2.length) {
        var _this$optionList;

        children = (_this$optionList = this.optionList) === null || _this$optionList === void 0 ? void 0 : _this$optionList.map(function (option, index) {
          return h(_Checkbox, helper([{
            "key": index
          }, {
            "props": option
          }, {
            "attrs": {
              "checked": _this2.checkedMap[option.value]
            }
          }]), [_this2.renderLabel(option)]);
        });
      } else {
        var nodes = this.$scopedSlots["default"] && this.$scopedSlots["default"](null);
        this.optionList = this.getOptionListBySlots(nodes);
        children = nodes;
      }

      return h("div", {
        "class": name$E,
        "on": {
          "click": function click(e) {
            return _this2.$emit("click", e);
          }
        }
      }, [children]);
    },
    methods: {
      onCheckedChange: function onCheckedChange(p) {
        var checked = p.checked,
            checkAll = p.checkAll,
            e = p.e;

        if (checkAll) {
          this.onCheckAllChange(checked, {
            e: e
          });
        } else {
          this.handleCheckboxChange(p);
        }
      },
      getOptionListBySlots: function getOptionListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var _node$componentOption;

          var option = node === null || node === void 0 ? void 0 : (_node$componentOption = node.componentOptions) === null || _node$componentOption === void 0 ? void 0 : _node$componentOption.propsData;
          option && arr.push(option);
        });
        return arr;
      },
      renderLabel: function renderLabel(option) {
        if (typeof option.label === "function") {
          return option.label(this.$createElement);
        }

        return option.label;
      },
      emitChange: function emitChange(val, context) {
        emitEvent(this, "change", val, context);
      },
      handleCheckboxChange: function handleCheckboxChange(data) {
        var currentValue = data.option.value;

        if (this.value instanceof Array) {
          var val = _toConsumableArray(this.value);

          if (data.checked) {
            val.push(currentValue);
          } else {
            var i = val.indexOf(currentValue);
            val.splice(i, 1);
          }

          this.emitChange(val, {
            e: data.e,
            current: data.option.value,
            type: data.checked ? "check" : "uncheck"
          });
        } else {
          console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof(this.value)));
        }
      },
      getAllCheckboxValue: function getAllCheckboxValue() {
        var val = /* @__PURE__ */new Set();

        for (var i = 0, len = this.optionList.length; i < len; i++) {
          var item = this.optionList[i];
          if (item.checkAll) continue;
          val.add(item.value);
          if (this.maxExceeded) break;
        }

        return _toConsumableArray(val);
      },
      onCheckAllChange: function onCheckAllChange(checked, context) {
        var value = checked ? this.getAllCheckboxValue() : [];
        this.emitChange(value, {
          e: context.e,
          type: checked ? "check" : "uncheck",
          current: void 0
        });
      }
    }
  });

  var Checkbox = withInstall(mapProps(["checked"], {
    model: {
      prop: "checked",
      event: "change"
    }
  })(_Checkbox));
  var CheckboxGroup = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(CheckboxGroup$1));

  function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$3 = getKeepAnimationMixins();
  var selectName = "".concat(prefix, "-select");
  var _Option = mixins(keepAnimationMixins$3).extend({
    name: "TOption",
    data: function data() {
      return {
        isHover: false,
        formDisabled: void 0
      };
    },
    props: _objectSpread$1a({}, props$C),
    components: {
      TCheckbox: Checkbox
    },
    directives: {
      ripple: Ripple
    },
    inject: {
      tSelect: {
        "default": void 0
      }
    },
    watch: {
      value: function value() {
        this.tSelect && this.tSelect.getOptions(this);
      },
      label: function label() {
        this.tSelect && this.tSelect.getOptions(this);
      },
      hovering: function hovering() {
        var _this = this;

        if (this.hovering) {
          var timer = setTimeout(function () {
            scrollSelectedIntoView(_this.tSelect.getOverlayElm(), _this.$el);
            clearTimeout(timer);
          }, this.tSelect.popupOpenTime);
        }
      }
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      hovering: function hovering() {
        return this.tSelect && this.tSelect.visible && this.tSelect.hoverOptions[this.tSelect.hoverIndex] && this.tSelect.hoverOptions[this.tSelect.hoverIndex][this.tSelect.realValue] === this.value;
      },
      multiLimitDisabled: function multiLimitDisabled() {
        if (this.tSelect && this.tSelect.multiple && this.tSelect.max) {
          if (this.tSelect.value instanceof Array && this.tSelect.value.indexOf(this.value) === -1 && this.tSelect.max <= this.tSelect.value.length) {
            return true;
          }
        }

        return false;
      },
      classes: function classes() {
        var _ref;

        return ["".concat(prefix, "-select-option"), (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, this.tDisabled || this.multiLimitDisabled), _defineProperty$2(_ref, ClASSNAMES.STATUS.selected, this.selected), _defineProperty$2(_ref, ClASSNAMES.SIZE[this.tSelect && this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$2(_ref, "".concat(prefix, "-select-option__hover"), this.hovering), _ref)];
      },
      isCreatedOption: function isCreatedOption() {
        return this.tSelect.creatable && this.value === this.tSelect.searchInput;
      },
      show: function show() {
        var _this2 = this;

        if (!this.tSelect) return false;
        if (this.isCreatedOption) return true;

        if (this.tSelect.canFilter && this.tSelect.searchInput !== "") {
          return this.tSelect.filterOptions.some(function (option) {
            return get_1(option, _this2.tSelect.realValue) === _this2.value;
          });
        }

        return true;
      },
      labelText: function labelText() {
        return this.label || this.value;
      },
      selected: function selected() {
        var _this3 = this;

        var flag = false;
        if (!this.tSelect) return false;

        if (this.tSelect.value instanceof Array) {
          if (this.tSelect.labelInValue) {
            flag = this.tSelect.value.map(function (item) {
              return get_1(item, _this3.tSelect.realValue);
            }).indexOf(this.value) !== -1;
          } else {
            flag = this.tSelect.value.indexOf(this.value) !== -1;
          }
        } else if (_typeof(this.tSelect.value) === "object") {
          flag = get_1(this.tSelect.value, this.tSelect.realValue) === this.value;
        } else {
          flag = this.tSelect.value === this.value;
        }

        return flag;
      }
    },
    methods: {
      select: function select(e) {
        e.stopPropagation();

        if (this.tDisabled || this.multiLimitDisabled) {
          return false;
        }

        var parent = this.$el.parentNode;

        if (parent && parent.className.indexOf("".concat(selectName, "__create-option")) !== -1) {
          this.tSelect && this.tSelect.createOption(this.value.toString());
        }

        this.tSelect && this.tSelect.onOptionClick(this.value, e);
      },
      mouseEvent: function mouseEvent(v) {
        this.isHover = v;
      }
    },
    mounted: function mounted() {
      this.tSelect && this.tSelect.getOptions(this);
    },
    beforeDestroy: function beforeDestroy() {
      this.tSelect && this.tSelect.hasSlotOptions && this.tSelect.destroyOptions(this);
    },
    render: function render() {
      var h = arguments[0];
      var classes = this.classes,
          labelText = this.labelText,
          selected = this.selected,
          disabled = this.disabled,
          multiLimitDisabled = this.multiLimitDisabled,
          show = this.show;
      var children = renderContent(this, "default", "content");
      var optionChild = children || labelText;
      return h("li", {
        "directives": [{
          name: "show",
          value: show
        }, {
          name: "ripple",
          value: this.keepAnimation.ripple
        }],
        "class": classes,
        "attrs": {
          "title": labelText
        },
        "on": {
          "mouseenter": this.mouseEvent.bind(true),
          "mouseleave": this.mouseEvent.bind(false),
          "click": this.select
        }
      }, [this.tSelect && this.tSelect.multiple ? h("t-checkbox", {
        "attrs": {
          "checked": selected,
          "disabled": disabled || multiLimitDisabled
        },
        "nativeOn": {
          "click": function click(e) {
            e.preventDefault();
          }
        }
      }, [optionChild]) : h("span", [optionChild])]);
    }
  });

  var props$B = {
    bordered: {
      type: Boolean,
      "default": true
    },
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    creatable: Boolean,
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    keys: {
      type: Object
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    reserveKeyword: Boolean,
    showArrow: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Object, Array]
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: Function
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCreate: Function,
    onEnter: Function,
    onFocus: Function,
    onRemove: Function,
    onSearch: Function,
    onVisibleChange: Function
  };

  function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$D = "".concat(prefix, "-select");
  var listName = "".concat(name$D, "__list");
  var DEFAULT_MAX_OVERLAY_WIDTH = 500;
  var DEFAULT_SCROLLY_WIDTH = 8;
  var _Select = mixins(getConfigReceiverMixins("select")).extend({
    name: "TSelect",
    model: {
      prop: "value",
      event: "change"
    },
    props: _objectSpread$19({}, props$B),
    data: function data() {
      return {
        formDisabled: void 0,
        isHover: false,
        visible: false,
        searchInput: "",
        showCreateOption: false,
        hasSlotOptions: false,
        defaultProps: {
          trigger: "click",
          placement: "bottom-left",
          overlayClassName: "",
          overlayStyle: {}
        },
        focusing: false,
        labelInValue: this.valueType === "object",
        realValue: this.keys && this.keys.value ? this.keys.value : "value",
        realLabel: this.keys && this.keys.label ? this.keys.label : "label",
        realOptions: [],
        hoverIndex: -1,
        popupOpenTime: 250,
        checkScroll: true,
        isInited: false
      };
    },
    components: {
      CloseCircleFilledIcon: CloseCircleFilled,
      TInput: Input,
      TLoading: Loading,
      Tag: Tag,
      Popup: Popup,
      TOption: _Option,
      FakeArrow: FakeArrow
    },
    provide: function provide() {
      return {
        tSelect: this
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        return ["".concat(name$D), "".concat(prefix, "-select-polyfill"), (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty$2(_ref, ClASSNAMES.STATUS.active, this.visible), _defineProperty$2(_ref, ClASSNAMES.SIZE[this.size], this.size), _defineProperty$2(_ref, "".concat(prefix, "-has-prefix"), this.$scopedSlots.prefixIcon), _defineProperty$2(_ref, "".concat(prefix, "-no-border"), !this.bordered), _ref)];
      },
      popClass: function popClass() {
        var popupObject = this.popupObject;
        return "".concat(popupObject.overlayClassName, " ").concat(name$D, "__dropdown narrow-scrollbar");
      },
      tipsClass: function tipsClass() {
        return ["".concat(name$D, "__loading-tips"), _defineProperty$2({}, ClASSNAMES.SIZE[this.size], this.size)];
      },
      emptyClass: function emptyClass() {
        return ["".concat(name$D, "__empty"), _defineProperty$2({}, ClASSNAMES.SIZE[this.size], this.size)];
      },
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      showPlaceholder: function showPlaceholder() {
        if (!this.showFilter && (!this.multiple && !this.selectedSingle || !this.multiple && _typeof(this.value) === "object" && !this.selectedSingle || this.multiple && !this.selectedMultiple.length || this.value === null || this.value === void 0)) {
          return true;
        }

        return false;
      },
      isGroupOption: function isGroupOption() {
        var _this$options;

        var firstOption = (_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options[0];
        return !!(firstOption && "group" in firstOption && "children" in firstOption);
      },
      filterPlaceholder: function filterPlaceholder() {
        if (this.multiple && Array.isArray(this.value) && this.value.length) {
          return "";
        }

        if (!this.multiple && this.selectedSingle) {
          return this.selectedSingle;
        }

        return this.placeholder;
      },
      showClose: function showClose() {
        return Boolean(this.clearable && this.isHover && !this.tDisabled && (!this.multiple && (this.value || this.value === 0) || this.multiple && Array.isArray(this.value) && this.value.length));
      },
      showRightArrow: function showRightArrow() {
        if (!this.showArrow) return false;
        return !this.clearable || !this.isHover || this.tDisabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && (!Array.isArray(this.value) || Array.isArray(this.value) && !this.value.length);
      },
      canFilter: function canFilter() {
        return this.filterable || isFunction_1(this.filter);
      },
      showLoading: function showLoading() {
        return this.loading && !this.tDisabled;
      },
      showFilter: function showFilter() {
        if (this.tDisabled) return false;

        if (!this.multiple && this.selectedSingle && this.canFilter) {
          return this.visible;
        }

        return this.canFilter;
      },
      selectedSingle: function selectedSingle() {
        var _this = this;

        if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
          var target = [];

          if (this.realOptions && this.realOptions.length) {
            target = this.realOptions.filter(function (item) {
              return get_1(item, _this.realValue) === _this.value;
            });
          }

          if (target.length) {
            if (get_1(target[target.length - 1], this.realLabel) === "") {
              return get_1(target[target.length - 1], this.realValue);
            }

            return get_1(target[target.length - 1], this.realLabel);
          }

          return this.value.toString();
        }

        var showText = get_1(this.value, this.realLabel);

        if (!this.multiple && _typeof(this.value) === "object" && showText !== void 0) {
          return showText === "" ? get_1(this.value, this.realValue) : showText;
        }

        return "";
      },
      selectedMultiple: function selectedMultiple() {
        var _this2 = this;

        if (this.multiple && Array.isArray(this.value) && this.value.length) {
          return this.value.map(function (item) {
            if (_typeof(item) === "object") {
              return item;
            }

            var tmp = _this2.realOptions.filter(function (op) {
              return get_1(op, _this2.realValue) === item;
            });

            var valueLabel = {};
            set_1(valueLabel, _this2.realValue, item);
            set_1(valueLabel, _this2.realLabel, tmp.length ? get_1(tmp[tmp.length - 1], _this2.realLabel) : item);
            return tmp.length && tmp[tmp.length - 1].disabled ? _objectSpread$19(_objectSpread$19({}, valueLabel), {}, {
              disabled: true
            }) : valueLabel;
          });
        }

        return [];
      },
      popupObject: function popupObject() {
        var propsObject = this.popupProps ? _objectSpread$19(_objectSpread$19({}, this.defaultProps), this.popupProps) : this.defaultProps;
        return propsObject;
      },
      filterOptions: function filterOptions() {
        var _this3 = this;

        if (isFunction_1(this.filter)) {
          return this.realOptions.filter(function (option) {
            return _this3.filter(_this3.searchInput, option);
          });
        }

        if (this.filterable) {
          return this.realOptions.filter(function (option) {
            return option[_this3.realLabel].toString().toLowerCase().indexOf(_this3.searchInput.toString().toLowerCase()) !== -1;
          });
        }

        return [];
      },
      displayOptions: function displayOptions() {
        if (isFunction_1(this.onSearch) || this.$listeners.search) {
          return this.realOptions;
        }

        if (this.canFilter && !this.creatable) {
          if (this.searchInput === "") {
            return this.realOptions;
          }

          return this.filterOptions;
        }

        return this.realOptions;
      },
      displayOptionsMap: function displayOptionsMap() {
        var map = /* @__PURE__ */new Map();
        this.displayOptions.forEach(function (item) {
          map.set(item, true);
        });
        return map;
      },
      hoverOptions: function hoverOptions() {
        if (!this.showCreateOption) {
          if (isFunction_1(this.filter) || this.filterable) {
            return this.filterOptions;
          }

          return this.realOptions;
        }

        var willCreateOption = [{
          value: this.searchInput,
          label: this.searchInput
        }];

        if (isFunction_1(this.filter) || this.filterable) {
          return willCreateOption.concat(this.filterOptions);
        }

        return willCreateOption.concat(this.realOptions);
      }
    },
    watch: {
      showFilter: function showFilter(val) {
        var _this4 = this;

        if (val && this.selectedSingle) {
          this.$nextTick(function () {
            _this4.doFocus();
          });
        }
      },
      searchInput: function searchInput(val) {
        var _this5 = this;

        if (!val && !this.visible) return;

        if (isFunction_1(this.onSearch) || this.$listeners.search) {
          this.debounceOnRemote();
        }

        if (this.canFilter && val && this.creatable) {
          var tmp = this.realOptions.filter(function (item) {
            return get_1(item, _this5.realLabel).toString() === val;
          });
          this.showCreateOption = !tmp.length;
        } else {
          this.showCreateOption = false;
        }
      },
      options: {
        immediate: true,
        handler: function handler(options) {
          if (Array.isArray(options)) {
            this.realOptions = this.getRealOptions(options);
          } else {
            console.error("TDesign Select: options must be an array.");
          }
        }
      },
      visible: function visible() {
        this.visible && document.addEventListener("keydown", this.keydownEvent);
        !this.visible && document.removeEventListener("keydown", this.keydownEvent);
        !this.visible && (this.showCreateOption = false);
      }
    },
    methods: {
      getRealOptions: function getRealOptions(options) {
        var result = [];

        if (this.isGroupOption) {
          var arr = [];
          options.forEach(function (item) {
            if ("children" in item) {
              arr = arr.concat(item.children);
            }
          });
          result = arr;
        } else {
          result = _toConsumableArray(options);
        }

        return result.map(function (item) {
          if (_typeof(item) !== "object") return {
            label: item,
            value: item
          };
          return item;
        });
      },
      multiLimitDisabled: function multiLimitDisabled(value) {
        if (this.multiple && this.max) {
          if (Array.isArray(this.value) && this.value.indexOf(value) === -1 && this.max <= this.value.length) {
            return true;
          }
        }

        return false;
      },
      visibleChange: function visibleChange(val) {
        emitEvent(this, "visible-change", val);
        this.visible = val;

        if (!val) {
          this.searchInput = "";
        }

        val && this.monitorWidth();
        val && this.canFilter && this.doFocus();
      },
      onOptionClick: function onOptionClick(value, e) {
        var _this6 = this;

        if (this.value !== value) {
          if (this.multiple) {
            var tempValue = Array.isArray(this.value) ? [].concat(this.value) : [];

            if (this.labelInValue) {
              var index = tempValue.map(function (item) {
                return get_1(item, _this6.realValue);
              }).indexOf(value);

              if (index > -1) {
                this.removeTag(index, {
                  e: e
                });
              } else {
                tempValue.push(this.realOptions.filter(function (item) {
                  return get_1(item, _this6.realValue) === value;
                })[0]);
                this.emitChange(tempValue);
              }
            } else {
              var _index = tempValue.indexOf(value);

              if (_index > -1) {
                this.removeTag(_index, {
                  e: e
                });
              } else {
                tempValue.push(value);
                this.emitChange(tempValue);
              }
            }
          } else {
            this.emitChange(value);
          }
        }

        if (!this.multiple) {
          this.searchInput = "";
          this.hideMenu();
        } else {
          if (!this.reserveKeyword) {
            this.searchInput = "";
          }

          this.canFilter && this.doFocus();
        }
      },
      removeTag: function removeTag(index, context) {
        var _this7 = this;

        var _ref4 = context || {},
            e = _ref4.e;

        e === null || e === void 0 ? void 0 : e.stopPropagation();

        if (this.tDisabled) {
          return;
        }

        var val = this.value[index];
        var removeOption = this.realOptions.filter(function (item) {
          return get_1(item, _this7.realValue) === val;
        });
        var tempValue = Array.isArray(this.value) ? [].concat(this.value) : [];
        tempValue.splice(index, 1);
        this.emitChange(tempValue);
        emitEvent(this, "remove", {
          value: val,
          data: removeOption[0],
          e: e
        });
      },
      hideMenu: function hideMenu() {
        this.visible = false;
        emitEvent(this, "visible-change", false);
      },
      clearSelect: function clearSelect(e) {
        e === null || e === void 0 ? void 0 : e.stopPropagation();

        if (this.multiple) {
          this.emitChange([]);
        } else {
          this.emitChange("");
        }

        this.focusing = false;
        this.searchInput = "";
        this.visible = false;
        emitEvent(this, "clear", {
          e: e
        });
      },
      getOptions: function getOptions(option) {
        var _this8 = this;

        if (option.$el && option.$el.className && option.$el.className.indexOf("".concat(name$D, "__create-option--special")) !== -1) return;
        var tmp = this.realOptions.filter(function (item) {
          return get_1(item, _this8.realValue) === option.value && get_1(item, _this8.realLabel) === option.label;
        });

        if (!tmp.length) {
          this.hasSlotOptions = true;
          var valueLabel = {};
          set_1(valueLabel, this.realValue, option.value);
          set_1(valueLabel, this.realLabel, option.label);
          var valueLabelAble = option.disabled ? _objectSpread$19(_objectSpread$19({}, valueLabel), {}, {
            disabled: true
          }) : valueLabel;
          this.realOptions.push(valueLabelAble);
        }
      },
      destroyOptions: function destroyOptions(option) {
        var _this9 = this;

        this.realOptions.forEach(function (item, index) {
          if (item[_this9.realValue] === option.value && item[_this9.realLabel] === option.label) {
            _this9.realOptions.splice(index, 1);
          }
        });
      },
      emitChange: function emitChange(val) {
        var _this10 = this;

        var value;

        if (this.labelInValue) {
          if (Array.isArray(val)) {
            if (!val.length) {
              value = [];
            } else {
              value = val;
            }
          } else {
            var target = this.realOptions.filter(function (item) {
              return get_1(item, _this10.realValue) === val;
            });
            value = target.length ? target[0] : "";
          }
        } else {
          value = val;
        }

        emitEvent(this, "change", value);
      },
      createOption: function createOption(value) {
        emitEvent(this, "create", value);
      },
      debounceOnRemote: debounce_1(function () {
        emitEvent(this, "search", this.searchInput);
      }, 300),
      focus: function focus(value, context) {
        this.focusing = true;
        emitEvent(this, "focus", {
          value: this.value,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      },
      blur: function blur(value, context) {
        this.focusing = false;
        emitEvent(this, "blur", {
          value: this.value,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      },
      enter: function enter(value, context) {
        emitEvent(this, "enter", {
          inputValue: this.searchInput,
          value: this.value,
          e: context === null || context === void 0 ? void 0 : context.e
        });
      },
      keydownEvent: function keydownEvent(e) {
        if (!this.hoverOptions.length) return;
        var preventKeys = ["ArrowDown", "ArrowUp", "Enter", "Escape", "Tab"];

        if (preventKeys.includes(e.code)) {
          e.preventDefault();
        }

        switch (e.code) {
          case "ArrowDown":
            if (this.hoverIndex === -1) {
              this.initHoverindex();
              return;
            }

            if (this.hoverIndex < this.hoverOptions.length - 1) {
              this.hoverIndex += 1;
              this.arrowDownOption();
            } else {
              this.hoverIndex = 0;
              this.arrowDownOption();
            }

            break;

          case "ArrowUp":
            if (this.hoverIndex === -1) {
              this.initHoverindex();
              return;
            }

            if (this.hoverIndex > 0) {
              this.hoverIndex -= 1;
              this.arrowUpOption();
            } else {
              this.hoverIndex = this.hoverOptions.length - 1;
              this.arrowUpOption();
            }

            break;

          case "Enter":
            if (this.hoverIndex === -1) return;

            if (this.showCreateOption && this.hoverIndex === 0) {
              this.createOption(this.searchInput);
            }

            this.hoverOptions[this.hoverIndex] && this.onOptionClick(this.hoverOptions[this.hoverIndex][this.realValue], e);
            break;

          case "Escape":
          case "Tab":
            this.visible = false;
            emitEvent(this, "visible-change", false);
            this.searchInput = "";

            if (this.focusing) {
              this.blur(this.searchInput, {
                e: e
              });
            }

            break;
        }
      },
      arrowDownOption: function arrowDownOption() {
        var count = 0;

        while (this.hoverIndex < this.hoverOptions.length) {
          if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
            break;
          }

          if (this.hoverIndex === this.hoverOptions.length - 1) {
            this.hoverIndex = 0;
          } else {
            this.hoverIndex += 1;
          }

          count += 1;
          if (count >= this.hoverOptions.length) break;
        }
      },
      arrowUpOption: function arrowUpOption() {
        var count = 0;

        while (this.hoverIndex > -1) {
          if (!this.hoverOptions[this.hoverIndex] || !this.hoverOptions[this.hoverIndex].disabled) {
            break;
          }

          if (this.hoverIndex === 0) {
            this.hoverIndex = this.hoverOptions.length - 1;
          } else {
            this.hoverIndex -= 1;
          }

          count += 1;
          if (count >= this.hoverOptions.length) break;
        }
      },
      hoverEvent: function hoverEvent(v) {
        this.isHover = v;
      },
      getOverlayElm: function getOverlayElm() {
        var r;

        try {
          r = this.$refs.popup.$refs.overlay || this.$refs.popup.$refs.component.$refs.overlay;
        } catch (e) {
          console.warn("TDesign Warn:", e);
        }

        return r;
      },
      monitorWidth: function monitorWidth() {
        var _this11 = this;

        this.$nextTick(function () {
          var styles = _this11.popupProps && _this11.popupProps.overlayStyle || {};

          if (_this11.popupProps && isFunction_1(_this11.popupProps.overlayStyle)) {
            styles = _this11.popupProps.overlayStyle(_this11.$refs.select, _this11.$refs.content) || {};
          }

          if (_typeof(styles) === "object" && !styles.width) {
            var elWidth = _this11.$refs.select.getBoundingClientRect().width;

            var popupWidth = _this11.getOverlayElm().getBoundingClientRect().width;

            var width = elWidth > DEFAULT_MAX_OVERLAY_WIDTH ? elWidth : Math.min(DEFAULT_MAX_OVERLAY_WIDTH, Math.max(elWidth, popupWidth));
            Vue__default["default"].set(_this11.defaultProps, "overlayStyle", {
              width: "".concat(Math.ceil(width), "px")
            });

            if (_this11.checkScroll) {
              var timer = setTimeout(function () {
                var _this11$getOverlayElm = _this11.getOverlayElm(),
                    scrollHeight = _this11$getOverlayElm.scrollHeight,
                    clientHeight = _this11$getOverlayElm.clientHeight;

                if (scrollHeight > clientHeight) {
                  Vue__default["default"].set(_this11.defaultProps, "overlayStyle", {
                    width: "".concat(Math.ceil(width) + DEFAULT_SCROLLY_WIDTH, "px")
                  });
                }

                _this11.checkScroll = false;
                clearTimeout(timer);
              }, _this11.popupOpenTime);
            }
          }
        });
      },
      getEmpty: function getEmpty() {
        var useLocale = !this.empty && !this.$scopedSlots.empty;
        return useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty");
      },
      getLoadingText: function getLoadingText() {
        var useLocale = !this.loadingText && !this.$scopedSlots.loadingText;
        return useLocale ? this.t(this.global.loadingText) : renderTNodeJSX(this, "loadingText");
      },
      getPlaceholderText: function getPlaceholderText() {
        return this.placeholder || this.t(this.global.placeholder);
      },
      getCloseIcon: function getCloseIcon() {
        var h = this.$createElement;
        var closeIconClass = ["".concat(name$D, "__right-icon"), "".concat(name$D, "__right-icon-clear"), "".concat(name$D, "__right-icon-polyfill")];

        if (isFunction_1(this.global.clearIcon)) {
          return h("span", {
            "class": closeIconClass,
            "on": {
              "click": this.clearSelect
            }
          }, [this.global.clearIcon(this.$createElement)]);
        }

        return h(CloseCircleFilled, {
          "class": closeIconClass,
          "attrs": {
            "size": this.size
          },
          "nativeOn": {
            "click": this.clearSelect
          }
        });
      },
      doFocus: function doFocus() {
        var input = this.$refs.input;
        input === null || input === void 0 ? void 0 : input.focus();
        this.focusing = true;
      },
      renderGroupOptions: function renderGroupOptions(options) {
        var _this12 = this;

        var h = this.$createElement;
        return h("ul", {
          "class": listName
        }, [options.map(function (groupList) {
          var children = groupList.children.filter(function (item) {
            return _this12.displayOptionsMap.get(item);
          });
          return h("t-option-group", {
            "directives": [{
              name: "show",
              value: children.length
            }],
            "attrs": {
              "label": groupList.group,
              "divider": groupList.divider
            }
          }, [_this12.renderOptions(children)]);
        })]);
      },
      renderOptions: function renderOptions(options) {
        var _this13 = this;

        var h = this.$createElement;
        return h("ul", {
          "class": listName
        }, [options.map(function (item, index) {
          return h("t-option", {
            "attrs": {
              "value": get_1(item, _this13.realValue),
              "label": get_1(item, _this13.realLabel),
              "content": item.content,
              "disabled": item.disabled || _this13.multiLimitDisabled(get_1(item, _this13.realValue))
            },
            "key": index
          });
        })]);
      },
      renderDataWithOptions: function renderDataWithOptions() {
        return this.isGroupOption ? this.renderGroupOptions(this.options) : this.renderOptions(this.displayOptions);
      },
      initHoverindex: function initHoverindex() {
        var _this14 = this;

        var ableOptionIndex = Object.keys(this.hoverOptions).filter(function (i) {
          return !_this14.hoverOptions[i].disabled;
        });
        var ableIndex = ableOptionIndex.length ? ableOptionIndex[0] : "0";

        if (!this.multiple && (typeof this.value === "string" || typeof this.value === "number")) {
          var targetIndex = Object.keys(this.hoverOptions).filter(function (i) {
            return get_1(_this14.hoverOptions[i], _this14.realValue) === _this14.value;
          });
          this.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : parseInt(ableIndex, 10);
        } else if (this.multiple) {
          this.hoverIndex = parseInt(ableIndex, 10);
          Array.isArray(this.value) && this.value.some(function (item) {
            var targetIndex = Object.keys(_this14.hoverOptions).filter(function (i) {
              return _typeof(item) === "object" && get_1(_this14.hoverOptions[i], _this14.realValue) === get_1(item, _this14.realValue) || get_1(_this14.hoverOptions[i], _this14.realValue) === item;
            });
            _this14.hoverIndex = targetIndex.length ? parseInt(targetIndex[targetIndex.length - 1], 10) : parseInt(ableIndex, 10);
            return _this14.hoverIndex !== -1;
          });
        }
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        var loading = this.loading,
            showCreateOption = this.showCreateOption,
            displayOptions = this.displayOptions;
        var children = renderTNodeJSX(this, "default");
        var emptySlot = this.getEmpty();
        var loadingTextSlot = this.getLoadingText();
        return h("div", {
          "slot": "content",
          "class": "".concat(name$D, "__dropdown-inner")
        }, [renderTNodeJSX(this, "panelTopContent"), h("ul", {
          "directives": [{
            name: "show",
            value: showCreateOption
          }],
          "class": ["".concat(name$D, "__create-option"), listName]
        }, [h("t-option", {
          "attrs": {
            "value": this.searchInput,
            "label": this.searchInput
          },
          "class": "".concat(name$D, "__create-option--special")
        })]), loading && h("div", {
          "class": this.tipsClass
        }, [loadingTextSlot]), !loading && !displayOptions.length && !showCreateOption && h("div", {
          "class": this.emptyClass
        }, [emptySlot]), !this.hasSlotOptions && displayOptions.length && !loading ? this.renderDataWithOptions() : h("ul", {
          "directives": [{
            name: "show",
            value: !loading && displayOptions.length
          }],
          "class": ["".concat(prefix, "-select__groups"), listName]
        }, [children]), renderTNodeJSX(this, "panelBottomContent")]);
      },
      initOptions: function initOptions() {
        if (this.realOptions.length || this.isInited) return;
        var children = renderTNodeJSX(this, "default");

        if (children) {
          this.realOptions = parseOptions(children);
          this.isInited = true;
          this.hasSlotOptions = true;
        }

        function parseOptions(vnodes) {
          if (!vnodes) return [];
          return vnodes.reduce(function (options, vnode) {
            var componentOptions = vnode.componentOptions;

            if ((componentOptions === null || componentOptions === void 0 ? void 0 : componentOptions.tag) === "t-option") {
              var propsData = componentOptions.propsData;
              return options.concat({
                label: propsData.label,
                value: propsData.value,
                disabled: propsData.disabled,
                content: componentOptions.children ? function () {
                  return componentOptions.children;
                } : propsData.content,
                "default": propsData["default"]
              });
            }

            if ((componentOptions === null || componentOptions === void 0 ? void 0 : componentOptions.tag) === "t-option-group") {
              return options.concat(parseOptions(componentOptions.children));
            }

            return options;
          }, []);
        }
      }
    },
    mounted: function mounted() {
      this.initOptions();
    },
    updated: function updated() {
      this.initOptions();
    },
    render: function render() {
      var _this15 = this;

      var h = arguments[0];
      var classes = this.classes,
          popupObject = this.popupObject,
          tDisabled = this.tDisabled,
          popClass = this.popClass,
          size = this.size,
          showPlaceholder = this.showPlaceholder,
          selectedMultiple = this.selectedMultiple,
          multiple = this.multiple,
          showFilter = this.showFilter,
          selectedSingle = this.selectedSingle,
          filterPlaceholder = this.filterPlaceholder,
          realLabel = this.realLabel;
      var prefixIconSlot = renderTNodeJSX(this, "prefixIcon");
      var placeholderText = this.getPlaceholderText();
      return h("div", {
        "ref": "select",
        "class": "".concat(name$D, "__wrap")
      }, [h(Popup, helper([{
        "ref": "popup",
        "attrs": {
          "visible": this.visible,
          "disabled": tDisabled
        },
        "class": "".concat(name$D, "__popup-reference")
      }, {
        "on": {
          "visible-change": this.visibleChange
        }
      }, {
        "attrs": {
          "expandAnimation": true
        },
        "props": _objectSpread$19({}, _objectSpread$19(_objectSpread$19({}, popupObject), {}, {
          overlayClassName: popClass
        }))
      }]), [h("div", {
        "class": classes,
        "on": {
          "mouseenter": this.hoverEvent.bind(null, true),
          "mouseleave": this.hoverEvent.bind(null, false)
        }
      }, [prefixIconSlot && h("span", {
        "class": "".concat(name$D, "__left-icon")
      }, [prefixIconSlot[0]]), showPlaceholder && h("span", {
        "class": "".concat(name$D, "__placeholder")
      }, [" ", placeholderText]), this.valueDisplay || this.$scopedSlots.valueDisplay ? renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: selectedMultiple,
          onClose: function onClose(index) {
            return _this15.removeTag(index);
          }
        }
      }) : selectedMultiple.map(function (item, index) {
        return h("tag", {
          "directives": [{
            name: "show",
            value: _this15.minCollapsedNum <= 0 || index < _this15.minCollapsedNum
          }],
          "key": index,
          "attrs": {
            "size": size,
            "closable": !item.disabled && !tDisabled,
            "disabled": tDisabled,
            "maxWidth": "100%",
            "title": get_1(item, realLabel)
          },
          "style": "max-width: 100%;",
          "on": {
            "close": _this15.removeTag.bind(null, index)
          }
        }, [get_1(item, realLabel)]);
      }), this.collapsedItems || this.$scopedSlots.collapsedItems ? renderTNodeJSX(this, "collapsedItems", {
        params: {
          value: selectedMultiple,
          collapsedSelectedItems: selectedMultiple.slice(this.minCollapsedNum),
          count: selectedMultiple.length - this.minCollapsedNum
        }
      }) : h("tag", {
        "directives": [{
          name: "show",
          value: this.minCollapsedNum > 0 && selectedMultiple.length > this.minCollapsedNum
        }],
        "attrs": {
          "size": size
        }
      }, ["+".concat(selectedMultiple.length - this.minCollapsedNum)]), !multiple && !showPlaceholder && !showFilter && h("span", {
        "attrs": {
          "title": selectedSingle
        },
        "class": "".concat(name$D, "__single")
      }, [selectedSingle]), showFilter && h("t-input", {
        "ref": "input",
        "attrs": {
          "size": size,
          "placeholder": filterPlaceholder,
          "disabled": tDisabled,
          "readonly": !this.visible || !this.showFilter
        },
        "class": "".concat(name$D, "__input"),
        "on": {
          "focus": this.focus,
          "blur": this.blur,
          "enter": this.enter
        },
        "model": {
          value: _this15.searchInput,
          callback: function callback($$v) {
            _this15.searchInput = $$v;
          }
        }
      }), this.showRightArrow && !this.showLoading && h("fake-arrow", {
        "attrs": {
          "overlayClassName": "".concat(name$D, "__right-icon ").concat(name$D, "__right-icon-polyfill"),
          "isActive": this.visible && !this.tDisabled
        }
      }), this.showClose && !this.showLoading && this.getCloseIcon(), this.showLoading && h("t-loading", {
        "class": "".concat(name$D, "__right-icon ").concat(name$D, "__active-icon ").concat(name$D, "__right-icon-polyfill"),
        "attrs": {
          "size": "small"
        }
      })]), this.renderContent()])]);
    }
  });

  var props$A = {
    divider: {
      type: Boolean,
      "default": true
    },
    label: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$C = "".concat(prefix, "-select-option-group");
  var _OptionGroup = Vue__default["default"].extend({
    name: "TOptionGroup",
    props: _objectSpread$18({}, props$A),
    inject: {
      tSelect: {
        "default": void 0
      }
    },
    computed: {
      classes: function classes() {
        var _ref;

        return [name$C, (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.SIZE[this.tSelect.size], this.tSelect && this.tSelect.size), _defineProperty$2(_ref, "".concat(name$C, "__divider"), this.divider), _ref)];
      }
    },
    watch: {
      "tSelect.displayOptions": function tSelectDisplayOptions() {
        this.childrenChange();
      }
    },
    data: function data() {
      return {
        visible: true
      };
    },
    methods: {
      childrenChange: function childrenChange() {
        this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function (option) {
          return option.show === true;
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      var children = renderTNodeJSX(this, "default");
      return h("li", {
        "directives": [{
          name: "show",
          value: this.visible
        }],
        "class": this.classes
      }, [h("div", {
        "class": "".concat(name$C, "__header")
      }, [this.label]), h("ul", [children])]);
    }
  });

  var Select = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Select));
  var Option = withInstall(_Option);
  var OptionGroup = withInstall(_OptionGroup);

  var props$z = {
    current: {
      type: Number,
      "default": 1
    },
    defaultCurrent: {
      type: Number,
      "default": 1
    },
    disabled: Boolean,
    foldedMaxPageBtn: {
      type: Number,
      "default": 5
    },
    maxPageBtn: {
      type: Number,
      "default": 10
    },
    pageSize: {
      type: Number,
      "default": 10
    },
    defaultPageSize: {
      type: Number,
      "default": 10
    },
    pageSizeOptions: {
      type: Array,
      "default": function _default() {
        return [5, 10, 20, 50];
      }
    },
    showJumper: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "simple"].includes(val);
      }
    },
    total: {
      type: Number,
      "default": 0
    },
    totalContent: {
      type: [Boolean, Function],
      "default": true
    },
    onChange: Function,
    onCurrentChange: Function,
    onPageSizeChange: Function
  };

  function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$B = "".concat(prefix, "-pagination");
  var min = 1;
  var PaginationBase = mixins(getConfigReceiverMixins("pagination")).extend({
    name: "TPagination",
    components: {
      ChevronLeftIcon: ChevronLeft,
      ChevronRightIcon: ChevronRight,
      ChevronRightDoubleIcon: ChevronRightDouble,
      ChevronLeftDoubleIcon: ChevronLeftDouble,
      EllipsisIcon: Ellipsis,
      TInputNumber: InputNumber,
      TSelect: Select,
      TOption: Option
    },
    props: _objectSpread$17(_objectSpread$17({}, props$z), {}, {
      current: {
        type: Number,
        "default": 1,
        validator: function validator(v) {
          return v > 0;
        }
      },
      pageSize: {
        type: Number,
        "default": 10,
        validator: function validator(v) {
          return v > 0;
        }
      }
    }),
    data: function data() {
      return {
        prevMore: false,
        nextMore: false,
        jumpIndex: this.current
      };
    },
    watch: {
      current: function current(val) {
        this.jumpIndex = val;
      }
    },
    computed: {
      paginationClass: function paginationClass() {
        return ["".concat(name$B), ClASSNAMES.SIZE[this.size], _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.disabled)];
      },
      totalClass: function totalClass() {
        return ["".concat(name$B, "__total")];
      },
      sizerClass: function sizerClass() {
        return ["".concat(name$B, "__select")];
      },
      preBtnClass: function preBtnClass() {
        return ["".concat(name$B, "__btn"), "".concat(name$B, "__btn-prev"), _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.disabled || this.current === 1)];
      },
      nextBtnClass: function nextBtnClass() {
        return ["".concat(name$B, "__btn"), "".concat(name$B, "__btn-next"), _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.disabled || this.current === this.pageCount)];
      },
      btnWrapClass: function btnWrapClass() {
        return ["".concat(name$B, "__pager")];
      },
      btnMoreClass: function btnMoreClass() {
        return ["".concat(name$B, "__number"), "".concat(name$B, "__number--more"), _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.disabled)];
      },
      jumperClass: function jumperClass() {
        return ["".concat(name$B, "__jump")];
      },
      jumperInputClass: function jumperInputClass() {
        return ["".concat(name$B, "__input")];
      },
      simpleClass: function simpleClass() {
        return ["".concat(name$B, "__select")];
      },
      isSimple: function isSimple() {
        return this.theme === "simple";
      },
      pageCount: function pageCount() {
        var c = Math.ceil(this.total / this.pageSize);
        return c > 0 ? c : 1;
      },
      pageCountOption: function pageCountOption() {
        var ans = [];

        for (var i = 1; i <= this.pageCount; i++) {
          ans.push({
            value: i,
            label: "".concat(i, "/").concat(this.pageCount)
          });
        }

        return ans;
      },
      sizeOptions: function sizeOptions() {
        var _this = this;

        var options = this.pageSizeOptions.map(function (option) {
          return _typeof(option) === "object" ? option : {
            label: _this.t(_this.global.itemsPerPage, {
              size: option
            }),
            value: Number(option)
          };
        });
        return options.sort(function (a, b) {
          return a.value - b.value;
        });
      },
      curPageLeftCount: function curPageLeftCount() {
        return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
      },
      curPageRightCount: function curPageRightCount() {
        return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
      },
      isPrevMoreShow: function isPrevMoreShow() {
        return 2 + this.curPageLeftCount < this.current;
      },
      isNextMoreShow: function isNextMoreShow() {
        return this.pageCount - 1 - this.curPageRightCount > this.current;
      },
      pages: function pages() {
        var array = [];
        var start;
        var end;

        if (this.isFolded) {
          if (this.isPrevMoreShow && this.isNextMoreShow) {
            start = this.current - this.curPageLeftCount;
            end = this.current + this.curPageRightCount;
          } else {
            start = this.isPrevMoreShow ? this.pageCount - this.foldedMaxPageBtn + 1 : 2;
            end = this.isPrevMoreShow ? this.pageCount - 1 : this.foldedMaxPageBtn;
          }
        } else {
          start = 1;
          end = this.pageCount;
        }

        for (var i = start; i <= end; i++) {
          array.push(i);
        }

        return array;
      },
      isFolded: function isFolded() {
        return this.pageCount > this.maxPageBtn;
      }
    },
    methods: {
      toPage: function toPage(pageIndex, isTriggerChange) {
        if (this.disabled) {
          return;
        }

        var current = pageIndex;

        if (pageIndex < min) {
          current = min;
        } else if (pageIndex > this.pageCount) {
          current = this.pageCount;
        }

        if (this.current !== current) {
          var prev = this.current;
          var pageInfo = {
            current: current,
            previous: prev,
            pageSize: this.pageSize
          };
          emitEvent(this, "current-change", current, pageInfo);

          if (isTriggerChange !== false) {
            emitEvent(this, "change", pageInfo);
          }
        }
      },
      prevPage: function prevPage() {
        this.toPage(this.current - 1);
      },
      nextPage: function nextPage() {
        this.toPage(this.current + 1);
      },
      prevMorePage: function prevMorePage() {
        this.toPage(this.current - this.foldedMaxPageBtn);
      },
      nextMorePage: function nextMorePage() {
        this.toPage(this.current + this.foldedMaxPageBtn);
      },
      getButtonClass: function getButtonClass(index) {
        var _ref5;

        return ["".concat(name$B, "__number"), (_ref5 = {}, _defineProperty$2(_ref5, ClASSNAMES.STATUS.disabled, this.disabled), _defineProperty$2(_ref5, ClASSNAMES.STATUS.current, this.current === index), _ref5)];
      },
      onSelectorChange: function onSelectorChange(e) {
        if (this.disabled) {
          return;
        }

        var pageSize = parseInt(e, 10);
        var pageCount = 1;

        if (pageSize > 0) {
          pageCount = Math.ceil(this.total / pageSize);
        }

        var isIndexChange = false;

        if (this.current > pageCount) {
          isIndexChange = true;
        }

        var pageInfo = {
          current: isIndexChange ? pageCount : this.current,
          previous: this.current,
          pageSize: pageSize
        };
        this.$emit("update:pageSize", pageSize, pageInfo);
        emitEvent(this, "page-size-change", pageSize, pageInfo);
        emitEvent(this, "change", pageInfo);

        if (isIndexChange) {
          this.toPage(pageCount, false);
        }
      },
      onJumperChange: function onJumperChange(val) {
        var currentIndex = Number(val);
        if (isNaN(currentIndex)) return;
        this.toPage(currentIndex);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      return h("div", {
        "class": this.paginationClass
      }, [renderTNodeJSX(this, "totalContent", h("div", {
        "class": this.totalClass
      }, [this.t(this.global.total, {
        total: this.total
      })])), this.pageSizeOptions.length ? h("t-select", {
        "attrs": {
          "size": this.size,
          "value": this.pageSize,
          "disabled": this.disabled
        },
        "class": this.sizerClass,
        "on": {
          "change": this.onSelectorChange
        }
      }, [this.sizeOptions.map(function (item, index) {
        return h("t-option", {
          "attrs": {
            "value": item.value,
            "label": item.label
          },
          "key": index
        });
      })]) : null, h("div", {
        "class": this.preBtnClass,
        "on": {
          "click": this.prevPage
        },
        "attrs": {
          "disabled": this.disabled || this.current === min
        }
      }, [h("chevron-left-icon")]), !this.isSimple ? h("ul", {
        "class": this.btnWrapClass
      }, [this.isFolded ? h("li", {
        "class": this.getButtonClass(1),
        "on": {
          "click": function click() {
            return _this2.toPage(min);
          }
        }
      }, [min]) : null, this.isFolded && this.isPrevMoreShow ? h("li", {
        "class": this.btnMoreClass,
        "on": {
          "click": this.prevMorePage,
          "mouseover": function mouseover() {
            return _this2.prevMore = true;
          },
          "mouseout": function mouseout() {
            return _this2.prevMore = false;
          }
        }
      }, [this.prevMore ? h("chevron-left-double-icon") : h("ellipsis-icon")]) : null, this.pages.map(function (i) {
        return h("li", {
          "class": _this2.getButtonClass(i),
          "key": i,
          "on": {
            "click": function click() {
              return _this2.toPage(i);
            }
          }
        }, [i]);
      }), this.isFolded && this.isNextMoreShow ? h("li", {
        "class": this.btnMoreClass,
        "on": {
          "click": this.nextMorePage,
          "mouseover": function mouseover() {
            return _this2.nextMore = true;
          },
          "mouseout": function mouseout() {
            return _this2.nextMore = false;
          }
        }
      }, [this.nextMore ? h("chevron-right-double-icon") : h("ellipsis-icon")]) : null, this.isFolded ? h("li", {
        "class": this.getButtonClass(this.pageCount),
        "on": {
          "click": function click() {
            return _this2.toPage(_this2.pageCount);
          }
        }
      }, [this.pageCount]) : null]) : h("t-select", {
        "attrs": {
          "size": this.size,
          "value": this.current,
          "disabled": this.disabled,
          "options": this.pageCountOption
        },
        "class": this.simpleClass,
        "on": {
          "change": this.toPage
        }
      }), h("div", {
        "class": this.nextBtnClass,
        "on": {
          "click": this.nextPage
        },
        "attrs": {
          "disabled": this.disabled || this.current === this.pageCount
        }
      }, [h("chevron-right-icon")]), this.showJumper ? h("div", {
        "class": this.jumperClass
      }, [this.t(this.global.jumpTo), h("t-input-number", {
        "class": this.jumperInputClass,
        "on": {
          "blur": this.onJumperChange,
          "enter": this.onJumperChange
        },
        "attrs": {
          "max": this.pageCount,
          "min": min,
          "theme": "normal"
        },
        "model": {
          value: _this2.jumpIndex,
          callback: function callback($$v) {
            _this2.jumpIndex = $$v;
          }
        }
      }), this.t(this.global.page)]) : null]);
    }
  });

  var Pagination = withInstall(mapProps(["current", "pageSize"], {
    model: {
      prop: "current",
      event: "current-change"
    }
  })(PaginationBase));

  var props$y = {
    current: {
      type: [String, Number]
    },
    defaultCurrent: {
      type: [String, Number]
    },
    direction: {
      type: String,
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    options: {
      type: Array
    },
    readonly: Boolean,
    sequence: {
      type: String,
      "default": "positive",
      validator: function validator(val) {
        return ["positive", "reverse"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "dot"].includes(val);
      }
    },
    onChange: Function
  };

  var props$x = {
    content: {
      type: [String, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    extra: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "process", "finish", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$A = "".concat(prefix, "-steps-item");
  var _StepItem = mixins(getConfigReceiverMixins("steps")).extend({
    name: "TStepItem",
    props: _objectSpread$16({}, props$x),
    components: {
      CheckIcon: Check,
      CloseIcon: Close
    },
    inject: {
      steps: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        index: -1
      };
    },
    computed: {
      current: function current() {
        return this.steps && this.steps.current;
      },
      baseClass: function baseClass() {
        return [name$A, _defineProperty$2({}, "".concat(name$A, "--").concat(this.status), this.status)];
      },
      iconClass: function iconClass() {
        return ["".concat(name$A, "__icon"), _defineProperty$2({}, "".concat(name$A, "--").concat(this.status), this.status)];
      },
      canClick: function canClick() {
        var _this$steps;

        return this.status !== "process" && !((_this$steps = this.steps) !== null && _this$steps !== void 0 && _this$steps.readonly);
      }
    },
    mounted: function mounted() {
      this.steps.addItem(this);
    },
    destroyed: function destroyed() {
      this.steps.removeItem(this);
    },
    methods: {
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        var defaultIcon;

        if (this.steps.theme === "default") {
          var icon = "";

          switch (this.status) {
            case "finish":
              icon = h("check-icon");
              break;

            case "error":
              if (isFunction_1(this.global.errorIcon)) {
                icon = this.global.errorIcon(this.$createElement);
              } else {
                icon = h("close-icon");
              }

              break;

            default:
              icon = String(this.index + 1);
              break;
          }

          defaultIcon = h("span", {
            "class": "".concat(name$A, "__icon--number")
          }, [icon]);
        }

        return renderTNodeJSX(this, "icon", defaultIcon);
      },
      onStepClick: function onStepClick(e) {
        var val = this.value === void 0 ? this.index : this.value;
        this.steps.handleChange(val, this.current, e);
      }
    },
    render: function render() {
      var h = arguments[0];
      var content = renderContent(this, "default", "content");
      return h("div", {
        "class": this.baseClass
      }, [h("div", {
        "class": "".concat(name$A, "__inner ").concat(this.canClick ? "".concat(name$A, "--clickable") : ""),
        "on": {
          "click": this.onStepClick
        }
      }, [h("div", {
        "class": this.iconClass
      }, [this.renderIcon()]), h("div", {
        "class": "".concat(name$A, "__content")
      }, [h("div", {
        "class": "".concat(name$A, "__title")
      }, [renderTNodeJSX(this, "title")]), h("div", {
        "class": "".concat(name$A, "__description")
      }, [content]), h("div", {
        "class": "".concat(name$A, "__extra")
      }, [renderTNodeJSX(this, "extra")])])])]);
    }
  });

  function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$z = "".concat(prefix, "-steps");
  var _Steps = mixins(getConfigReceiverMixins("steps")).extend({
    name: "TSteps",
    components: {
      TStepItem: _StepItem
    },
    props: _objectSpread$15({}, props$y),
    data: function data() {
      return {
        stepChildren: [],
        indexMap: {}
      };
    },
    provide: function provide() {
      return {
        steps: this
      };
    },
    watch: {
      options: {
        immediate: true,
        handler: function handler() {
          var _this = this;

          if (!this.options) return;
          this.options.forEach(function (item, index) {
            if (item.value !== void 0) {
              _this.indexMap[item.value] = index;
            }
          });
        }
      }
    },
    computed: {
      baseClass: function baseClass() {
        if (this.direction) {
          console.warn("TDesign Steps Warn: `direction` is going to be deprecated. please use `layout` instead. ");
        }

        var layout = this.layout || this.direction || "horizontal";
        return [name$z, "".concat(name$z, "--").concat(layout), "".concat(name$z, "--").concat(this.handleTheme(), "-anchor"), _defineProperty$2({}, "".concat(name$z, "--").concat(this.sequence), layout === "vertical")];
      }
    },
    render: function render() {
      var _this$$scopedSlots,
          _this2 = this;

      var h = arguments[0];
      var nodes = ((_this$$scopedSlots = this.$scopedSlots) === null || _this$$scopedSlots === void 0 ? void 0 : _this$$scopedSlots["default"]) && this.$scopedSlots["default"](null);
      var options = this.getOptions();
      var content = options.map(function (item, index) {
        var propsData = _objectSpread$15(_objectSpread$15({}, item), {}, {
          status: _this2.handleStatus(item, index)
        });

        var stepItem = h("t-step-item", helper([{}, {
          "props": _objectSpread$15(_objectSpread$15({}, item), {}, {
            status: _this2.handleStatus(item, index)
          })
        }, {
          "key": item.value || index
        }]));

        if (nodes && nodes[index]) {
          var vnode = nodes[index];

          if (vnode.componentOptions) {
            vnode.componentOptions.propsData = propsData;
            return vnode;
          }

          return stepItem;
        }

        return stepItem;
      });
      return h("div", {
        "class": this.baseClass
      }, [content]);
    },
    methods: {
      getOptions: function getOptions() {
        var _this$$scopedSlots2;

        var nodes = ((_this$$scopedSlots2 = this.$scopedSlots) === null || _this$$scopedSlots2 === void 0 ? void 0 : _this$$scopedSlots2["default"]) && this.$scopedSlots["default"](null);
        var options;

        if (this.options && this.options.length) {
          options = this.options;
        } else {
          options = this.getOptionListBySlots(nodes);
        }

        return options;
      },
      getOptionListBySlots: function getOptionListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var _node$componentOption;

          var option = node === null || node === void 0 ? void 0 : (_node$componentOption = node.componentOptions) === null || _node$componentOption === void 0 ? void 0 : _node$componentOption.propsData;
          option && arr.push(option);
        });
        return arr;
      },
      handleTheme: function handleTheme() {
        var theme = this.theme;
        var options = this.getOptions();
        options.forEach(function (item) {
          if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
            theme = "default";
          }
        });
        return theme;
      },
      handleStatus: function handleStatus(item, index) {
        if (item.status && item.status !== "default") return item.status;
        if (this.current === "FINISH") return "finish";
        if (item.value === void 0 && index < this.current) return "finish";

        if (item.value !== void 0) {
          var matchIndex = this.indexMap[this.current];

          if (matchIndex === void 0) {
            console.warn("TDesign Steps Warn: The current `value` is not exist.");
            return "default";
          }

          if (index < matchIndex) return "finish";
        }

        var key = item.value === void 0 ? index : item.value;
        if (key === this.current) return "process";
        return "default";
      },
      addItem: function addItem(item) {
        var index = this.stepChildren.length;
        item.index = index;
        this.stepChildren.push(item);
      },
      removeItem: function removeItem(item) {
        this.stepChildren = this.stepChildren.filter(function (t) {
          return t !== item;
        });
      },
      handleChange: function handleChange(cur, prev, e) {
        emitEvent(this, "change", cur, prev, {
          e: e
        });
      }
    }
  });

  var StepItem = withInstall(_StepItem);
  var Steps = withInstall(mapProps(["current"], {
    model: {
      prop: "current",
      event: "change"
    }
  })(_Steps));

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  var _arraySome = arraySome;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;
  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    } // Check that cyclic values are equal.


    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);

    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new _SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array); // Ignore non-index properties.

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      } // Recursively compare arrays (susceptible to call stack limits).


      if (seen) {
        if (!_arraySome(other, function (othValue, othIndex) {
          if (!_cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;
  /** `Object#toString` result references. */

  var boolTag$3 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$2 = '[object Error]',
      mapTag$5 = '[object Map]',
      numberTag$3 = '[object Number]',
      regexpTag$2 = '[object RegExp]',
      setTag$5 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]';
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;
  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$3:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$2:
        if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag$3:
      case dateTag$2:
      case numberTag$3:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag$2:
        return object.name == other.name && object.message == other.message;

      case regexpTag$2:
      case stringTag$2:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';

      case mapTag$5:
        var convert = _mapToArray;

      case setTag$5:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        } // Assume cyclic values are equal.


        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG$2; // Recursively compare objects (susceptible to call stack limits).

        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$2:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
        }

    }

    return false;
  }

  var _equalByTag = equalByTag;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var _arrayPush = arrayPush;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */

  var objectProto$7 = Object.prototype;
  /** Built-in value references. */

  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbols = !nativeGetSymbols$1 ? stubArray_1 : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return _arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeKeys = _overArg(Object.keys, Object);
  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */

  var objectProto$6 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$7 = objectProto$6.hasOwnProperty;
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */

  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$3 = 1;
  /** Used for built-in method references. */

  var objectProto$5 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty$6.call(other, key))) {
        return false;
      }
    } // Check that cyclic values are equal.


    var objStacked = stack.get(object);
    var othStacked = stack.get(other);

    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      } // Recursively compare objects (susceptible to call stack limits).


      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /* Built-in method references that are verified to be native. */

  var DataView = _getNative(_root, 'DataView');
  var _DataView = DataView;

  /* Built-in method references that are verified to be native. */

  var Promise$1 = _getNative(_root, 'Promise');
  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */

  var Set$1 = _getNative(_root, 'Set');
  var _Set = Set$1;

  /* Built-in method references that are verified to be native. */

  var WeakMap$1 = _getNative(_root, 'WeakMap');
  var _WeakMap = WeakMap$1;

  /** `Object#toString` result references. */

  var mapTag$4 = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$4 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$2 = '[object DataView]';
  /** Used to detect maps, sets, and weakmaps. */

  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);
  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  var getTag = _baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

  if (_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2 || _Map && getTag(new _Map()) != mapTag$4 || _Promise && getTag(_Promise.resolve()) != promiseTag || _Set && getTag(new _Set()) != setTag$4 || _WeakMap && getTag(new _WeakMap()) != weakMapTag$1) {
    getTag = function getTag(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$2;

          case mapCtorString:
            return mapTag$4;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag$4;

          case weakMapCtorString:
            return weakMapTag$1;
        }
      }

      return result;
    };
  }

  var _getTag = getTag;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$2 = 1;
  /** `Object#toString` result references. */

  var argsTag$1 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      objectTag$1 = '[object Object]';
  /** Used for built-in method references. */

  var objectProto$4 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag$1 : _getTag(object),
        othTag = othIsArr ? arrayTag$1 : _getTag(other);
    objTag = objTag == argsTag$1 ? objectTag$1 : objTag;
    othTag = othTag == argsTag$1 ? objectTag$1 : othTag;
    var objIsObj = objTag == objectTag$1,
        othIsObj = othTag == objectTag$1,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack());
      return objIsArr || isTypedArray_1(object) ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty$5.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$5.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new _Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new _Stack());
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike_1(value) && !isObjectLike_1(other)) {
      return value !== value && other !== other;
    }

    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */

  function isEqual(value, other) {
    return _baseIsEqual(value, other);
  }

  var isEqual_1 = isEqual;

  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE$1 = 200;
  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = _arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = _arrayMap(values, _baseUnary(iteratee));
    }

    if (comparator) {
      includes = _arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE$1) {
      includes = _cacheHas;
      isCommon = false;
      values = new _SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  var _baseDifference = baseDifference;

  /** Built-in value references. */

  var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;
  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */

  function isFlattenable(value) {
    return isArray_1(value) || isArguments_1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable;

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = _isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          _arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  var _baseFlatten = baseFlatten;

  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */

  var difference = _baseRest(function (array, values) {
    return isArrayLikeObject_1(array) ? _baseDifference(array, _baseFlatten(values, 1, isArrayLikeObject_1, true)) : [];
  });
  var difference_1 = difference;

  /** Used to generate unique IDs. */

  var idCounter = 0;
  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */

  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString_1(prefix) + id;
  }

  var uniqueId_1 = uniqueId;

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */

  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = _baseGet(object, path);

      if (predicate(value, path)) {
        _baseSet(result, _castPath(path, object), value);
      }
    }

    return result;
  }

  var _basePickBy = basePickBy;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */

  function hasPath(object, path, hasFunc) {
    path = _castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = _toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength_1(length) && _isIndex(key, length) && (isArray_1(object) || isArguments_1(object));
  }

  var _hasPath = hasPath;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */

  function hasIn(object, path) {
    return object != null && _hasPath(object, path, _baseHasIn);
  }

  var hasIn_1 = hasIn;

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */

  function basePick(object, paths) {
    return _basePickBy(object, paths, function (value, path) {
      return hasIn_1(object, path);
    });
  }

  var _basePick = basePick;

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */

  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseFlatten(array, 1) : [];
  }

  var flatten_1 = flatten;

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */

  function flatRest(func) {
    return _setToString(_overRest(func, undefined, flatten_1), func + '');
  }

  var _flatRest = flatRest;

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */

  var pick = _flatRest(function (object, paths) {
    return object == null ? {} : _basePick(object, paths);
  });
  var pick_1 = pick;

  var logSet = /* @__PURE__ */new Set();
  var log = {
    warn: function warn(componentName, message) {
      console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
    },
    warnOnce: function warnOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.warn(msgContent);
    },
    error: function error(componentName, message) {
      console.error("TDesign ".concat(componentName, " Error: ").concat(message));
    },
    errorOnce: function errorOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.error(msgContent);
    },
    info: function info(componentName, message) {
      console.info("TDesign ".concat(componentName, " Info: ").concat(message));
    }
  };

  function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getExposedProps(node) {
    var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
    return props;
  }

  function createNodeModel(node) {
    var props = getExposedProps(node);

    var model = _objectSpread$14(_objectSpread$14({}, props), {}, {
      getLevel: function getLevel() {
        return node.getLevel();
      },
      getIndex: function getIndex() {
        return node.getIndex();
      },
      isFirst: function isFirst() {
        return node.isFirst();
      },
      isLast: function isLast() {
        return node.isLast();
      },
      isLeaf: function isLeaf() {
        return node.isLeaf();
      },
      insertBefore: function insertBefore(newData) {
        return node.insertBefore(newData);
      },
      insertAfter: function insertAfter(newData) {
        return node.insertAfter(newData);
      },
      appendData: function appendData(data) {
        return node.append(data);
      },
      getPath: function getPath() {
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getParent: function getParent() {
        var _node$parent;

        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      },
      getParents: function getParents() {
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getRoot: function getRoot() {
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      },
      getSiblings: function getSiblings() {
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getChildren: function getChildren(deep) {
        var childrenModel = false;
        var children = node.children;

        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (typeof children === "boolean") {
          childrenModel = children;
        }

        return childrenModel;
      },
      remove: function remove(value) {
        if (!value) {
          node.remove();
          return;
        }

        var tree = node.tree;
        var targetNode = tree.getNode(value);

        if (!targetNode) {
          log.warnOnce("Tree", "`".concat(value, "` is not exist"));
          return;
        }

        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });

        if (parentValues.indexOf(node.value) < 0) {
          log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
          return;
        }

        targetNode.remove();
      },
      setData: function setData(data) {
        Object.assign(node.data, data);
      }
    });

    return model;
  }
  function updateNodeModel(model, node) {
    var props = getExposedProps(node);
    Object.assign(model, props);
  }

  function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var hasOwnProperty$4 = Object.prototype.hasOwnProperty;
  var defaultStatus = {
    expandMutex: false,
    activable: false,
    checkable: false,
    disabled: false,
    draggable: false,
    loading: false
  };
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      _classCallCheck(this, TreeNode);

      _defineProperty$2(this, "tree", void 0);

      _defineProperty$2(this, "value", void 0);

      _defineProperty$2(this, "label", void 0);

      _defineProperty$2(this, "data", void 0);

      _defineProperty$2(this, "parent", void 0);

      _defineProperty$2(this, "children", void 0);

      _defineProperty$2(this, "model", void 0);

      _defineProperty$2(this, "vmIsLeaf", void 0);

      _defineProperty$2(this, "vmIsFirst", void 0);

      _defineProperty$2(this, "vmIsLast", void 0);

      _defineProperty$2(this, "vmIsRest", void 0);

      _defineProperty$2(this, "vmIsLocked", void 0);

      _defineProperty$2(this, "expanded", void 0);

      _defineProperty$2(this, "expandMutex", void 0);

      _defineProperty$2(this, "actived", void 0);

      _defineProperty$2(this, "activable", void 0);

      _defineProperty$2(this, "checkable", void 0);

      _defineProperty$2(this, "vmCheckable", void 0);

      _defineProperty$2(this, "checked", void 0);

      _defineProperty$2(this, "indeterminate", void 0);

      _defineProperty$2(this, "disabled", void 0);

      _defineProperty$2(this, "draggable", void 0);

      _defineProperty$2(this, "visible", void 0);

      _defineProperty$2(this, "level", void 0);

      _defineProperty$2(this, "loading", void 0);

      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = get_1(tree, "config.keys") || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      this.model = null;
      this.children = null;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = true;
      this.vmIsLocked = false;

      var spec = _objectSpread$13(_objectSpread$13({}, defaultStatus), {}, {
        actived: false,
        expanded: false,
        checked: false
      }, data);

      var children = spec[propChildren];
      this.set(spec);
      this.label = spec[propLabel] || "";
      this.value = spec[propValue] || uniqueId_1(prefix);
      this.tree.nodeMap.set(this.value, this);

      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }

      if (children === true) {
        this.children = children;
      }

      this.level = 0;
      this.visible = true;
      this.actived = spec.actived;
      this.initActived();
      this.expanded = spec.expanded;
      this.initExpanded();
      this.checked = spec.checked;
      this.initChecked();
      this.update();
      tree.reflow(this);

      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }

      this.checked = false;
      this.indeterminate = false;
      this.updateChecked();
    }

    _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
            value = this.value,
            parent = this.parent;
        var checkStrictly = tree.config.checkStrictly;
        var checked = this.checked;
        checked = parent === null || parent === void 0 ? void 0 : parent.isChecked();

        if (checked && !checkStrictly) {
          tree.checkedMap.set(value, true);
        }

        this.checked = checked;
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;

        if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }

        if (config.expandAll) {
          expanded = true;
        }

        if (this.children === true && config.lazy) {
          expanded = false;
        }

        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }

        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
            actived = this.actived;

        if (actived) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this = this;

        var list = [];

        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }

        if (list.length <= 0) {
          return;
        }

        if (!Array.isArray(this.children)) {
          this.children = [];
        }

        var children = this.children,
            tree = this.tree;
        list.forEach(function (item) {
          var node = null;

          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this.tree, _this);
          } else {
            node = new TreeNode(_this.tree, item, _this);
            children.push(node);
          }
        });
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this2 = this;

        var parentNode = parent;
        if (!parentNode) return;
        var targetParents = parentNode.getParents();
        var includeCurrent = targetParents.some(function (node) {
          return node.value === _this2.value;
        });

        if (includeCurrent) {
          return;
        }

        if (Array.isArray(parentNode.children)) {
          var targetIndex = 0;

          if (typeof index === "number") {
            targetIndex = index;
          }

          var targetPosNode = parentNode.children[targetIndex];

          if (targetPosNode.value === this.value) {
            return;
          }
        }

        this.remove();
        this.parent = parentNode;
        var siblings = null;

        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode.children)) {
            parentNode.children = [];
          }

          siblings = parent.children;
        } else {
          siblings = tree.children;
        }

        if (Array.isArray(siblings)) {
          if (typeof index === "number") {
            siblings.splice(index, 0, this);
          } else {
            siblings.push(this);
          }
        }

        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);

          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = parentNode.walk();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
            parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;

        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);

          if (typeof index === "number") {
            siblings.splice(index, 0, node);
          }

          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }

        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();

        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }

        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
            value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var config, list;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = get_1(this, "tree.config") || {};

                  if (!(this.children === true && !this.loading)) {
                    _context.next = 13;
                    break;
                  }

                  if (!(typeof config.load === "function")) {
                    _context.next = 13;
                    break;
                  }

                  this.loading = true;
                  this.update();
                  list = [];
                  _context.next = 8;
                  return config.load(this);

                case 8:
                  list = _context.sent;
                  this.tree.emit("load", {
                    node: this,
                    data: list
                  });
                  this.loading = false;

                  if (Array.isArray(list) && list.length > 0) {
                    this.append(list);
                  } else {
                    this.children = false;
                  }

                  this.update();

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }

        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this3 = this;

        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty$4.call(defaultStatus, key) || key === "label") {
            _this3[key] = item[key];
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;

        while (node) {
          parents.push(node);
          node = node.parent;
        }

        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
            tree = this.tree;
        var list = [];

        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }

        return list;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
            config = _this$tree.config,
            filterMap = _this$tree.filterMap;
        var rest = true;

        if (typeof config.filter === "function") {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }

        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }

        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var nodeMap = this.tree.nodeMap;
        var visible = true;

        if (this.vmIsLocked) {
          return true;
        }

        if (nodeMap.get(this.value)) {
          var filterVisible = this.isRest();
          var expandVisible = true;
          var parents = this.getParents();

          if (parents.length > 0) {
            expandVisible = parents.every(function (node) {
              return node.isExpanded();
            });
          }

          visible = expandVisible && filterVisible;
        } else {
          visible = false;
        }

        return visible;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        if (this.vmIsLocked) return true;
        var treeDisabled = get_1(this, "tree.config.disabled");
        return !!(treeDisabled || this.disabled);
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        return !!(get_1(this, "tree.config.activable") || this.activable);
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        return !!(get_1(this, "tree.config.checkable") || this.checkable);
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
            value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
            value = this.value,
            vmIsLocked = this.vmIsLocked;
        if (vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;
        var checked = false;
        var checkedMap = map || tree.checkedMap;

        if (tree.nodeMap.get(this.value)) {
          if (checkedMap.get(this.value)) {
            checked = true;
          } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
            checked = children.every(function (node) {
              var childIsChecked = node.isChecked(checkedMap);
              return childIsChecked;
            });
          } else if (!checkStrictly) {
            var parents = this.getParents();
            checked = parents.some(function (node) {
              return checkedMap.get(node.value);
            });
          }
        }

        return !!checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;

        if (checkStrictly) {
          return false;
        }

        var indeterminate = false;

        if (Array.isArray(children)) {
          var childChecked = null;
          indeterminate = children.some(function (node) {
            if (node.isIndeterminate()) {
              return true;
            }

            if (childChecked === null) {
              childChecked = node.isChecked();
            }

            if (childChecked !== node.isChecked()) {
              return true;
            }

            return false;
          });
        }

        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;

        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }

        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();

        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded() {
        return this.setExpanded(!this.isExpanded());
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;

        var options = _objectSpread$13({
          directly: false
        }, opts);

        var map = tree.expandedMap;

        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }

        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);

          if (get_1(tree, "config.expandParent")) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }

          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;

            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config;

              isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
            }

            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
              });
            }

            map.set(node.value, true);
          });
        } else {
          map["delete"](this.value);
        }

        if (options.directly) {
          this.afterExpanded();
          this.update();
          this.updateChildren();
        }

        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived() {
        return this.setActived(!this.isActived());
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;

        var options = _objectSpread$13({
          directly: false
        }, opts);

        var config = tree.config || {};
        var map = tree.activedMap;

        if (!options.directly) {
          map = new Map(tree.activedMap);
        }

        if (this.isActivable()) {
          if (actived) {
            if (!config.activeMultiple) {
              map.clear();
            }

            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }

        if (options.directly) {
          this.update();
        }

        return tree.getActived(map);
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked() {
        return this.setChecked(!this.isChecked());
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};

        var options = _objectSpread$13({
          directly: false
        }, opts);

        var map = tree.checkedMap;

        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }

        if (this.isCheckable() && checked !== this.isChecked()) {
          if (config.checkStrictly) {
            if (checked) {
              map.set(this.value, true);
            } else {
              map["delete"](this.value);
            }
          } else {
            var children = this.walk();
            children.forEach(function (node) {
              if (checked) {
                map.set(node.value, true);
              } else {
                map["delete"](node.value);
              }
            });
            var parents = this.getParents();
            parents.forEach(function (node) {
              map["delete"](node.value);
            });
          }
        }

        if (options.directly) {
          if (config.checkStrictly) {
            this.updateChecked();
          } else {
            var relatedNodes = tree.getRelatedNodes([this.value]);
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }

        return tree.getChecked(map);
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.vmCheckable = this.isCheckable();
        this.visible = this.isVisible();
        this.vmIsRest = this.isRest();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked() {
        var tree = this.tree;
        this.vmCheckable = this.isCheckable();

        if (this.vmCheckable && !this.disabled) {
          this.checked = this.isChecked();

          if (this.checked) {
            tree.checkedMap.set(this.value, true);
          }

          this.indeterminate = this.isIndeterminate();
          tree.updated(this);
        }
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var children = this.children;

        if (Array.isArray(children)) {
          children.forEach(function (node) {
            node.update();
            node.updateChecked();
            node.updateChildren();
          });
        }
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var parent = this.parent;

        if (parent) {
          parent.update();
          parent.updateChecked();
          parent.updateParents();
        }
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "walk",
      value: function walk() {
        var children = this.children;
        var list = [];
        list.push(this);

        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            list = list.concat(node.walk());
          });
        }

        return list;
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;

        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }

        updateNodeModel(model, this);
        return model;
      }
    }]);

    return TreeNode;
  }();

  function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);

      _defineProperty$2(this, "children", void 0);

      _defineProperty$2(this, "nodes", void 0);

      _defineProperty$2(this, "nodeMap", void 0);

      _defineProperty$2(this, "config", void 0);

      _defineProperty$2(this, "activedMap", void 0);

      _defineProperty$2(this, "updatedMap", void 0);

      _defineProperty$2(this, "checkedMap", void 0);

      _defineProperty$2(this, "expandedMap", void 0);

      _defineProperty$2(this, "filterMap", void 0);

      _defineProperty$2(this, "updateTimer", void 0);

      _defineProperty$2(this, "shouldReflow", void 0);

      _defineProperty$2(this, "prevFilter", void 0);

      var config = _objectSpread$12({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        onLoad: null,
        onReflow: null,
        onUpdate: null,
        allowFoldNodeOnFilter: false
      }, options);

      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTimer = null;
      this.shouldReflow = false;
    }

    _createClass(TreeStore, [{
      key: "setConfig",
      value: function setConfig(options) {
        var _this = this;

        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];

          if (val !== _this.config[key]) {
            hasChanged = true;
            _this.config[key] = val;
          }
        });

        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;

        if (typeof item === "string" || typeof item === "number") {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }

        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);

        if (node) {
          parent = node.getParent();
        }

        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];

        if (node) {
          parents = node.getParents();
        }

        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;

        if (node) {
          index = node.getIndex();
        }

        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";

        if (typeof item === "string" || typeof item === "number") {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }

        if (!val) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);

          if (node) {
            nodes = node.walk();
          }
        }

        if (options) {
          var conf = _objectSpread$12({
            filter: null,
            level: Infinity
          }, options);

          if (typeof conf.level === "number" && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }

          if (typeof conf.filter === "function") {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }

          if (isPlainObject_1(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }

        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this2 = this;

        list.forEach(function (item) {
          var node = new TreeNode(_this2, item);

          _this2.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;

        if (typeof para === "string" || typeof para === "number") {
          value = para;
          data = item;
          node = this.getNode(value);
        } else if (para instanceof TreeNode) {
          node = para;
          data = item;
        } else {
          data = para;
        }

        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);

        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (Array.isArray(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }

            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
            nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodes = this.nodes;
        nodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this3 = this;

        if (node !== null && node !== void 0 && node.value) {
          this.updatedMap.set(node.value, true);
        }

        if (this.updateTimer) return;
        this.updateTimer = +setTimeout(function () {
          var _this3$config;

          clearTimeout(_this3.updateTimer);
          _this3.updateTimer = null;

          if (_this3.shouldReflow) {
            _this3.refreshNodes();

            _this3.emit("reflow");
          }

          if (!((_this3$config = _this3.config) !== null && _this3$config !== void 0 && _this3$config.allowFoldNodeOnFilter)) _this3.lockFilterPathNodes();
          var updatedList = Array.from(_this3.updatedMap.keys());

          if (updatedList.length > 0) {
            var updatedNodes = updatedList.map(function (value) {
              return _this3.getNode(value);
            });

            _this3.emit("update", {
              nodes: updatedNodes,
              map: _this3.updatedMap
            });
          } else if (_this3.shouldReflow) {
            _this3.emit("update", {
              nodes: [],
              map: _this3.updatedMap
            });
          }

          _this3.shouldReflow = false;

          _this3.updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this4 = this;

        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);

        if (!activeMultiple) {
          list.length = 1;
        }

        list.forEach(function (val) {
          _this4.activedMap.set(val, true);

          var node = _this4.getNode(val);

          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference_1(list, expanded);
        var removed = difference_1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this5 = this;

        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          if (expanded) {
            _this5.expandedMap.set(val, true);

            var node = _this5.getNode(val);

            if (node) {
              node.afterExpanded();
            }
          } else {
            _this5.expandedMap["delete"](val);
          }
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodes = this.nodes,
            config = this.config;
        var valueMode = config.valueMode,
            checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodes.forEach(function (node) {
          if (node.isChecked(checkedMap)) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              if (!node.parent || !node.parent.isChecked(checkedMap)) {
                list.push(node.value);
              }
            } else if (valueMode === "onlyLeaf" && !checkStrictly) {
              if (node.isLeaf()) {
                list.push(node.value);
              }
            } else {
              list.push(node.value);
            }
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list) {
        var _this6 = this;

        var _this$config = this.config,
            valueMode = _this$config.valueMode,
            checkStrictly = _this$config.checkStrictly,
            checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this6.getNode(val);

          if (node) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              var childrenNodes = node.walk();
              childrenNodes.forEach(function (childNode) {
                _this6.checkedMap.set(childNode.value, true);
              });
            } else {
              _this6.checkedMap.set(val, true);

              node.updateChecked();
            }
          }
        });

        if (!checkStrictly) {
          var checked = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checked);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);

        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.remove();
        });
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this7 = this;

        var conf = _objectSpread$12({
          withParents: true
        }, options);

        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;

          var node = _this7.getNode(value);

          if (node) {
            var parents = node.getParents();
            var children = node.walk();
            var related = [];

            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }

            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config || {};
        var methodName = camelCase_1("on-".concat(name));
        var method = config[methodName];

        if (typeof method === "function") {
          method(state);
        }
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var _this8 = this;

        var config = this.config;
        var allNodes = this.getNodes();

        if (this.prevFilter) {
          allNodes.forEach(function (node) {
            node.lock(false);
          });
        }

        if (!config.filter) {
          return;
        }

        this.prevFilter = config.filter;
        var map = /* @__PURE__ */new Map();
        allNodes.reverse().forEach(function (item) {
          var node = item;
          var parent = node.getParent();

          if (node.vmIsRest) {
            if (parent) {
              parent.expanded = true;
            }

            node.visible = true;
          }

          if (node.vmIsRest || map.get(node.value)) {
            if (parent && !parent.vmIsRest) {
              map.set(parent.value, true);
            }
          }
        });
        var filterPathValues = Array.from(map.keys());
        filterPathValues.forEach(function (value) {
          var node = _this8.getNode(value);

          if (node) {
            node.lock(true);
          }
        });
      }
    }]);

    return TreeStore;
  }();

  /** `Object#toString` result references. */

  var mapTag$3 = '[object Map]',
      setTag$3 = '[object Set]';
  /** Used for built-in method references. */

  var objectProto$3 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;
  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */

  function isEmpty(value) {
    if (value == null) {
      return true;
    }

    if (isArrayLike_1(value) && (isArray_1(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) {
      return !value.length;
    }

    var tag = _getTag(value);

    if (tag == mapTag$3 || tag == setTag$3) {
      return !value.size;
    }

    if (_isPrototype(value)) {
      return !_baseKeys(value).length;
    }

    for (var key in value) {
      if (hasOwnProperty$3.call(value, key)) {
        return false;
      }
    }

    return true;
  }

  var isEmpty_1 = isEmpty;

  function getFullPathLabel(node) {
    return node.getPath().map(function (node2) {
      return node2.label;
    }).join("/");
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];

    if (Array.isArray(value)) {
      if (value.length > 0 && _typeof(value[0]) === "object") {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (value) {
      if (_typeof(value) === "object") {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }

    return treeValue;
  };
  var getValue = function getValue(value, valueType, multiple) {
    if (valueType === "single") {
      return value;
    }

    if (multiple) {
      return value.map(function (item) {
        return item[item.length - 1];
      });
    }

    return value[value.length - 1];
  };
  function isEmptyValues(value) {
    if (typeof value === "number" && !isNaN(value)) return false;
    return isEmpty_1(value);
  }

  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes) {
    if (!treeStore) return;
    var nodes = [];

    if (inputVal) {
      nodes = treeStore.nodes.filter(function (node) {
        var fullPathLabel = getFullPathLabel(node);
        return fullPathLabel.indexOf(inputVal) > -1 && node.isLeaf();
      });
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }

    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;

    if (Array.isArray(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();

      var _treeValue = _slicedToArray(treeValue, 1),
          val = _treeValue[0];

      if (val) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);

        if (!node) {
          treeStore.refreshNodes();
          return;
        }

        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      } else {
        treeStore.resetExpanded();
      }
    }

    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }

    treeStore.refreshNodes();
  };

  /** `Object#toString` result references. */

  var numberTag$2 = '[object Number]';
  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */

  function isNumber(value) {
    return typeof value == 'number' || isObjectLike_1(value) && _baseGetTag(value) == numberTag$2;
  }

  var isNumber_1 = isNumber;

  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
        filterActive = cascaderContext.filterActive,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        setFilterActive = cascaderContext.setFilterActive,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        setTreeNodes = cascaderContext.setTreeNodes,
        setExpend = cascaderContext.setExpend,
        value = cascaderContext.value,
        max = cascaderContext.max,
        valueType = cascaderContext.valueType;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;

    if (propsTrigger === trigger && !node.isLeaf()) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);

      if (multiple) {
        setExpend(expanded);
      }
    }

    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.isChecked());

      var _checked = _slicedToArray(checked, 1),
          value2 = _checked[0];

      if (filterActive) {
        setFilterActive(false);
      }

      if (!filterActive && !checkStrictly) {
        setVisible(false);
      }

      setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
        return item.value;
      }), "checked", node.getModel());
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
        max = cascaderContext.max,
        multiple = cascaderContext.multiple,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        filterActive = cascaderContext.filterActive,
        setFilterActive = cascaderContext.setFilterActive,
        treeNodes = cascaderContext.treeNodes,
        treeStore = cascaderContext.treeStore,
        valueType = cascaderContext.valueType;

    if (!node || disabled || node.disabled) {
      return;
    }

    var checked = node.setChecked(!node.isChecked());

    if (isNumber_1(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }

    if (checked.length > max && isNumber_1(max) && max > 0) {
      return;
    }

    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }

    if (!multiple) {
      setVisible(false);
    }

    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });

    if (filterActive && isSelectAll) {
      setVisible(false);
      setFilterActive(false);
    }

    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "checked", node.getModel());
  }

  function getLabelIsEllipsis(node, size) {
    var sizeMap = {
      small: 11,
      medium: 9,
      large: 8
    };
    return sizeMap[size] < node.label.length;
  }
  function getNodeStatusClass(node, CLASSNAMES, cascaderContext) {
    var _ref;

    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        value = cascaderContext.value,
        max = cascaderContext.max;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    return [(_ref = {}, _defineProperty$2(_ref, CLASSNAMES.STATUS.selected, !isDisabled && isSelected), _defineProperty$2(_ref, CLASSNAMES.STATUS.expanded, !isDisabled && expandedActive), _defineProperty$2(_ref, CLASSNAMES.STATUS.disabled, isDisabled), _ref)];
  }
  function getCascaderItemClass(prefix, node, CLASSNAMES, cascaderContext) {
    var _ref2;

    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, CLASSNAMES, cascaderContext)), [(_ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), _defineProperty$2(_ref2, "".concat(prefix, "-cascader__item--leaf"), node.isLeaf()), _defineProperty$2(_ref2, CLASSNAMES.SIZE[size], !!size), _ref2)]);
  }
  function getCascaderItemIconClass(prefix, node, CLASSNAMES, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon")].concat(_toConsumableArray(getNodeStatusClass(node, CLASSNAMES, cascaderContext)));
  }

  var name$y = "".concat(prefix, "-cascader-item");
  var ComponentClassName = "".concat(prefix, "-cascader__item");
  var keepAnimationMixins$2 = getKeepAnimationMixins();
  var Item = mixins(keepAnimationMixins$2).extend({
    name: name$y,
    directives: {
      ripple: Ripple
    },
    components: {
      Tooltip: Tooltip
    },
    props: {
      node: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      cascaderContext: {
        type: Object
      }
    },
    computed: {
      itemClass: function itemClass() {
        return getCascaderItemClass(prefix, this.node, ClASSNAMES, this.cascaderContext);
      },
      iconClass: function iconClass() {
        return getCascaderItemIconClass(prefix, this.node, ClASSNAMES, this.cascaderContext);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var node = this.node,
          itemClass = this.itemClass,
          iconClass = this.iconClass,
          cascaderContext = this.cascaderContext;

      var handleClick = function handleClick(e) {
        e.stopPropagation();
        var ctx = {
          e: e,
          node: node
        };

        _this.$emit("click", ctx);
      };

      var handleChange = function handleChange(e) {
        var ctx = {
          e: e,
          node: node
        };

        _this.$emit("change", ctx);
      };

      var handleMouseenter = function handleMouseenter(e) {
        e.stopPropagation();
        var ctx = {
          e: e,
          node: node
        };

        _this.$emit("mouseenter", ctx);
      };

      function RenderLabelInner(node2, cascaderContext2) {
        var filterActive = cascaderContext2.filterActive,
            inputVal = cascaderContext2.inputVal;
        var labelText = filterActive ? getFullPathLabel(node2) : node2.label;

        if (filterActive) {
          var texts = labelText.split(inputVal);
          var doms = [];

          for (var index = 0; index < texts.length; index++) {
            doms.push(h("span", {
              "key": index
            }, [texts[index]]));
            if (index === texts.length - 1) break;
            doms.push(h("span", {
              "key": "".concat(index, "filter"),
              "attrs": {
                "className": "".concat(name$y, "-label--filter")
              }
            }, [inputVal]));
          }

          return doms;
        }

        return labelText;
      }

      function RenderLabelContent(node2, cascaderContext2) {
        var label = RenderLabelInner(node2, cascaderContext2);
        var isEllipsis = getLabelIsEllipsis(node2, cascaderContext2.size);
        var labelNode = h("span", {
          "class": ["".concat(ComponentClassName, "-label")],
          "attrs": {
            "role": "label"
          }
        }, [label]);

        if (isEllipsis) {
          return h(Tooltip, {
            "attrs": {
              "content": node2.label,
              "placement": "top-left"
            }
          }, [labelNode]);
        }

        return labelNode;
      }

      function RenderCheckBox(node2, cascaderContext2, handleChange2) {
        var checkProps = cascaderContext2.checkProps,
            value = cascaderContext2.value,
            max = cascaderContext2.max,
            size = cascaderContext2.size;
        var label = RenderLabelInner(node2, cascaderContext2);
        return h(Checkbox, helper([{
          "attrs": {
            "checked": node2.checked,
            "indeterminate": node2.indeterminate,
            "disabled": node2.isDisabled() || value.length >= max && max !== 0,
            "name": node2.value,
            "size": size
          },
          "on": {
            "change": handleChange2
          }
        }, checkProps]), [label]);
      }

      return h("li", {
        "directives": [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }],
        "class": itemClass,
        "on": {
          "click": handleClick,
          "mouseenter": handleMouseenter
        }
      }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext, handleChange) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? h(Loading, {
        "class": iconClass,
        "attrs": {
          "size": "small"
        }
      }) : h(ChevronRight, {
        "class": iconClass
      }))]);
    }
  });

  var props$w = {
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    empty: {
      type: [String, Function]
    },
    filterable: Boolean,
    keys: {
      type: Object
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    load: {
      type: Function
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    showAllLevels: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["large", "medium", "small"].includes(val);
      }
    },
    trigger: {
      type: String,
      "default": "click",
      validator: function validator(val) {
        return ["click", "hover"].includes(val);
      }
    },
    value: {
      type: [String, Number, Array],
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: [String, Number, Array],
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    valueType: {
      type: String,
      "default": "single",
      validator: function validator(val) {
        return ["single", "full"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onRemove: Function
  };

  var name$x = "".concat(prefix, "-cascader");
  var Panel = mixins(getConfigReceiverMixins("cascader")).extend({
    name: "".concat(name$x, "-panel"),
    props: {
      empty: props$w.empty,
      trigger: props$w.trigger,
      onChange: props$w.onChange,
      cascaderContext: {
        type: Object
      }
    },
    computed: {
      panels: function panels() {
        return getPanels(this.cascaderContext.treeNodes);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var _this$cascaderContext = this.cascaderContext,
          filterActive = _this$cascaderContext.filterActive,
          treeNodes = _this$cascaderContext.treeNodes,
          inputWidth = _this$cascaderContext.inputWidth,
          cascaderContext = this.cascaderContext,
          panels = this.panels;

      var handleExpand = function handleExpand(ctx, trigger) {
        var node = ctx.node;
        var propsTrigger = _this.trigger,
            cascaderContext2 = _this.cascaderContext;
        expendClickEffect(propsTrigger, trigger, node, cascaderContext2);
      };

      var handleChange = function handleChange(ctx) {
        var node = ctx.node;
        var cascaderContext2 = _this.cascaderContext;
        valueChangeEffect(node, cascaderContext2);
      };

      var renderEmpty = renderTNodeJSXDefault(this, "empty", h("div", {
        "class": "".concat(name$x, "__panel--empty")
      }, [this.t(this.global.empty)]));

      var renderItem = function renderItem(node) {
        return h(Item, {
          "key": node.value,
          "attrs": {
            "node": node,
            "cascaderContext": cascaderContext
          },
          "on": {
            "click": function click(ctx) {
              handleExpand(ctx, "click");
            },
            "mouseenter": function mouseenter(ctx) {
              handleExpand(ctx, "hover");
            },
            "change": handleChange
          }
        });
      };

      var panelsContainer = panels.map(function (panel, index) {
        return h("ul", {
          "class": ["".concat(name$x, "__menu"), "narrow-scrollbar", _defineProperty$2({}, "".concat(name$x, "__menu--segment"), index !== panels.length - 1)],
          "key": index
        }, [panel.map(function (node) {
          return renderItem(node);
        })]);
      });
      var filterPanelsContainer = h("ul", {
        "class": ["".concat(name$x, "__menu"), "narrow-scrollbar", "".concat(name$x, "__menu--segment"), "".concat(name$x, "__menu--filter")]
      }, [treeNodes.map(function (node) {
        return renderItem(node);
      })]);
      var renderPanels = filterActive ? filterPanelsContainer : panelsContainer;
      return h("div", {
        "class": ["".concat(name$x, "__panel"), _defineProperty$2({}, "".concat(name$x, "--normal"), panels.length)],
        "style": {
          width: panels.length === 0 ? "".concat(inputWidth, "px") : null
        }
      }, [panels && panels.length ? renderPanels : renderEmpty]);
    }
  });

  function getCloseIconClass(prefix, CLASSNAMES, cascaderContext) {
    var _ref;

    var visible = cascaderContext.visible,
        disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), (_ref = {}, _defineProperty$2(_ref, CLASSNAMES.STATUS.visible, visible), _defineProperty$2(_ref, CLASSNAMES.STATUS.disabled, disabled), _ref)];
  }
  function getFakeArrowIconClass(prefix, CLASSNAMES, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$2({}, CLASSNAMES.STATUS.disabled, disabled)];
  }
  function getCascaderInnerClasses(prefix, CLASSNAMES, cascaderContext) {
    var _ref3;

    var disabled = cascaderContext.disabled,
        visible = cascaderContext.visible,
        size = cascaderContext.size,
        multiple = cascaderContext.multiple;
    return ["".concat(prefix, "-cascader"), (_ref3 = {}, _defineProperty$2(_ref3, CLASSNAMES.STATUS.disabled, disabled), _defineProperty$2(_ref3, CLASSNAMES.STATUS.active, visible), _defineProperty$2(_ref3, CLASSNAMES.SIZE[size], size), _defineProperty$2(_ref3, "".concat(prefix, "-cascader--multiple"), multiple), _ref3)];
  }
  function getCloseShow(isHover, cascaderContext) {
    var value = cascaderContext.value,
        disabled = cascaderContext.disabled,
        clearable = cascaderContext.clearable,
        visible = cascaderContext.visible;
    return !!(!visible && clearable && isHover && !disabled && !isEmpty_1(value));
  }
  function getPlaceholderShow(cascaderContext, singleContent, multipleContent) {
    var filterable = cascaderContext.filterable,
        visible = cascaderContext.visible,
        multiple = cascaderContext.multiple;
    var valEmpty = !(multiple ? multipleContent.length : singleContent);

    if (filterable) {
      return valEmpty && !visible;
    }

    return valEmpty;
  }
  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels,
        setValue = cascaderContext.setValue;
    if (multiple || !value) return "";
    if (Array.isArray(value)) return "";
    var node = treeStore && treeStore.getNodes(value);

    if (!(node && node.length)) {
      if (value) {
        setValue(multiple ? [] : "", "invalid-value");
      }

      return "";
    }

    var path = node && node[0].getPath();

    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path[path.length - 1].label;
    }

    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore;
    if (!multiple) return [];
    if (multiple && !Array.isArray(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    var path = value.map(function (item) {
      var node2 = treeStore.getNodes(item);
      return node2[0];
    });

    if (value && value.length) {
      return path && path.length ? path : value;
    }

    return [];
  }
  function outerClickListenerEffect(ref, cascaderContext, event) {
    var visible = cascaderContext.visible,
        setVisible = cascaderContext.setVisible;

    if (!ref || ref.contains(event.target)) {
      return;
    }

    if (visible) {
      setVisible(false);
    }
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
        multiple = cascaderContext.multiple,
        setExpend = cascaderContext.setExpend,
        setValue = cascaderContext.setValue;
    setVisible(false);

    if (multiple) {
      setExpend([]);
    }

    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, node, onRemove) {
    var disabled = cascaderContext.disabled,
        setValue = cascaderContext.setValue,
        valueType = cascaderContext.valueType,
        treeStore = cascaderContext.treeStore;
    if (disabled) return;
    var checked = node.setChecked(!node.isChecked());
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "unchecked", node.getModel());

    if (isFunction_1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  }
  function innerContentClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
        visible = cascaderContext.visible,
        filterActive = cascaderContext.filterActive,
        disabled = cascaderContext.disabled;

    if (!disabled) {
      if (visible && filterActive) return;
      setVisible(!visible);
    }
  }

  var name$w = "".concat(prefix, "-cascader");
  var cascaderGglobalConfig = getConfigReceiverMixins("cascader");
  var InputContent = mixins(cascaderGglobalConfig).extend({
    name: "".concat(name$w, "-input-content"),
    props: {
      cascaderContext: {
        type: Object
      },
      placeholder: props$w.placeholder,
      listeners: {
        type: Object
      },
      collapsedItems: props$w.collapsedItems
    },
    components: {
      Tag: Tag,
      Input: Input,
      CloseCircleFilledIcon: CloseCircleFilled
    },
    data: function data() {
      return {
        isHover: false
      };
    },
    computed: {
      closeIconClass: function closeIconClass() {
        return getCloseIconClass(prefix, ClASSNAMES, this.cascaderContext);
      },
      fakeArrowIconClass: function fakeArrowIconClass() {
        return getFakeArrowIconClass(prefix, ClASSNAMES, this.cascaderContext);
      },
      cascaderInnerClasses: function cascaderInnerClasses() {
        return getCascaderInnerClasses(prefix, ClASSNAMES, this.cascaderContext);
      },
      closeShow: function closeShow() {
        return getCloseShow(this.isHover, this.cascaderContext);
      },
      singleContent: function singleContent() {
        return getSingleContent(this.cascaderContext);
      },
      multipleContent: function multipleContent() {
        return getMultipleContent(this.cascaderContext);
      },
      showPlaceholder: function showPlaceholder() {
        return getPlaceholderShow(this.cascaderContext, this.singleContent, this.multipleContent);
      }
    },
    mounted: function mounted() {
      var _this = this;

      document.addEventListener("click", function (event) {
        _this.outerClickListenerFn(event);
      });
      setTimeout(function () {
        _this.getInputWidth();
      });
    },
    beforeDestroy: function beforeDestroy() {
      var _this2 = this;

      document.removeEventListener("click", function (event) {
        _this2.outerClickListenerFn(event);
      });
    },
    inject: {
      tCascader: {
        "default": void 0
      }
    },
    methods: {
      getInputWidth: function getInputWidth() {
        var _this$$refs$inputCont = this.$refs.inputContent.getBoundingClientRect(),
            width = _this$$refs$inputCont.width;

        var setInputWidth = this.cascaderContext.setInputWidth;
        setInputWidth(width);
      },
      outerClickListenerFn: function outerClickListenerFn(event) {
        return outerClickListenerEffect(this.$refs.inputContent, this.cascaderContext, event);
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        var placeholder = this.placeholder,
            showPlaceholder = this.showPlaceholder;
        var content = !showPlaceholder ? this.InnerContent() : h("span", {
          "class": "".concat(prefix, "-cascader__placeholder")
        }, [placeholder || this.t(this.global.placeholder)]);
        return content;
      },
      InnerContent: function InnerContent() {
        var _this3 = this;

        var h = this.$createElement;
        var cascaderContext = this.cascaderContext,
            placeholder = this.placeholder,
            singleContent = this.singleContent,
            multipleContent = this.multipleContent,
            listeners = this.listeners,
            collapsedItems = this.collapsedItems;
        var multiple = cascaderContext.multiple,
            size = cascaderContext.size,
            disabled = cascaderContext.disabled,
            filterable = cascaderContext.filterable,
            setFilterActive = cascaderContext.setFilterActive,
            visible = cascaderContext.visible,
            inputVal = cascaderContext.inputVal,
            setInputVal = cascaderContext.setInputVal,
            minCollapsedNum = cascaderContext.minCollapsedNum,
            value = cascaderContext.value,
            showAllLevels = cascaderContext.showAllLevels;
        var onFocus = listeners.onFocus,
            onBlur = listeners.onBlur,
            onRemove = listeners.onRemove;

        var renderSelfTag = function renderSelfTag(node, index) {
          return h(Tag, {
            "attrs": {
              "closable": !disabled,
              "disabled": disabled,
              "size": size
            },
            "key": index,
            "on": {
              "close": function close(ctx) {
                ctx.e.stopPropagation();
                handleRemoveTagEffect(cascaderContext, node, onRemove);
              }
            }
          }, [showAllLevels ? getFullPathLabel(node) : node.label]);
        };

        var renderCollItems = function renderCollItems() {
          var tempList = [];
          multipleContent.forEach(function (node) {
            tempList.push(node.data);
          });
          return tempList;
        };

        var generalContent = !multiple ? h("span", {
          "class": "".concat(prefix, "-cascader__content")
        }, [singleContent]) : h("span", [minCollapsedNum > 0 && multipleContent.length > minCollapsedNum ? h("span", [multipleContent.slice(0, minCollapsedNum).map(function (node, index) {
          return renderSelfTag(node, index);
        }), collapsedItems || this.$scopedSlots.collapsedItems ? renderTNodeJSX(this, "collapsedItems", {
          params: {
            value: renderCollItems(),
            collapsedSelectedItems: renderCollItems().slice(minCollapsedNum),
            count: renderCollItems().length - minCollapsedNum
          }
        }) : h(Tag, {
          "attrs": {
            "size": size,
            "disabled": disabled
          }
        }, ["+", multipleContent.length - minCollapsedNum])]) : multipleContent.map(function (node, index) {
          return renderSelfTag(node, index);
        })]);
        var inputPlaceholder = multiple ? multipleContent.map(function (node) {
          return node.label;
        }).join("\u3001") : singleContent;

        var filterContent = function filterContent() {
          return h(Input, {
            "attrs": {
              "size": size,
              "placeholder": inputPlaceholder || placeholder || _this3.t(_this3.global.placeholder),
              "value": inputVal,
              "autofocus": visible
            },
            "on": {
              "change": function change(value2) {
                setInputVal(value2);
                setFilterActive(!!value2);
              },
              "focus": function focus(v, context) {
                return isFunction_1(onFocus) && onFocus({
                  value: value,
                  e: context === null || context === void 0 ? void 0 : context.e
                });
              },
              "blur": function blur(v, context) {
                return isFunction_1(onBlur) && onBlur({
                  value: value,
                  e: context === null || context === void 0 ? void 0 : context.e
                });
              }
            }
          });
        };

        return filterable && visible ? filterContent() : generalContent;
      },
      renderSuffixIcon: function renderSuffixIcon() {
        var _this4 = this;

        var h = this.$createElement;
        var closeShow = this.closeShow,
            closeIconClass = this.closeIconClass,
            fakeArrowIconClass = this.fakeArrowIconClass,
            _this$cascaderContext = this.cascaderContext,
            size = _this$cascaderContext.size,
            visible = _this$cascaderContext.visible,
            disabled = _this$cascaderContext.disabled,
            loading = _this$cascaderContext.loading;

        var closeIconClick = function closeIconClick(context) {
          context.e.stopPropagation();
          closeIconClickEffect(_this4.cascaderContext);
        };

        if (loading) {
          return h("span", {
            "class": "".concat(prefix, "-cascader-icon")
          }, [h(Loading, {
            "attrs": {
              "size": "small"
            }
          })]);
        }

        if (closeShow) {
          return h("transition", {
            "attrs": {
              "name": "".concat(prefix, "-cascader-close-icon-fade"),
              "appear": true
            }
          }, [h(CloseCircleFilled, {
            "class": closeIconClass,
            "attrs": {
              "size": size
            },
            "on": {
              "click": closeIconClick
            }
          })]);
        }

        return h(FakeArrow, {
          "attrs": {
            "overlayClassName": fakeArrowIconClass,
            "isActive": visible,
            "disabled": disabled
          }
        });
      }
    },
    render: function render() {
      var _this5 = this;

      var h = arguments[0];
      var $attrs = this.$attrs,
          cascaderContext = this.cascaderContext;
      return h("div", helper([{
        "ref": "inputContent",
        "class": this.cascaderInnerClasses
      }, $attrs, {
        "on": {
          "mouseenter": function mouseenter() {
            _this5.isHover = true;
          },
          "mouseleave": function mouseleave() {
            _this5.isHover = false;
          },
          "click": function click(e) {
            e.preventDefault();
            innerContentClickEffect(cascaderContext);
          }
        }
      }]), [this.renderContent(), this.renderSuffixIcon()]);
    }
  });

  var EVENT_NAME_WITH_KEBAB = ["remove", "blur", "focus"];

  function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$v = "".concat(prefix, "-cascader");
  var _Cascader = Vue__default["default"].extend({
    name: "TCascader",
    components: {
      Popup: Popup,
      Panel: Panel,
      InputContent: InputContent
    },
    props: _objectSpread$11({}, props$w),
    data: function data() {
      return {
        formDisabled: void 0,
        inputWidth: 0,
        visible: false,
        treeStore: null,
        inputVal: "",
        scopeVal: this.defaultValue,
        treeNodes: [],
        filterActive: false,
        expend: []
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      stateFns: function stateFns() {
        var _this = this;

        return {
          setTreeNodes: function setTreeNodes(nodes) {
            _this.treeNodes = nodes;
          },
          setValue: function setValue(val, source, node) {
            if (isEqual_1(val, _this.scopeVal)) return;
            emitEvent(_this, "change", val, {
              source: source,
              node: node
            });
          },
          setVisible: function setVisible(val) {
            _this.visible = val;
          },
          setFilterActive: function setFilterActive(val) {
            _this.filterActive = val;
          },
          setInputVal: function setInputVal(val) {
            _this.inputVal = val;
          },
          setExpend: function setExpend(val) {
            _this.expend = val;
          },
          setInputWidth: function setInputWidth(val) {
            _this.inputWidth = val;
          }
        };
      },
      cascaderContext: function cascaderContext() {
        var value = this.scopeVal;
        var _this$size = this.size,
            size = _this$size === void 0 ? "medium" : _this$size,
            _this$checkStrictly = this.checkStrictly,
            checkStrictly = _this$checkStrictly === void 0 ? false : _this$checkStrictly,
            _this$lazy = this.lazy,
            lazy = _this$lazy === void 0 ? true : _this$lazy,
            _this$multiple = this.multiple,
            multiple = _this$multiple === void 0 ? false : _this$multiple,
            _this$filterable = this.filterable,
            filterable = _this$filterable === void 0 ? false : _this$filterable,
            _this$clearable = this.clearable,
            clearable = _this$clearable === void 0 ? false : _this$clearable,
            _this$checkProps = this.checkProps,
            checkProps = _this$checkProps === void 0 ? {} : _this$checkProps,
            _this$max = this.max,
            max = _this$max === void 0 ? 0 : _this$max,
            tDisabled = this.tDisabled,
            _this$showAllLevels = this.showAllLevels,
            showAllLevels = _this$showAllLevels === void 0 ? true : _this$showAllLevels,
            _this$minCollapsedNum = this.minCollapsedNum,
            minCollapsedNum = _this$minCollapsedNum === void 0 ? 0 : _this$minCollapsedNum,
            loading = this.loading,
            _this$valueType = this.valueType,
            valueType = _this$valueType === void 0 ? "single" : _this$valueType;
        var visible = this.visible,
            treeStore = this.treeStore,
            treeNodes = this.treeNodes,
            filterActive = this.filterActive,
            inputVal = this.inputVal,
            inputWidth = this.inputWidth;
        return _objectSpread$11({
          valueType: valueType,
          loading: loading,
          size: size,
          disabled: tDisabled,
          checkStrictly: checkStrictly,
          lazy: lazy,
          multiple: multiple,
          filterable: filterable,
          checkProps: checkProps,
          clearable: clearable,
          showAllLevels: showAllLevels,
          max: max,
          value: value,
          visible: visible,
          treeStore: treeStore,
          treeNodes: treeNodes,
          filterActive: filterActive,
          inputVal: inputVal,
          inputWidth: inputWidth,
          minCollapsedNum: minCollapsedNum
        }, this.stateFns);
      }
    },
    watch: {
      value: {
        handler: function handler(val) {
          var valueType = this.valueType,
              multiple = this.multiple;
          if (isEqual_1(val, this.scopeVal)) return;
          this.scopeVal = getValue(val, valueType, multiple);
          this.updateExpend();
          this.updatedTreeNodes();
        }
      },
      inputVal: function inputVal() {
        var _this$cascaderContext = this.cascaderContext,
            value = _this$cascaderContext.value,
            setExpend = _this$cascaderContext.setExpend;

        if (!getTreeValue(value).length) {
          setExpend([]);
        }

        this.updatedTreeNodes();
      },
      filterActive: function filterActive() {
        var filterActive = this.cascaderContext.filterActive;

        if (!filterActive) {
          this.inputVal = "";
        }
      }
    },
    mounted: function mounted() {
      var _this2 = this;

      var value = this.value,
          multiple = this.multiple,
          _this$cascaderContext2 = this.cascaderContext,
          setValue = _this$cascaderContext2.setValue,
          showAllLevels = _this$cascaderContext2.showAllLevels,
          valueType = this.valueType;

      if (multiple && !Array.isArray(value) || !multiple && Array.isArray(value) && !showAllLevels) {
        var val = multiple ? [] : "";
        setValue(val, "invalid-value");
        console.warn("TDesign Cascader Warn:", "cascader props value invalid, v-model automatic calibration");
      }

      if (!isEmptyValues(value)) {
        this.scopeVal = getValue(value, valueType, multiple);
      }

      this.init();
      ["checkStrictly", "tDisabled", "keys", "lazy", "load", "options", "valueMode"].forEach(function (key) {
        _this2.$watch(key, function () {
          _this2.init();
        });
      });
    },
    provide: function provide() {
      return {
        tCascader: this
      };
    },
    methods: {
      init: function init() {
        var _this3 = this;

        var tDisabled = this.tDisabled,
            keys = this.keys,
            _this$checkStrictly2 = this.checkStrictly,
            checkStrictly = _this$checkStrictly2 === void 0 ? false : _this$checkStrictly2,
            _this$lazy2 = this.lazy,
            lazy = _this$lazy2 === void 0 ? true : _this$lazy2,
            load = this.load,
            options = this.options,
            _this$valueMode = this.valueMode,
            valueMode = _this$valueMode === void 0 ? "onlyLeaf" : _this$valueMode;
        if (!options || Array.isArray(options) && !options.length) return;
        this.treeStore = new TreeStore({
          keys: keys || {},
          checkable: true,
          checkStrictly: checkStrictly,
          expandMutex: true,
          expandParent: true,
          disabled: tDisabled,
          load: load,
          lazy: lazy,
          valueMode: valueMode,
          onLoad: function onLoad() {
            setTimeout(function () {
              _this3.treeStore.refreshNodes();

              _this3.updatedTreeNodes();
            }, 0);
          }
        });
        this.treeStore.append(options);
        this.$nextTick(function () {
          _this3.updateExpend();

          _this3.updatedTreeNodes();
        });
      },
      updatedTreeNodes: function updatedTreeNodes() {
        var _this$cascaderContext3 = this.cascaderContext,
            inputVal = _this$cascaderContext3.inputVal,
            treeStore = _this$cascaderContext3.treeStore,
            setTreeNodes = _this$cascaderContext3.setTreeNodes;
        treeNodesEffect(inputVal, treeStore, setTreeNodes);
      },
      updateExpend: function updateExpend() {
        var _this$cascaderContext4 = this.cascaderContext,
            treeStore = _this$cascaderContext4.treeStore,
            value = _this$cascaderContext4.value,
            expend = this.expend;
        if (!treeStore) return;
        treeStoreExpendEffect(treeStore, value, expend);
        treeStore.replaceChecked(getTreeValue(value));
      }
    },
    render: function render() {
      var _this4 = this;

      var h = arguments[0];
      var visible = this.visible,
          trigger = this.trigger,
          empty = this.empty,
          $attrs = this.$attrs,
          cascaderContext = this.cascaderContext,
          $scopedSlots = this.$scopedSlots,
          placeholder = this.placeholder,
          collapsedItems = this.collapsedItems;
      var popupProps = this.popupProps;
      var listeners = {};
      EVENT_NAME_WITH_KEBAB.forEach(function (eventName) {
        listeners[getPropsApiByEvent(eventName)] = function () {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          emitEvent.apply(void 0, [_this4, eventName].concat(args));
        };
      });
      return h(Popup, helper([{
        "class": "".concat(name$v, "__popup"),
        "attrs": {
          "overlayClassName": "".concat(name$v, "__dropdown"),
          "placement": "bottom-left",
          "visible": visible,
          "trigger": (popupProps === null || popupProps === void 0 ? void 0 : popupProps.trigger) || "click",
          "expandAnimation": true
        }
      }, {
        "props": popupProps
      }, {
        "attrs": {
          "content": function content() {
            return h("panel", {
              "attrs": {
                "empty": empty,
                "trigger": trigger,
                "cascaderContext": cascaderContext
              },
              "scopedSlots": {
                empty: $scopedSlots.empty
              }
            });
          }
        }
      }]), [h(InputContent, helper([{}, $attrs, {
        "attrs": {
          "cascaderContext": cascaderContext,
          "placeholder": placeholder,
          "listeners": listeners,
          "collapsedItems": collapsedItems
        },
        "scopedSlots": {
          collapsedItems: $scopedSlots.collapsedItems
        }
      }]))]);
    }
  });

  var Cascader = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Cascader));

  var dayjs_min = createCommonjsModule(function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = 1e3,
          e = 6e4,
          n = 36e5,
          r = "millisecond",
          i = "second",
          s = "minute",
          u = "hour",
          a = "day",
          o = "week",
          f = "month",
          h = "quarter",
          c = "year",
          d = "date",
          $ = "Invalid Date",
          l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
          y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
          M = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
      },
          m = function m(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
      },
          g = {
        s: m,
        z: function z(t) {
          var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
          return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
        },
        m: function t(e, n) {
          if (e.date() < n.date()) return -t(n, e);
          var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, f),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), f);
          return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
        },
        a: function a(t) {
          return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function p(t) {
          return {
            M: f,
            y: c,
            w: o,
            d: a,
            D: d,
            h: u,
            m: s,
            s: i,
            ms: r,
            Q: h
          }[t] || String(t || "").toLowerCase().replace(/s$/, "");
        },
        u: function u(t) {
          return void 0 === t;
        }
      },
          v = "en",
          D = {};

      D[v] = M;

      var p = function p(t) {
        return t instanceof _;
      },
          S = function t(e, n, r) {
        var i;
        if (!e) return v;

        if ("string" == typeof e) {
          var s = e.toLowerCase();
          D[s] && (i = s), n && (D[s] = n, i = s);
          var u = e.split("-");
          if (!i && u.length > 1) return t(u[0]);
        } else {
          var a = e.name;
          D[a] = e, i = a;
        }

        return !r && i && (v = i), i || !r && v;
      },
          w = function w(t, e) {
        if (p(t)) return t.clone();
        var n = "object" == _typeof(e) ? e : {};
        return n.date = t, n.args = arguments, new _(n);
      },
          O = g;

      O.l = S, O.i = p, O.w = function (t, e) {
        return w(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };

      var _ = function () {
        function M(t) {
          this.$L = S(t.locale, null, !0), this.parse(t);
        }

        var m = M.prototype;
        return m.parse = function (t) {
          this.$d = function (t) {
            var e = t.date,
                n = t.utc;
            if (null === e) return new Date(NaN);
            if (O.u(e)) return new Date();
            if (e instanceof Date) return new Date(e);

            if ("string" == typeof e && !/Z$/i.test(e)) {
              var r = e.match(l);

              if (r) {
                var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
              }
            }

            return new Date(e);
          }(t), this.$x = t.x || {}, this.init();
        }, m.init = function () {
          var t = this.$d;
          this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, m.$utils = function () {
          return O;
        }, m.isValid = function () {
          return !(this.$d.toString() === $);
        }, m.isSame = function (t, e) {
          var n = w(t);
          return this.startOf(e) <= n && n <= this.endOf(e);
        }, m.isAfter = function (t, e) {
          return w(t) < this.startOf(e);
        }, m.isBefore = function (t, e) {
          return this.endOf(e) < w(t);
        }, m.$g = function (t, e, n) {
          return O.u(t) ? this[e] : this.set(n, t);
        }, m.unix = function () {
          return Math.floor(this.valueOf() / 1e3);
        }, m.valueOf = function () {
          return this.$d.getTime();
        }, m.startOf = function (t, e) {
          var n = this,
              r = !!O.u(e) || e,
              h = O.p(t),
              $ = function $(t, e) {
            var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
            return r ? i : i.endOf(a);
          },
              l = function l(t, e) {
            return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
          },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              g = "set" + (this.$u ? "UTC" : "");

          switch (h) {
            case c:
              return r ? $(1, 0) : $(31, 11);

            case f:
              return r ? $(1, M) : $(0, M + 1);

            case o:
              var v = this.$locale().weekStart || 0,
                  D = (y < v ? y + 7 : y) - v;
              return $(r ? m - D : m + (6 - D), M);

            case a:
            case d:
              return l(g + "Hours", 0);

            case u:
              return l(g + "Minutes", 1);

            case s:
              return l(g + "Seconds", 2);

            case i:
              return l(g + "Milliseconds", 3);

            default:
              return this.clone();
          }
        }, m.endOf = function (t) {
          return this.startOf(t, !1);
        }, m.$set = function (t, e) {
          var n,
              o = O.p(t),
              h = "set" + (this.$u ? "UTC" : ""),
              $ = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o],
              l = o === a ? this.$D + (e - this.$W) : e;

          if (o === f || o === c) {
            var y = this.clone().set(d, 1);
            y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
          } else $ && this.$d[$](l);

          return this.init(), this;
        }, m.set = function (t, e) {
          return this.clone().$set(t, e);
        }, m.get = function (t) {
          return this[O.p(t)]();
        }, m.add = function (r, h) {
          var d,
              $ = this;
          r = Number(r);

          var l = O.p(h),
              y = function y(t) {
            var e = w($);
            return O.w(e.date(e.date() + Math.round(t * r)), $);
          };

          if (l === f) return this.set(f, this.$M + r);
          if (l === c) return this.set(c, this.$y + r);
          if (l === a) return y(1);
          if (l === o) return y(7);
          var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1,
              m = this.$d.getTime() + r * M;
          return O.w(m, this);
        }, m.subtract = function (t, e) {
          return this.add(-1 * t, e);
        }, m.format = function (t) {
          var e = this,
              n = this.$locale();
          if (!this.isValid()) return n.invalidDate || $;

          var r = t || "YYYY-MM-DDTHH:mm:ssZ",
              i = O.z(this),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = n.weekdays,
              f = n.months,
              h = function h(t, n, i, s) {
            return t && (t[n] || t(e, r)) || i[n].substr(0, s);
          },
              c = function c(t) {
            return O.s(s % 12 || 12, t, "0");
          },
              d = n.meridiem || function (t, e, n) {
            var r = t < 12 ? "AM" : "PM";
            return n ? r.toLowerCase() : r;
          },
              l = {
            YY: String(this.$y).slice(-2),
            YYYY: this.$y,
            M: a + 1,
            MM: O.s(a + 1, 2, "0"),
            MMM: h(n.monthsShort, a, f, 3),
            MMMM: h(f, a),
            D: this.$D,
            DD: O.s(this.$D, 2, "0"),
            d: String(this.$W),
            dd: h(n.weekdaysMin, this.$W, o, 2),
            ddd: h(n.weekdaysShort, this.$W, o, 3),
            dddd: o[this.$W],
            H: String(s),
            HH: O.s(s, 2, "0"),
            h: c(1),
            hh: c(2),
            a: d(s, u, !0),
            A: d(s, u, !1),
            m: String(u),
            mm: O.s(u, 2, "0"),
            s: String(this.$s),
            ss: O.s(this.$s, 2, "0"),
            SSS: O.s(this.$ms, 3, "0"),
            Z: i
          };

          return r.replace(y, function (t, e) {
            return e || l[t] || i.replace(":", "");
          });
        }, m.utcOffset = function () {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m.diff = function (r, d, $) {
          var l,
              y = O.p(d),
              M = w(r),
              m = (M.utcOffset() - this.utcOffset()) * e,
              g = this - M,
              v = O.m(this, M);
          return v = (l = {}, l[c] = v / 12, l[f] = v, l[h] = v / 3, l[o] = (g - m) / 6048e5, l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? v : O.a(v);
        }, m.daysInMonth = function () {
          return this.endOf(f).$D;
        }, m.$locale = function () {
          return D[this.$L];
        }, m.locale = function (t, e) {
          if (!t) return this.$L;
          var n = this.clone(),
              r = S(t, e, !0);
          return r && (n.$L = r), n;
        }, m.clone = function () {
          return O.w(this.$d, this);
        }, m.toDate = function () {
          return new Date(this.valueOf());
        }, m.toJSON = function () {
          return this.isValid() ? this.toISOString() : null;
        }, m.toISOString = function () {
          return this.$d.toISOString();
        }, m.toString = function () {
          return this.$d.toUTCString();
        }, M;
      }(),
          b = _.prototype;

      return w.prototype = b, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function (t) {
        b[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), w.extend = function (t, e) {
        return t.$i || (t(e, _, w), t.$i = !0), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function (t) {
        return w(1e3 * t);
      }, w.en = D[v], w.Ls = D, w.p = {}, w;
    });
  });

  var isBetween$1 = createCommonjsModule(function (module, exports) {
    !function (e, i) {
      module.exports = i() ;
    }(commonjsGlobal, function () {

      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
              o = t(i),
              r = "(" === (f = f || "()")[0],
              u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  });

  var props$v = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    disableDate: {
      type: [Object, Array, Function]
    },
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": void 0
    },
    inputProps: {
      type: Object
    },
    mode: {
      type: String,
      "default": "month",
      validator: function validator(val) {
        return ["year", "month", "date"].includes(val);
      }
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    range: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: Boolean,
    value: {
      type: [String, Array, Date]
    },
    defaultValue: {
      type: [String, Array, Date]
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function
  };

  var CalendarPresets = Vue__default["default"].extend({
    components: {
      TButton: Button
    },
    props: {
      global: {
        type: Object
      },
      presets: {
        type: Object
      },
      onClick: Function
    },
    methods: {
      clickPreset: function clickPreset(value) {
        this.onClick(value);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var presets = this.presets;
      return h("div", {
        "class": "".concat(prefix, "-date-picker__presets")
      }, [h("ul", [presets && Object.keys(presets).map(function (key) {
        return h("li", {
          "key": key
        }, [h("a", {
          "on": {
            "click": function click() {
              return _this.clickPreset(presets[key]);
            }
          }
        }, [key])]);
      })])]);
    }
  });

  var TDateHeader = mixins(getConfigReceiverMixins("datePicker")).extend({
    components: {
      TButton: TButton,
      RoundIcon: Round,
      ChevronLeftIcon: ChevronLeft,
      ChevronRightIcon: ChevronRight
    },
    props: {
      year: Number,
      month: Number,
      type: {
        type: String,
        "default": "date",
        validator: function validator(v) {
          return ["year", "month", "date"].indexOf(v) > -1;
        }
      },
      onBtnClick: Function,
      onTypeChange: Function
    },
    render: function render() {
      var h = arguments[0];
      var _this$$props = this.$props,
          type = _this$$props.type,
          year = _this$$props.year,
          month = _this$$props.month,
          onBtnClick = _this$$props.onBtnClick,
          onTypeChange = _this$$props.onTypeChange;
      var startYear = parseInt((this.year / 10).toString(), 10) * 10;
      var _this$global = this.global,
          rangeSeparator = _this$global.rangeSeparator,
          yearAriaLabel = _this$global.yearAriaLabel,
          now = _this$global.now,
          preMonth = _this$global.preMonth,
          preYear = _this$global.preYear,
          nextMonth = _this$global.nextMonth,
          nextYear = _this$global.nextYear,
          preDecade = _this$global.preDecade,
          nextDecade = _this$global.nextDecade;
      var preLabel;
      var nextLabel;

      if (type === "year") {
        preLabel = preDecade;
        nextLabel = nextDecade;
      } else if (type === "date") {
        preLabel = preMonth;
        nextLabel = nextMonth;
      } else {
        preLabel = preYear;
        nextLabel = nextYear;
      }

      return h("div", {
        "class": "".concat(prefix, "-date-picker__header")
      }, [h("span", {
        "class": "".concat(prefix, "-date-picker__header-title")
      }, [type === "year" && h("span", [h("span", [startYear]), rangeSeparator, h("span", [startYear + 9])]), type !== "year" && h("t-button", {
        "class": "".concat(prefix, "-date-picker__header-btn"),
        "attrs": {
          "variant": "text",
          "size": "small"
        },
        "on": {
          "click": function click() {
            return onTypeChange("year");
          }
        }
      }, ["".concat(year, " ").concat(yearAriaLabel)]), type === "date" && h("t-button", {
        "class": "".concat(prefix, "-date-picker__header-btn"),
        "attrs": {
          "variant": "text",
          "size": "small"
        },
        "on": {
          "click": function click() {
            return onTypeChange("month");
          }
        }
      }, [this.global.months[month]])]), h("span", {
        "class": "".concat(prefix, "-date-picker__header-controller")
      }, [h("t-button", {
        "class": "".concat(prefix, "-date-picker__header-controller__btn"),
        "attrs": {
          "variant": "text",
          "title": preLabel
        },
        "on": {
          "click": function click() {
            return onBtnClick(-1);
          }
        }
      }, [h("chevron-left-icon", {
        "slot": "icon"
      })]), h("t-button", {
        "class": ["".concat(prefix, "-date-picker__header-controller__btn"), "".concat(prefix, "-date-picker__header-controller__btn--now")],
        "attrs": {
          "variant": "text",
          "title": now
        },
        "on": {
          "click": function click() {
            return onBtnClick(0);
          }
        }
      }, [h("round-icon", {
        "slot": "icon"
      })]), h("t-button", {
        "class": "".concat(prefix, "-date-picker__header-controller__btn"),
        "attrs": {
          "variant": "text",
          "title": nextLabel
        },
        "on": {
          "click": function click() {
            return onBtnClick(1);
          }
        }
      }, [h("chevron-right-icon", {
        "slot": "icon"
      })])])]);
    }
  });

  var name$u = "".concat(prefix, "-date-picker-cell");
  var TDatePickerCell = Vue__default["default"].extend({
    props: {
      text: [String, Number],
      value: Date,
      active: Boolean,
      highlight: Boolean,
      disabled: Boolean,
      startOfRange: Boolean,
      endOfRange: Boolean,
      additional: Boolean,
      now: Boolean,
      firstDayOfMonth: Boolean,
      lastDayOfMonth: Boolean,
      onClick: Function,
      onMouseEnter: {
        type: Function
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var _this$$props = this.$props,
          text = _this$$props.text,
          value = _this$$props.value,
          active = _this$$props.active,
          highlight = _this$$props.highlight,
          disabled = _this$$props.disabled,
          startOfRange = _this$$props.startOfRange,
          endOfRange = _this$$props.endOfRange,
          additional = _this$$props.additional,
          now = _this$$props.now,
          firstDayOfMonth = _this$$props.firstDayOfMonth,
          lastDayOfMonth = _this$$props.lastDayOfMonth,
          onClick = _this$$props.onClick,
          onMouseEnter = _this$$props.onMouseEnter;
      var cellClass = [name$u, (_ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--now"), now), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--active"), active), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--disabled"), disabled), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--highlight"), highlight), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--active-start"), startOfRange), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--active-end"), endOfRange), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--additional"), additional), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--first-day-of-month"), firstDayOfMonth), _defineProperty$2(_ref, "".concat(prefix, "-date-picker__cell--last-day-of-month"), lastDayOfMonth), _ref)];
      return h("td", {
        "class": cellClass
      }, [h("div", {
        "class": "".concat(prefix, "-date-picker__cell-wrapper"),
        "on": {
          "click": function click(e) {
            if (!disabled) {
              onClick(value, {
                e: e
              });
            }
          },
          "mouseenter": function mouseenter() {
            return onMouseEnter && onMouseEnter(value);
          }
        }
      }, [h("span", {
        "class": "".concat(prefix, "-date-picker__cell-text")
      }, [{
        text: text
      }])])]);
    }
  });

  function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$t = "".concat(prefix, "-date-picker-table");
  var DAY_NAMES = ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"];
  var TDateTable = mixins(getConfigReceiverMixins("datePicker")).extend({
    name: name$t,
    components: {
      TDatePickerCell: TDatePickerCell
    },
    props: {
      type: {
        type: String,
        "default": "day"
      },
      data: Array,
      firstDayOfWeek: Number,
      dayNames: {
        type: Array,
        "default": function _default() {
          return DAY_NAMES;
        }
      },
      onCellClick: {
        type: Function
      },
      onCellMouseEnter: {
        type: Function
      }
    },
    render: function render() {
      var h = arguments[0];
      var type = this.type,
          data = this.data,
          onCellClick = this.onCellClick,
          onCellMouseEnter = this.onCellMouseEnter,
          firstDayOfWeek = this.firstDayOfWeek;
      var weekdays = this.global.weekdays;
      var weekArr = [];
      var wi = firstDayOfWeek - 1;
      var len = weekdays.length;

      while (weekArr.length < len) {
        weekArr.push(weekdays[wi]);
        wi = (wi + len + 1) % len;
      }

      var panelClass = "".concat(prefix, "-date-picker--").concat(type);
      return h("div", {
        "class": panelClass
      }, [h("table", [type === "date" && h("thead", [h("tr", [weekArr.map(function (value, i) {
        return h("th", {
          "key": i
        }, [value]);
      })])]), h("tbody", [data.map(function (row, i) {
        return h("tr", {
          "key": i
        }, [row.map(function (col, j) {
          return h("t-date-picker-cell", {
            "props": _objectSpread$10({}, _objectSpread$10(_objectSpread$10({}, col), {}, {
              onClick: onCellClick,
              onMouseEnter: onCellMouseEnter
            })),
            "key": j
          });
        })]);
      })])])]);
    }
  });

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  /** Used as references for various `Number` constants. */

  var INFINITY$1 = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;
  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */

  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber_1(value);

    if (value === INFINITY$1 || value === -INFINITY$1) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite;

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */

  function toInteger(value) {
    var result = toFinite_1(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  var toInteger_1 = toInteger;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil = Math.ceil,
      nativeMax$1 = Math.max;
  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */

  function chunk(array, size, guard) {
    if (guard ? _isIterateeCall(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax$1(toInteger_1(size), 0);
    }

    var length = array == null ? 0 : array.length;

    if (!length || size < 1) {
      return [];
    }

    var index = 0,
        resIndex = 0,
        result = Array(nativeCeil(length / size));

    while (index < length) {
      result[resIndex++] = _baseSlice(array, index, index += size);
    }

    return result;
  }

  var chunk_1 = chunk;

  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }

  function getFirstDayOfMonth(_ref) {
    var year = _ref.year,
        month = _ref.month;
    return new Date(year, month, 1);
  }

  function getDaysInMonth(_ref2) {
    var year = _ref2.year,
        month = _ref2.month;
    return new Date(year, month + 1, 0).getDate();
  }

  function getLastDayOfMonth(_ref3) {
    var year = _ref3.year,
        month = _ref3.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }

  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }

  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }

  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }

  function isBetween(value, _ref4) {
    var start = _ref4.start,
        end = _ref4.end;
    var date = new Date(value.getFullYear(), value.getMonth(), value.getDate());
    var startTime = new Date(start.getFullYear(), start.getMonth(), start.getDate());
    var endTime = new Date(end.getFullYear(), end.getMonth(), end.getDate());
    return startTime <= date && endTime >= date;
  }

  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }

  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var func = {
      isSameYear: isSameYear,
      isSameMonth: isSameMonth,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function getDateObj(date) {
    var tempDate = date;

    if (!(date instanceof Date)) {
      tempDate = getToday();
    }

    return {
      year: tempDate.getFullYear(),
      month: tempDate.getMonth(),
      date: tempDate.getDate(),
      hours: tempDate.getHours(),
      minutes: tempDate.getMinutes(),
      seconds: tempDate.getSeconds(),
      meridiem: tempDate.getHours() > 11 ? "PM" : "AM"
    };
  }
  function setDateTime(d, hour, min, sec) {
    var _getDateObj = getDateObj(d),
        year = _getDateObj.year,
        month = _getDateObj.month,
        date = _getDateObj.date;

    return new Date(year, month, date, hour, min, sec, 0);
  }
  function subtractMonth(date, num) {
    var day = date.getDate();
    var newDate = new Date(date);
    var _num = num;

    while (_num--) {
      newDate.setDate(0);
    }

    newDate.setDate(day);
    return newDate;
  }
  function addMonth(date, num) {
    var _num = num;
    if (num < 0) _num = 0;
    var newDate = new Date(date);
    newDate.setMonth(date.getMonth() + _num);
    return newDate;
  }
  function getWeeks(_ref5, _ref6) {
    var year = _ref5.year,
        month = _ref5.month;
    var firstDayOfWeek = _ref6.firstDayOfWeek,
        _ref6$disableDate = _ref6.disableDate,
        disableDate = _ref6$disableDate === void 0 ? function () {
      return false;
    } : _ref6$disableDate,
        minDate = _ref6.minDate,
        maxDate = _ref6.maxDate;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var i = 1;
    var today = getToday();

    for (i; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month"
      });
    }

    if (prependDay.getDay() !== firstDayOfWeek) {
      prependDay.setDate(0);

      while (true) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month"
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }

    var LEN = 42;

    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month"
      });
    }

    return chunk_1(daysArr, 7);
  }
  function getYears(year, _ref7) {
    var _ref7$disableDate = _ref7.disableDate,
        disableDate = _ref7$disableDate === void 0 ? function () {
      return false;
    } : _ref7$disableDate,
        minDate = _ref7.minDate,
        maxDate = _ref7.maxDate;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();

    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 1);
      var disabledMonth = 0;
      var outOfRangeMonth = 0;

      for (var j = 0; j < 12; j++) {
        var d = new Date(i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledMonth += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeMonth += 1;
      }

      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: disabledMonth === 12 || outOfRangeMonth === 12,
        active: false,
        text: "".concat(date.getFullYear())
      });
    }

    return chunk_1(yearArr, 4);
  }
  function getMonths(year, params) {
    var _params$disableDate = params.disableDate,
        disableDate = _params$disableDate === void 0 ? function () {
      return false;
    } : _params$disableDate,
        minDate = params.minDate,
        maxDate = params.maxDate,
        monthLocal = params.monthLocal;
    var MonthArr = [];
    var today = getToday();

    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      var disabledDay = 0;
      var outOfRangeDay = 0;
      var daysInMonth = getDaysInMonth({
        year: year,
        month: i
      });

      for (var j = 1; j <= daysInMonth; j++) {
        var d = new Date(year, i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledDay += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeDay += 1;
      }

      MonthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
        active: false,
        text: monthLocal[date.getMonth()]
      });
    }

    return chunk_1(MonthArr, 4);
  }
  function flagActive(data, _ref8) {
    var args = _extends({}, _ref8);

    var start = args.start,
        end = args.end,
        _args$type = args.type,
        type = _args$type === void 0 ? "date" : _args$type;

    if (!end) {
      return data.map(function (row) {
        return row.map(function (item) {
          var _item = item;
          _item.active = isSame(item.value, start, type);
          return _item;
        });
      });
    }

    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        var date = item.value;
        var isStart = isSame(start, date, type);
        var isEnd = isSame(end, date, type);
        _item.active = isStart || isEnd;
        _item.highlight = isBetween(date, {
          start: start,
          end: end
        });
        _item.startOfRange = isStart;
        _item.endOfRange = isEnd;
        return _item;
      });
    });
  }
  function extractTimeFormat(dateFormat) {
    var res = dateFormat.match(/(a\s)?h{1,2}:m{1,2}(:s{1,2})?(\sa)?/i);
    if (!res) return null;
    return res[0];
  }

  function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TDate = Vue__default["default"].extend({
    name: "TDatePanel",
    components: {
      TDateHeader: TDateHeader,
      TDateTable: TDateTable
    },
    inheritAttrs: false,
    props: {
      global: {
        type: Object
      },
      value: {
        type: Date,
        "default": function _default() {
          return getToday();
        }
      },
      mode: props$v.mode,
      minDate: Date,
      maxDate: Date,
      firstDayOfWeek: props$v.firstDayOfWeek,
      disableDate: props$v.disableDate,
      onChange: props$v.onChange
    },
    data: function data() {
      return {
        year: this.value.getFullYear(),
        month: this.value.getMonth(),
        type: this.mode
      };
    },
    computed: {
      tableData: function tableData() {
        var _this$global;

        var year = this.year,
            month = this.month,
            type = this.type,
            value = this.value,
            mode = this.mode,
            disableDate = this.disableDate,
            minDate = this.minDate,
            maxDate = this.maxDate,
            firstDayOfWeek = this.firstDayOfWeek;
        var data;
        var options = {
          disableDate: disableDate,
          minDate: minDate,
          maxDate: maxDate,
          firstDayOfWeek: firstDayOfWeek,
          monthLocal: (_this$global = this.global) === null || _this$global === void 0 ? void 0 : _this$global.months
        };

        switch (type) {
          case "date":
            data = getWeeks({
              year: year,
              month: month
            }, options);
            break;

          case "month":
            data = getMonths(year, options);
            break;

          case "year":
            data = getYears(year, options);
            break;
        }

        var start = type === "date" || type === mode ? value : new Date(year, month);
        return flagActive(data, {
          start: start,
          type: type
        });
      }
    },
    watch: {
      mode: function mode(value) {
        this.type = value;
      },
      value: function value(_value) {
        this.year = _value.getFullYear();
        this.month = _value.getMonth();
      }
    },
    methods: {
      getClickHandler: function getClickHandler() {
        return this["click".concat(firstUpperCase(this.type))];
      },
      clickDate: function clickDate(date) {
        this.$props.onChange(date);
      },
      clickMonth: function clickMonth(date) {
        if (this.mode === "month") {
          this.$props.onChange(date);
        } else {
          this.$data.type = "date";
          this.$data.year = date.getFullYear();
          this.$data.month = date.getMonth();
        }
      },
      clickYear: function clickYear(date) {
        if (this.mode === "year") {
          this.$props.onChange(date);
        } else {
          this.$data.type = "month";
          this.$data.year = date.getFullYear();
        }
      },
      clickHeader: function clickHeader(flag) {
        var monthCount = 0;
        var next = null;

        switch (this.$data.type) {
          case "date":
            monthCount = 1;
            break;

          case "month":
            monthCount = 12;
            break;

          case "year":
            monthCount = 120;
        }

        var current = new Date(this.$data.year, this.$data.month);

        switch (flag) {
          case 1:
            next = addMonth(current, monthCount);
            break;

          case -1:
            next = subtractMonth(current, monthCount);
            break;

          case 0:
            next = new Date();
            break;
        }

        this.$data.year = next.getFullYear();
        this.$data.month = next.getMonth();
      },
      onTypeChange: function onTypeChange(type) {
        this.$data.type = type;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": "".concat(prefix, "-date-picker__panel")
      }, [h("t-date-header", {
        "attrs": {
          "year": this.year,
          "month": this.month,
          "type": this.$data.type
        },
        "props": _objectSpread$$({}, {
          onBtnClick: this.clickHeader,
          onTypeChange: this.onTypeChange
        })
      }), h("t-date-table", {
        "attrs": {
          "type": this.$data.type,
          "first-day-of-week": this.firstDayOfWeek,
          "data": this.tableData
        },
        "props": _objectSpread$$({}, {
          onCellClick: this.getClickHandler()
        })
      })]);
    }
  });

  function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TODAY = getToday();
  var LEFT = "left";
  var RIGHT = "right";
  var TDateRange = Vue__default["default"].extend({
    name: "TDatePickerDateRange",
    components: {
      TDateHeader: TDateHeader,
      TDateTable: TDateTable
    },
    inheritAttrs: false,
    props: {
      global: {
        type: Object
      },
      mode: {
        type: String,
        "default": "date",
        validator: function validator(v) {
          return ["year", "month", "date"].indexOf(v) > -1;
        }
      },
      value: {
        type: Array,
        "default": function _default() {
          return [TODAY, TODAY];
        }
      },
      minDate: Date,
      maxDate: Date,
      firstDayOfWeek: props$v.firstDayOfWeek,
      disableDate: props$v.disableDate,
      onChange: props$v.onChange,
      onPick: Function
    },
    data: function data() {
      return {
        leftYear: null,
        leftMonth: null,
        rightMonth: null,
        rightYear: null,
        leftType: this.mode,
        rightType: this.mode,
        startValue: null,
        endValue: null,
        isFirstClick: true,
        firstClickValue: null
      };
    },
    computed: {
      leftData: function leftData() {
        return this.getData({
          year: this.leftYear,
          month: this.leftMonth,
          type: this.leftType
        });
      },
      rightData: function rightData() {
        return this.getData({
          year: this.rightYear,
          month: this.rightMonth,
          type: this.rightType
        });
      }
    },
    watch: {
      value: {
        handler: function handler(value) {
          var _value = _slicedToArray(value, 2),
              _value$ = _value[0],
              startValue = _value$ === void 0 ? TODAY : _value$,
              _value$2 = _value[1],
              endValue = _value$2 === void 0 ? TODAY : _value$2;

          this.startValue = startValue;
          this.endValue = endValue;
        },
        immediate: true
      },
      mode: function mode(value) {
        this.leftType = value;
        this.rightType = value;
      }
    },
    created: function created() {
      this.initialPicker();
    },
    beforeDestroy: function beforeDestroy() {
      this.initialPicker();
    },
    methods: {
      initialPicker: function initialPicker() {
        var data = this.getLeftAndRightDataFromValue(this.value);
        this.leftYear = data.leftYear;
        this.leftMonth = data.leftMonth;
        this.rightYear = data.rightYear;
        this.rightMonth = data.rightMonth;
        this.leftType = this.$props.mode;
        this.rightType = this.$props.mode;

        var _this$$props$value = _slicedToArray(this.$props.value, 2),
            startValue = _this$$props$value[0],
            endValue = _this$$props$value[1];

        this.startValue = startValue;
        this.endValue = endValue;
        this.isFirstClick = true;
        this.firstClickValue = TODAY;
      },
      getLeftAndRightDataFromValue: function getLeftAndRightDataFromValue(value) {
        var _ref = value || this.value,
            _ref2 = _slicedToArray(_ref, 2),
            _ref2$ = _ref2[0],
            startValue = _ref2$ === void 0 ? TODAY : _ref2$,
            _ref2$2 = _ref2[1],
            endValue = _ref2$2 === void 0 ? TODAY : _ref2$2;

        var leftYear = startValue.getFullYear();
        var leftMonth = startValue.getMonth();
        var rightMonth = endValue.getMonth();
        var rightYear = endValue.getFullYear();

        if (this.mode === "date" && isSame(startValue, endValue, "month")) {
          var next = addMonth(endValue, 1);
          rightMonth = addMonth(endValue, 1).getMonth();
          rightYear = next.getFullYear();
        }

        if (this.mode === "month" && isSame(startValue, endValue, "year")) {
          rightYear = leftYear + 1;
        }

        if (this.mode === "year" && isSame(startValue, endValue, "year")) {
          rightYear = leftYear + 10;
        }

        return {
          leftYear: leftYear,
          leftMonth: leftMonth,
          rightMonth: rightMonth,
          rightYear: rightYear
        };
      },
      getData: function getData(_ref3) {
        var _this$global;

        var year = _ref3.year,
            month = _ref3.month,
            type = _ref3.type;
        var disableDate = this.disableDate,
            minDate = this.minDate,
            maxDate = this.maxDate,
            startValue = this.startValue,
            endValue = this.endValue,
            firstDayOfWeek = this.firstDayOfWeek;
        var data;
        var start = startValue;
        var end = endValue;
        var options = {
          disableDate: disableDate,
          minDate: minDate,
          maxDate: maxDate,
          firstDayOfWeek: firstDayOfWeek,
          monthLocal: (_this$global = this.global) === null || _this$global === void 0 ? void 0 : _this$global.months
        };

        switch (type) {
          case "date":
            data = getWeeks({
              year: year,
              month: month
            }, options);
            break;

          case "month":
            data = getMonths(year, options);
            break;

          case "year":
            data = getYears(year, options);
            break;
        }

        return flagActive(data, {
          start: start,
          end: end,
          type: type
        });
      },
      getClickHandler: function getClickHandler(direction, date, e) {
        var type = this["".concat(direction, "Type")];
        return this["click".concat(firstUpperCase(type))](date, e, direction);
      },
      clickHeader: function clickHeader(flag, direction) {
        var year = this["".concat(direction, "Year")];
        var month = this["".concat(direction, "Month")];
        var type = this["".concat(direction, "Type")];
        var monthCount;
        var next;

        switch (type) {
          case "date":
            monthCount = 1;
            break;

          case "month":
            monthCount = 12;
            break;

          case "year":
            monthCount = 120;
        }

        var current = new Date(year, month);

        if (flag === 1) {
          next = addMonth(current, monthCount);
        } else if (flag === -1) {
          next = subtractMonth(current, monthCount);
        } else {
          next = new Date();
        }

        this["".concat(direction, "Year")] = next.getFullYear();
        this["".concat(direction, "Month")] = next.getMonth();
      },
      clickDate: function clickDate(date, e) {
        var partial = "start";

        if (this.isFirstClick) {
          this.startValue = date;
          this.endValue = date;
          this.isFirstClick = false;
          this.firstClickValue = date;
        } else {
          if (dayjs_min(this.firstClickValue).isBefore(dayjs_min(date), "day")) {
            this.endValue = date;
          } else {
            this.endValue = this.firstClickValue;
            this.startValue = date;
          }

          this.$props.onChange([setDateTime(this.startValue, 0, 0, 0), setDateTime(this.endValue, 23, 59, 59)]);
          this.isFirstClick = true;
          partial = "end";
        }

        this.$props.onPick && this.$props.onPick(date, {
          e: e,
          partial: partial
        });
      },
      clickYear: function clickYear(date, e, type) {
        if (this.mode === "year") {
          if (this.isFirstClick) {
            this.startValue = date;
            this.isFirstClick = false;
            this.firstClickValue = date;
          } else {
            this.$props.onChange([this.startValue, this.endValue]);
            this.isFirstClick = true;
          }
        } else {
          this["".concat(type, "Type")] = "month";
          this["".concat(type, "Year")] = date.getFullYear();
        }
      },
      clickMonth: function clickMonth(date, e, type) {
        if (this.mode === "month") {
          if (this.isFirstClick) {
            this.startValue = date;
            this.isFirstClick = false;
            this.firstClickValue = date;
          } else {
            if (this.endValue < this.startValue) {
              this.endValue = this.startValue;
            }

            this.$props.onChange([this.startValue, this.endValue]);
            this.isFirstClick = true;
          }
        } else {
          this["".concat(type, "Type")] = "date";
          this["".concat(type, "Month")] = date.getMonth();
          this["".concat(type, "Year")] = date.getFullYear();
        }
      },
      onMouseEnter: function onMouseEnter(date) {
        if (this.isFirstClick) {
          return;
        }

        if (this.firstClickValue.getTime() > date.getTime()) {
          this.startValue = date;
          this.endValue = this.firstClickValue;
        } else {
          this.startValue = this.firstClickValue;
          this.endValue = date;
        }
      },
      onTypeChange: function onTypeChange() {
        this.startValue = this.firstClickValue;
        this.endValue = this.firstClickValue;
      },
      handleTypeChange: function handleTypeChange(direction, type) {
        this.$data["".concat(direction, "Type")] = type;
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var leftType = this.leftType,
          rightType = this.rightType,
          firstDayOfWeek = this.firstDayOfWeek;
      return h("div", {
        "class": "".concat(prefix, "-date-picker__panels")
      }, [h("div", {
        "class": "".concat(prefix, "-date-picker__panel")
      }, [h("t-date-header", {
        "attrs": {
          "year": this.leftYear,
          "month": this.leftMonth,
          "type": leftType
        },
        "props": _objectSpread$_({}, {
          onBtnClick: function onBtnClick(flag) {
            return _this.clickHeader(flag, LEFT);
          },
          onTypeChange: function onTypeChange(type) {
            return _this.handleTypeChange(LEFT, type);
          }
        })
      }), h("t-date-table", {
        "attrs": {
          "type": leftType,
          "first-day-of-week": firstDayOfWeek,
          "data": this.leftData
        },
        "props": _objectSpread$_({}, {
          onCellClick: function onCellClick(date, e) {
            return _this.getClickHandler(LEFT, date, e);
          },
          onCellMouseEnter: this.onMouseEnter
        })
      })]), h("div", {
        "class": "".concat(prefix, "-date-picker__panel ")
      }, [h("t-date-header", {
        "attrs": {
          "year": this.rightYear,
          "month": this.rightMonth,
          "type": rightType
        },
        "props": _objectSpread$_({}, {
          onBtnClick: function onBtnClick(flag) {
            return _this.clickHeader(flag, RIGHT);
          },
          onTypeChange: function onTypeChange(type) {
            return _this.handleTypeChange(RIGHT, type);
          }
        })
      }), h("t-date-table", {
        "attrs": {
          "type": rightType,
          "first-day-of-week": firstDayOfWeek,
          "data": this.rightData
        },
        "on": _objectSpread$_({}, {
          "update:type": this.onTypeChange
        }),
        "props": _objectSpread$_({}, {
          onCellClick: function onCellClick(date, e) {
            return _this.getClickHandler(RIGHT, date, e);
          },
          onCellMouseEnter: this.onMouseEnter
        })
      })])]);
    }
  });

  var customParseFormat = createCommonjsModule(function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      },
          e = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
          n = /\d\d/,
          r = /\d\d?/,
          i = /\d*[^\s\d-_:/()]+/,
          o = {},
          s = function s(t) {
        return (t = +t) + (t > 68 ? 1900 : 2e3);
      };

      var a = function a(t) {
        return function (e) {
          this[t] = +e;
        };
      },
          f = [/[+-]\d\d:?(\d\d)?|Z/, function (t) {
        (this.zone || (this.zone = {})).offset = function (t) {
          if (!t) return 0;
          if ("Z" === t) return 0;
          var e = t.match(/([+-]|\d\d)/g),
              n = 60 * e[1] + (+e[2] || 0);
          return 0 === n ? 0 : "+" === e[0] ? -n : n;
        }(t);
      }],
          u = function u(t) {
        var e = o[t];
        return e && (e.indexOf ? e : e.s.concat(e.f));
      },
          h = function h(t, e) {
        var n,
            r = o.meridiem;

        if (r) {
          for (var i = 1; i <= 24; i += 1) {
            if (t.indexOf(r(i, 0, e)) > -1) {
              n = i > 12;
              break;
            }
          }
        } else n = t === (e ? "pm" : "PM");

        return n;
      },
          d = {
        A: [i, function (t) {
          this.afternoon = h(t, !1);
        }],
        a: [i, function (t) {
          this.afternoon = h(t, !0);
        }],
        S: [/\d/, function (t) {
          this.milliseconds = 100 * +t;
        }],
        SS: [n, function (t) {
          this.milliseconds = 10 * +t;
        }],
        SSS: [/\d{3}/, function (t) {
          this.milliseconds = +t;
        }],
        s: [r, a("seconds")],
        ss: [r, a("seconds")],
        m: [r, a("minutes")],
        mm: [r, a("minutes")],
        H: [r, a("hours")],
        h: [r, a("hours")],
        HH: [r, a("hours")],
        hh: [r, a("hours")],
        D: [r, a("day")],
        DD: [n, a("day")],
        Do: [i, function (t) {
          var e = o.ordinal,
              n = t.match(/\d+/);
          if (this.day = n[0], e) for (var r = 1; r <= 31; r += 1) {
            e(r).replace(/\[|\]/g, "") === t && (this.day = r);
          }
        }],
        M: [r, a("month")],
        MM: [n, a("month")],
        MMM: [i, function (t) {
          var e = u("months"),
              n = (u("monthsShort") || e.map(function (t) {
            return t.substr(0, 3);
          })).indexOf(t) + 1;
          if (n < 1) throw new Error();
          this.month = n % 12 || n;
        }],
        MMMM: [i, function (t) {
          var e = u("months").indexOf(t) + 1;
          if (e < 1) throw new Error();
          this.month = e % 12 || e;
        }],
        Y: [/[+-]?\d+/, a("year")],
        YY: [n, function (t) {
          this.year = s(t);
        }],
        YYYY: [/\d{4}/, a("year")],
        Z: f,
        ZZ: f
      };

      function c(n) {
        var r, i;
        r = n, i = o && o.formats;

        for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (e, n, r) {
          var o = r && r.toUpperCase();
          return n || i[r] || t[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (t, e, n) {
            return e || n.slice(1);
          });
        })).match(e), a = s.length, f = 0; f < a; f += 1) {
          var u = s[f],
              h = d[u],
              c = h && h[0],
              l = h && h[1];
          s[f] = l ? {
            regex: c,
            parser: l
          } : u.replace(/^\[|\]$/g, "");
        }

        return function (t) {
          for (var e = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ("string" == typeof i) r += i.length;else {
              var o = i.regex,
                  f = i.parser,
                  u = t.substr(r),
                  h = o.exec(u)[0];
              f.call(e, h), t = t.replace(h, "");
            }
          }

          return function (t) {
            var e = t.afternoon;

            if (void 0 !== e) {
              var n = t.hours;
              e ? n < 12 && (t.hours += 12) : 12 === n && (t.hours = 0), delete t.afternoon;
            }
          }(e), e;
        };
      }

      return function (t, e, n) {
        n.p.customParseFormat = !0, t && t.parseTwoDigitYear && (s = t.parseTwoDigitYear);
        var r = e.prototype,
            i = r.parse;

        r.parse = function (t) {
          var e = t.date,
              r = t.utc,
              s = t.args;
          this.$u = r;
          var a = s[1];

          if ("string" == typeof a) {
            var f = !0 === s[2],
                u = !0 === s[3],
                h = f || u,
                d = s[2];
            u && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (t, e, n) {
              try {
                if (["x", "X"].indexOf(e) > -1) return new Date(("X" === e ? 1e3 : 1) * t);
                var r = c(e)(t),
                    i = r.year,
                    o = r.month,
                    s = r.day,
                    a = r.hours,
                    f = r.minutes,
                    u = r.seconds,
                    h = r.milliseconds,
                    d = r.zone,
                    l = new Date(),
                    m = s || (i || o ? 1 : l.getDate()),
                    M = i || l.getFullYear(),
                    Y = 0;
                i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                var p = a || 0,
                    v = f || 0,
                    D = u || 0,
                    g = h || 0;
                return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
              } catch (t) {
                return new Date("");
              }
            }(e, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), h && e != this.format(a) && (this.$d = new Date("")), o = {};
          } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
            s[1] = a[m - 1];
            var M = n.apply(this, s);

            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }

            m === l && (this.$d = new Date(""));
          } else i.call(this, t);
        };
      };
    });
  });

  var KeyboardDirection = /* @__PURE__ */function (KeyboardDirection2) {
    KeyboardDirection2[KeyboardDirection2["left"] = 37] = "left";
    KeyboardDirection2[KeyboardDirection2["up"] = 38] = "up";
    KeyboardDirection2[KeyboardDirection2["right"] = 39] = "right";
    KeyboardDirection2[KeyboardDirection2["down"] = 40] = "down";
    return KeyboardDirection2;
  }(KeyboardDirection || {});
  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});

  var componentName = "".concat(prefix, "-time-picker");
  var AM = "AM";
  var PM = "PM";
  var MERIDIEM_LIST = [AM, PM];
  var AM_FORMAT = /^(a|A)\s+?[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?$/;
  var PM_Format = /^[h]{1,2}(:[m]{1,2}(:[s]{1,2})?)?(\s+(a|A))?$/;
  var TIME_PICKER_EMPTY = [void 0, void 0];
  var EMPTY_VALUE = -1;

  var props$u = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    disableTime: {
      type: Function
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: String,
      "default": ""
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onClose: Function,
    onFocus: Function,
    onInput: Function,
    onOpen: Function
  };

  function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BooleanType = {
    type: Boolean,
    "default": true,
    validator: function validator(v) {
      return typeof v === "boolean";
    }
  };
  var panelProps = function panelProps() {
    return {
      disabled: _objectSpread$Z(_objectSpread$Z({}, BooleanType), {
        "default": false
      }),
      isFocus: _objectSpread$Z(_objectSpread$Z({}, BooleanType), {
        "default": false
      }),
      value: {
        type: Array,
        "default": function _default() {
          return [dayjs_min()];
        }
      },
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      steps: _objectSpread$Z({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      isShowPanel: _objectSpread$Z(_objectSpread$Z({}, BooleanType), {
        "default": false
      }),
      hideDisabledTime: _objectSpread$Z({}, props$u.hideDisabledTime),
      disableTime: _objectSpread$Z({}, props$u.disableTime),
      isFooterDisplay: _objectSpread$Z({}, BooleanType)
    };
  };
  var panelColProps = function panelColProps() {
    return {
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      cols: {
        type: Array,
        "default": function _default() {
          return [EPickerCols.hour, EPickerCols.minute, EPickerCols.second];
        }
      },
      value: _objectSpread$Z({
        type: Object
      }, {
        "default": function _default() {
          return dayjs_min();
        }
      }),
      range: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      steps: _objectSpread$Z({
        type: Array
      }, {
        "default": [1, 1, 1]
      }),
      hideDisabledTime: _objectSpread$Z({}, props$u.hideDisabledTime),
      disableTime: _objectSpread$Z({}, props$u.disableTime),
      localeMeridiems: {
        type: Array
      }
    };
  };

  var name$s = "".concat(prefix, "-time-picker-pane-col");
  dayjs_min.extend(customParseFormat);
  var PanelCol = Vue__default["default"].extend({
    name: name$s,
    data: function data() {
      return {
        splitValue: /* @__PURE__ */Object.create(null),
        timeArr: [EPickerCols.hour, EPickerCols.minute, EPickerCols.second]
      };
    },
    props: panelColProps(),
    computed: {
      valStr: function valStr() {
        return dayjs_min(this.value, this.format).format(this.format);
      },
      isPm: function isPm() {
        return dayjs_min(this.valStr, this.format).hour() >= 12;
      },
      currentTimes: function currentTimes() {
        return [Number(this.value.get("hour")), Number(this.value.get("minute")), Number(this.value.get("second"))];
      },
      timeItemMargin: function timeItemMargin() {
        var _this$$el, _this$$el$querySelect;

        var maskDom = (_this$$el = this.$el) === null || _this$$el === void 0 ? void 0 : (_this$$el$querySelect = _this$$el.querySelector) === null || _this$$el$querySelect === void 0 ? void 0 : _this$$el$querySelect.call(_this$$el, ".".concat(componentName, "__panel-body-active-mask > div"));
        return maskDom && parseInt(getComputedStyle(maskDom).margin, 10);
      }
    },
    methods: {
      getTimeItemHeight: function getTimeItemHeight(col) {
        var cols = this.$refs["".concat(col, "_scroller")];
        return cols.querySelector("li").offsetHeight;
      },
      generateColTime: function generateColTime(col) {
        var res;
        var count;

        if (this.timeArr.includes(col)) {
          var colIdx = this.timeArr.indexOf(col);

          if (col === EPickerCols.hour) {
            count = /[h]{1}/.test(this.format) ? 11 : 23;
          } else {
            count = 59;
          }

          res = this.generateTimeList(count, Number(this.steps[colIdx]));
        } else {
          res = this.localeMeridiems;
        }

        return res;
      },
      generateTimeList: function generateTimeList(num, step) {
        var res = [];
        var count = 0;

        while (count <= num) {
          if (!/[h]{1}/.test(this.format) && count < 10) {
            res.push("0".concat(count));
          } else {
            res.push(count);
          }

          count += step;
        }

        return res;
      },
      disableFilter: function disableFilter(preIdx, col) {
        var _this = this;

        var filteredIdx = preIdx;

        if (this.hideDisabledTime && this.disableTime) {
          var timeList = this.generateColTime(col);
          var index = this.timeArr.indexOf(col);
          filteredIdx = timeList.filter(function (t) {
            var _this$disableTime;

            var params = _this.currentTimes;
            params[index] = Number(t);
            return _this.disableTime && !((_this$disableTime = _this.disableTime) !== null && _this$disableTime !== void 0 && _this$disableTime.apply(_this, params));
          }).indexOf(preIdx);
        }

        return filteredIdx;
      },
      calculateTimeIdx: function calculateTimeIdx(time, step, type) {
        var timeIdx = time;
        timeIdx = this.disableFilter(Number(timeIdx), type);
        return Math.floor(Number(timeIdx) / Number(step));
      },
      getScrollDistance: function getScrollDistance(col, time) {
        var timeIndex;

        if (this.timeArr.includes(col)) {
          var colIdx = this.timeArr.indexOf(col);
          timeIndex = this.calculateTimeIdx(time, this.steps[colIdx], col);

          if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
            timeIndex %= 12;
          }
        } else {
          timeIndex = this.localeMeridiems.indexOf(time.toUpperCase());
        }

        var timeItemTotalHeight = this.getTimeItemHeight(col) + this.timeItemMargin;
        var distance = timeIndex * timeItemTotalHeight + timeItemTotalHeight / 2;
        return distance;
      },
      scrollToTime: function scrollToTime(col, time) {
        var behavior = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "auto";
        var distance = this.getScrollDistance(col, time);
        var scroller = this.$refs["".concat(col, "_scroller")];
        if (!distance || !scroller) return;
        if (scroller.scrollTop === distance) return;
        scroller.scrollTo({
          top: distance,
          behavior: behavior
        });
      },
      updateTimeScrollPos: function updateTimeScrollPos() {
        var _this2 = this;

        var hour = EPickerCols.hour,
            minute = EPickerCols.minute,
            second = EPickerCols.second;
        var isNormalScroll = this.steps.filter(function (step) {
          return step !== 1;
        }).length < 1 || Number(this.splitValue[hour]) !== Number(this.steps[0]) - 1 || Number(this.splitValue[minute]) !== Number(this.steps[1]) - 1 || Number(this.splitValue[second]) !== Number(this.steps[2]) - 1;
        this.cols.forEach(function (col) {
          isNormalScroll ? _this2.scrollToTime(col, _this2.splitValue[col]) : _this2.scrollToTime(col, 0);
        });
      },
      generateColRows: function generateColRows(col) {
        var _this3 = this;

        var h = this.$createElement;
        return this.generateColTime(col).map(function (el) {
          var _ref;

          if (!_this3.timeItemCanUsed(col, el) && _this3.hideDisabledTime) return null;

          var isCurrent = _this3.isCurrent(col, el);

          if (isCurrent) {
            _this3.splitValue[col] = el;
          }

          var classNames = ["".concat(componentName, "__panel-body-scroll-item"), (_ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), !_this3.timeItemCanUsed(col, el)), _defineProperty$2(_ref, "".concat(prefix, "-is-current"), isCurrent), _ref)];
          return h("li", {
            "class": classNames,
            "on": {
              "click": function click(e) {
                return _this3.handleTimeItemClick(e, col, el);
              }
            }
          }, [el]);
        });
      },
      handleTimeItemClick: function handleTimeItemClick(_e, col, time) {
        var canUse = this.timeItemCanUsed(col, time);

        if (canUse) {
          this.scrollToTime(col, time, "smooth");
          this.$emit("time-pick", col, time);
        }
      },
      isCurrent: function isCurrent(col, colItem) {
        var colVal;

        switch (col) {
          case EPickerCols.meridiem:
            return this.isPm === (colItem === this.localeMeridiems[1]);

          case EPickerCols.hour:
          case EPickerCols.minute:
          case EPickerCols.second:
            colVal = this.value.get(col);

            if (col === EPickerCols.hour && /[h]{1}/.test(this.format)) {
              colVal %= 12;
            }

            return colVal === Number(colItem);
        }
      },
      timeItemCanUsed: function timeItemCanUsed(col, time) {
        if (this.timeArr.includes(col)) {
          var _this$disableTime2;

          var index = this.timeArr.indexOf(col);
          var params = this.currentTimes;
          params[index] = Number(time);
          return !(this.disableTime && (_this$disableTime2 = this.disableTime) !== null && _this$disableTime2 !== void 0 && _this$disableTime2.apply(this, params));
        }

        return true;
      },
      renderScrollers: function renderScrollers() {
        var _this4 = this;

        return this.cols.map(function (col) {
          return _this4.renderScroller(col);
        });
      },
      renderScroller: function renderScroller(col) {
        var _this5 = this;

        var h = this.$createElement;
        return h("ul", {
          "class": "".concat(componentName, "__panel-body-scroll"),
          "ref": "".concat(col, "_scroller"),
          "on": {
            "scroll": debounce_1(function () {
              return _this5.handleScroll(col);
            }, 50)
          }
        }, [this.generateColRows(col)]);
      },
      closestLookup: function closestLookup(availableArr, calcVal, step) {
        if (step <= 1) return calcVal;
        if (calcVal < step) return 0;
        return availableArr.sort(function (a, b) {
          return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
        })[0];
      },
      handleScroll: function handleScroll(col) {
        var _this6 = this;

        var scrollVal;
        var cols = this.$refs["".concat(col, "_scroller")];
        var availableList = this.generateColTime(col);
        var scrollTop = cols.scrollTop;
        var itemHeight = this.getTimeItemHeight(col);

        if (this.timeArr.includes(col)) {
          var colIdx = this.timeArr.indexOf(col);
          var max = 59;

          if (col === EPickerCols.hour) {
            max = /[h]{1}/.test(this.format) ? 11 : 23;
          }

          scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin) * Number(this.steps[colIdx]))), max);
          scrollVal = this.closestLookup(availableList, scrollVal, Number(this.steps[colIdx]));

          if (this.disableTime && this.hideDisabledTime) {
            scrollVal = availableList.filter(function (t) {
              var _this6$disableTime;

              var params = _this6.currentTimes;
              params[colIdx] = Number(t);
              return !((_this6$disableTime = _this6.disableTime) !== null && _this6$disableTime !== void 0 && _this6$disableTime.apply(_this6, params));
            })[scrollVal];
          }
        } else {
          scrollVal = Math.min(Math.abs(Math.round((scrollTop - itemHeight / 2) / (itemHeight + this.timeItemMargin))), 1);
          scrollVal = this.localeMeridiems[scrollVal];
        }

        var distance = this.getScrollDistance(col, scrollVal);

        if (distance !== scrollTop) {
          var scroller = this.$refs["".concat(col, "_scroller")];
          scroller.scrollTo({
            top: distance,
            behavior: "smooth"
          });
        }

        this.timeItemCanUsed(col, scrollVal) && this.$emit("time-pick", col, scrollVal);
      },
      renderActiveMask: function renderActiveMask() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(componentName, "__panel-body-active-mask")
        }, [this.cols.map(function (_col, idx) {
          return h("div", {
            "key": idx
          });
        })]);
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": "".concat(componentName, "__panel-body"),
        "attrs": {
          "col-num": "".concat(this.cols.length)
        }
      }, [this.renderActiveMask(), this.renderScrollers()]);
    }
  });

  var name$r = "".concat(componentName, "__panel");
  dayjs_min.extend(customParseFormat);
  var PickerPanel = mixins(getConfigReceiverMixins("timePicker")).extend({
    name: name$r,
    data: function data() {
      return {
        panel: null,
        isSetup: false
      };
    },
    components: {
      PanelCol: PanelCol,
      TButton: TButton
    },
    props: panelProps(),
    computed: {
      sectionComponentName: function sectionComponentName() {
        return "".concat(name$r, "-section");
      },
      classNames: function classNames() {
        return this.rangePicker ? [name$r, this.sectionComponentName] : [name$r];
      },
      colValues: function colValues() {
        return this.value.map(function (el) {
          return el || dayjs_min();
        });
      },
      rangePicker: function rangePicker() {
        return this.colValues.length > 1;
      },
      formatField: function formatField() {
        var match = this.format.match(/(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?(\s+a|\s+A)?/);

        var _match = _slicedToArray(match, 6),
            startAChart = _match[1],
            hour = _match[2],
            minute = _match[3],
            second = _match[4],
            endAChart = _match[5];

        return {
          startAChart: startAChart,
          hour: hour,
          minute: minute,
          second: second,
          endAChart: endAChart
        };
      },
      cols: function cols() {
        var _this$formatField = this.formatField,
            startAChart = _this$formatField.startAChart,
            hour = _this$formatField.hour,
            minute = _this$formatField.minute,
            second = _this$formatField.second,
            endAChart = _this$formatField.endAChart;
        var res = [];
        startAChart && res.push(EPickerCols.meridiem);
        hour && res.push(EPickerCols.hour);
        minute && res.push(EPickerCols.minute);
        second && res.push(EPickerCols.second);
        endAChart && res.push(EPickerCols.meridiem);
        return res;
      },
      localeMeridiems: function localeMeridiems() {
        return [this.global.anteMeridiem, this.global.postMeridiem];
      },
      showNowTime: function showNowTime() {
        return !this.rangePicker && this.steps.filter(function (step) {
          return step !== 1;
        }).length < 1;
      }
    },
    watch: {
      isShowPanel: function isShowPanel(val) {
        if (val) {
          this.panelColUpdate();
        }
      }
    },
    mounted: function mounted() {
      this.panelColUpdate();
    },
    methods: {
      panelColUpdate: function panelColUpdate() {
        var _this = this;

        setTimeout(function () {
          var _this$$refs$panelCol_, _this$$refs$panelCol_2;

          (_this$$refs$panelCol_ = _this.$refs.panelCol_0) === null || _this$$refs$panelCol_ === void 0 ? void 0 : _this$$refs$panelCol_.updateTimeScrollPos();
          (_this$$refs$panelCol_2 = _this.$refs.panelCol_1) === null || _this$$refs$panelCol_2 === void 0 ? void 0 : _this$$refs$panelCol_2.updateTimeScrollPos();
        });
      },
      scrollToTime: function scrollToTime(colIndex, col, time, behavior) {
        var scroller = this.$refs["panelCol_".concat(colIndex)];
        scroller && scroller.scrollToTime(col, time, behavior);
      },
      renderFooter: function renderFooter() {
        var h = this.$createElement;
        var confirmAction = this.confirmBtnClick.bind(this);
        return h("div", {
          "class": "".concat(this.sectionComponentName, "-footer")
        }, [h("t-button", {
          "attrs": {
            "theme": "primary",
            "variant": "base"
          },
          "on": {
            "click": confirmAction
          }
        }, [this.t(this.global.confirm)]), this.showNowTime && h("t-button", {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "on": {
            "click": this.nowAction
          }
        }, [this.t(this.global.now)])]);
      },
      renderBody: function renderBody() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.sectionComponentName, "-body")
        }, [this.renderSinglePicker(0), this.rangePicker && this.renderSinglePicker(1)]);
      },
      renderSinglePicker: function renderSinglePicker(index) {
        var _this2 = this;

        var h = this.$createElement;
        var val = this.colValues[index];
        var ref = "panelCol_".concat(index);
        return h("panel-col", {
          "ref": ref,
          "attrs": {
            "value": val,
            "cols": this.cols,
            "steps": this.steps,
            "hideDisabledTime": this.hideDisabledTime,
            "disableTime": this.disableTime,
            "format": this.format,
            "localeMeridiems": this.localeMeridiems
          },
          "on": {
            "time-pick": function timePick(col, time) {
              return _this2.handleTimePick(col, time, index);
            }
          }
        });
      },
      confirmBtnClick: function confirmBtnClick(e) {
        this.$emit("sure", e);
      },
      nowAction: function nowAction() {
        this.$emit("now-action");
        this.panelColUpdate();
      },
      handleTimePick: function handleTimePick(col, time, index) {
        this.$emit("time-pick", col, time, index, this.colValues[index]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var isFooterDisplay = this.isFooterDisplay,
          classNames = this.classNames;
      return h("div", {
        "class": classNames
      }, [this.renderBody(), isFooterDisplay ? this.renderFooter() : null]);
    }
  });

  function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(isBetween$1);
  var name$q = "".concat(prefix, "-date-picker");
  var _DatePicker = mixins(getConfigReceiverMixins("datePicker")).extend({
    name: "TDatePicker",
    components: {
      CalendarIcon: Calendar$1,
      TimeIcon: Time,
      TPopup: Popup,
      TButton: Button,
      TInput: Input,
      CalendarPresets: CalendarPresets,
      TDate: TDate,
      TDateRange: TDateRange,
      TTimePickerPanel: PickerPanel
    },
    props: _objectSpread$Y({}, props$v),
    data: function data() {
      return {
        tempValue: "",
        monthDate: new Date(),
        start: new Date(),
        end: new Date(),
        selectedDates: [],
        inSelection: false,
        inline: false,
        dateFormat: "",
        multiSeparator: ",",
        inlineView: false,
        showTime: false,
        isOpen: false,
        formDisabled: void 0,
        startTimeValue: dayjs_min(),
        endTimeValue: dayjs_min()
      };
    },
    computed: {
      inputListeners: function inputListeners() {
        return _objectSpread$Y(_objectSpread$Y({}, this.$listeners), {}, {
          focus: this.onNativeFocus,
          input: this.onNativeInput,
          click: this.onClick
        });
      },
      startText: function startText() {
        return this.formatDate(this.start);
      },
      endText: function endText() {
        return this.formatDate(this.end);
      },
      formattedValue: {
        get: function get() {
          var vm = this;
          var tempValue = vm.tempValue,
              range = vm.range,
              mode = vm.mode,
              isOpen = vm.isOpen,
              startText = vm.startText,
              endText = vm.endText,
              global = vm.global,
              outValue = vm.value;
          var selectedDates = vm.getDates(outValue);
          var selectedFmtDates = selectedDates.map(function (d) {
            return vm.formatDate(d);
          });

          if (tempValue) {
            return tempValue;
          }

          var strMode = range ? "range" : mode;
          var value = "";

          switch (strMode) {
            case "time":
            case "date":
            case "month":
            case "year":
              value = selectedFmtDates.join("");
              break;

            case "range":
              if (isOpen) {
                value = [startText, endText].join(global.rangeSeparator);
              } else if (selectedFmtDates.length > 1) {
                value = [selectedFmtDates[0], selectedFmtDates[1]].join(global.rangeSeparator);
              }

              break;
          }

          return value;
        },
        set: function set(value) {
          var vm = this;
          var min = vm.min,
              dateFormat = vm.dateFormat;

          if (value) {
            if (String(value).length >= String(vm.formatDate(min || new Date())).length && dayjs_min(value, dateFormat)) {
              vm.tempValue = "";
              vm.setDate(value, true);
            } else {
              vm.tempValue = value;
            }
          }
        }
      },
      rangeText: {
        get: function get() {
          var vm = this;
          var range = vm.startText;

          if (vm.range) {
            range += " ".concat(vm.global.rangeSeparator, " ").concat(vm.endText);
          }

          return range;
        },
        set: function set(value) {
          var vm = this;

          if (vm.value) {
            vm.setDate(value, false);
          }
        }
      },
      min: function min() {
        var disableDate = this.disableDate || {};
        var before = disableDate.before;
        return before ? new Date(before) : null;
      },
      max: function max() {
        var disableDate = this.disableDate || {};
        var after = disableDate.after;
        return after ? new Date(after) : null;
      },
      classes: function classes() {
        var _ref;

        return [name$q, ClASSNAMES.SIZE[this.size] || "", (_ref = {}, _defineProperty$2(_ref, "".concat(name$q, "--month-picker"), this.mode === "year" || this.mode === "month"), _defineProperty$2(_ref, "".concat(prefix, "-inline"), this.inline || this.inlineView), _ref)];
      },
      pickerStyles: function pickerStyles() {
        var _ref2;

        return _ref2 = {}, _defineProperty$2(_ref2, "".concat(name$q, "__container"), true), _defineProperty$2(_ref2, "".concat(name$q, "-picker--open"), this.isOpen || this.inlineView), _defineProperty$2(_ref2, "".concat(name$q, "--calendar-inline-view"), this.inlineView), _defineProperty$2(_ref2, "".concat(name$q, "--range"), this.range), _ref2;
      },
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      }
    },
    mounted: function mounted() {
      this.attachDatePicker();
    },
    methods: {
      handleTInputFocus: function handleTInputFocus() {
        this.$refs["native"].blur();
      },
      handleTimePick: function handleTimePick(col, time, index) {
        if (!this.range || index === 0) {
          var start = new Date(this.start);
          start["set".concat(firstUpperCase(col), "s")](time);
          this.start = start;
          this.startTimeValue = dayjs_min(start);
          this.dateClick(new Date(start));
        } else {
          var end = new Date(this.end);
          end["set".concat(firstUpperCase(col), "s")](time);
          this.end = end;
          this.endTimeValue = dayjs_min(end);
          this.dateClick(new Date(end));
        }
      },
      attachDatePicker: function attachDatePicker() {
        var startDate = new Date();
        var endDate = new Date();
        this.dateFormat = this.format || this.global.format;
        var start = new Date(startDate);
        var end = new Date(endDate);

        if (!this.range) {
          end = new Date(startDate);
        }

        this.start = start;
        this.end = end;
        var val = this.value || this.defaultValue || "";
        this.setDate(val, false);

        if (this.inlineView) {
          this.open();
        }
      },
      onNativeInput: function onNativeInput(event) {
        var val = event.target.value;
        this.formattedValue = val;
        var d1 = this.parseDate(val);

        if (d1 instanceof Date) {
          var d2 = this.formatDate(d1);
          this.$emit("input", d2);
        }
      },
      onNativeFocus: function onNativeFocus(event) {
        if (!this.isOpen) {
          this.open();
        }

        this.$emit("focus", event);
      },
      onClick: function onClick(event) {
        if (!this.isOpen) {
          this.open();
        }

        this.$emit("click", event);
      },
      normalizeDateTime: function normalizeDateTime(value, oldValue) {
        var newDate = dayjs_min(value);
        var oldDate = dayjs_min(oldValue);

        if (this.enableTimePicker) {
          newDate.hour(oldDate.hour());
          newDate.minute(oldDate.minute());
          newDate.second(oldDate.second());
          newDate.millisecond(oldDate.millisecond());
        }

        return newDate.toDate();
      },
      dateClick: function dateClick(value) {
        var mode = this.range ? "range" : this.mode;

        if (this.showTime) {
          mode = "time";
        }

        switch (mode) {
          case "time":
            this.selectedDates = this.range ? [this.start, this.end] : [value];
            this.clickedApply(false);
            break;

          case "year":
          case "month":
          case "date":
            this.start = this.normalizeDateTime(value, this.start);
            this.selectedDates = [this.start];
            this.clickedApply(!this.enableTimePicker);
            break;

          case "range":
            if (this.inSelection) {
              this.inSelection = false;
              this.start = this.normalizeDateTime(value[0], this.end);
              this.end = this.normalizeDateTime(value[1], this.end);

              if (this.end < this.start) {
                this.inSelection = true;
                this.start = this.normalizeDateTime(value[0], this.start);
              }
            } else {
              this.start = this.normalizeDateTime(value[0], this.start);
              this.end = this.normalizeDateTime(value[1], this.end);
              this.inSelection = true;
            }

            this.clickedApply(!this.enableTimePicker);
            break;
        }
      },
      toggle: function toggle() {
        if (!this.tDisabled) {
          if (this.isOpen) {
            this.close();
          } else {
            this.open();
          }
        }
      },
      open: function open() {
        var _this = this;

        if (!this.tDisabled) {
          var formattedValue = this.formattedValue;

          if (formattedValue) {
            this.setDate(formattedValue);
          }

          this.tempValue = "";
          this.isOpen = true;
          this.$nextTick(function () {
            _this.$emit("open", _this.selectedDates);
          });
        }
      },
      close: function close() {
        if (!this.tDisabled) {
          this.tempValue = "";
          this.isOpen = false;
          this.showTime = false;
          this.$emit("close", this.selectedDates);
        }
      },
      clickedApply: function clickedApply() {
        var _this2 = this;

        var closePicker = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (this.range) {
          this.selectedDates = [this.start, this.end];
        }

        var selectedDates = this.selectedDates.map(function (d) {
          var fd = _this2.formatDate(d);

          return fd;
        });
        this.submitInput(selectedDates, true);
        this.$emit("onChange", selectedDates);

        if (closePicker) {
          this.close();
        }
      },
      toggleTime: function toggleTime() {
        var _this3 = this;

        this.startTimeValue = dayjs_min(this.start);
        this.endTimeValue = dayjs_min(this.end);
        this.showTime = !this.showTime;
        this.$nextTick(function () {
          var timePickerPanel = _this3.$refs.timePickerPanel;
          timePickerPanel && timePickerPanel.panelColUpdate();
        });
      },
      clickAway: function clickAway() {
        if (this.isOpen) {
          var selectedDates = this.selectedDates;

          if (selectedDates.length > 1) {
            this.start = new Date(selectedDates[0]);
            this.end = new Date(selectedDates[1]);
          }

          this.close();
        }
      },
      clickRange: function clickRange(value) {
        if (Array.isArray(value)) {
          var _value = _slicedToArray(value, 2),
              start = _value[0],
              end = _value[1];

          this.start = dayjs_min(start).toDate();
          this.end = dayjs_min(end || start).toDate();
          this.monthDate = dayjs_min(start).toDate();
        } else {
          this.start = dayjs_min(value).toDate();
          this.end = dayjs_min(value).toDate();
          this.monthDate = dayjs_min(value).toDate();
        }

        this.clickedApply();
      },
      clear: function clear() {
        var triggerChange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.close();

        if (!this.tDisabled) {
          var selectedDates = [];
          this.selectedDates = selectedDates;
          this.formattedValue = "";
          this.start = new Date();
          this.end = new Date();
          this.submitInput(selectedDates, triggerChange);
        }
      },
      submitInput: function submitInput(selectedDates) {
        var triggerChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var multiSeparator = this.multiSeparator;
        var mode = this.range ? "range" : this.mode;

        switch (mode) {
          case "date":
          case "month":
          case "year":
            if (triggerChange) {
              this.$emit("input", selectedDates.join(multiSeparator));
              this.$emit("change", selectedDates.join(multiSeparator));
            }

            break;

          case "range":
            if (triggerChange) {
              this.$emit("input", selectedDates);
              this.$emit("change", selectedDates);
            }

            break;
        }
      },
      parseDate: function parseDate() {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

        if (value instanceof Date) {
          return new Date(value);
        }

        if (format) {
          var oDate = dayjs_min(value, format);

          if (oDate.isValid()) {
            return new Date(oDate.toDate());
          }

          return false;
        }

        var d2 = dayjs_min(value);

        if (d2.isValid()) {
          return new Date(d2.toDate());
        }

        return false;
      },
      isEnabled: function isEnabled(value) {
        var min = this.min,
            max = this.max,
            disableDate = this.disableDate,
            dateFormat = this.dateFormat;

        if (!disableDate) {
          return true;
        }

        var isEnabled = true;

        if (typeof disableDate === "function") {
          return !disableDate(value);
        }

        if (Array.isArray(disableDate)) {
          var isIncludes = false;
          var formatedDisabledDate = disableDate.map(function (item) {
            return dayjs_min(item, dateFormat);
          });
          formatedDisabledDate.forEach(function (item) {
            if (item.isSame(dayjs_min(value))) {
              isIncludes = true;
            }
          });
          return !isIncludes;
        }

        var from = disableDate.from,
            to = disableDate.to;

        if (from && to) {
          var compareMin = dayjs_min(new Date(from));
          var compareMax = dayjs_min(new Date(to));
          return !dayjs_min(value).isBetween(compareMin, compareMax, this.mode, "[]");
        }

        if (max && min) {
          var _compareMin = dayjs_min(new Date(min));

          var _compareMax = dayjs_min(new Date(max));

          isEnabled = dayjs_min(value).isBetween(_compareMin, _compareMax, this.mode, "[]");
        } else if (min) {
          var _compareMin2 = dayjs_min(new Date(min));

          isEnabled = !dayjs_min(value).isBefore(_compareMin2, this.mode);
        } else if (max) {
          var _compareMax2 = dayjs_min(new Date(max));

          isEnabled = !dayjs_min(value).isAfter(_compareMax2, this.mode);
        }

        return isEnabled;
      },
      setDate: function setDate() {
        var inputDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var triggerChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
          return this.clear(triggerChange);
        }

        var selectedDates = this.getDates(inputDate);
        this.selectedDates = selectedDates;

        if (selectedDates.length > 0) {
          var _selectedDates = _slicedToArray(selectedDates, 2),
              start = _selectedDates[0],
              end = _selectedDates[1];

          this.start = start;
          this.end = end || start;
        }
      },
      getDates: function getDates() {
        var _this4 = this;

        var inputDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

        if (inputDate !== 0 && !inputDate || inputDate instanceof Array && inputDate.length === 0) {
          return [];
        }

        var format = this.dateFormat || "";
        var dates = [];

        if (inputDate instanceof Array) {
          dates = inputDate.map(function (d) {
            var d1 = _this4.parseDate(d, format);

            return d1;
          });
        } else if (inputDate instanceof Date || typeof inputDate === "number") {
          dates = [this.parseDate(inputDate, format)];
        } else if (typeof inputDate === "string") {
          var mode = this.range ? "range" : this.mode;

          switch (mode) {
            case "date":
            case "month":
            case "year":
              dates = [this.parseDate(inputDate, format)];
              break;

            case "range":
              dates = inputDate.split(this.global.rangeSeparator || "-").map(function (d) {
                var d1 = _this4.parseDate(d, format);

                return d1;
              });
              break;
          }
        }

        var selectedDates = dates.filter(function (d) {
          var isEnable = d instanceof Date && _this4.isEnabled(d);

          return isEnable;
        });
        selectedDates.sort(function (a, b) {
          return a.getTime() - b.getTime();
        });
        return selectedDates;
      },
      formatDate: function formatDate(date) {
        var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var dateFormat = format || this.dateFormat || this.global.format;
        var arrTime = ["H", "h", "m", "s"];
        var hasTime = arrTime.some(function (f) {
          return String(dateFormat).includes(f);
        });

        if (this.enableTimePicker && !hasTime) {
          dateFormat = [dateFormat, "HH:mm:ss"].join(" ");
        }

        var d1 = new Date(date);
        return dayjs_min(d1).format(dateFormat);
      },
      getPlaceholderText: function getPlaceholderText() {
        var _this$global, _this$global$placehol;

        var placeholder = this.placeholder,
            mode = this.mode;
        var placeholderStr = placeholder || ((_this$global = this.global) === null || _this$global === void 0 ? void 0 : (_this$global$placehol = _this$global.placeholder) === null || _this$global$placehol === void 0 ? void 0 : _this$global$placehol[mode]);

        if (placeholder && Array.isArray(placeholder)) {
          placeholderStr = placeholder.join(this.global.rangeSeparator);
        }

        return placeholderStr;
      },
      onPopupVisibleChange: function onPopupVisibleChange(visible, context) {
        if (context.trigger === "document") {
          this.toggle();
        }
      }
    },
    render: function render() {
      var _this5 = this;

      var h = arguments[0];
      var popupProps = this.popupProps,
          tDisabled = this.tDisabled,
          clearable = this.clearable,
          allowInput = this.allowInput,
          size = this.size,
          inputProps = this.inputProps,
          enableTimePicker = this.enableTimePicker,
          mode = this.mode,
          range = this.range,
          presets = this.presets,
          firstDayOfWeek = this.firstDayOfWeek;
      var start = this.start,
          end = this.end,
          showTime = this.showTime,
          startTimeValue = this.startTimeValue,
          global = this.global,
          isOpen = this.isOpen,
          endTimeValue = this.endTimeValue;
      var panelProps = {
        value: range ? [start, end] : start,
        mode: mode,
        firstDayOfWeek: firstDayOfWeek === void 0 ? 1 : firstDayOfWeek,
        disableDate: function disableDate(d) {
          return !_this5.isEnabled(d);
        },
        onChange: this.dateClick,
        global: this.global
      };

      var onPick = function onPick(date, context) {
        _this5.$emit("pick", date, context);
      };

      var panelComponent = range ? h(TDateRange, {
        "props": _objectSpread$Y({}, _objectSpread$Y(_objectSpread$Y({}, panelProps), {}, {
          onPick: onPick
        }))
      }) : h(TDate, {
        "props": _objectSpread$Y({}, _objectSpread$Y({}, panelProps))
      });

      var popupContent = function popupContent() {
        return h("div", {
          "ref": "dropdownPopup",
          "class": _this5.pickerStyles
        }, [enableTimePicker && showTime && h("div", [h("t-time-picker-panel", {
          "ref": "timePickerPanel",
          "attrs": {
            "format": extractTimeFormat(_this5.dateFormat) || "HH:mm:ss",
            "cols": [EPickerCols.hour, EPickerCols.minute, EPickerCols.second],
            "steps": [1, 1, 1],
            "value": !range ? [startTimeValue] : [startTimeValue, endTimeValue],
            "range": true,
            "isFooterDisplay": false
          },
          "on": {
            "time-pick": _this5.handleTimePick
          }
        })]), !showTime && panelComponent, (!!presets || enableTimePicker) && h("div", {
          "class": "".concat(prefix, "-date-picker__footer")
        }, [h("calendar-presets", {
          "attrs": {
            "presets": presets,
            "global": global
          },
          "props": _objectSpread$Y({}, {
            onClick: range ? _this5.clickRange : _this5.dateClick
          })
        }), enableTimePicker && h("div", {
          "class": "".concat(name$q, "--apply")
        }, [enableTimePicker && h("t-button", {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "on": {
            "click": _this5.toggleTime
          }
        }, [showTime ? global.selectDate : global.selectTime]), h("t-button", {
          "attrs": {
            "theme": "primary"
          },
          "on": {
            "click": _this5.clickedApply
          }
        }, [global.confirm])])])]);
      };

      var inputClassNames = ["".concat(prefix, "-form-controls"), _defineProperty$2({}, ClASSNAMES.STATUS.active, this.isOpen)];
      var prefixIcon = renderTNodeJSX(this, "prefixIcon");
      var suffixIconSlot = renderTNodeJSX(this, "suffixIcon");

      var suffixIcon = function suffixIcon() {
        if (suffixIconSlot) {
          return suffixIconSlot;
        }

        if (enableTimePicker) {
          return h("time-icon");
        }

        return h("calendar-icon");
      };

      return h("div", {
        "class": this.classes
      }, [h("t-popup", helper([{
        "ref": "popup",
        "class": "".concat(name$q, "__popup-reference"),
        "attrs": {
          "trigger": "click",
          "placement": "bottom-left",
          "disabled": tDisabled,
          "showArrow": false,
          "visible": isOpen,
          "popupProps": popupProps,
          "overlayClassName": name$q,
          "content": popupContent,
          "expandAnimation": true
        }
      }, {
        "on": {
          "visible-change": this.onPopupVisibleChange
        }
      }]), [h("div", {
        "class": inputClassNames,
        "on": {
          "click": this.toggle
        }
      }, [h("t-input", {
        "ref": "native",
        "attrs": {
          "disabled": tDisabled,
          "clearable": clearable,
          "placeholder": this.getPlaceholderText(),
          "allowInput": allowInput ? 1 : 0,
          "size": size,
          "inputProps": inputProps,
          "prefixIcon": prefixIcon,
          "suffixIcon": suffixIcon
        },
        "on": {
          "clear": function clear(context) {
            context.e.stopPropagation();

            _this5.clear(true);
          },
          "focus": this.handleTInputFocus
        },
        "props": _objectSpread$Y({}, _objectSpread$Y({}, this.inputListeners)),
        "model": {
          value: _this5.formattedValue,
          callback: function callback($$v) {
            _this5.formattedValue = $$v;
          }
        }
      })])])]);
    }
  });

  var DatePicker = withInstall(mapProps(["value"])(_DatePicker));

  var props$t = {
    colon: Boolean,
    data: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    errorMessage: {
      type: Object
    },
    formControlledComponents: {
      type: Array
    },
    labelAlign: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number],
      "default": "100px"
    },
    layout: {
      type: String,
      "default": "vertical",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "inline"].includes(val);
      }
    },
    preventSubmitDefault: {
      type: Boolean,
      "default": true
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    resetType: {
      type: String,
      "default": "empty",
      validator: function validator(val) {
        if (!val) return true;
        return ["empty", "initial"].includes(val);
      }
    },
    rules: {
      type: Object
    },
    scrollToFirstError: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["smooth", "auto"].includes(val);
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "large"].includes(val);
      }
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    submitWithWarningMessage: Boolean,
    onReset: Function,
    onSubmit: Function,
    onValidate: Function
  };

  var FORM_ITEM_CLASS_PREFIX = "".concat(prefix, "-form-item__");
  var form = "".concat(prefix, "-form");
  var input = "".concat(prefix, "-input");
  var is = "".concat(prefix, "-is");
  var CLASS_NAMES$1 = {
    form: form,
    label: "".concat(form, "__label"),
    labelTop: "".concat(form, "__label--top"),
    inline: "".concat(form, "-inline"),
    formItem: "".concat(form, "__item"),
    formItemWithHelp: "".concat(form, "__item-with-help"),
    formItemWithExtra: "".concat(form, "__item-with-extra"),
    controls: "".concat(form, "__controls"),
    controlsContent: "".concat(form, "__controls-content"),
    status: "".concat(form, "__status"),
    help: "".concat(form, "__help"),
    extra: "".concat(input, "__extra"),
    success: "".concat(is, "-success"),
    successBorder: "".concat(form, "--success-border"),
    error: "".concat(is, "-error"),
    warning: "".concat(is, "-warning")
  };
  var FORM_CONTROLE_COMPONENTS = ["TInput", "TInputNumber", "TTextarea", "TCascader", "TSelect", "TOption", "TSwitch", "TCheckbox", "TCheckboxGroup", "TRadio", "TRadioGroup", "TTreeSelect", "TDatePicker", "TTimePicker", "TUpload", "TTransfer", "TSlider"];

  function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$p = "".concat(prefix, "-form");
  var _Form = Vue__default["default"].extend({
    name: "TForm",
    props: _objectSpread$X({}, props$t),
    provide: function provide() {
      return {
        form: this
      };
    },
    data: function data() {
      return {
        children: []
      };
    },
    computed: {
      formClass: function formClass() {
        return [CLASS_NAMES$1.form, _defineProperty$2({}, "".concat(name$p, "-inline"), this.layout === "inline")];
      },
      controlledComponents: function controlledComponents() {
        var _this$formControlledC;

        var fields = FORM_CONTROLE_COMPONENTS;

        if ((_this$formControlledC = this.formControlledComponents) !== null && _this$formControlledC !== void 0 && _this$formControlledC.length) {
          fields = fields.concat(this.formControlledComponents);
        }

        return fields;
      }
    },
    created: function created() {
      var _this = this;

      this.$on("form-item-created", function (formItem) {
        _this.children.push(formItem);
      });
      this.$on("form-item-destroyed", function (formItem) {
        var index = _this.children.findIndex(function (item) {
          return item === formItem;
        });

        _this.children.splice(index, 1);
      });
    },
    methods: {
      getFirstError: function getFirstError(r) {
        if (r === true) return;

        var _Object$keys = Object.keys(r),
            _Object$keys2 = _slicedToArray(_Object$keys, 1),
            firstKey = _Object$keys2[0];

        if (this.scrollToFirstError) {
          this.scrollTo(".".concat(FORM_ITEM_CLASS_PREFIX + firstKey));
        }

        return r[firstKey][0].message;
      },
      scrollTo: function scrollTo(selector) {
        var dom = this.$el.querySelector(selector);
        var behavior = this.scrollToFirstError;
        dom && dom.scrollIntoView({
          behavior: behavior
        });
      },
      isFunction: function isFunction(val) {
        return typeof val === "function";
      },
      needValidate: function needValidate(name2, fields) {
        if (!fields || !Array.isArray(fields)) return true;
        return fields.indexOf(name2) !== -1;
      },
      validate: function validate(param) {
        var _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _ref2, fields, _ref2$trigger, trigger, list, arr, r, result;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _ref2 = param || {}, fields = _ref2.fields, _ref2$trigger = _ref2.trigger, trigger = _ref2$trigger === void 0 ? "all" : _ref2$trigger;
                  list = _this2.children.filter(function (child) {
                    return _this2.isFunction(child.validate) && _this2.needValidate(child.name, fields);
                  }).map(function (child) {
                    return child.validate(trigger);
                  });
                  _context.next = 4;
                  return Promise.all(list);

                case 4:
                  arr = _context.sent;
                  r = arr.reduce(function (r2, err) {
                    return Object.assign(r2 || {}, err);
                  });
                  Object.keys(r).forEach(function (key) {
                    if (r[key] === true) {
                      delete r[key];
                    } else {
                      r[key] = r[key].filter(function (fr) {
                        return fr.result === false;
                      });
                    }
                  });
                  result = isEmpty_1(r) ? true : r;
                  emitEvent(_this2, "validate", {
                    validateResult: result,
                    firstError: _this2.getFirstError(result)
                  });
                  return _context.abrupt("return", result);

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      setValidateMessage: function setValidateMessage(validateMessage) {
        var _this3 = this;

        var keys = Object.keys(validateMessage || {});
        if (!keys.length) return;
        var list = this.children.filter(function (child) {
          return _this3.isFunction(child.setValidateMessage) && keys.includes(child.name);
        }).map(function (child) {
          return child.setValidateMessage(validateMessage[child.name]);
        });
        Promise.all(list);
      },
      submitHandler: function submitHandler(e) {
        var _this4 = this;

        if (this.preventSubmitDefault) {
          e === null || e === void 0 ? void 0 : e.preventDefault();
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }

        this.validate().then(function (r) {
          emitEvent(_this4, "submit", {
            validateResult: r,
            firstError: _this4.getFirstError(r),
            e: e
          });
        });
      },
      resetHandler: function resetHandler(e) {
        var _this5 = this;

        if (this.preventSubmitDefault) {
          e === null || e === void 0 ? void 0 : e.preventDefault();
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }

        this.children.filter(function (child) {
          return _this5.isFunction(child.resetField);
        }).map(function (child) {
          return child.resetField();
        });
        emitEvent(this, "reset", {
          e: e
        });
      },
      clearValidate: function clearValidate(fields) {
        var _this6 = this;

        this.children.forEach(function (child) {
          if (_this6.isFunction(child.resetHandler) && _this6.needValidate(child.name, fields)) {
            child.resetHandler();
          }
        });
      },
      reset: function reset() {
        this.resetHandler();
      },
      submit: function submit() {
        this.submitHandler();
      }
    },
    render: function render() {
      var h = arguments[0];
      var on = {
        submit: this.submitHandler,
        reset: this.resetHandler
      };
      return h("form", {
        "ref": "form",
        "class": this.formClass,
        "on": _objectSpread$X({}, on)
      }, [this.$slots["default"]]);
    }
  });

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  var _arrayEach = arrayEach;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbolsIn = !nativeGetSymbols ? stubArray_1 : function (object) {
    var result = [];

    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }

    return result;
  };
  var _getSymbolsIn = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  /** Used for built-in method references. */
  var objectProto$2 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

    if (length && typeof array[0] == 'string' && hasOwnProperty$2.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  var _initCloneArray = initCloneArray;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;
  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */

  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */

  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /** `Object#toString` result references. */

  var boolTag$2 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';
  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag$1:
        return _cloneArrayBuffer(object);

      case boolTag$2:
      case dateTag$1:
        return new Ctor(+object);

      case dataViewTag$1:
        return _cloneDataView(object, isDeep);

      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$2:
        return new Ctor();

      case numberTag$1:
      case stringTag$1:
        return new Ctor(object);

      case regexpTag$1:
        return _cloneRegExp(object);

      case setTag$2:
        return new Ctor();

      case symbolTag$1:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** `Object#toString` result references. */

  var mapTag$1 = '[object Map]';
  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */

  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$1;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */

  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;
  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */

  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;
  var isMap_1 = isMap;

  /** `Object#toString` result references. */

  var setTag$1 = '[object Set]';
  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */

  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$1;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */

  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;
  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */

  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;
  var isSet_1 = isSet;

  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG$1 = 4;
  /** `Object#toString` result references. */

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag$1 = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  /** Used to identify `toStringTag` values supported by `_.clone`. */

  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag$1] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG$1,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG$1;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject_1(value)) {
      return value;
    }

    var isArr = isArray_1(value);

    if (isArr) {
      result = _initCloneArray(value);

      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }

      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        result = isFlat || isFunc ? {} : _initCloneObject(value);

        if (!isDeep) {
          return isFlat ? _copySymbolsIn(value, _baseAssignIn(result, value)) : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = _initCloneByTag(value, tag, isDeep);
      }
    } // Check for circular references and return its corresponding clone.


    stack || (stack = new _Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap_1(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull ? isFlat ? _getAllKeysIn : _getAllKeys : isFlat ? keysIn_1 : keys_1;
    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      } // Recursively populate clone (susceptible to call stack limits).


      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG = 1,
      CLONE_SYMBOLS_FLAG = 4;
  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */

  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
  }

  var cloneDeep_1 = cloneDeep;

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  var isNil_1 = isNil;

  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */

  var assignInWith = _createAssigner(function (object, source, srcIndex, customizer) {
    _copyObject(source, keysIn_1(source), object, customizer);
  });
  var assignInWith_1 = assignInWith;

  /** `Object#toString` result references. */

  var domExcTag = '[object DOMException]',
      errorTag = '[object Error]';
  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */

  function isError(value) {
    if (!isObjectLike_1(value)) {
      return false;
    }

    var tag = _baseGetTag(value);
    return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject_1(value);
  }

  var isError_1 = isError;

  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Function} func The function to attempt.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // Avoid throwing errors for invalid selectors.
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */

  var attempt = _baseRest(function (func, args) {
    try {
      return _apply(func, undefined, args);
    } catch (e) {
      return isError_1(e) ? e : new Error(e);
    }
  });
  var attempt_1 = attempt;

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */

  function baseValues(object, props) {
    return _arrayMap(props, function (key) {
      return object[key];
    });
  }

  var _baseValues = baseValues;

  /** Used for built-in method references. */

  var objectProto$1 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
  /**
   * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
   * of source objects to the destination object for all destination properties
   * that resolve to `undefined`.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */

  function customDefaultsAssignIn(objValue, srcValue, key, object) {
    if (objValue === undefined || eq_1(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
      return srcValue;
    }

    return objValue;
  }

  var _customDefaultsAssignIn = customDefaultsAssignIn;

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    "\u2028": 'u2028',
    "\u2029": 'u2029'
  };
  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  var _escapeStringChar = escapeStringChar;

  /** Used to match template delimiters. */
  var reInterpolate = /<%=([\s\S]+?)%>/g;
  var _reInterpolate = reInterpolate;

  /** Used to map characters to HTML entities. */

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  var escapeHtmlChar = _basePropertyOf(htmlEscapes);
  var _escapeHtmlChar = escapeHtmlChar;

  /** Used to match HTML entities and HTML characters. */

  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */

  function escape$1(string) {
    string = toString_1(string);
    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, _escapeHtmlChar) : string;
  }

  var _escape = escape$1;

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g;
  var _reEscape = reEscape;

  /** Used to match template delimiters. */
  var reEvaluate = /<%([\s\S]+?)%>/g;
  var _reEvaluate = reEvaluate;

  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB) as well as ES2015 template strings. Change the
   * following template settings to use alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type {Object}
   */

  var templateSettings = {
    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'escape': _reEscape,

    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'evaluate': _reEvaluate,

    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'interpolate': _reInterpolate,

    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type {string}
     */
    'variable': '',

    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type {Object}
     */
    'imports': {
      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type {Function}
       */
      '_': {
        'escape': _escape
      }
    }
  };
  var templateSettings_1 = templateSettings;

  /** Error message constants. */

  var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
  /** Used to match empty string literals in compiled template source. */

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */

  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  /** Used to ensure capturing order of template delimiters. */

  var reNoMatch = /($^)/;
  /** Used to match unescaped characters in compiled string literals. */

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  /** Used for built-in method references. */

  var objectProto = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty = objectProto.hasOwnProperty;
  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is given, it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options={}] The options object.
   * @param {RegExp} [options.escape=_.templateSettings.escape]
   *  The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
   *  The "evaluate" delimiter.
   * @param {Object} [options.imports=_.templateSettings.imports]
   *  An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
   *  The "interpolate" delimiter.
   * @param {string} [options.sourceURL='templateSources[n]']
   *  The sourceURL of the compiled template.
   * @param {string} [options.variable='obj']
   *  The data object variable name.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // Use the "interpolate" delimiter to create a compiled template.
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // Use the HTML "escape" delimiter to escape data property values.
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the internal `print` function in "evaluate" delimiters.
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // Use the ES template literal delimiter as an "interpolate" delimiter.
   * // Disable support by replacing the "interpolate" delimiter.
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // Use backslashes to treat delimiters as plain text.
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // Use the `imports` option to import `jQuery` as `jq`.
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the `sourceURL` option to specify a custom sourceURL for the template.
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
   *
   * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // Use custom template delimiters.
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // Use the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and stack traces.
   * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */

  function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = templateSettings_1.imports._.templateSettings || templateSettings_1;

    if (guard && _isIterateeCall(string, options, guard)) {
      options = undefined;
    }

    string = toString_1(string);
    options = assignInWith_1({}, options, settings, _customDefaultsAssignIn);
    var imports = assignInWith_1({}, options.imports, settings.imports, _customDefaultsAssignIn),
        importsKeys = keys_1(imports),
        importsValues = _baseValues(imports, importsKeys);
    var isEscaping,
        isEvaluating,
        index = 0,
        interpolate = options.interpolate || reNoMatch,
        source = "__p += '"; // Compile the regexp to match each delimiter.

    var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === _reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    // and escape the comment, thus injecting code that gets evaled.

    var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
    string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

      source += string.slice(index, offset).replace(reUnescapedString, _escapeStringChar); // Replace delimiters with snippets.

      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }

      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }

      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }

      index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
      // order to produce the correct `offset` value.

      return match;
    });
    source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.

    var variable = hasOwnProperty.call(options, 'variable') && options.variable;

    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    } // Throw an error if a forbidden character was found in `variable`, to prevent
    // potential command injection attacks.
    else if (reForbiddenIdentifierChars.test(variable)) {
      throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    } // Cleanup code by stripping empty strings.


    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

    source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
    var result = attempt_1(function () {
      return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
    }); // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.

    result.source = source;

    if (isError_1(result)) {
      throw result;
    }

    return result;
  }

  var template_1 = template;

  var merge_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;

    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;

      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }

      return obj;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var require$$3 = merge_1;

  var isDate_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;

    var _merge = _interopRequireDefault(require$$3);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;

      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = o[Symbol.iterator]();
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null) it["return"]();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };

    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }

    function zip(date, format) {
      var zippedArr = [],
          len = Math.min(date.length, format.length);

      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }

      return zippedArr;
    }

    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatbility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }

      if (typeof input === 'string' && isValidFormat(options.format)) {
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};

        var _iterator = _createForOfIteratorHelper(dateAndFormat),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                dateWord = _step$value[0],
                formatWord = _step$value[1];

            if (dateWord.length !== formatWord.length) {
              return false;
            }

            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
      }

      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });
  var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDate_1);

  var assertString_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function assertString(input) {
      var isString = typeof input === 'string' || input instanceof String;

      if (!isString) {
        var invalidType = _typeof(input);

        if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var require$$0 = assertString_1;

  var isByteLength_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;

    var _assertString = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /* eslint-disable prefer-rest-params */


    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;

      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }

      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var isFQDN_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;

    var _assertString = _interopRequireDefault(require$$0);

    var _merge = _interopRequireDefault(require$$3);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };

    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);
      /* Remove the optional trailing dot before checking validity */

      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }
      /* Remove the optional wildcard before checking validity */


      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }

      var parts = str.split('.');
      var tld = parts[parts.length - 1];

      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }

        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        } // disallow spaces


        if (/\s/.test(tld)) {
          return false;
        }
      } // reject numeric TLDs


      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }

      return parts.every(function (part) {
        if (part.length > 63) {
          return false;
        }

        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        } // disallow full-width chars


        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        } // disallow parts starting or ending with hyphen


        if (/^-|-$/.test(part)) {
          return false;
        }

        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }

        return true;
      });
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var isIP_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;

    var _assertString = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    /**
    11.3.  Examples
    
       The following addresses
    
                 fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    
       would be represented as follows:
    
                 fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    
       (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    
       If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    
                fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    
       where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */


    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      (0, _assertString["default"])(str);
      version = String(version);

      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }

      if (version === '4') {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }

        var parts = str.split('.').sort(function (a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }

      if (version === '6') {
        return !!IPv6AddressRegExp.test(str);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var require$$2$1 = isByteLength_1;

  var require$$1 = isFQDN_1;

  var require$$2 = isIP_1;

  var isEmail_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;

    var _assertString = _interopRequireDefault(require$$0);

    var _merge = _interopRequireDefault(require$$3);

    var _isByteLength = _interopRequireDefault(require$$2$1);

    var _isFQDN = _interopRequireDefault(require$$1);

    var _isIP = _interopRequireDefault(require$$2);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: []
    };
    /* eslint-disable max-len */

    /* eslint-disable no-control-regex */

    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */

    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */

    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

      if (!display_name_without_quotes.trim()) {
        return false;
      } // check whether display name contains illegal character


      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);

      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        } // the quotes in display name must start with character symbol \


        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;

        if (!all_start_with_back_slash) {
          return false;
        }
      }

      return true;
    }

    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);

      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);

        if (display_email) {
          var display_name = display_email[1]; // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

          str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space

          if (display_name.endsWith(' ')) {
            display_name = display_name.substr(0, display_name.length - 1);
          }

          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }

      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }

      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();

      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }

      var user = parts.join('@');

      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
          Previously we removed dots for gmail addresses before validating.
          This was removed because it allows `multiple..dots@gmail.com`
          to be reported as valid, but it is not.
          Gmail only normalizes single dots, removing them from here is pointless,
          should be done in normalizeEmail
        */
        user = user.toLowerCase(); // Removing sub-address from username before gmail validation

        var username = user.split('+')[0]; // Dots are not included in gmail length restriction

        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }

        var _user_parts = username.split('.');

        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }

      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }

      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }

        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }

          var noBracketdomain = domain.substr(1, domain.length - 2);

          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }

      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }

      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');

      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }

      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });
  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail_1);

  var isURL_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;

    var _assertString = _interopRequireDefault(require$$0);

    var _isFQDN = _interopRequireDefault(require$$1);

    var _isIP = _interopRequireDefault(require$$2);

    var _merge = _interopRequireDefault(require$$3);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    /*
    options for isURL method
    
    require_protocol - if set as true isURL will return false if protocol is not present in the URL
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
    protocols - valid protocols can be modified with this option
    require_host - if set as false isURL will not check if host is present in the URL
    require_port - if set as true isURL will check if port is present in the URL
    allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
    validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)
    
    */


    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }

    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];

        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }

      return false;
    }

    function isURL(url, options) {
      (0, _assertString["default"])(url);

      if (!url || /[\s<>]/.test(url)) {
        return false;
      }

      if (url.indexOf('mailto:') === 0) {
        return false;
      }

      options = (0, _merge["default"])(options, default_url_options);

      if (options.validate_length && url.length >= 2083) {
        return false;
      }

      if (!options.allow_fragments && url.includes('#')) {
        return false;
      }

      if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
        return false;
      }

      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');

      if (split.length > 1) {
        protocol = split.shift().toLowerCase();

        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }

        split[0] = url.substr(2);
      }

      url = split.join('://');

      if (url === '') {
        return false;
      }

      split = url.split('/');
      url = split.shift();

      if (url === '' && !options.require_host) {
        return true;
      }

      split = url.split('@');

      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }

        if (split[0] === '') {
          return false;
        }

        auth = split.shift();

        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }

        var _auth$split = auth.split(':'),
            _auth$split2 = _slicedToArray(_auth$split, 2),
            user = _auth$split2[0],
            password = _auth$split2[1];

        if (user === '' && password === '') {
          return false;
        }
      }

      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);

      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();

        if (split.length) {
          port_str = split.join(':');
        }
      }

      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);

        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }

      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }

      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }

      host = host || ipv6;

      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });
  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL_1);

  function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };

    if (type === typeMap.Date) {
      return false;
    }

    return _typeof(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
  }

  var compareValue = function compareValue(val, num, isMax) {
    var compare = function compare(a, b) {
      return isMax ? a <= b : a >= b;
    };

    if (isNumber_1(val)) return compare(val, num);
    if (Array.isArray(val)) return compare(val.length, num);
    return compare(getCharacterLength(val), num);
  };

  var VALIDATE_MAP = {
    date: isDate,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    "boolean": function boolean(val) {
      return typeof val === "boolean";
    },
    max: function max(val, num) {
      return compareValue(val, num, true);
    },
    min: function min(val, num) {
      return compareValue(val, num, false);
    },
    len: function len(val, num) {
      return getCharacterLength(val) === num;
    },
    number: function number(val) {
      return !Number.isNaN(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }

  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              validateResult = {
                result: true
              };
              keys = Object.keys(rule);
              vOptions = {};
              i = 0;

            case 4:
              if (!(i < keys.length)) {
                _context.next = 16;
                break;
              }

              key = keys[i];

              if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
                _context.next = 8;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 8:
              validateRule = VALIDATE_MAP[key];

              if (!(validateRule && rule[key])) {
                _context.next = 13;
                break;
              }

              vOptions = rule[key] === true ? {} : rule[key];
              vValidateFun = validateRule;
              return _context.abrupt("break", 16);

            case 13:
              i++;
              _context.next = 4;
              break;

            case 16:
              if (!vValidateFun) {
                _context.next = 24;
                break;
              }

              _context.next = 19;
              return vValidateFun(value, vOptions);

            case 19:
              validateResult = _context.sent;

              if (!(typeof validateResult === "boolean")) {
                _context.next = 22;
                break;
              }

              return _context.abrupt("return", _objectSpread$W(_objectSpread$W({}, rule), {}, {
                result: validateResult
              }));

            case 22:
              if (!(_typeof(validateResult) === "object")) {
                _context.next = 24;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 24:
              return _context.abrupt("return", validateResult);

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }

  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }

  function _validate() {
    _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(value, rules) {
      var all, r;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              all = rules.map(function (rule) {
                return validateOneRule(value, rule);
              });
              _context2.next = 3;
              return Promise.all(all);

            case 3:
              r = _context2.sent;
              return _context2.abrupt("return", r);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  var props$s = {
    "for": {
      type: String,
      "default": ""
    },
    help: {
      type: String,
      "default": ""
    },
    label: {
      type: [String, Function],
      "default": ""
    },
    labelAlign: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number]
    },
    name: {
      type: String,
      "default": ""
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    rules: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": void 0
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    successBorder: Boolean
  };

  function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _FormItem = mixins(getConfigReceiverMixins("form")).extend({
    name: "TFormItem",
    props: _objectSpread$V({}, props$s),
    inject: {
      form: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        errorList: [],
        successList: [],
        verifyStatus: "not"
        /* TO_BE_VALIDATED */
        ,
        resetValidating: false,
        needResetField: false,
        initialValue: void 0
      };
    },
    computed: {
      needErrorMessage: function needErrorMessage() {
        if (typeof this.showErrorMessage === "boolean") return this.showErrorMessage;
        var parent = this.form;
        return parent === null || parent === void 0 ? void 0 : parent.showErrorMessage;
      },
      classes: function classes() {
        var _ref;

        return [CLASS_NAMES$1.formItem, FORM_ITEM_CLASS_PREFIX + this.name, (_ref = {}, _defineProperty$2(_ref, CLASS_NAMES$1.formItemWithHelp, this.help), _defineProperty$2(_ref, CLASS_NAMES$1.formItemWithExtra, this.renderTipsInfo()), _ref)];
      },
      labelClasses: function labelClasses() {
        var _ref2;

        var parent = this.form;
        var labelAlign = isNil_1(this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
        var labelWidth = isNil_1(this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
        return [CLASS_NAMES$1.label, (_ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-form__label--required"), this.needRequiredMark), _defineProperty$2(_ref2, "".concat(prefix, "-form__label--colon"), this.hasColon), _defineProperty$2(_ref2, "".concat(prefix, "-form__label--top"), labelAlign === "top" || !labelWidth), _defineProperty$2(_ref2, "".concat(prefix, "-form__label--left"), labelAlign === "left" && labelWidth), _defineProperty$2(_ref2, "".concat(prefix, "-form__label--right"), labelAlign === "right" && labelWidth), _ref2)];
      },
      errorClasses: function errorClasses() {
        if (!this.needErrorMessage) return "";

        if (this.verifyStatus === "success"
        /* SUCCESS */
        ) {
          return this.successBorder ? [CLASS_NAMES$1.success, CLASS_NAMES$1.successBorder].join(" ") : CLASS_NAMES$1.success;
        }

        var list = this.errorList;
        if (!list.length) return;
        var type = list[0].type || "error";
        return type === "error" ? CLASS_NAMES$1.error : CLASS_NAMES$1.warning;
      },
      disabled: function disabled() {
        return this.form.disabled;
      },
      contentClasses: function contentClasses() {
        var getErrorClass = this.errorClasses;
        return [CLASS_NAMES$1.controls, getErrorClass];
      },
      contentStyle: function contentStyle() {
        var parent = this.form;
        var labelAlign = isNil_1(this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
        var labelWidth = isNil_1(this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
        var contentStyle = {};

        if (labelWidth && labelAlign !== "top") {
          if (typeof labelWidth === "number") {
            contentStyle = {
              marginLeft: "".concat(labelWidth, "px")
            };
          } else {
            contentStyle = {
              marginLeft: labelWidth
            };
          }
        }

        return contentStyle;
      },
      value: function value() {
        var parent = this.form;
        return parent && parent.data && get_1(parent.data, this.name);
      },
      hasColon: function hasColon() {
        var parent = this.form;
        return !!(parent && parent.colon && this.getLabelContent());
      },
      needRequiredMark: function needRequiredMark() {
        var requiredMark = this.$props.requiredMark;
        if (typeof requiredMark === "boolean") return requiredMark;
        var parent = this.form;
        var parentRequiredMark = (parent === null || parent === void 0 ? void 0 : parent.requiredMark) === void 0 ? this.global.requiredMark : parent.requiredMark;
        var isRequired = this.innerRules.filter(function (rule) {
          return rule.required;
        }).length > 0;
        return Boolean(parentRequiredMark && isRequired);
      },
      innerRules: function innerRules() {
        var _this$rules;

        var parent = this.form;
        if ((_this$rules = this.rules) !== null && _this$rules !== void 0 && _this$rules.length) return this.rules || [];
        if (!this.name) return [];
        var index = this.name.lastIndexOf(".") || -1;
        var pRuleName = this.name.slice(index + 1);
        return get_1(parent === null || parent === void 0 ? void 0 : parent.rules, this.name) || get_1(parent === null || parent === void 0 ? void 0 : parent.rules, pRuleName) || [];
      },
      errorMessages: function errorMessages() {
        var _this$form$errorMessa;

        return (_this$form$errorMessa = this.form.errorMessage) !== null && _this$form$errorMessa !== void 0 ? _this$form$errorMessa : this.global.errorMessage;
      }
    },
    watch: {
      value: function value() {
        this.validate("change");
      }
    },
    created: function created() {
      this.addWatch();
    },
    mounted: function mounted() {
      this.initialValue = cloneDeep_1(this.value);
      this.form.$emit("form-item-created", this);
    },
    beforeDestroy: function beforeDestroy() {
      this.form.$emit("form-item-destroyed", this);
    },
    methods: {
      addWatch: function addWatch() {
        var _this = this;

        if (this.disabled === void 0) return;
        this.$watch("disabled", function (val) {
          _this.$nextTick(function () {
            _this.setChildrenDisabled(val, _this.$children);
          });
        }, {
          immediate: true
        });
      },
      setChildrenDisabled: function setChildrenDisabled(disabled, children) {
        var _this2 = this;

        children.forEach(function (item) {
          var _this2$form$controlle, _item$$children;

          if ((_this2$form$controlle = _this2.form.controlledComponents) !== null && _this2$form$controlle !== void 0 && _this2$form$controlle.includes(item.$options.name)) {
            item.$data.formDisabled = disabled;
          }

          if ((_item$$children = item.$children) !== null && _item$$children !== void 0 && _item$$children.length) {
            _this2.setChildrenDisabled(disabled, item.$children);
          }
        });
      },
      setValidateMessage: function setValidateMessage(validateMessage) {
        if (!validateMessage || !Array.isArray(validateMessage)) return;

        if (validateMessage.length === 0) {
          this.errorList = [];
          this.verifyStatus = "success"
          /* SUCCESS */
          ;
          return;
        }

        this.errorList = validateMessage;
        this.verifyStatus = "fail"
        /* FAIL */
        ;
      },
      validate: function validate$1(trigger) {
        var _this3 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var rules, r, errorList;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _this3.resetValidating = true;
                  rules = trigger === "all" ? _this3.innerRules : _this3.innerRules.filter(function (item) {
                    return (item.trigger || "change") === trigger;
                  });
                  _context.next = 4;
                  return validate(_this3.value, rules);

                case 4:
                  r = _context.sent;
                  errorList = r.filter(function (item) {
                    return item.result !== true;
                  }).map(function (item) {
                    Object.keys(item).forEach(function (key) {
                      if (typeof item.message === "undefined" && _this3.errorMessages[key]) {
                        var compiled = template_1(_this3.errorMessages[key]);
                        item.message = compiled({
                          name: _this3.label,
                          validate: item[key]
                        });
                      }
                    });
                    return item;
                  });
                  _this3.errorList = errorList;
                  _this3.successList = r.filter(function (item) {
                    return item.result === true && item.message && item.type === "success";
                  });

                  if (rules.length) {
                    _this3.verifyStatus = errorList.length ? "fail"
                    /* FAIL */
                    : "success"
                    /* SUCCESS */
                    ;
                  } else {
                    _this3.verifyStatus = "not"
                    /* TO_BE_VALIDATED */
                    ;
                  }

                  if (_this3.needResetField) {
                    _this3.resetHandler();
                  }

                  _this3.resetValidating = false;
                  return _context.abrupt("return", _defineProperty$2({}, _this3.name, errorList.length === 0 ? true : r));

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      getLabelContent: function getLabelContent() {
        if (typeof this.label === "function") {
          return this.label(this.$createElement);
        }

        if (typeof this.$scopedSlots.label === "function") {
          return this.$scopedSlots.label(null);
        }

        return this.label;
      },
      getLabel: function getLabel() {
        var h = this.$createElement;
        var parent = this.form;
        var labelWidth = isNil_1(this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
        var labelAlign = isNil_1(this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
        if (Number(labelWidth) === 0) return;
        var labelStyle = {};

        if (labelWidth && labelAlign !== "top") {
          if (typeof labelWidth === "number") {
            labelStyle = {
              width: "".concat(labelWidth, "px")
            };
          } else {
            labelStyle = {
              width: labelWidth
            };
          }
        }

        return h("div", {
          "class": this.labelClasses,
          "style": labelStyle
        }, [h("label", {
          "attrs": {
            "for": this["for"]
          }
        }, [this.getLabelContent()])]);
      },
      renderTipsInfo: function renderTipsInfo() {
        var h = this.$createElement;
        var helpVNode;

        if (this.help) {
          helpVNode = h("div", {
            "class": CLASS_NAMES$1.help
          }, [this.help]);
        }

        var list = this.errorList;

        if (this.needErrorMessage && list && list[0] && list[0].message) {
          return h("p", {
            "class": CLASS_NAMES$1.extra
          }, [list[0].message]);
        }

        if (this.successList.length) {
          return h("p", {
            "class": CLASS_NAMES$1.extra
          }, [this.successList[0].message]);
        }

        return helpVNode;
      },
      getDefaultIcon: function getDefaultIcon() {
        var h = this.$createElement;

        var resultIcon = function resultIcon(Icon) {
          return h("span", {
            "class": CLASS_NAMES$1.status
          }, [h(Icon)]);
        };

        var list = this.errorList;

        if (this.verifyStatus === "success"
        /* SUCCESS */
        ) {
          return resultIcon(CheckCircleFilled);
        }

        if (list && list[0]) {
          var type = list[0].type || "error";
          var icon = {
            error: CloseCircleFilled,
            warning: ErrorCircleFilled
          }[type] || CheckCircleFilled;
          return resultIcon(icon);
        }

        return null;
      },
      getIcon: function getIcon(statusIcon, slotStatusIcon, props2) {
        var h = this.$createElement;

        var resultIcon = function resultIcon(otherContent) {
          return h("span", {
            "class": CLASS_NAMES$1.status
          }, [otherContent]);
        };

        if (statusIcon === true) {
          return this.getDefaultIcon();
        }

        if (typeof statusIcon === "function") {
          return resultIcon(statusIcon(this.$createElement, props2));
        }

        if (typeof slotStatusIcon === "function") {
          return resultIcon(slotStatusIcon(null));
        }

        return null;
      },
      getSuffixIcon: function getSuffixIcon() {
        var parent = this.form;
        var statusIcon = this.statusIcon;
        var slotStatusIcon = this.$scopedSlots.statusIcon;
        var parentStatusIcon = parent.statusIcon;
        var parentSlotStatusIcon = parent.$scopedSlots.statusIcon;
        if (statusIcon === false) return;
        var resultIcon = this.getIcon(statusIcon, slotStatusIcon);
        if (resultIcon) return resultIcon;
        if (resultIcon === false) return;
        resultIcon = this.getIcon(parentStatusIcon, parentSlotStatusIcon, this.$props);
        if (resultIcon) return resultIcon;
      },
      getEmptyValue: function getEmptyValue() {
        var parent = this.form;
        var type = Object.prototype.toString.call(get_1(parent.data, this.name));
        var emptyValue;

        if (type === "[object String]") {
          emptyValue = "";
        }

        if (type === "[object Array]") {
          emptyValue = [];
        }

        if (type === "[object Object]") {
          emptyValue = {};
        }

        return emptyValue;
      },
      resetField: function resetField() {
        var _this4 = this;

        var parent = this.form;

        if (!this.name) {
          return;
        }

        if (parent.resetType === "empty") {
          set_1(parent.data, this.name, this.getEmptyValue());
        }

        if (parent.resetType === "initial") {
          set_1(parent.data, this.name, this.initialValue);
        }

        Vue__default["default"].nextTick(function () {
          if (_this4.resetValidating) {
            _this4.needResetField = true;
          } else {
            _this4.resetHandler();
          }
        });
      },
      resetHandler: function resetHandler() {
        this.needResetField = false;
        this.errorList = [];
        this.successList = [];
        this.verifyStatus = "not"
        /* TO_BE_VALIDATED */
        ;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": this.classes
      }, [this.getLabel(), h("div", {
        "class": this.contentClasses,
        "style": this.contentStyle
      }, [h("div", {
        "class": CLASS_NAMES$1.controlsContent
      }, [this.$slots["default"], this.getSuffixIcon()]), this.renderTipsInfo()])]);
    }
  });

  var Form = withInstall(_Form);
  var FormItem = withInstall(_FormItem);

  var props$r = {
    allowUncheck: Boolean,
    checked: Boolean,
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    onChange: Function
  };

  function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$o = "".concat(prefix, "-radio");
  var radioBtnName = "".concat(prefix, "-radio-button");
  var _Radio = Vue__default["default"].extend({
    name: "TRadio",
    inheritAttrs: false,
    props: _objectSpread$U({}, props$r),
    inject: {
      radioGroup: {
        "default": void 0
      },
      radioButton: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        formDisabled: void 0
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var radioGroup = this.radioGroup,
          radioButton = this.radioButton;
      var inputProps = {
        checked: this.checked,
        disabled: this.tDisabled,
        value: this.value,
        name: this.name
      };

      if (radioGroup) {
        inputProps.checked = this.value === radioGroup.value;
        inputProps.disabled = this.tDisabled === void 0 ? radioGroup.disabled : this.tDisabled;
        inputProps.name = radioGroup.name;
      }

      var prefixCls = radioButton ? radioBtnName : name$o;
      var inputClass = ["".concat(prefixCls), (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.checked, inputProps.checked), _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, inputProps.disabled), _ref)];
      return h("label", {
        "class": inputClass
      }, [h("input", helper([{
        "attrs": {
          "type": "radio"
        },
        "class": "".concat(prefixCls, "__former")
      }, {
        "on": _objectSpread$U({}, omit(this.$listeners, ["change", "click"]))
      }, {
        "domProps": _objectSpread$U({}, inputProps),
        "on": {
          "change": this.handleChange,
          "click": this.handleClick
        }
      }])), h("span", {
        "class": "".concat(prefixCls, "__input")
      }), h("span", {
        "class": "".concat(prefixCls, "__label")
      }, [renderContent(this, "default", "label")])]);
    },
    methods: {
      handleChange: function handleChange(e) {
        if (this.radioGroup) {
          this.radioGroup.$emit("checked-change", this.value, {
            e: e
          });
        } else {
          var target = e.target;
          emitEvent(this, "change", target.checked, {
            e: e
          });
        }
      },
      handleClick: function handleClick(e) {
        this.$emit("click");
        if (!this.checked || !this.allowUncheck) return;

        if (this.radioGroup) {
          this.radioGroup.$emit("checked-change", void 0, {
            e: e
          });
        } else {
          emitEvent(this, "change", false, {
            e: e
          });
        }
      }
    }
  });

  var props$q = {
    disabled: {
      type: Boolean,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    variant: {
      type: String,
      "default": "outline",
      validator: function validator(val) {
        return ["outline", "primary-filled", "default-filled"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$n = "".concat(prefix, "-radio-group");
  var _RadioGroup = Vue__default["default"].extend({
    name: "TRadioGroup",
    props: _objectSpread$T({}, props$q),
    components: {
      Radio: _Radio
    },
    provide: function provide() {
      return {
        radioGroup: this
      };
    },
    data: function data() {
      return {
        barStyle: {
          width: "0px",
          left: "0px"
        },
        observer: null
      };
    },
    computed: {
      checkedClassName: function checkedClassName() {
        return ".".concat(radioBtnName, ".").concat(ClASSNAMES.STATUS.checked);
      }
    },
    render: function render(h) {
      var _this = this,
          _ref;

      var $scopedSlots = this.$scopedSlots;
      var children = $scopedSlots["default"] && $scopedSlots["default"](null);

      if (this.options && this.options.length) {
        children = this.options.map(function (option, index) {
          var opt = option;

          if (isNumber_1(option) || isString_1(option)) {
            opt = {
              value: option,
              label: option.toString()
            };
          }

          return h(_Radio, {
            "key": "radio-group-options-".concat(opt.value, "-").concat(index),
            "attrs": {
              "name": _this.name,
              "checked": _this.value === opt.value,
              "disabled": "disabled" in opt ? opt.disabled : _this.disabled,
              "value": opt.value
            }
          }, [typeof opt.label === "function" ? opt.label(h) : opt.label]);
        });
      }

      var groupClass = ["".concat(name$n), SIZE_CLASSNAMES[this.size], (_ref = {}, _defineProperty$2(_ref, "".concat(name$n, "__outline"), this.variant === "outline"), _defineProperty$2(_ref, "".concat(name$n, "--filled"), this.variant.includes("filled")), _defineProperty$2(_ref, "".concat(name$n, "--primary-filled"), this.variant === "primary-filled"), _ref)];

      if (this.variant.includes("filled")) {
        children && children.push(h("div", {
          "style": this.barStyle,
          "class": "".concat(name$n, "__bg-block")
        }));
      }

      return h("div", {
        "class": groupClass
      }, [children]);
    },
    watch: {
      value: function value() {
        var _this2 = this;

        this.$nextTick(function () {
          return _this2.calcBarStyle();
        });
      }
    },
    created: function created() {
      this.$on("checked-change", this.handleRadioChange);
    },
    mounted: function mounted() {
      this.calcBarStyle();
      var observer = new MutationObserver(this.calcBarStyle);
      observer.observe(this.$el, {
        childList: true,
        attributes: true,
        subtree: true
      });
      this.observer = observer;
    },
    beforeDestroy: function beforeDestroy() {
      this.observer.disconnect();
    },
    methods: {
      handleRadioChange: function handleRadioChange(value, context) {
        emitEvent(this, "change", value, context);
      },
      calcDefaultBarStyle: function calcDefaultBarStyle() {
        var defaultNode = this.$el.cloneNode(true);
        var div = document.createElement("div");
        div.setAttribute("style", "position: absolute; visibility: hidden;");
        div.appendChild(defaultNode);
        document.body.appendChild(div);
        var defaultCheckedRadio = div.querySelector(this.checkedClassName);
        var offsetWidth = defaultCheckedRadio.offsetWidth,
            offsetLeft = defaultCheckedRadio.offsetLeft;
        this.barStyle = {
          width: "".concat(offsetWidth, "px"),
          left: "".concat(offsetLeft, "px")
        };
        document.body.removeChild(div);
      },
      calcBarStyle: function calcBarStyle() {
        if (this.variant === "outline") return;
        var checkedRadio = this.$el.querySelector(this.checkedClassName);
        if (!checkedRadio) return;
        var offsetWidth = checkedRadio.offsetWidth,
            offsetLeft = checkedRadio.offsetLeft;

        if (!offsetWidth) {
          this.calcDefaultBarStyle();
        } else {
          this.barStyle = {
            width: "".concat(offsetWidth, "px"),
            left: "".concat(offsetLeft, "px")
          };
        }
      }
    }
  });

  function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _RadioButton = Vue__default["default"].extend({
    name: "TRadioButton",
    inheritAttrs: false,
    props: _objectSpread$S({}, props$r),
    components: {
      Radio: _Radio
    },
    provide: function provide() {
      return {
        radioButton: this
      };
    },
    inject: {
      radioGroup: {
        "default": void 0
      }
    },
    render: function render() {
      var h = arguments[0];
      var $props = this.$props,
          $listeners = this.$listeners,
          radioGroup = this.radioGroup;
      var radioProps = {
        props: _objectSpread$S({}, $props),
        on: $listeners
      };

      if (radioGroup) {
        radioProps.props.checked = $props.value === radioGroup.value;
        radioProps.props.disabled = $props.disabled === void 0 ? radioGroup.disabled : $props.disabled;
        radioProps.props.name = radioGroup.name;
      }

      return h(_Radio, helper([{}, radioProps]), [renderContent(this, "default", "label")]);
    }
  });

  var Radio = withInstall(mapProps(["checked"], {
    model: {
      prop: "checked",
      event: "change"
    }
  })(_Radio));
  var RadioGroup = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_RadioGroup));
  var RadioButton = withInstall(_RadioButton);

  var props$p = {
    disabled: Boolean,
    inputNumberProps: {
      type: [Boolean, Object],
      "default": false
    },
    label: {
      type: [String, Boolean, Function],
      "default": false
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["vertical", "horizontal"].includes(val);
      }
    },
    marks: {
      type: [Object, Array]
    },
    max: {
      type: Number,
      "default": 100
    },
    min: {
      type: Number,
      "default": 0
    },
    range: Boolean,
    step: {
      type: Number,
      "default": 1
    },
    tooltipProps: {
      type: Object
    },
    value: {
      type: [Number, Array]
    },
    defaultValue: {
      type: [Number, Array]
    },
    onChange: Function
  };

  var TSliderMark = Vue__default["default"].extend({
    name: "TSliderMark",
    props: {
      mark: {
        type: [Object, Array, String]
      },
      point: {
        type: Number
      }
    },
    methods: {
      changeValue: function changeValue(event) {
        event.stopPropagation();
        this.$emit("change-value", this.point);
      }
    },
    render: function render() {
      var h = arguments[0];
      var label = this.mark;
      return h("div", {
        "class": "".concat(prefix, "-slider__mark-text"),
        "on": {
          "click": this.changeValue
        }
      }, [label]);
    }
  });

  var name$m = "".concat(prefix, "-slider-button");
  var TSliderButton = Vue__default["default"].extend({
    name: name$m,
    props: {
      value: {
        type: [Number, String],
        "default": 0
      },
      vertical: {
        type: Boolean,
        "default": false
      },
      popupClass: {
        type: String,
        "default": ""
      },
      tooltipProps: {
        type: [Boolean, Object],
        "default": true
      }
    },
    inject: {
      slider: {
        "default": void 0
      }
    },
    computed: {
      placement: function placement() {
        if (this.tooltipProps instanceof Object) {
          var placement = this.tooltipProps.placement;
          if (placement) return placement;
        }

        return this.vertical ? "right" : "top";
      },
      rangeDiff: function rangeDiff() {
        return this.max - this.min;
      },
      formatValue: function formatValue() {
        return this.value;
      },
      disabled: function disabled() {
        return this.slider.disabled;
      },
      max: function max() {
        return this.slider.max;
      },
      min: function min() {
        return this.slider.min;
      },
      step: function step() {
        return this.slider.step;
      },
      precision: function precision() {
        return this.slider.precision;
      },
      currentPos: function currentPos() {
        return "".concat((this.value - this.min) / this.rangeDiff * 100, "%");
      },
      wrapperStyle: function wrapperStyle() {
        return this.vertical ? {
          bottom: this.currentPos
        } : {
          left: this.currentPos
        };
      }
    },
    data: function data() {
      return {
        visible: false,
        hovering: false,
        dragging: false,
        isClick: false,
        clientX: 0,
        clientY: 0,
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        startPos: 0,
        newPos: null,
        prevValue: this.value,
        showTooltip: true,
        trigger: "hover",
        showArrow: true,
        overlayStyle: void 0,
        overlayClassName: void 0,
        attach: "body",
        destroyOnClose: null
      };
    },
    watch: {
      disabled: function disabled() {
        this.handleIE();
      }
    },
    mounted: function mounted() {
      this.showTooltip = !this.tooltipProps === false;
      this.setTooltipProps();
      this.handleIE();
    },
    methods: {
      setTooltipProps: function setTooltipProps() {
        if (this.tooltipProps instanceof Object) {
          var _this$tooltipProps = this.tooltipProps,
              trigger = _this$tooltipProps.trigger,
              destroyOnClose = _this$tooltipProps.destroyOnClose,
              showArrow = _this$tooltipProps.showArrow,
              overlayStyle = _this$tooltipProps.overlayStyle,
              overlayClassName = _this$tooltipProps.overlayClassName,
              attach = _this$tooltipProps.attach;

          if (!this.empty(trigger)) {
            this.trigger = trigger;
          }

          this.destroyOnClose = destroyOnClose;

          if (!this.empty(showArrow)) {
            this.showArrow = showArrow;
          }

          this.overlayStyle = overlayStyle;
          this.overlayClassName = overlayClassName;

          if (!this.empty(attach)) {
            this.attach = attach;
          }
        }
      },
      getTooltipProps: function getTooltipProps() {
        if (this.tooltipProps instanceof Object) {
          return this.tooltipProps;
        }

        return {};
      },
      handleIE: function handleIE() {
        var _this = this;

        if (getIEVersion$1() <= 11) {
          this.$nextTick(function () {
            _this.$el.removeAttribute("disabled");
          });
        }
      },
      showTooltipComponent: function showTooltipComponent() {
        this.visible = true;
      },
      hideTooltipComponent: function hideTooltipComponent() {
        this.visible = false;
      },
      handleMouseEnter: function handleMouseEnter() {
        this.hovering = true;
        this.showTooltipComponent();
        this.$refs.button.focus();
      },
      handleMouseLeave: function handleMouseLeave() {
        this.hovering = false;

        if (!this.dragging) {
          this.hideTooltipComponent();
        }
      },
      onButtonDown: function onButtonDown(event) {
        if (this.disabled) {
          return;
        }

        event.preventDefault();
        this.onDragStart(event);
        window.addEventListener("mousemove", this.onDragging);
        window.addEventListener("mouseup", this.onDragEnd);
        window.addEventListener("touchmove", this.onDragging);
        window.addEventListener("touchend", this.onDragEnd);
        window.addEventListener("contextmenu", this.onDragEnd);
      },
      onNativeKeyDown: function onNativeKeyDown(e) {
        var code = e.code;
        e.preventDefault();

        if (code === "ArrowDown" || code === "ArrowLeft") {
          this.onKeyDown("sub");
        }

        if (code === "ArrowUp" || code === "ArrowRight") {
          this.onKeyDown("add");
        }
      },
      onLeftKeyDown: function onLeftKeyDown() {
        this.onKeyDown("sub");
      },
      onRightKeyDown: function onRightKeyDown() {
        this.onKeyDown("add");
      },
      onKeyDown: function onKeyDown(state) {
        if (this.disabled) {
          return;
        }

        var stepLength = this.step / this.rangeDiff * 100;

        if (state === "sub") {
          stepLength = -stepLength;
        }

        this.newPos = parseFloat(this.currentPos) + stepLength;
        this.setPosition(this.newPos);
      },
      onDragStart: function onDragStart(event) {
        this.dragging = true;
        this.isClick = true;
        var type = event.type;
        var clientY = event.clientY,
            clientX = event.clientX;

        if (type === "touchstart") {
          var touch = event.touches;
          var _ref = [touch[0].clientY, touch[0].clientX];
          clientY = _ref[0];
          clientX = _ref[1];
        }

        if (this.vertical) {
          this.startY = clientY;
        } else {
          this.startX = clientX;
        }

        this.startPos = parseFloat(this.currentPos);
        this.newPos = this.startPos;
      },
      onDragging: function onDragging(e) {
        var event = e;

        if (!this.dragging) {
          return;
        }

        this.isClick = false;
        this.showTooltipComponent();
        this.slider.resetSize();
        var diff = 0;
        var parentSliderSize = this.slider.sliderSize;

        if (this.vertical) {
          this.currentY = event.clientY;
          diff = this.startY - this.currentY;
        } else {
          this.currentX = event.clientX;
          diff = this.currentX - this.startX;
        }

        if (event.type === "touchmove") {
          var touch = event.touches;
          var _ref2 = [touch[0].clientY, touch[0].clientX],
              clientY = _ref2[0],
              clientX = _ref2[1];
          this.clientY = clientY;
          this.clientX = clientX;
        }

        diff = diff / parentSliderSize * 100;
        this.newPos = this.startPos + diff;
        this.setPosition(this.newPos);
      },
      onDragEnd: function onDragEnd() {
        var _this2 = this;

        if (this.dragging) {
          setTimeout(function () {
            _this2.dragging = false;

            _this2.hideTooltipComponent();
          }, 0);
          window.removeEventListener("mousemove", this.onDragging);
          window.removeEventListener("touchmove", this.onDragging);
          window.removeEventListener("mouseup", this.onDragEnd);
          window.removeEventListener("touchend", this.onDragEnd);
          window.removeEventListener("contextmenu", this.onDragEnd);
        }
      },
      setPosition: function setPosition(pos) {
        var _this3 = this;

        var newPos = pos;

        if (newPos === null || isNaN(newPos)) {
          return;
        }

        if (newPos > 100) {
          newPos = 100;
        } else if (newPos < 0) {
          newPos = 0;
        }

        var perStepLen = 100 * this.step / this.rangeDiff;
        var steps = Math.round(newPos / perStepLen);
        var value = steps * perStepLen * this.rangeDiff * 0.01;
        value += this.min;
        value = Number(parseFloat("".concat(value)).toFixed(this.precision));
        this.$emit("input", value);
        this.$nextTick(function () {
          _this3.showTooltipComponent();

          _this3.$refs.tooltip && _this3.$refs.tooltip.updatedTooltip();
        });

        if (!this.dragging && this.value !== this.prevValue) {
          this.prevValue = this.value;
        }
      },
      empty: function empty(str) {
        return str === void 0 || str === null;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "ref": "button",
        "class": "".concat(prefix, "-slider__button-wrapper"),
        "style": this.wrapperStyle,
        "attrs": {
          "tabindex": "0",
          "show-tooltip": this.showTooltip
        },
        "on": {
          "mouseenter": this.handleMouseEnter,
          "mouseleave": this.handleMouseLeave,
          "mousedown": this.onButtonDown,
          "touchstart": this.onButtonDown,
          "focus": this.handleMouseEnter,
          "blur": this.handleMouseLeave,
          "keydown": this.onNativeKeyDown
        }
      }, [h(Tooltip, helper([{
        "ref": "tooltip"
      }, {
        "props": this.getTooltipProps()
      }, {
        "attrs": {
          "visible": this.visible,
          "content": String(this.formatValue)
        }
      }]), [h("div", {
        "class": ["".concat(prefix, "-slider__button"), _defineProperty$2({}, "".concat(prefix, "-slider__button--dragging"), this.dragging)]
      })])]);
    }
  });

  function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$l = "".concat(prefix, "-slider");
  var _Slider = Vue__default["default"].extend({
    name: "TSlider",
    model: {
      prop: "value",
      event: "change"
    },
    props: _objectSpread$R({}, props$p),
    components: {
      TSliderMark: TSliderMark,
      TInputNumber: InputNumber
    },
    provide: function provide() {
      return {
        slider: this
      };
    },
    data: function data() {
      return {
        firstValue: 0,
        secondValue: 0,
        prevValue: 0,
        dragging: false,
        sliderSize: 1,
        inputDecimalPlaces: 0,
        inputFormat: null,
        inputPlaceholder: "",
        inputTheme: "column",
        showSteps: false,
        formDisabled: void 0
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      containerClass: function containerClass() {
        return ["".concat(name$l, "__container"), {
          "is-vertical": this.vertical
        }];
      },
      sliderClass: function sliderClass() {
        var _ref;

        return ["".concat(name$l), (_ref = {
          "is-vertical": this.vertical
        }, _defineProperty$2(_ref, "".concat(name$l, "--with-input"), this.inputNumberProps), _defineProperty$2(_ref, "".concat(name$l, "--vertical"), this.vertical), _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), this.tDisabled), _ref)];
      },
      sliderRailClass: function sliderRailClass() {
        return ["".concat(name$l, "__rail"), {
          "show-input": this.inputNumberProps,
          disabled: this.tDisabled
        }];
      },
      sliderNumberClass: function sliderNumberClass() {
        return ["".concat(name$l, "__input"), {
          "is-vertical": this.vertical
        }];
      },
      vertical: function vertical() {
        return this.layout === "vertical";
      },
      rangeDiff: function rangeDiff() {
        return this.max - this.min;
      },
      steps: function steps() {
        var _this = this;

        var min = this.min,
            max = this.max,
            rangeDiff = this.rangeDiff,
            step = this.step;
        if (!this.showSteps || min > max) return [];

        if (this.step === 0) {
          console.warn("[Element Warn][Slider]step should not be 0.");
          return [];
        }

        var stepCount = rangeDiff / step;
        var stepWidth = 100 * step / rangeDiff;
        var result = [];

        for (var i = 1; i < stepCount; i++) {
          result.push(i * stepWidth);
        }

        if (this.range) {
          return result.filter(function (step2) {
            return step2 < 100 * (_this.minValue - min) / rangeDiff || step2 > 100 * (_this.maxValue - min) / rangeDiff;
          });
        }

        return result.filter(function (step2) {
          return step2 > 100 * (_this.firstValue - min) / rangeDiff;
        });
      },
      markList: function markList() {
        var _this2 = this;

        if (!this.marks) {
          return [];
        }

        var legalMarks = [];
        Object.keys(this.marks).map(parseFloat).sort(function (a, b) {
          return a - b;
        }).filter(function (point) {
          return point <= _this2.max && point >= _this2.min;
        }).forEach(function (point) {
          var item = {
            point: point,
            position: (point - _this2.min) * 100 / _this2.rangeDiff,
            mark: _this2.marks[point]
          };
          legalMarks.push(item);
        });
        return legalMarks;
      },
      minValue: function minValue() {
        return Math.min(this.firstValue, this.secondValue);
      },
      maxValue: function maxValue() {
        return Math.max(this.firstValue, this.secondValue);
      },
      barSize: function barSize() {
        var cuttentDiff = this.range ? this.maxValue - this.minValue : this.prevValue - this.min;
        return "".concat(100 * cuttentDiff / this.rangeDiff, "%");
      },
      barStart: function barStart() {
        return this.range ? "".concat(100 * (this.minValue - this.min) / this.rangeDiff, "%") : "0%";
      },
      precision: function precision() {
        var precisions = [this.min, this.max, this.step].map(function (item) {
          var decimalArr = "".concat(item).split(".");
          return decimalArr[1] ? decimalArr[1].length : 0;
        });
        return Math.max.apply(null, precisions);
      },
      runwayStyle: function runwayStyle() {
        return this.vertical ? {
          height: "100%"
        } : {};
      },
      barStyle: function barStyle() {
        return this.vertical ? {
          height: this.barSize,
          bottom: this.barStart
        } : {
          width: this.barSize,
          left: this.barStart
        };
      }
    },
    watch: {
      value: function value(newVal) {
        if (this.dragging === true) return;

        if (Array.isArray(newVal) && this.range) {
          var _newVal = _slicedToArray(newVal, 2);

          this.firstValue = _newVal[0];
          this.secondValue = _newVal[1];
        } else {
          this.prevValue = newVal;
        }
      },
      firstValue: function firstValue(val) {
        if (this.range) {
          this.emitChange([this.minValue, this.maxValue]);
        } else {
          this.emitChange(val);
        }
      },
      secondValue: function secondValue() {
        if (this.range) {
          this.emitChange([this.minValue, this.maxValue]);
        }
      },
      prevValue: function prevValue(val) {
        this.emitChange(val);
      },
      dragging: function dragging(newVal) {
        if (newVal === false) {
          this.init();
        }
      }
    },
    mounted: function mounted() {
      this.init();
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener("resize", this.resetSize);
    },
    methods: {
      init: function init() {
        var valuetext;
        var min = this.min,
            max = this.max,
            value = this.value;

        if (this.range) {
          if (Array.isArray(value)) {
            this.firstValue = Math.max(min || 0, value[0]);
            this.secondValue = Math.min(max || 100, value[1]);
          } else {
            this.firstValue = min || 0;
            this.secondValue = max || 100;
          }

          valuetext = "".concat(this.firstValue, "-").concat(this.secondValue);
        } else {
          if (typeof this.value !== "number") {
            this.prevValue = min;
          } else {
            this.prevValue = Math.min(max, Math.max(min, value));
          }

          valuetext = String(this.prevValue);
        }

        this.$el.setAttribute("aria-valuetext", valuetext);
        this.resetSize();
        window.addEventListener("resize", this.resetSize);
      },
      valueChanged: function valueChanged() {
        var _this3 = this;

        if (this.range) {
          return ![this.minValue, this.maxValue].every(function (item, index) {
            return item === _this3.prevValue[index];
          });
        }

        return this.value !== this.prevValue;
      },
      setValues: function setValues(value) {
        var _ref2 = [this.min, this.max],
            min = _ref2[0],
            max = _ref2[1];

        if (min > max) {
          console.warn("[Slider] max should be greater than min.");
          return;
        }

        if (this.range && Array.isArray(value)) {
          var _ref3 = [Math.min.apply(Math, _toConsumableArray(value)), Math.max.apply(Math, _toConsumableArray(value))],
              firstValue = _ref3[0],
              secondValue = _ref3[1];
          if (firstValue > max) firstValue = this.firstValue;
          if (firstValue < min) firstValue = min;
          if (secondValue < min) secondValue = this.secondValue;
          if (secondValue > max) secondValue = max;
          var _ref4 = [firstValue, secondValue];
          this.firstValue = _ref4[0];
          this.secondValue = _ref4[1];
          return [firstValue, secondValue];
        }

        var prevValue = value;
        if (prevValue < min) prevValue = min;
        if (prevValue > max) prevValue = max;
        this.prevValue = prevValue;
        return prevValue;
      },
      setInputProps: function setInputProps() {
        if (this.inputNumberProps instanceof Object) {
          var _this$inputNumberProp = this.inputNumberProps,
              inputDecimalPlaces = _this$inputNumberProp.decimalPlaces,
              inputFormat = _this$inputNumberProp.format,
              inputPlaceholder = _this$inputNumberProp.placeholder,
              inputTheme = _this$inputNumberProp.theme;

          if (typeof inputDecimalPlaces === "number" && !isNaN(inputDecimalPlaces)) {
            this.inputDecimalPlaces = inputDecimalPlaces;
          }

          if (inputPlaceholder) {
            this.inputPlaceholder = inputPlaceholder;
          }

          if (typeof inputFormat === "function") {
            this.inputFormat = inputFormat;
          }

          if (["column", "row", "normal"].includes(inputTheme)) {
            this.inputTheme = inputTheme;
          }
        }
      },
      setPosition: function setPosition(percent) {
        var targetValue = percent * this.rangeDiff / 100;
        targetValue = this.min + targetValue;

        if (!this.range) {
          this.$refs.button1.setPosition(percent);
          return;
        }

        var button;

        if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {
          button = this.firstValue < this.secondValue ? "button1" : "button2";
        } else {
          button = this.firstValue > this.secondValue ? "button1" : "button2";
        }

        this.$refs[button].setPosition(percent);
      },
      onSliderClick: function onSliderClick(event) {
        if (this.tDisabled || this.dragging) {
          return;
        }

        this.resetSize();
        var value = 0;

        if (this.vertical) {
          var sliderOffsetBottom = this.$refs.slider.getBoundingClientRect().bottom;
          value = (sliderOffsetBottom - event.clientY) / this.sliderSize * 100;
          this.setPosition(value);
        } else {
          var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;
          value = (event.clientX - sliderOffsetLeft) / this.sliderSize * 100;
          this.setPosition(value);
        }
      },
      resetSize: function resetSize() {
        if (this.$refs.slider) {
          this.sliderSize = this.$refs.slider["client".concat(this.vertical ? "Height" : "Width")];
        }
      },
      emitChange: function emitChange(value) {
        var changeValue = value;

        if (changeValue === void 0) {
          if (this.range) {
            changeValue = [this.firstValue, this.secondValue];
          } else {
            changeValue = this.prevValue;
          }
        }

        var fixValue = this.setValues(changeValue);
        emitEvent(this, "change", fixValue);
      },
      getStopStyle: function getStopStyle(position) {
        return this.vertical ? {
          top: "calc(".concat(100 - position, "% - 1px)")
        } : {
          left: "".concat(position, "%")
        };
      },
      changeValue: function changeValue(point) {
        if (this.tDisabled || this.dragging) {
          return;
        }

        this.resetSize();
        var value = Number(point / this.rangeDiff * 100);
        this.setPosition(value);
        this.emitChange(point);
      },
      renderMask: function renderMask() {
        var _this4 = this;

        var h = this.$createElement;

        if (this.markList.length) {
          return h("div", [h("div", [this.markList.map(function (item, index) {
            return h("div", {
              "class": "".concat(name$l, "__stop ").concat(name$l, "__mark-stop"),
              "style": _this4.getStopStyle(item.position),
              "key": index
            });
          })]), h("div", {
            "class": "".concat(name$l, "__mark")
          }, [this.markList.map(function (item, key) {
            return h("t-slider-mark", {
              "attrs": {
                "mark": item.mark,
                "point": item.point
              },
              "key": key,
              "style": _this4.getStopStyle(item.position),
              "on": {
                "change-value": _this4.changeValue
              }
            });
          })])]);
        }
      },
      renderInputButton: function renderInputButton() {
        var _this5 = this;

        var h = this.$createElement;
        var max = this.max,
            min = this.min,
            sliderNumberClass = this.sliderNumberClass,
            range = this.range;
        return h("div", {
          "class": ["".concat(name$l, "__input-container"), {
            "is-vertical": this.vertical
          }]
        }, [h("t-input-number", {
          "class": sliderNumberClass,
          "attrs": {
            "value": range ? this.firstValue : this.prevValue,
            "step": this.step,
            "disabled": this.tDisabled,
            "min": min,
            "max": max,
            "decimalPlaces": this.inputDecimalPlaces,
            "format": this.inputFormat,
            "placeholder": this.inputPlaceholder,
            "theme": this.inputTheme
          },
          "ref": "input",
          "on": {
            "change": function change(v) {
              _this5.range ? _this5.firstValue = v : _this5.prevValue = v;
            }
          }
        }), range && h("div", {
          "class": "".concat(name$l, "__center-line")
        }), range && h("t-input-number", {
          "class": this.sliderNumberClass,
          "ref": "input",
          "attrs": {
            "step": this.step,
            "disabled": this.tDisabled,
            "min": min,
            "max": max,
            "decimalPlaces": this.inputDecimalPlaces,
            "format": this.inputFormat,
            "placeholder": this.inputPlaceholder,
            "theme": this.inputTheme
          },
          "model": {
            value: _this5.secondValue,
            callback: function callback($$v) {
              _this5.secondValue = $$v;
            }
          }
        })]);
      }
    },
    render: function render() {
      var _this6 = this;

      var h = arguments[0];
      var min = this.min,
          max = this.max,
          layout = this.layout,
          disabled = this.disabled,
          vertical = this.vertical,
          range = this.range;
      var buttonGroup = this.inputNumberProps && this.renderInputButton();
      var masks = this.renderMask();
      return h("div", {
        "class": this.containerClass
      }, [h("div", {
        "class": this.sliderClass,
        "attrs": {
          "role": "slider",
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-orientation": layout,
          "aria-disabled": disabled,
          "tooltip-props": this.tooltipProps
        }
      }, [h("div", {
        "class": this.sliderRailClass,
        "style": this.runwayStyle,
        "on": {
          "click": this.onSliderClick
        },
        "ref": "slider"
      }, [h("div", {
        "class": "".concat(name$l, "__track"),
        "style": this.barStyle
      }), h(TSliderButton, {
        "attrs": {
          "vertical": vertical,
          "value": range ? this.firstValue : this.prevValue,
          "disabled": this.tDisabled,
          "tooltip-props": this.tooltipProps
        },
        "ref": "button1",
        "on": {
          "input": function input(v) {
            _this6.range ? _this6.firstValue = v : _this6.prevValue = v;
          }
        }
      }), this.range && h(TSliderButton, {
        "attrs": {
          "vertical": vertical,
          "disabled": this.tDisabled,
          "tooltip-props": this.tooltipProps
        },
        "ref": "button2",
        "model": {
          value: _this6.secondValue,
          callback: function callback($$v) {
            _this6.secondValue = $$v;
          }
        }
      }), this.showSteps && h("div", [this.steps.map(function (item, key) {
        return h("div", {
          "class": "".concat(name$l, "__stop"),
          "key": key,
          "style": _this6.getStopStyle(item)
        });
      })]), masks])]), buttonGroup]);
    }
  });

  var Slider = withInstall(_Slider);

  var props$o = {
    customValue: {
      type: Array
    },
    disabled: Boolean,
    label: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    loading: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": false
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": false
    },
    onChange: Function
  };

  function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$k = "".concat(prefix, "-switch");
  var _Switch = Vue__default["default"].extend({
    name: "TSwitch",
    props: _objectSpread$Q({}, props$o),
    model: {
      prop: "value",
      event: "change"
    },
    data: function data() {
      return {
        formDisabled: void 0
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        return ["".concat(name$k), ClASSNAMES.SIZE[this.size], (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty$2(_ref, ClASSNAMES.STATUS.loading, this.loading), _defineProperty$2(_ref, ClASSNAMES.STATUS.checked, this.value === this.activeValue), _ref)];
      },
      nodeClasses: function nodeClasses() {
        var _ref2;

        return ["".concat(name$k, "__handle"), (_ref2 = {}, _defineProperty$2(_ref2, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty$2(_ref2, ClASSNAMES.STATUS.loading, this.loading), _ref2)];
      },
      contentClasses: function contentClasses() {
        return ["".concat(name$k, "__content"), ClASSNAMES.SIZE[this.size], _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.tDisabled)];
      },
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      activeValue: function activeValue() {
        if (this.customValue && this.customValue.length > 0) {
          return this.customValue[0];
        }

        return true;
      },
      inactiveValue: function inactiveValue() {
        if (this.customValue && this.customValue.length > 1) {
          return this.customValue[1];
        }

        return false;
      },
      content: function content() {
        if (typeof this.label === "function") {
          return this.label(this.$createElement, {
            value: this.value
          });
        }

        if (typeof this.label === "string") {
          return this.label;
        }

        if (Array.isArray(this.label)) {
          var label = this.value === this.activeValue ? this.label[0] : this.label[1];
          if (!label) return;

          if (typeof label === "string") {
            return label;
          }

          if (typeof label === "function") {
            return label(this.$createElement);
          }
        }

        if (this.$scopedSlots.label) {
          return this.$scopedSlots.label({
            value: this.value
          });
        }

        return null;
      }
    },
    watch: {
      value: {
        handler: function handler(val) {
          if (this.customValue && this.customValue.length && !this.customValue.includes(val)) {
            throw "value is not in ".concat(JSON.stringify(this.customValue));
          }
        },
        immediate: true
      }
    },
    methods: {
      handleToggle: function handleToggle() {
        var checked = this.value === this.activeValue ? this.inactiveValue : this.activeValue;
        typeof this.onChange === "function" && this.onChange(checked);
        this.$emit("change", checked);
      },
      toggle: function toggle() {
        if (this.tDisabled || this.loading) {
          return;
        }

        this.handleToggle();
      }
    },
    render: function render() {
      var h = arguments[0];
      var loading = this.loading,
          disabled = this.disabled,
          content = this.content,
          nodeClasses = this.nodeClasses,
          classes = this.classes,
          toggle = this.toggle,
          contentClasses = this.contentClasses;
      var switchContent;
      var loadingContent;

      if (loading) {
        loadingContent = h(Loading, {
          "attrs": {
            "size": "small"
          }
        });
      } else if (content) {
        switchContent = content;
      }

      return h("div", {
        "class": classes,
        "attrs": {
          "disabled": disabled
        },
        "on": {
          "click": toggle
        }
      }, [h("span", {
        "class": nodeClasses
      }, [loadingContent]), h("div", {
        "class": contentClasses
      }, [switchContent])]);
    }
  });

  var Switch = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Switch));

  var props$n = {
    autoWidth: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    dragSort: Boolean,
    excessTagsDisplayType: {
      type: String,
      "default": "scroll",
      validator: function validator(val) {
        if (!val) return true;
        return ["scroll", "break-line"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    label: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onDragSort: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onRemove: Function
  };

  function useTagScroll(props) {
    var tagInputRef = ref();

    var _toRefs = toRefs(props),
        excessTagsDisplayType = _toRefs.excessTagsDisplayType,
        readonly = _toRefs.readonly,
        disabled = _toRefs.disabled;

    var scrollDistance = ref(0);
    var scrollElement = ref();
    var mouseEnterTimer = ref();

    var updateScrollElement = function updateScrollElement(element) {
      var inputElement = element.children[0];
      scrollElement.value = inputElement;
    };

    var updateScrollDistance = function updateScrollDistance() {
      scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
    };

    var scrollTo = function scrollTo(distance) {
      var _scrollElement$value;

      (_scrollElement$value = scrollElement.value) === null || _scrollElement$value === void 0 ? void 0 : _scrollElement$value.scroll({
        left: distance,
        behavior: "smooth"
      });
    };

    var scrollToRight = function scrollToRight() {
      updateScrollDistance();
      scrollTo(scrollDistance.value);
    };

    var scrollToLeft = function scrollToLeft() {
      scrollTo(0);
    };

    var onWheel = function onWheel(_ref) {
      var e = _ref.e;
      if (readonly.value || disabled.value) return;
      if (!scrollElement.value) return;

      if (e.deltaX > 0) {
        var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
        scrollTo(distance);
      } else {
        var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);

        scrollTo(_distance);
      }
    };

    var scrollToRightOnEnter = function scrollToRightOnEnter() {
      if (excessTagsDisplayType.value !== "scroll") return;
      mouseEnterTimer.value = setTimeout(function () {
        scrollToRight();
        clearTimeout(mouseEnterTimer.value);
      }, 100);
    };

    var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
      if (excessTagsDisplayType.value !== "scroll") return;
      scrollTo(0);
      clearTimeout(mouseEnterTimer.value);
    };

    var init = function init() {
      var _tagInputRef$value;

      var element = (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 ? void 0 : _tagInputRef$value.$el;
      if (!element) return;
      updateScrollElement(element);
    };

    var clear = function clear() {
      clearTimeout(mouseEnterTimer.value);
    };

    onMounted(init);
    onUnmounted(clear);
    return {
      tagInputRef: tagInputRef,
      scrollElement: scrollElement,
      scrollDistance: scrollDistance,
      scrollTo: scrollTo,
      scrollToRight: scrollToRight,
      scrollToLeft: scrollToLeft,
      updateScrollElement: updateScrollElement,
      updateScrollDistance: updateScrollDistance,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave
    };
  }

  function useVModel(value, defaultValue, onChange, eventName) {
    var _getCurrentInstance = getCurrentInstance(),
        emit = _getCurrentInstance.emit;

    var internalValue = ref();
    internalValue.value = defaultValue;

    if (typeof value.value !== "undefined") {
      return [value, function (newValue) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["input", newValue].concat(args));
        onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));

        if (eventName && eventName !== "input") {
          emit === null || emit === void 0 ? void 0 : emit.apply(void 0, [eventName, newValue].concat(args));
        }
      }];
    }

    return [internalValue, function (newValue) {
      internalValue.value = newValue;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));

      if (eventName && eventName !== "input") {
        emit === null || emit === void 0 ? void 0 : emit.apply(void 0, [eventName, newValue].concat(args));
      }
    }];
  }

  var isVNode = function isVNode(obj) {
    var vNode = createElement("span", "");
    var VNode2 = vNode.constructor;
    return obj instanceof VNode2;
  };

  function getDefaultNode(options) {
    var defaultNode;

    if (isObject_1(options) && "defaultNode" in options) {
      defaultNode = options.defaultNode;
    } else if (isVNode(options) || isString_1(options)) {
      defaultNode = options;
    }

    return defaultNode;
  }
  function getParams(options) {
    return isObject_1(options) && "params" in options ? options.params : null;
  }
  var useTNodeJSX = function useTNodeJSX() {
    var instance = getCurrentInstance();
    return function (name, options) {
      var params = getParams(options);
      var defaultNode = getDefaultNode(options);
      var slots = instance.setupContext.slots;
      var propsNode;

      if (Object.keys(instance.props).includes(name)) {
        propsNode = instance.props[name];
      }

      if (propsNode === false) return;

      if (slots[name]) {
        return slots[name](params);
      }

      if (isFunction_1(propsNode)) return propsNode(createElement, params);

      if (propsNode === true && defaultNode) {
        return defaultNode;
      }

      return propsNode;
    };
  };

  function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTagList(props) {
    var renderTNode = useTNodeJSX();

    var _toRefs = toRefs(props),
        value = _toRefs.value,
        onRemove = _toRefs.onRemove,
        max = _toRefs.max,
        minCollapsedNum = _toRefs.minCollapsedNum,
        size = _toRefs.size,
        disabled = _toRefs.disabled,
        readonly = _toRefs.readonly,
        tagProps = _toRefs.tagProps;

    var _useVModel = useVModel(value, props.defaultValue || [], props.onChange, "change"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tagValue = _useVModel2[0],
        setTagValue = _useVModel2[1];

    var oldInputValue = ref();

    var onClose = function onClose(p) {
      var _onRemove$value;

      var arr = _toConsumableArray(tagValue.value);

      arr.splice(p.index, 1);
      setTagValue(arr, _objectSpread$P({
        trigger: "tag-remove"
      }, p));
      (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 ? void 0 : _onRemove$value.call(onRemove, _objectSpread$P(_objectSpread$P({}, p), {}, {
        trigger: "tag-remove",
        value: arr
      }));
    };

    var clearAll = function clearAll(context) {
      setTagValue([], {
        trigger: "clear",
        e: context.e
      });
    };

    var onInnerEnter = function onInnerEnter(value2, context) {
      var _tagValue$value, _props$onEnter;

      var valueStr = String(value2).trim();
      if (!valueStr) return;
      var isLimitExceeded = max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max.value;
      var newValue = tagValue.value;

      if (!isLimitExceeded) {
        newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
        setTagValue(newValue, {
          trigger: "enter",
          index: newValue.length - 1,
          item: valueStr,
          e: context.e
        });
      }

      props === null || props === void 0 ? void 0 : (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, _objectSpread$P(_objectSpread$P({}, context), {}, {
        inputValue: value2
      }));
    };

    var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2, context) {
      var e = context.e;
      if (!tagValue.value || !tagValue.value.length) return;

      if (!oldInputValue.value && ["Backspace", "NumpadDelete"].includes(e.code)) {
        var _onRemove$value2;

        var index = tagValue.value.length - 1;
        var item = tagValue.value[index];
        var trigger = "backspace";
        setTagValue(tagValue.value.slice(0, -1), {
          e: e,
          index: index,
          item: item,
          trigger: trigger
        });
        (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 ? void 0 : _onRemove$value2.call(onRemove, {
          e: e,
          index: index,
          item: item,
          trigger: trigger,
          value: tagValue.value
        });
      }

      oldInputValue.value = value2;
    };

    var renderLabel = function renderLabel(_ref, h) {
      var displayNode = _ref.displayNode,
          label = _ref.label;
      var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
      var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
        var tagContent = renderTNode("tag", {
          params: {
            value: item
          }
        });
        return h(Tag, helper([{
          "key": index,
          "attrs": {
            "size": size.value,
            "disabled": disabled.value,
            "closable": !readonly.value && !disabled.value
          },
          "on": {
            "close": function close(context) {
              return onClose({
                e: context.e,
                item: item,
                index: index
              });
            }
          }
        }, {
          "props": tagProps.value
        }]), [tagContent !== null && tagContent !== void 0 ? tagContent : item]);
      });

      if (![null, void 0, ""].includes(label)) {
        list.unshift(h("div", {
          "class": "".concat(prefix, "-tag-input__prefix"),
          "key": "label"
        }, [label]));
      }

      if (newList.length !== tagValue.value.length) {
        var len = tagValue.value.length - newList.length;
        var more = renderTNode("collapsedItems", {
          params: {
            value: tagValue,
            count: tagValue.value.length,
            collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length)
          }
        });
        list.push(more !== null && more !== void 0 ? more : h(Tag, {
          "key": "more"
        }, ["+", len]));
      }

      return list;
    };

    return {
      tagValue: tagValue,
      clearAll: clearAll,
      onClose: onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      renderLabel: renderLabel
    };
  }

  function useHover(props) {
    var disabled = props.disabled,
        readonly = props.readonly,
        onMouseenter = props.onMouseenter,
        onMouseleave = props.onMouseleave;
    var isHover = ref(false);

    var addHover = function addHover(context) {
      if (readonly || disabled) return;
      isHover.value = true;
      onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter(context);
    };

    var cancelHover = function cancelHover(context) {
      if (readonly || disabled) return;
      isHover.value = false;
      onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave(context);
    };

    return {
      isHover: isHover,
      addHover: addHover,
      cancelHover: cancelHover
    };
  }

  function useDefaultValue(value, defaultValue, onChange, propsName, eventName) {
    var _getCurrentInstance = getCurrentInstance(),
        emit = _getCurrentInstance.emit;

    var internalValue = ref();
    internalValue.value = defaultValue;

    if (typeof value.value !== "undefined") {
      return [value, function (newValue) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        emit.apply(void 0, ["update:".concat(propsName), newValue].concat(args));
        onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
        emit.apply(void 0, [eventName, newValue].concat(args));
      }];
    }

    return [internalValue, function (newValue) {
      internalValue.value = newValue;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      emit.apply(void 0, [eventName, newValue].concat(args));
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var NAME_CLASS = "".concat(prefix, "-tag-input");
  var CLEAR_CLASS = "".concat(prefix, "-tag-input__suffix-clear");
  var BREAK_LINE_CLASS = "".concat(prefix, "-tag-input--break-line");
  var _TagInput = defineComponent({
    name: "TTagInput",
    props: _objectSpread$O({}, props$n),
    setup: function setup(props2, context) {
      var _toRefs = toRefs(props2),
          inputValue = _toRefs.inputValue;

      var _useDefaultValue = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue", "input-change"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          tInputValue = _useDefaultValue2[0],
          setTInputValue = _useDefaultValue2[1];

      var _toRefs2 = toRefs(props2),
          excessTagsDisplayType = _toRefs2.excessTagsDisplayType,
          readonly = _toRefs2.readonly,
          disabled = _toRefs2.disabled,
          clearable = _toRefs2.clearable,
          placeholder = _toRefs2.placeholder;

      var _useHover = useHover({
        readonly: props2.readonly,
        disabled: props2.disabled,
        onMouseenter: props2.onMouseenter,
        onMouseleave: props2.onMouseleave
      }),
          isHover = _useHover.isHover,
          addHover = _useHover.addHover,
          cancelHover = _useHover.cancelHover;

      var _useTagScroll = useTagScroll(props2),
          scrollToRight = _useTagScroll.scrollToRight,
          onWheel = _useTagScroll.onWheel,
          scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
          scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
          tagInputRef = _useTagScroll.tagInputRef;

      var _useTagList = useTagList(props2),
          tagValue = _useTagList.tagValue,
          onInnerEnter = _useTagList.onInnerEnter,
          onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
          clearAll = _useTagList.clearAll,
          renderLabel = _useTagList.renderLabel,
          onClose = _useTagList.onClose;

      var classes = computed(function () {
        return [NAME_CLASS, _defineProperty$2({}, BREAK_LINE_CLASS, excessTagsDisplayType.value === "break-line")];
      });
      var tagInputPlaceholder = computed(function () {
        var _tagValue$value;

        return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
      });
      var showClearIcon = computed(function () {
        var _tagValue$value2;

        return Boolean(!readonly.value && !disabled.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
      });

      var onInputEnter = function onInputEnter(value, context2) {
        setTInputValue("", {
          e: context2.e,
          trigger: "enter"
        });
        onInnerEnter(value, context2);
        nextTick(function () {
          scrollToRight();
        });
      };

      var onClick = function onClick() {
        tagInputRef.value.focus();
      };

      var onClearClick = function onClearClick(ctx) {
        var _props2$onClear;

        clearAll(ctx);
        setTInputValue("", {
          e: ctx.e,
          trigger: "clear"
        });
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, ctx);
        context.emit("clear", ctx);
      };

      return {
        tagValue: tagValue,
        tInputValue: tInputValue,
        isHover: isHover,
        tagInputPlaceholder: tagInputPlaceholder,
        showClearIcon: showClearIcon,
        tagInputRef: tagInputRef,
        setTInputValue: setTInputValue,
        addHover: addHover,
        cancelHover: cancelHover,
        onInputEnter: onInputEnter,
        onInnerEnter: onInnerEnter,
        onInputBackspaceKeyUp: onInputBackspaceKeyUp,
        renderLabel: renderLabel,
        onWheel: onWheel,
        scrollToRightOnEnter: scrollToRightOnEnter,
        scrollToLeftOnLeave: scrollToLeftOnLeave,
        onClick: onClick,
        onClearClick: onClearClick,
        onClose: onClose,
        classes: classes
      };
    },
    render: function render(h) {
      var _this = this;

      var suffixIconNode = this.showClearIcon ? h(CloseCircleFilled, {
        "class": CLEAR_CLASS,
        "on": {
          "click": this.onClearClick
        }
      }) : renderTNodeJSX(this, "suffixIcon");
      var displayNode = renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.tagValue,
          onClose: function onClose(index, item) {
            return _this.onClose({
              index: index,
              item: item
            });
          }
        }
      });

      var _label = renderTNodeJSX(this, "label", {
        silent: true
      });

      return h(Input, helper([{
        "ref": "tagInputRef",
        "attrs": {
          "readonly": this.readonly
        }
      }, this.inputProps, {
        "attrs": {
          "value": this.tInputValue,
          "autoWidth": this.autoWidth,
          "size": this.size,
          "disabled": this.disabled,
          "label": function label() {
            return _this.renderLabel({
              displayNode: displayNode,
              label: _label
            }, h);
          },
          "tips": this.tips,
          "status": this.status,
          "placeholder": this.tagInputPlaceholder,
          "suffix": this.suffix,
          "suffixIcon": function suffixIcon() {
            return suffixIconNode;
          }
        },
        "on": {
          "change": function change(val, context) {
            _this.setTInputValue(val, _objectSpread$O(_objectSpread$O({}, context), {}, {
              trigger: "input"
            }));
          },
          "mousewheel": this.onWheel,
          "enter": this.onInputEnter,
          "keyup": this.onInputBackspaceKeyUp,
          "mouseenter": function mouseenter(context) {
            _this.addHover(context);

            _this.scrollToRightOnEnter();
          },
          "mouseleave": function mouseleave(context) {
            _this.cancelHover(context);

            _this.scrollToLeftOnLeave();
          },
          "focus": function focus(inputValue, context) {
            var _this$onFocus;

            (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });

            _this.$emit("focus", _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });
          },
          "blur": function blur(inputValue, context) {
            var _this$onBlur;

            (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });

            _this.$emit("blur", _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });
          },
          "paste": function paste(context) {
            var _this$onPaste;

            (_this$onPaste = _this.onPaste) === null || _this$onPaste === void 0 ? void 0 : _this$onPaste.call(_this, context);

            _this.$emit("paste", context);
          }
        },
        "class": this.classes
      }]));
    }
  });

  var TagInput = withInstall(_TagInput);

  var props$m = {
    allowInput: Boolean,
    autoWidth: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number]
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    loading: Boolean,
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    panel: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Boolean, Object, Array, Date]
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onClear: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onPopupVisibleChange: Function,
    onTagChange: Function
  };

  var ConfigProvider = Vue__default["default"].extend({
    name: "TConfigProvider",
    props: {
      globalConfig: Object
    },
    provide: function provide() {
      return {
        globalConfig: this.globalConfig
      };
    },
    render: function render() {
      var h = arguments[0];

      if (this.$slots["default"].length === 1) {
        return this.$slots["default"][0];
      }

      return h("div", [this.$slots["default"]]);
    }
  });

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var defaultClassPrefix = "t";
  var defaultAnimation = {
    include: ["ripple"
    /* ripple */
    , "expand"
    /* expand */
    , "fade"
    /* fade */
    ],
    exclude: []
  };
  var defaultGlobalConfig = _objectSpread$N({
    animation: defaultAnimation,
    classPrefix: defaultClassPrefix
  }, GLOBAL_CONFIG_ZH);

  var merge = function merge(defaultGlobalConfig2, injectConfig) {
    return mergeWith_1(defaultGlobalConfig2, injectConfig, function (objValue, srcValue) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    });
  };
  function useConfig(componentName) {
    var mergedGlobalConfig = computed(function () {
      var globalConfig = inject("globalConfig", /* @__PURE__ */Object.create(null));
      var mergedGlobalConfig2 = merge(cloneDeep_1(defaultGlobalConfig), globalConfig);
      return mergedGlobalConfig2;
    });
    var global = computed(function () {
      return mergedGlobalConfig.value[componentName];
    });
    var classPrefix = computed(function () {
      return mergedGlobalConfig.value.classPrefix;
    });

    var t = function t(pattern, data) {
      if (typeof pattern === "string") {
        if (!data) return pattern;
        var regular = /\{\s*([\w-]+)\s*\}/g;
        var translated = pattern.replace(regular, function (match, key) {
          if (data) {
            return String(data[key]);
          }

          return "";
        });
        return translated;
      }

      if (typeof pattern === "function") {
        return pattern(data);
      }

      return "";
    };

    return {
      t: t,
      global: global,
      classPrefix: classPrefix
    };
  }
  function usePrefixClass(componentName) {
    var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;

    return computed(function () {
      return componentName ? "".concat(classPrefix.value, "-").concat(componentName) : classPrefix.value;
    });
  }

  var ConnfigProvider = withInstall(ConfigProvider);

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon", "onPaste", "onEnter", "onMouseenter", "onMouseleave"];
  var DEFAULT_KEYS$1 = {
    label: "label",
    value: "value"
  };

  function getInputValue(value, keys) {
    var iKeys = keys || DEFAULT_KEYS$1;
    return isObject_1(value) ? value[iKeys.label] : value;
  }

  function useSingle(props, context) {
    var _props$defaultInputVa;

    var instance = getCurrentInstance();

    var _toRefs = toRefs(props),
        value = _toRefs.value,
        keys = _toRefs.keys,
        propsInputValue = _toRefs.inputValue;

    var classPrefix = usePrefixClass();

    var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props.onInputChange, "inputValue", "input-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        inputValue = _useDefaultValue2[0],
        setInputValue = _useDefaultValue2[1];

    var inputRef = ref();
    var renderTNode = useTNodeJSX();
    var commonInputProps = computed(function () {
      return pick_1(props, COMMON_PROPERTIES);
    });

    var onInnerClear = function onInnerClear(context2) {
      var _context2$e, _props$onClear;

      context2 === null || context2 === void 0 ? void 0 : (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, context2);
      instance.emit("clear", context2);
      setInputValue("", {
        trigger: "clear"
      });
    };

    var onInnerInputChange = function onInnerInputChange(value2, context2) {
      if (props.allowInput) {
        setInputValue(value2, _objectSpread$M(_objectSpread$M({}, context2), {}, {
          trigger: "input"
        }));
      }
    };

    var renderSelectSingle = function renderSelectSingle(h, popupVisible) {
      var singleValueDisplay = renderTNode("valueDisplay");
      var displayedValue = popupVisible && props.allowInput ? inputValue.value : getInputValue(value.value, keys.value);
      var prefixContent = [singleValueDisplay, renderTNode("label")];

      var inputProps = _objectSpread$M(_objectSpread$M(_objectSpread$M({}, commonInputProps.value), props.inputProps), {}, {
        value: singleValueDisplay ? void 0 : displayedValue,
        label: prefixContent.length ? function () {
          return prefixContent;
        } : void 0,
        autoWidth: props.autoWidth,
        readonly: !props.allowInput,
        placeholder: singleValueDisplay ? "" : props.placeholder,
        suffixIcon: !props.disabled && props.loading ? function () {
          return h(Loading, {
            "attrs": {
              "loading": true,
              "size": "small"
            }
          });
        } : props.suffixIcon,
        showClearIconOnEmpty: Boolean(props.clearable && inputValue.value),
        inputClass: _defineProperty$2({}, "".concat(classPrefix.value, "-input--focused"), popupVisible)
      });

      return h(Input, helper([{
        "ref": "inputRef"
      }, {
        "props": inputProps
      }, {
        "scopedSlots": context.slots,
        "on": {
          "change": onInnerInputChange,
          "clear": onInnerClear,
          "blur": function blur(val, context2) {
            var _props$onBlur;

            (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value.value, _objectSpread$M(_objectSpread$M({}, context2), {}, {
              inputValue: val
            }));
            instance.emit("blur", value.value, _objectSpread$M(_objectSpread$M({}, context2), {}, {
              inputValue: val
            }));
          },
          "enter": function enter(val, context2) {
            var _props$onEnter;

            (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, value.value, _objectSpread$M(_objectSpread$M({}, context2), {}, {
              inputValue: val
            }));
            instance.emit("enter", value.value, _objectSpread$M(_objectSpread$M({}, context2), {}, {
              inputValue: val
            }));
          },
          "focus": function focus(val, context2) {
            var _props$onFocus;

            (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value.value, _objectSpread$M(_objectSpread$M({}, context2), {}, {
              inputValue: val
            }));
            instance.emit("focus", value.value, _objectSpread$M(_objectSpread$M({}, context2), {}, {
              tagInputValue: val
            }));
            !popupVisible && setInputValue(getInputValue(value.value, keys.value), _objectSpread$M(_objectSpread$M({}, context2), {}, {
              trigger: "input"
            }));
          }
        }
      }]));
    };

    return {
      inputRef: inputRef,
      commonInputProps: commonInputProps,
      onInnerClear: onInnerClear,
      renderSelectSingle: renderSelectSingle
    };
  }

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_KEYS = {
    label: "label",
    key: "key",
    children: "children"
  };
  function useMultiple(props, context) {
    var _toRefs = toRefs(props),
        inputValue = _toRefs.inputValue;

    var classPrefix = usePrefixClass();
    var instance = getCurrentInstance();
    var tagInputRef = ref();

    var _useDefaultValue = useDefaultValue(inputValue, props.defaultInputValue, props.onInputChange, "inputValue", "input-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tInputValue = _useDefaultValue2[0],
        setTInputValue = _useDefaultValue2[1];

    var iKeys = computed(function () {
      return _objectSpread$L(_objectSpread$L({}, DEFAULT_KEYS), props.keys);
    });
    var tags = computed(function () {
      if (!(props.value instanceof Array)) {
        return isObject_1(props.value) ? [props.value[iKeys.value.label]] : [props.value];
      }

      return props.value.map(function (item) {
        return isObject_1(item) ? item[iKeys.value.label] : item;
      });
    });
    var tPlaceholder = computed(function () {
      return !tags.value || !tags.value.length ? props.placeholder : "";
    });

    var onTagInputChange = function onTagInputChange(val, context2) {
      var _props$onTagChange;

      if (context2.trigger === "tag-remove") {
        var _context2$e;

        (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      }

      (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 ? void 0 : _props$onTagChange.call(props, val, context2);
      instance.emit("tag-change", val, context2);
    };

    var renderSelectMultiple = function renderSelectMultiple(p, h) {
      var tagInputProps = _objectSpread$L(_objectSpread$L(_objectSpread$L({}, props.tagInputProps), p.commonInputProps), {}, {
        tagProps: props.tagProps,
        readonly: !props.allowInput,
        label: props.label,
        autoWidth: props.autoWidth,
        placeholder: tPlaceholder.value,
        minCollapsedNum: props.minCollapsedNum,
        collapsedItems: props.collapsedItems,
        tag: props.tag,
        valueDisplay: props.valueDisplay,
        value: tags.value,
        inputValue: tInputValue.value || "",
        inputProps: {
          readonly: !props.allowInput || props.readonly,
          inputClass: _defineProperty$2({}, "".concat(classPrefix.value, "-input--focused"), p.popupVisible)
        },
        suffixIcon: !props.disabled && props.loading ? function () {
          return h(Loading, {
            "attrs": {
              "loading": true,
              "size": "small"
            }
          });
        } : props.suffixIcon
      });

      return h(TagInput, helper([{
        "ref": "tagInputRef",
        "scopedSlots": context.slots
      }, {
        "props": tagInputProps
      }, {}, {
        "on": {
          "input-change": function inputChange(val, context2) {
            if ((context2 === null || context2 === void 0 ? void 0 : context2.trigger) === "enter") return;
            setTInputValue(val, {
              trigger: context2.trigger,
              e: context2.e
            });
          }
        }
      }, {
        "on": {
          "change": onTagInputChange,
          "clear": function clear(context2) {
            context2.e.stopPropagation();
            p.onInnerClear;
          },
          "blur": function blur(val, context2) {
            setTInputValue("", _objectSpread$L(_objectSpread$L({}, context2), {}, {
              trigger: "blur"
            }));
            instance.emit("blur", props.value, _objectSpread$L(_objectSpread$L({}, context2), {}, {
              tagInputValue: val
            }));
          },
          "focus": function focus(val, context2) {
            var _props$onFocus;

            (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, props.value, _objectSpread$L(_objectSpread$L({}, context2), {}, {
              tagInputValue: val
            }));
            instance.emit("focus", props.value, _objectSpread$L(_objectSpread$L({}, context2), {}, {
              tagInputValue: val
            }));
          }
        }
      }]));
    };

    return {
      tags: tags,
      tPlaceholder: tPlaceholder,
      tagInputRef: tagInputRef,
      renderSelectMultiple: renderSelectMultiple
    };
  }

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MAX_POPUP_WIDTH = 1e3;
  function useOverlayStyle(props) {
    var instance = getCurrentInstance();

    var _toRefs = toRefs(props),
        popupProps = _toRefs.popupProps,
        autoWidth = _toRefs.autoWidth;

    var innerPopupVisible = ref(false);
    var tOverlayStyle = ref();

    var macthWidthFunc = function macthWidthFunc(triggerElement, popupElement) {
      var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
      var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
      var otherOverlayStyle = {};

      if (popupProps.value && _typeof(popupProps.value.overlayStyle) === "object" && !popupProps.value.overlayStyle.width) {
        otherOverlayStyle = popupProps.value.overlayStyle;
      }

      return _objectSpread$K({
        width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
      }, otherOverlayStyle);
    };

    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
      var _props$onPopupVisible;

      if (props.disabled || props.readonly) return;
      var newVisible = context.trigger === "trigger-element-click" ? true : visible;
      innerPopupVisible.value = newVisible;
      (_props$onPopupVisible = props.onPopupVisibleChange) === null || _props$onPopupVisible === void 0 ? void 0 : _props$onPopupVisible.call(props, newVisible, context);
      instance.emit("popup-visible-change", newVisible, context);
    };

    watch([innerPopupVisible, popupProps], function () {
      var _popupProps$value;

      if (tOverlayStyle.value) return;
      var result = {};
      var overlayStyle = ((_popupProps$value = popupProps.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.overlayStyle) || {};

      if (isFunction_1(overlayStyle) || isObject_1(overlayStyle) && overlayStyle.width) {
        result = overlayStyle;
      } else if (!autoWidth.value) {
        result = macthWidthFunc;
      }

      tOverlayStyle.value = result;
    });
    return {
      tOverlayStyle: tOverlayStyle,
      innerPopupVisible: innerPopupVisible,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  }

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BASE_CLASS_BORDERLESS = "".concat(prefix, "-select-input--borderless");
  var BASE_CLASS_MULTIPLE = "".concat(prefix, "-select-input--multiple");
  var BASE_CLASS_POPUP_VISIBLE = "".concat(prefix, "-select-input--popup-visible");
  var BASE_CLASS_EMPTY = "".concat(prefix, "-select-input--empty");
  var _SelectInput = defineComponent({
    name: "TSelectInput",
    props: _objectSpread$J({}, props$m),
    setup: function setup(props2, context) {
      var selectInputRef = ref();
      var selectInputWrapRef = ref();

      var _toRefs = toRefs(props2),
          multiple = _toRefs.multiple,
          value = _toRefs.value,
          popupVisible = _toRefs.popupVisible,
          borderless = _toRefs.borderless;

      var _useSingle = useSingle(props2, context),
          commonInputProps = _useSingle.commonInputProps,
          onInnerClear = _useSingle.onInnerClear,
          renderSelectSingle = _useSingle.renderSelectSingle;

      var _useMultiple = useMultiple(props2, context),
          renderSelectMultiple = _useMultiple.renderSelectMultiple;

      var _useOverlayStyle = useOverlayStyle(props2),
          tOverlayStyle = _useOverlayStyle.tOverlayStyle,
          innerPopupVisible = _useOverlayStyle.innerPopupVisible,
          onInnerPopupVisibleChange = _useOverlayStyle.onInnerPopupVisibleChange;

      var popupClasses = computed(function () {
        var _popupVisible$value, _ref;

        return [(_ref = {}, _defineProperty$2(_ref, BASE_CLASS_BORDERLESS, borderless.value), _defineProperty$2(_ref, BASE_CLASS_MULTIPLE, multiple.value), _defineProperty$2(_ref, BASE_CLASS_POPUP_VISIBLE, (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), _defineProperty$2(_ref, BASE_CLASS_EMPTY, value.value instanceof Array ? !value.value.length : !value.value), _ref)];
      });
      return {
        selectInputWrapRef: selectInputWrapRef,
        innerPopupVisible: innerPopupVisible,
        commonInputProps: commonInputProps,
        tOverlayStyle: tOverlayStyle,
        selectInputRef: selectInputRef,
        popupClasses: popupClasses,
        onInnerClear: onInnerClear,
        renderSelectSingle: renderSelectSingle,
        renderSelectMultiple: renderSelectMultiple,
        onInnerPopupVisibleChange: onInnerPopupVisibleChange
      };
    },
    render: function render(h) {
      var _this$popupVisible, _this$popupProps, _this$popupVisible2;

      var visibleProps = {
        visible: (_this$popupVisible = this.popupVisible) !== null && _this$popupVisible !== void 0 ? _this$popupVisible : this.innerPopupVisible
      };
      var mainContent = h(Popup, helper([{
        "ref": "selectInputRef",
        "class": this.popupClasses,
        "attrs": {
          "trigger": ((_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.trigger) || "click",
          "placement": "bottom-left",
          "visible": (_this$popupVisible2 = this.popupVisible) !== null && _this$popupVisible2 !== void 0 ? _this$popupVisible2 : this.innerPopupVisible,
          "content": this.panel,
          "hideEmptyPopup": true
        },
        "scopedSlots": _objectSpread$J(_objectSpread$J({}, this.$scopedSlots), {}, {
          content: this.$scopedSlots.panel
        })
      }, {
        "on": {
          "visible-change": this.onInnerPopupVisibleChange
        }
      }, {}, {
        "props": _objectSpread$J(_objectSpread$J({}, this.popupProps), {}, {
          overlayStyle: this.tOverlayStyle
        })
      }]), [this.multiple ? this.renderSelectMultiple({
        commonInputProps: this.commonInputProps,
        onInnerClear: this.onInnerClear,
        popupVisible: visibleProps.visible
      }, h) : this.renderSelectSingle(h, visibleProps.visible)]);
      if (!this.tips) return mainContent;
      return h("div", {
        "ref": "selectInputWrapRef",
        "class": "".concat(prefix, "-select-input__wrap")
      }, [mainContent, h("div", {
        "class": "".concat(prefix, "-input__tips ").concat(prefix, "-input__tips--").concat(this.status || "normal")
      }, [this.tips])]);
    }
  });

  var SelectInput = withInstall(_SelectInput);

  var props$l = {
    autofocus: Boolean,
    autosize: {
      type: [Boolean, Object],
      "default": false
    },
    disabled: Boolean,
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function
  };

  var hiddenTextarea;
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var SIZING_PROPS = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];

  function calculateNodeStyling(targetElement) {
    var style = window.getComputedStyle(targetElement);
    var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
    var sizingStyle = SIZING_PROPS.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(";");
    return {
      sizingStyle: sizingStyle,
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing
    };
  }

  function calcTextareaHeight(targetElement) {
    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }

    var _calculateNodeStyling = calculateNodeStyling(targetElement),
        paddingSize = _calculateNodeStyling.paddingSize,
        borderSize = _calculateNodeStyling.borderSize,
        boxSizing = _calculateNodeStyling.boxSizing,
        sizingStyle = _calculateNodeStyling.sizingStyle;

    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    var height = hiddenTextarea.scrollHeight;
    var result = {};

    if (boxSizing === "border-box") {
      height += borderSize;
    } else if (boxSizing === "content-box") {
      height -= paddingSize;
    }

    hiddenTextarea.value = "";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;

    if (minRows !== null) {
      var minHeight = singleRowHeight * minRows;

      if (boxSizing === "border-box") {
        minHeight = minHeight + paddingSize + borderSize;
      }

      height = Math.max(minHeight, height);
      result.minHeight = "".concat(minHeight, "px");
    }

    if (maxRows !== null) {
      var maxHeight = singleRowHeight * maxRows;

      if (boxSizing === "border-box") {
        maxHeight = maxHeight + paddingSize + borderSize;
      }

      height = Math.min(maxHeight, height);
    }

    result.height = "".concat(height, "px");
    hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
    hiddenTextarea = null;
    return result;
  }

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$j = "".concat(prefix, "-textarea");
  var TEXTAREA_TIPS_CLASS = "".concat(prefix, "-textarea__tips");
  var TEXTAREA_LIMIT = "".concat(name$j, "__limit");

  function getValidAttrs(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }

  var _Textarea = Vue__default["default"].extend({
    name: "TTextarea",
    props: _objectSpread$I({}, props$l),
    data: function data() {
      return {
        formDisabled: void 0,
        focused: false,
        mouseHover: false,
        textareaStyle: {}
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      textareaClasses: function textareaClasses() {
        var _ref;

        return [name$j, (_ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-is-disabled"), this.tDisabled), _defineProperty$2(_ref, "".concat(prefix, "-is-readonly"), this.readonly), _ref)];
      },
      inputAttrs: function inputAttrs() {
        return getValidAttrs({
          autofocus: this.autofocus,
          disabled: this.tDisabled,
          readonly: this.readonly,
          placeholder: this.placeholder,
          maxlength: this.maxlength || void 0,
          name: this.name || void 0,
          unselectable: this.readonly ? "on" : "off"
        });
      },
      characterNumber: function characterNumber() {
        var characterInfo = getCharacterLength(String(this.value || ""));

        if (_typeof(characterInfo) === "object") {
          return characterInfo.length;
        }

        return characterInfo;
      }
    },
    mounted: function mounted() {
      this.adjustTextareaHeight();
    },
    methods: {
      adjustTextareaHeight: function adjustTextareaHeight() {
        if (this.autosize === true) {
          this.textareaStyle = calcTextareaHeight(this.$refs.refTextareaElem);
        } else if (_typeof(this.autosize) === "object") {
          var _this$autosize, _this$autosize2;

          this.textareaStyle = calcTextareaHeight(this.$refs.refTextareaElem, (_this$autosize = this.autosize) === null || _this$autosize === void 0 ? void 0 : _this$autosize.minRows, (_this$autosize2 = this.autosize) === null || _this$autosize2 === void 0 ? void 0 : _this$autosize2.maxRows);
        } else if (this.$attrs.rows) {
          this.textareaStyle = {
            height: "auto",
            minHeight: "auto"
          };
        }
      },
      emitEvent: function emitEvent(name2, value, context) {
        this.$emit(name2, value, context);
        var handleName = getPropsApiByEvent(name2);
        isFunction_1(this[handleName]) && this[handleName](value, context);
      },
      focus: function focus() {
        var input = this.$refs.refTextareaElem;
        input === null || input === void 0 ? void 0 : input.focus();
      },
      blur: function blur() {
        var input = this.$refs.refTextareaElem;
        input === null || input === void 0 ? void 0 : input.blur();
      },
      handleInput: function handleInput(e) {
        if (e.isComposing || e.inputType === "insertCompositionText") return;
        this.inputValueChangeHandle(e);
      },
      onCompositionend: function onCompositionend(e) {
        this.inputValueChangeHandle(e);
      },
      inputValueChangeHandle: function inputValueChangeHandle(e) {
        var _this = this;

        var target = e.target;
        var val = target.value;

        if (this.maxcharacter && this.maxcharacter >= 0) {
          var stringInfo = getCharacterLength(val, this.maxcharacter);
          val = _typeof(stringInfo) === "object" && stringInfo.characters;
        }

        this.$emit("input", val);
        this.emitEvent("change", val, {
          e: e
        });
        this.$nextTick(function () {
          return _this.setInputValue(val);
        });
        this.adjustTextareaHeight();
      },
      setInputValue: function setInputValue() {
        var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var textareaElem = this.$refs.refTextareaElem;
        var sV = String(v);

        if (!textareaElem) {
          return;
        }

        if (textareaElem.value !== sV) {
          textareaElem.value = sV;
        }
      },
      emitKeyDown: function emitKeyDown(e) {
        if (this.tDisabled) return;
        this.emitEvent("keydown", this.value, {
          e: e
        });
      },
      emitKeyUp: function emitKeyUp(e) {
        if (this.tDisabled) return;
        this.emitEvent("keyup", this.value, {
          e: e
        });
      },
      emitKeypress: function emitKeypress(e) {
        if (this.tDisabled) return;
        this.emitEvent("keypress", this.value, {
          e: e
        });
      },
      emitFocus: function emitFocus(e) {
        if (this.tDisabled) return;
        this.focused = true;
        this.emitEvent("focus", this.value, {
          e: e
        });
      },
      emitBlur: function emitBlur(e) {
        this.focused = false;
        this.emitEvent("blur", this.value, {
          e: e
        });
      }
    },
    render: function render() {
      var _ref2, _String;

      var h = arguments[0];
      var inputEvents = getValidAttrs({
        focus: this.emitFocus,
        blur: this.emitBlur,
        keydown: this.emitKeyDown,
        keyup: this.emitKeyUp,
        keypress: this.emitKeypress
      });
      var classes = ["".concat(name$j, "__inner"), (_ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-is-").concat(this.status), this.status), _defineProperty$2(_ref2, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty$2(_ref2, ClASSNAMES.STATUS.focused, this.focused), _defineProperty$2(_ref2, "".concat(prefix, "-resize-none"), _typeof(this.autosize) === "object"), _ref2)];
      var tips = renderTNodeJSX(this, "tips");
      return h("div", {
        "class": this.textareaClasses
      }, [h("textarea", {
        "on": _objectSpread$I({
          "input": this.handleInput,
          "compositionend": this.onCompositionend
        }, inputEvents),
        "attrs": _objectSpread$I({}, _objectSpread$I(_objectSpread$I({}, this.$attrs), this.inputAttrs)),
        "domProps": {
          "value": this.value
        },
        "class": classes,
        "style": this.textareaStyle,
        "ref": "refTextareaElem"
      }), this.maxcharacter && h("span", {
        "class": TEXTAREA_LIMIT
      }, ["".concat(this.characterNumber, "/").concat(this.maxcharacter)]), !this.maxcharacter && this.maxlength ? h("span", {
        "class": TEXTAREA_LIMIT
      }, ["".concat(this.value ? (_String = String(this.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(this.maxlength)]) : null, tips && h("div", {
        "class": "".concat(TEXTAREA_TIPS_CLASS, " ").concat(prefix, "-textarea__tips--").concat(this.status || "normal")
      }, [tips])]);
    }
  });

  var Textarea = withInstall(mapProps(["value"])(_Textarea));

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TRANSFER_NAME = "TTransfer";

  function findTopNode(vm) {
    if (vm.$options.name === TRANSFER_NAME) {
      return vm;
    }

    if (vm.$parent) {
      return findTopNode(vm.$parent);
    }

    return vm;
  }

  function getTransferListOption(prop) {
    if (Array.isArray(prop)) {
      return {
        source: prop[0],
        target: prop[1]
      };
    }

    return {
      source: prop,
      target: prop
    };
  }

  function getDataValues(data, filterValues) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$isTreeMode = _ref.isTreeMode,
        isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode,
        _ref$include = _ref.include,
        include = _ref$include === void 0 ? true : _ref$include;

    if (isTreeMode) {
      var result = [];

      if (data) {
        for (var i = 0; i < data.length; i++) {
          var _item$children;

          var item = data[i];
          var isInclude = filterValues.includes(item.value);

          if (!include && isInclude) {
            continue;
          }

          if (item !== null && item !== void 0 && item.children && ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) > 0) {
            var childResult = getDataValues(item.children, filterValues, {
              isTreeMode: isTreeMode,
              include: include
            });
            result = result.concat(childResult);
          } else if (include && isInclude || !include && !isInclude) {
            result.push(item.value);
          }
        }
      }

      return result;
    }

    return data.filter(function (item) {
      var isInclude = filterValues.includes(item.value);
      return (include && isInclude || !include && !isInclude) && !item.disabled;
    }).map(function (item) {
      return item.value;
    });
  }

  function getTransferData(data, keys) {
    var isTreeMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var list = data.map(function (transferDataItem, index) {
      var _transferDataItem$dis;

      var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";
      var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";

      if (transferDataItem[labelKey] === void 0) {
        throw "".concat(labelKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem));
      }

      if (transferDataItem[valueKey] === void 0) {
        throw "".concat(valueKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem));
      }

      var result = {
        label: transferDataItem[labelKey],
        value: transferDataItem[valueKey],
        key: "key__value_".concat(transferDataItem[valueKey], "_index_").concat(index),
        disabled: (_transferDataItem$dis = transferDataItem.disabled) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,
        data: transferDataItem
      };

      if (isTreeMode && transferDataItem.children) {
        result.children = getTransferData(transferDataItem.children, keys, true);
      }

      return result;
    });
    return list;
  }

  function isAllNodeValid(data, filterValues, needMatch) {
    if (filterValues.includes(data.value)) {
      return needMatch;
    }

    return false;
  }

  function isTreeNodeValid(data, filterValues, needMatch) {
    if (filterValues.includes(data.value)) {
      return needMatch;
    }

    if (data !== null && data !== void 0 && data.children) {
      return data === null || data === void 0 ? void 0 : data.children.some(function (item) {
        return isTreeNodeValid(item, filterValues, needMatch);
      });
    }

    return !needMatch;
  }

  function cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {
    sourceTree.forEach(function (item) {
      var newNode;

      if (isAllNodeValid(item, filterValues, needMatch)) {
        newNode = cloneDeep_1(item);
        targetTree.push(newNode);
      } else if (isTreeNodeValid(item, filterValues, needMatch)) {
        newNode = _objectSpread$H({}, item);
        delete newNode.children;
        targetTree.push(newNode);

        if (item.children) {
          newNode.children = [];
          cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);

          if (newNode.children.length === 0) {
            delete newNode.children;
          }
        }
      }
    });
  }

  function filterTransferData(data, filterValues) {
    var needMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var isTreeMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (!isTreeMode) {
      return data.filter(function (item) {
        var isMatch = filterValues.includes(item.value);
        return needMatch ? isMatch : !isMatch;
      });
    }

    var result = [];
    cloneTreeWithFilter(data, result, filterValues, needMatch);
    return result;
  }

  function getLeefCount(nodes) {
    var total = 0;
    nodes.forEach(function (child) {
      if (child.children && child.children.length > 0) {
        total += getLeefCount(child.children);
      } else {
        total += 1;
      }
    });
    return total;
  }

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Search = Vue__default["default"].extend({
    name: "TTransferSearch",
    functional: true,
    model: {
      prop: "searchValue",
      event: "change"
    },
    props: {
      searchValue: {
        type: String,
        "default": ""
      },
      search: {
        type: [Boolean, Object]
      },
      placeholder: String
    },
    render: function render(_, context) {
      var h = arguments[0];
      var _context$props = context.props,
          searchValue = _context$props.searchValue,
          search = _context$props.search,
          placeholder = _context$props.placeholder;
      var inputProps = _typeof(search) === "object" ? search : {
        clearable: true
      };

      var handleChange = function handleChange(value, changeCtx) {
        context.listeners.change && context.listeners.change(value);
        context.listeners.search && context.listeners.search({
          value: value,
          trigger: "input",
          e: changeCtx.e
        });
      };

      var handleEnter = function handleEnter(value, changeCtx) {
        context.listeners.search && context.listeners.search({
          value: value,
          trigger: "input",
          e: changeCtx.e
        });
      };

      return h("div", {
        "class": "".concat(prefix, "-transfer__search-wrapper")
      }, [h(Input, helper([{}, {
        "props": _objectSpread$G({}, inputProps)
      }, {
        "attrs": {
          "value": searchValue,
          "placeholder": placeholder
        },
        "on": {
          "change": handleChange,
          "enter": handleEnter
        }
      }]), [h(Search$1, {
        "slot": "suffix-icon"
      })])]);
    }
  });

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$1 = getKeepAnimationMixins();
  var TransferList = mixins(keepAnimationMixins$1).extend({
    name: "TTransferList",
    components: {
      Search: Search,
      TCheckbox: Checkbox,
      TCheckboxGroup: CheckboxGroup
    },
    directives: {
      ripple: Ripple
    },
    props: {
      checkboxProps: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      dataSource: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      listType: {
        type: String,
        "default": "target"
      },
      title: {
        type: [String, Function]
      },
      checkedValue: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      search: {
        type: [Boolean, Object],
        "default": false
      },
      transferItem: Function,
      empty: {
        type: [Function, String]
      },
      pagination: [Boolean, Object],
      footer: [Function, String],
      checkAll: Boolean,
      t: Function,
      global: Object,
      isTreeMode: {
        type: Boolean,
        "default": false
      }
    },
    data: function data() {
      return {
        filterValue: "",
        defaultCurrent: 1,
        defaultPageSize: 0
      };
    },
    computed: {
      currentPage: function currentPage() {
        return this.pagination.current || this.defaultCurrent || this.pagination.defaultCurrent;
      },
      pageSize: function pageSize() {
        return this.pagination.pageSize || this.defaultPageSize || this.pagination.defaultPageSize;
      },
      pageTotal: function pageTotal() {
        return this.filteredData && this.filteredData.length || 0;
      },
      filteredData: function filteredData() {
        var _this = this;

        return this.dataSource.filter(function (item) {
          var label = item && item.label.toString();
          return label.toLowerCase().indexOf(_this.filterValue.toLowerCase()) > -1;
        });
      },
      curPageData: function curPageData() {
        var pageData = this.filteredData;
        if (!this.pagination) return pageData;
        if (this.pageSize === 0) return pageData;
        var startIndex = (this.currentPage - 1) * this.pageSize;
        var endIndex = this.currentPage * this.pageSize;
        pageData = pageData.slice(startIndex, endIndex);
        return pageData;
      },
      paginationProps: function paginationProps() {
        var defaultPaginationProps = {
          size: "small",
          theme: "simple",
          totalContent: false,
          pageSizeOptions: []
        };
        return _typeof(this.pagination) === "object" ? _objectSpread$F(_objectSpread$F(_objectSpread$F({}, defaultPaginationProps), this.pagination), {}, {
          current: this.currentPage,
          total: this.pageTotal,
          pageSize: this.pageSize
        }) : {};
      },
      hasFooter: function hasFooter() {
        return !!this.$slots["default"];
      },
      indeterminate: function indeterminate() {
        return !this.isAllChecked && this.checkedValue.length > 0;
      },
      isAllChecked: function isAllChecked() {
        var _this2 = this;

        return this.checkedValue.length > 0 && this.dataSource.every(function (item) {
          return item.disabled || _this2.checkedValue.includes(item.value);
        });
      },
      totalCount: function totalCount() {
        return getLeefCount(this.dataSource);
      }
    },
    methods: {
      handlePaginationChange: function handlePaginationChange(pageInfo) {
        this.$emit("pageChange", pageInfo);
        this.defaultCurrent = pageInfo.current;
        this.defaultPageSize = pageInfo.pageSize;
      },
      handleCheckedChange: function handleCheckedChange(val) {
        this.$emit("checkedChange", val);
      },
      handleCheckedAllChange: function handleCheckedAllChange(checked) {
        if (checked) {
          var allValue = getDataValues(this.dataSource, [], {
            isTreeMode: this.isTreeMode,
            include: false
          });
          this.handleCheckedChange(allValue);
        } else {
          this.handleCheckedChange([]);
        }
      },
      scroll: function scroll(e) {
        this.$emit("scroll", e);
      },
      handleSearch: function handleSearch(e) {
        var event = {
          query: e.value,
          type: this.listType,
          e: e.e,
          trigger: e.trigger
        };
        this.$emit("search", event);
      },
      renderTitle: function renderTitle() {
        var h = this.$createElement;
        var defaultNode = this.title && typeof this.title === "string" ? h("template", [this.title]) : null;
        var titleNode = renderTNodeJSXDefault(this, "title", {
          defaultNode: defaultNode,
          params: {
            type: this.listType
          }
        });
        return h("span", [titleNode]);
      },
      renderContent: function renderContent() {
        var _this3 = this;

        var h = this.$createElement;
        var rootNode = findTopNode(this);
        var defaultNode = h(CheckboxGroup, {
          "attrs": {
            "value": this.checkedValue
          },
          "on": {
            "change": this.handleCheckedChange
          }
        }, [this.curPageData.map(function (item, index) {
          return h(Checkbox, {
            "attrs": {
              "disabled": _this3.disabled || item.disabled,
              "value": item.value
            },
            "class": ["".concat(prefix, "-transfer__list-item")],
            "key": item.key,
            "directives": [{
              name: "ripple",
              value: _this3.keepAnimation.ripple
            }],
            "props": _objectSpread$F({}, _this3.checkboxProps)
          }, [renderTNodeJSXDefault(_this3, "transferItem", {
            defaultNode: h("span", [item.label]),
            params: {
              data: item.data,
              index: index,
              type: _this3.listType
            }
          })]);
        })]);
        return h("div", {
          "class": "".concat(prefix, "-transfer__list-content narrow-scrollbar"),
          "on": {
            "scroll": this.scroll
          }
        }, [renderTNodeJSXDefault(rootNode, "tree", {
          defaultNode: defaultNode,
          params: {
            data: this.curPageData,
            value: this.checkedValue,
            onChange: this.handleCheckedChange
          }
        })]);
      },
      renderEmpty: function renderEmpty() {
        var h = this.$createElement;
        var empty = this.empty || this.t(this.global.empty);
        var defaultNode = typeof empty === "string" ? h("span", [empty]) : null;
        return h("div", {
          "class": "".concat(prefix, "-transfer__empty")
        }, [renderTNodeJSXDefault(this, "empty", {
          defaultNode: defaultNode,
          params: {
            type: this.listType
          }
        })]);
      },
      renderFooter: function renderFooter() {
        var h = this.$createElement;
        var defaultNode = typeof this.footer === "string" ? h("div", {
          "class": "".concat(prefix, "-transfer__footer")
        }, [this.footer]) : null;
        return renderTNodeJSXDefault(this, "footer", {
          defaultNode: defaultNode,
          params: {
            type: this.listType
          }
        });
      }
    },
    render: function render() {
      var _this4 = this;

      var h = arguments[0];
      return h("div", {
        "class": "".concat(prefix, "-transfer__list ").concat(prefix, "-transfer__list-").concat(this.listType)
      }, [h("div", {
        "class": "".concat(prefix, "-transfer__list-header")
      }, [h("div", [this.checkAll && h(Checkbox, {
        "attrs": {
          "disabled": this.disabled || !this.dataSource.length,
          "checked": this.isAllChecked,
          "indeterminate": this.indeterminate
        },
        "on": {
          "change": this.handleCheckedAllChange
        }
      }), h("span", [this.t(this.global.title, {
        checked: this.checkedValue.length,
        total: this.totalCount
      })])]), this.renderTitle()]), h("div", {
        "class": ["".concat(prefix, "-transfer__list-body"), this.search ? "".concat(prefix, "-transfer__list--with-search") : ""]
      }, [this.search && h("search", {
        "attrs": {
          "searchValue": this.filterValue,
          "placeholder": this.t(this.global.placeholder),
          "disabled": this.disabled,
          "search": this.search
        },
        "on": {
          "change": function change(e) {
            return _this4.filterValue = e;
          },
          "search": this.handleSearch
        }
      }), this.curPageData.length > 0 ? this.renderContent() : this.renderEmpty()]), this.pagination && this.pageSize > 0 && this.pageTotal > 0 && h("div", {
        "class": "".concat(prefix, "-transfer__list-pagination")
      }, [h(Pagination, helper([{}, {
        "props": this.paginationProps
      }, {
        "on": {
          "change": this.handlePaginationChange
        }
      }]))]), this.renderFooter()]);
    }
  });

  var TransferOperations = Vue__default["default"].extend({
    name: "TTransferOperations",
    props: {
      leftDisabled: {
        type: Boolean,
        required: true
      },
      rightDisabled: {
        type: Boolean,
        required: true
      },
      operation: {
        type: [String, Array, Function, Boolean]
      }
    },
    methods: {
      moveToRight: function moveToRight() {
        this.$emit("moveToRight");
      },
      moveToLeft: function moveToLeft() {
        this.$emit("moveToLeft");
      },
      getIconRight: function getIconRight() {
        var h = this.$createElement;
        return h(ChevronRight);
      },
      getIconLeft: function getIconLeft() {
        var h = this.$createElement;
        return h(ChevronLeft);
      },
      getIcon: function getIcon(direction) {
        if (typeof this.operation === "function") {
          return null;
        }

        if (direction === "right" && this.operation && typeof this.operation[0] === "function") {
          return null;
        }

        if (direction === "left" && this.operation && typeof this.operation[1] === "function") {
          return null;
        }

        if (this.$scopedSlots.operation) {
          return null;
        }

        return direction === "left" ? this.getIconLeft : this.getIconRight;
      },
      _renderButton: function _renderButton(h, direction) {
        if (typeof this.$scopedSlots.operation === "function") {
          return this.$scopedSlots.operation({
            direction: direction
          });
        }

        if (typeof this.operation === "function") {
          var renderContent2 = this.operation;
          return renderContent2(h, {
            direction: direction
          });
        }

        var renderContent;

        if (Array.isArray(this.operation)) {
          var _this$operation = _slicedToArray(this.operation, 2),
              left = _this$operation[0],
              right = _this$operation[1];

          renderContent = direction === "right" ? right : left;
        } else {
          renderContent = "";
        }

        return renderContent;
      }
    },
    render: function render(h) {
      var _this$$props = this.$props,
          leftDisabled = _this$$props.leftDisabled,
          rightDisabled = _this$$props.rightDisabled;
      return h("div", {
        "class": "".concat(prefix, "-transfer__operations")
      }, [h(Button, {
        "attrs": {
          "variant": rightDisabled ? "outline" : "base",
          "disabled": rightDisabled,
          "icon": this.getIcon("right")
        },
        "key": rightDisabled ? "right-outline" : "right-base",
        "on": {
          "click": this.moveToRight
        }
      }, [this._renderButton(h, "right")]), h(Button, {
        "attrs": {
          "variant": leftDisabled ? "outline" : "base",
          "disabled": leftDisabled,
          "icon": this.getIcon("left")
        },
        "key": leftDisabled ? "left-outline" : "left-base",
        "on": {
          "click": this.moveToLeft
        }
      }, [this._renderButton(h, "left")])]);
    }
  });

  var props$k = {
    checkboxProps: {
      type: Object
    },
    checked: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultChecked: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    direction: {
      type: String,
      "default": "both",
      validator: function validator(val) {
        return ["left", "right", "both"].includes(val);
      }
    },
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    empty: {
      type: [String, Array, Function],
      "default": ""
    },
    footer: {
      type: [Array, Function]
    },
    keys: {
      type: Object
    },
    operation: {
      type: [Array, Function]
    },
    pagination: {
      type: [Object, Array]
    },
    search: {
      type: [Boolean, Object, Array],
      "default": false
    },
    showCheckAll: {
      type: [Boolean, Array],
      "default": true
    },
    targetSort: {
      type: String,
      "default": "original",
      validator: function validator(val) {
        return ["original", "push", "unshift"].includes(val);
      }
    },
    title: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    transferItem: {
      type: Function
    },
    value: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function,
    onCheckedChange: Function,
    onPageChange: Function,
    onScroll: Function,
    onSearch: Function
  };

  var SOURCE = "source";
  var TARGET = "target";
  var _Transfer = mixins(getConfigReceiverMixins("transfer")).extend({
    name: TRANSFER_NAME,
    components: {
      TransferList: TransferList,
      TransferOperations: TransferOperations
    },
    model: {
      prop: "value",
      event: "change"
    },
    props: props$k,
    data: function data() {
      return {
        SOURCE: SOURCE,
        TARGET: TARGET,
        formDisabled: void 0
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      isTreeMode: function isTreeMode() {
        var treeSlot = this.$scopedSlots.tree;
        return typeof treeSlot === "function";
      },
      leftButtonDisabled: function leftButtonDisabled() {
        return this.direction === "right";
      },
      rightButtonDisabled: function rightButtonDisabled() {
        return this.direction === "left";
      },
      transferData: function transferData() {
        return getTransferData(this.data, this.keys, this.isTreeMode);
      },
      sourceList: function sourceList() {
        return filterTransferData(this.transferData, this.value, false, this.isTreeMode);
      },
      targetList: function targetList() {
        return filterTransferData(this.transferData, this.value, true, this.isTreeMode);
      },
      checkedValue: function checkedValue() {
        var _ref;

        return _ref = {}, _defineProperty$2(_ref, SOURCE, getDataValues(this.sourceList, this.checked, {
          isTreeMode: this.isTreeMode
        })), _defineProperty$2(_ref, TARGET, getDataValues(this.targetList, this.checked, {
          isTreeMode: this.isTreeMode
        })), _ref;
      },
      hasFooter: function hasFooter() {
        return !!this.$scopedSlots.footer || !!this.footer;
      },
      showPagination: function showPagination() {
        return !!this.pagination && !this.$scopedSlots.content;
      },
      showSearch: function showSearch() {
        return !!this.search;
      },
      footerOption: function footerOption() {
        var footer = this.footer || "";
        return getTransferListOption(footer);
      },
      emptyOption: function emptyOption() {
        return getTransferListOption(this.empty);
      },
      searchOption: function searchOption() {
        return getTransferListOption(this.search);
      },
      checkAllOption: function checkAllOption() {
        return getTransferListOption(this.showCheckAll);
      },
      disabledOption: function disabledOption() {
        return getTransferListOption(this.tDisabled);
      },
      titleOption: function titleOption() {
        return getTransferListOption(this.title);
      },
      paginationOption: function paginationOption() {
        return getTransferListOption(this.pagination);
      }
    },
    methods: {
      transferTo: function transferTo(toDirection) {
        var oldTargetValue = JSON.parse(JSON.stringify(this.value));
        var newTargetValue;
        var checkedValue = toDirection === TARGET ? this.checkedValue[SOURCE] : this.checkedValue[TARGET];

        if (toDirection === SOURCE) {
          newTargetValue = oldTargetValue.filter(function (v) {
            return !checkedValue.includes(v);
          });
        } else if (this.targetSort === "original") {
          newTargetValue = getDataValues(this.transferData, oldTargetValue.concat(checkedValue), {
            isTreeMode: this.isTreeMode
          });
        } else if (this.targetSort === "unshift") {
          newTargetValue = checkedValue.concat(oldTargetValue);
        } else {
          newTargetValue = oldTargetValue.concat(checkedValue);
        }

        this.handleCheckedChange([], toDirection === SOURCE ? TARGET : SOURCE);
        var params = {
          type: toDirection,
          movedValue: checkedValue
        };
        emitEvent(this, "change", newTargetValue, params);
      },
      transferToRight: function transferToRight() {
        this.transferTo(TARGET);
      },
      transferToLeft: function transferToLeft() {
        this.transferTo(SOURCE);
      },
      handleCheckedChange: function handleCheckedChange(val, listType) {
        var sourceChecked = listType === SOURCE ? val : this.checkedValue[SOURCE];
        var targetChecked = listType === TARGET ? val : this.checkedValue[TARGET];
        var checked = [].concat(_toConsumableArray(sourceChecked), _toConsumableArray(targetChecked));
        var event = {
          checked: checked,
          sourceChecked: sourceChecked,
          targetChecked: targetChecked,
          type: listType
        };
        this.$emit("update:checked", checked);
        emitEvent(this, "checked-change", event);
      },
      filterMethod: function filterMethod(transferList, targetValueList, needMatch) {
        return transferList.filter(function (item) {
          var isMatch = targetValueList.indexOf(item.value) > -1;
          return needMatch ? isMatch : !isMatch;
        });
      },
      handleScroll: function handleScroll(e, listType) {
        var target = e.target;
        var bottomDistance = target.scrollHeight - target.scrollTop - target.clientHeight;
        var event = {
          e: e,
          bottomDistance: bottomDistance,
          type: listType
        };
        emitEvent(this, "scroll", event);
      },
      handleSearch: function handleSearch(e) {
        emitEvent(this, "search", e);
      },
      handlePageChange: function handlePageChange(pageInfo, listType) {
        emitEvent(this, "page-change", pageInfo, {
          type: listType
        });
      },
      renderTransferList: function renderTransferList(listType) {
        var _this = this;

        var h = this.$createElement;
        var scopedSlots = pick_1(this.$scopedSlots, ["title", "empty", "footer", "operation", "transferItem", "default"]);
        return h("transfer-list", {
          "attrs": {
            "checkboxProps": this.checkboxProps,
            "transferItem": this.transferItem,
            "list-type": listType,
            "title": this.titleOption[listType],
            "data-source": listType === SOURCE ? this.sourceList : this.targetList,
            "checked-value": this.checkedValue[listType],
            "disabled": this.disabledOption[listType],
            "search": this.searchOption[listType],
            "pagination": this.paginationOption[listType],
            "check-all": this.checkAllOption[listType],
            "footer": this.footerOption[listType],
            "empty": this.emptyOption[listType],
            "t": this.t,
            "global": this.global,
            "isTreeMode": this.isTreeMode
          },
          "on": {
            "checkedChange": function checkedChange(val) {
              return _this.handleCheckedChange(val, listType);
            },
            "scroll": function scroll($event) {
              return _this.handleScroll($event, listType);
            },
            "search": this.handleSearch,
            "pageChange": function pageChange(pageInfo) {
              return _this.handlePageChange(pageInfo, listType);
            }
          },
          "scopedSlots": scopedSlots
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": ["".concat(prefix, "-transfer"), this.showSearch ? "".concat(prefix, "-transfer__search") : "", this.hasFooter ? "".concat(prefix, "-transfer__footer") : "", this.showPagination ? "".concat(prefix, "-transfer__pagination") : "", this.isTreeMode ? "".concat(prefix, "-transfer--with-tree") : ""]
      }, [this.renderTransferList(SOURCE), h("transfer-operations", {
        "attrs": {
          "left-disabled": this.disabledOption[TARGET] || this.leftButtonDisabled || this.checkedValue[TARGET].length === 0,
          "right-disabled": this.disabledOption[SOURCE] || this.rightButtonDisabled || this.checkedValue[SOURCE].length === 0,
          "operation": this.operation
        },
        "on": {
          "moveToRight": this.transferToRight,
          "moveToLeft": this.transferToLeft
        },
        "scopedSlots": {
          operation: this.$scopedSlots.operation
        }
      }), this.renderTransferList(TARGET)]);
    }
  });

  var Transfer = withInstall(mapProps([{
    name: "value"
  }, {
    name: "checked",
    event: "update:checked"
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Transfer));

  var name$i = "".concat(prefix, "-time-picker-input-items");
  var InputItems = mixins(getConfigReceiverMixins("timePicker")).extend({
    name: name$i,
    data: function data() {
      return {
        timeArr: [EPickerCols.hour, EPickerCols.minute, EPickerCols.second]
      };
    },
    props: {
      format: {
        type: String
      },
      dayjs: {
        type: [Object, Array, void 0],
        "default": void 0
      },
      placeholder: {
        type: String
      },
      allowInput: {
        type: Boolean
      },
      isRangePicker: {
        type: Boolean,
        "default": false
      },
      disabled: {
        type: Boolean
      },
      steps: {
        type: Array
      }
    },
    computed: {
      displayTimeList: function displayTimeList() {
        return this.isRangePicker ? this.dayjs : [this.dayjs];
      }
    },
    methods: {
      onInput: function onInput(e, type, index) {
        if (!this.allowInput) return;
        var target = e.target,
            data = e.data;
        var value = target.value;
        var _this$$props = this.$props,
            format = _this$$props.format,
            steps = _this$$props.steps;
        var curDayJs = this.displayTimeList[index];
        var number = Number(value);
        var colIdx = this.timeArr.indexOf(type);

        if (number % steps[colIdx]) {
          number = 0;
        }

        if (curDayJs[type] === "00" && number === 0 || value === "") {
          this.$emit("change", {
            value: EMPTY_VALUE,
            type: type,
            index: index
          });
        } else if ("".concat(number).length > 2) {
          number = Number(data);
        }

        var emitChange = true;

        if (!isNaN(number)) {
          switch (type) {
            case "hour":
              if (number > (/[h]{1}/.test(format) ? 12 : 24) || number < 0) {
                emitChange = false;
              }

              break;

            case "minute":
              if (number > 59 || number < 0) {
                emitChange = false;
              }

              break;

            case "second":
              if (number > 59 || number < 0) {
                emitChange = false;
              }

              break;
          }

          if (emitChange) {
            this.$emit("change", {
              value: number,
              type: type,
              index: index
            });
          }
        }

        if (curDayJs[type] !== void 0) this.setInputValue(curDayJs[type], target);
      },
      onBlur: function onBlur(e, trigger, index, input) {
        this.allowInput && this.$emit("blurDefault", e, trigger, index, input);
      },
      onFocus: function onFocus(e, trigger, index, input) {
        this.allowInput && this.$emit("focusDefault", e, trigger, index, input);
      },
      onKeydown: function onKeydown(e, type, index) {
        if (!this.allowInput) return;
        var which = e.which;
        var _this$$props2 = this.$props,
            format = _this$$props2.format,
            steps = _this$$props2.steps;
        var curDayJs = this.displayTimeList[index];
        var colIdx = this.timeArr.indexOf(type);

        if ([KeyboardDirection.up, KeyboardDirection.down].includes(which)) {
          if (type === EPickerCols.meridiem) return;
          var current = curDayJs[type] ? Number(curDayJs[type]) : 0;
          var operateStep = Number(steps[colIdx]);
          var operate = which === KeyboardDirection.up ? 0 - operateStep : operateStep;
          var result = current + operate;

          if (type === "hour") {
            if (result > (/[h]{1}/.test(format) ? 11 : 23)) {
              result = 0;
            } else if (result < 0) {
              result = /[h]{1}/.test(format) ? 11 : 23;
            }
          } else if (result > 59 || result < 0) {
            result = 0;
          }

          this.$emit("change", {
            value: result,
            type: type,
            index: index
          });
        } else if ([KeyboardDirection.left, KeyboardDirection.right].includes(which)) {
          var target = e.target;
          var parentNode = target.parentNode;
          var focus = which === KeyboardDirection.left ? parentNode.previousSibling : parentNode.nextSibling;

          if (focus) {
            var input = focus.querySelector("input");
            if (!input.focus) return;
            input.focus();
          }
        }
      },
      onToggleMeridiem: function onToggleMeridiem(index) {
        this.$emit("toggleMeridiem", index);
      },
      setInputValue: function setInputValue(v, input) {
        var sV = String(v);

        if (!input) {
          return;
        }

        if (input.value !== sV) {
          Object.assign(input, {
            value: sV
          });
        }
      },
      switchRenderComponent: function switchRenderComponent() {
        var _this = this;

        var h = this.$createElement;
        var _this$$props3 = this.$props,
            format = _this$$props3.format,
            placeholder = _this$$props3.placeholder,
            allowInput = _this$$props3.allowInput,
            disabled = _this$$props3.disabled;

        function isEmptyDayjs(val) {
          return val === void 0 || val.hour === void 0 && val.minute === void 0 && val.second === void 0;
        }

        var isEmptyVal = this.displayTimeList.every(function (date) {
          return isEmptyDayjs(date);
        });

        if (isEmptyVal) {
          return h("span", {
            "class": "".concat(componentName, "__input-placeholder")
          }, [placeholder]);
        }

        var itemClasses = disabled ? ["".concat(componentName, "__input-item"), "".concat(componentName, "__input-item-disabled")] : ["".concat(componentName, "__input-item")];
        var inputClass = "".concat(componentName, "__input-item-input");
        var render = [];
        this.displayTimeList.forEach(function (inputTime, index) {
          if (index > 0) render.push("-");
          var hour = inputTime.hour,
              minute = inputTime.minute,
              second = inputTime.second;
          render.push(h("span", {
            "class": itemClasses
          }, [h("input", {
            "class": inputClass,
            "domProps": {
              "value": hour
            },
            "attrs": {
              "disabled": !allowInput
            },
            "on": {
              "keydown": function keydown(e) {
                return _this.onKeydown(e, "hour", index);
              },
              "input": function input(e) {
                return _this.onInput(e, "hour", index);
              },
              "blur": function blur(e) {
                return _this.onBlur(e, "hour", index, Number(hour));
              },
              "focus": function focus(e) {
                return _this.onFocus(e, "hour", index, Number(hour));
              }
            }
          })]));

          if (/[hH]{1,2}:m{1,2}/.test(format)) {
            render.push(h("span", {
              "class": itemClasses
            }, [":", h("input", {
              "class": inputClass,
              "domProps": {
                "value": minute
              },
              "attrs": {
                "disabled": !allowInput
              },
              "on": {
                "keydown": function keydown(e) {
                  return _this.onKeydown(e, "minute", index);
                },
                "input": function input(e) {
                  return _this.onInput(e, "minute", index);
                },
                "blur": function blur(e) {
                  return _this.onBlur(e, "minute", index, Number(minute));
                },
                "focus": function focus(e) {
                  return _this.onFocus(e, "minute", index, Number(minute));
                }
              }
            })]));

            if (/[hH]{1,2}:m{1,2}:s{1,2}/.test(format)) {
              render.push(h("span", {
                "class": itemClasses
              }, [":", h("input", {
                "class": inputClass,
                "domProps": {
                  "value": second
                },
                "attrs": {
                  "disabled": !allowInput
                },
                "on": {
                  "keydown": function keydown(e) {
                    return _this.onKeydown(e, "second", index);
                  },
                  "input": function input(e) {
                    return _this.onInput(e, "second", index);
                  },
                  "blur": function blur(e) {
                    return _this.onBlur(e, "second", index, Number(second));
                  },
                  "focus": function focus(e) {
                    return _this.onFocus(e, "second", index, Number(second));
                  }
                }
              })]));
            }
          }

          if (/[h]{1}/.test(format) && (format.includes("A") || format.includes("a"))) {
            var localeMeridiemList = [_this.global.anteMeridiem, _this.global.postMeridiem];
            var text = localeMeridiemList[MERIDIEM_LIST.indexOf(inputTime.meridiem.toUpperCase())];
            render[AM_FORMAT.test(format) ? "unshift" : "push"](h("span", {
              "class": itemClasses,
              "on": {
                "click": function click() {
                  return allowInput && _this.onToggleMeridiem(index);
                }
              }
            }, [h("input", {
              "attrs": {
                "readonly": true,
                "disabled": !allowInput
              },
              "class": [inputClass, "".concat(inputClass, "-meridiem")],
              "domProps": {
                "value": text
              },
              "on": {
                "keydown": function keydown(e) {
                  return _this.onKeydown(e, "meridiem", index);
                }
              }
            })]));
          }
        });
        return render;
      }
    },
    render: function render() {
      var h = arguments[0];
      var classes = ["".concat(componentName, "__input")];
      return h("div", {
        "class": classes
      }, [this.switchRenderComponent()]);
    }
  });

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$h = "".concat(prefix, "-time-picker");
  dayjs_min.extend(customParseFormat);
  var _TimePicker = mixins(getConfigReceiverMixins("timePicker")).extend({
    name: "TTimePicker",
    components: {
      PickerPanel: PickerPanel,
      TimeIcon: Time,
      TPopup: Popup,
      TInput: Input,
      InputItems: InputItems
    },
    model: {
      prop: "value",
      event: "change"
    },
    props: _objectSpread$E({}, props$u),
    data: function data() {
      var _this$$props = this.$props,
          defaultValue = _this$$props.defaultValue,
          value = _this$$props.value;
      var time = value || defaultValue;
      return {
        formDisabled: void 0,
        els: [],
        focus: false,
        isShowPanel: false,
        time: time ? dayjs_min(time, this.format) : void 0,
        inputTime: time ? this.setInputValue(dayjs_min(time, this.format)) : void 0,
        needClear: false
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      panelValue: function panelValue() {
        var time = this.$data.time;

        if (time) {
          return [dayjs_min(time, this.format)];
        }

        if (this.steps.filter(function (step) {
          return step !== 1;
        }).length < 1) {
          return [dayjs_min()];
        }

        return [dayjs_min().hour(0).minute(0).second(0)];
      },
      textClassName: function textClassName() {
        var isDefault = this.inputTime.some(function (item) {
          return !!item.hour && !!item.minute && !!item.second;
        });
        return isDefault ? "" : "".concat(name$h, "__group-text");
      }
    },
    watch: {
      time: {
        handler: function handler() {
          this.output();
        }
      },
      value: {
        handler: function handler() {
          this.time = this.value ? dayjs_min(this.value, this.format) : void 0;
          this.inputTime = this.value ? this.setInputValue(dayjs_min(this.value, this.format)) : void 0;
        }
      }
    },
    methods: {
      inputChange: function inputChange(event) {
        var type = event.type,
            value = event.value;
        var time = this.$data.time;
        var newTime = time;

        if (value === EMPTY_VALUE) {
          this.inputTime[type] = void 0;
          newTime[type](0);
          return;
        }

        if (!newTime) {
          newTime = dayjs_min();
          newTime.hour(0);
          newTime.minute(0);
          newTime.second(0);
        }

        newTime = newTime.set(type, value);
        this.time = dayjs_min(newTime);
        this.inputTime = this.setInputValue(this.time);
        this.$emit("input", {
          input: value,
          value: this.time.format(this.format),
          e: event
        });
        var panelRef = this.$refs.panel;
        panelRef.panelColUpdate();
      },
      onBlurDefault: function onBlurDefault(e, trigger, index, input) {
        this.$emit("blur", {
          trigger: trigger,
          input: input,
          value: this.time.format(this.format),
          e: e
        });
      },
      onFocusDefault: function onFocusDefault(e, trigger, index, input) {
        this.$emit("focus", {
          trigger: trigger,
          input: input,
          value: this.time.format(this.format),
          e: e
        });
      },
      panelVisibleChange: function panelVisibleChange(val, context) {
        if (this.tDisabled) return;

        if (context.trigger) {
          var isClickDoc = context.trigger === "document";
          this.isShowPanel = !isClickDoc;
          this.$emit(isClickDoc ? "close" : "open", context);
        } else {
          this.isShowPanel = val;
          this.$emit(val ? "open" : "close", context);
        }
      },
      toggleInputMeridiem: function toggleInputMeridiem() {
        var time = this.$data.time;
        var current = time.format("A");
        var currentHour = time.hour() + (current === AM ? 12 : -12);
        this.inputChange({
          type: "hour",
          value: currentHour
        });
      },
      pickTime: function pickTime(col, change, index, value) {
        var time = this.time,
            format = this.format;
        var setTime = time;

        if (EPickerCols.hour === col) {
          setTime = value.set(col, value.hour() >= 12 && (AM_FORMAT.test(format) || PM_Format.test(format)) ? Number(change) + 12 : change);
        } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
          setTime = value.set(col, change);
        } else {
          var currentHour = value.hour();

          if (change === this.global.anteMeridiem && currentHour > 12) {
            currentHour -= 12;
          } else if (change === this.global.postMeridiem && currentHour < 12) {
            currentHour += 12;
          }

          setTime = value.hour(currentHour);
        }

        this.time = setTime;
        this.inputTime = this.setInputValue(setTime);
        var formatValue = dayjs_min(setTime).format(this.format);
        this.$emit("change", formatValue);
      },
      makeSure: function makeSure(e) {
        this.panelVisibleChange(false, {
          e: e
        });
        this.output();
      },
      nowAction: function nowAction() {
        var currentTime = dayjs_min();

        if (isFunction_1(this.disableTime) && this.disableTime(currentTime.get("hour"), currentTime.get("minute"), currentTime.get("second"))) {
          return;
        }

        this.time = currentTime;
        this.inputTime = this.setInputValue(this.time);
        this.$emit("change", currentTime.format(this.format));
      },
      output: function output() {
        if (this.needClear) {
          this.inputTime = this.setInputValue(void 0);
          this.needClear = false;
        } else {
          var _this$time;

          this.time = (_this$time = this.time) !== null && _this$time !== void 0 ? _this$time : dayjs_min();
          this.inputTime = this.setInputValue(this.time);
        }
      },
      setInputValue: function setInputValue(val) {
        var ans = {
          hour: void 0,
          minute: void 0,
          second: void 0,
          meridiem: AM
        };
        if (!val) return ans;
        return this.dayjs2InputTime(val);
      },
      dayjs2InputTime: function dayjs2InputTime(val) {
        var format = this.$props.format;

        if (!val) {
          return {
            hour: void 0,
            minute: void 0,
            second: void 0,
            meridiem: AM
          };
        }

        var hour = val.hour();
        var minute = val.minute();
        var second = val.second();

        if (/[h]{1}/.test(format)) {
          hour %= 12;
        }

        if (/[h|H]{2}/.test(format)) {
          hour = hour < 10 ? "0".concat(hour) : hour;
        }

        if (/[m|M]{2}/.test(format)) {
          minute = minute < 10 ? "0".concat(minute) : minute;
        }

        if (/[s|S]{2}/.test(format)) {
          second = second < 10 ? "0".concat(second) : second;
        }

        return {
          hour: hour,
          minute: minute,
          second: second,
          meridiem: val.format("a")
        };
      },
      clear: function clear(context) {
        var e = context.e;
        this.time = void 0;
        this.needClear = true;
        this.inputTime = this.setInputValue(void 0);
        this.$emit("change", void 0);
        e.stopPropagation();
      },
      handleTInputFocus: function handleTInputFocus() {
        this.$refs.tInput.blur();
      },
      renderInput: function renderInput() {
        var _this = this;

        var h = this.$createElement;
        var classes = ["".concat(name$h, "__group"), _defineProperty$2({}, "".concat(prefix, "-is-focused"), this.isShowPanel)];
        return h("div", {
          "class": classes
        }, [h("t-input", {
          "attrs": {
            "disabled": this.tDisabled,
            "size": this.size,
            "clearable": this.clearable,
            "placeholder": " ",
            "value": this.time ? " " : void 0
          },
          "on": {
            "clear": this.clear,
            "focus": this.handleTInputFocus
          },
          "ref": "tInput"
        }, [h("time-icon", {
          "slot": "suffix-icon"
        })]), h("input-items", {
          "attrs": {
            "size": this.size,
            "dayjs": this.inputTime,
            "disabled": this.tDisabled,
            "format": this.format,
            "steps": this.steps,
            "allowInput": this.allowInput,
            "placeholder": this.placeholder || this.global.placeholder
          },
          "on": {
            "toggleMeridiem": function toggleMeridiem() {
              return _this.toggleInputMeridiem();
            },
            "blurDefault": this.onBlurDefault,
            "focusDefault": this.onFocusDefault,
            "change": function change(e) {
              return _this.inputChange(e);
            }
          }
        })]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var _this$$props2 = this.$props,
          size = _this$$props2.size,
          className = _this$$props2.className,
          tDisabled = _this$$props2.tDisabled;
      var classes = [name$h, ClASSNAMES.SIZE[size] || "", className];
      return h("t-popup", helper([{
        "ref": "popup",
        "attrs": {
          "placement": "bottom-left",
          "trigger": "click",
          "disabled": tDisabled,
          "visible": this.isShowPanel,
          "overlayClassName": "".concat(componentName, "__panel-container")
        },
        "class": classes
      }, {
        "on": {
          "visible-change": this.panelVisibleChange
        }
      }, {
        "attrs": {
          "expandAnimation": true
        }
      }]), [this.renderInput(), h("template", {
        "slot": "content"
      }, [h("picker-panel", {
        "ref": "panel",
        "attrs": {
          "format": this.format,
          "value": this.panelValue,
          "disabled": this.tDisabled,
          "isShowPanel": this.isShowPanel,
          "steps": this.steps,
          "hideDisabledTime": this.hideDisabledTime,
          "disableTime": this.disableTime,
          "isFocus": this.focus
        },
        "on": {
          "time-pick": this.pickTime,
          "sure": this.makeSure,
          "now-action": this.nowAction
        }
      })])]);
    }
  });

  var props$j = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    disableTime: {
      type: Function
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array]
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: Array
    },
    defaultValue: {
      type: Array
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function
  };

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$g = "".concat(prefix, "-time-picker");
  dayjs_min.extend(customParseFormat);
  var _TimeRangePicker = mixins(getConfigReceiverMixins("timePicker")).extend({
    name: "TTimeRangePicker",
    components: {
      PickerPanel: PickerPanel,
      TimeIcon: Time,
      InputItems: InputItems,
      TPopup: Popup,
      TInput: Input
    },
    props: _objectSpread$D({}, props$j),
    data: function data() {
      return {
        formDisabled: void 0,
        els: [],
        focus: false,
        isShowPanel: false,
        time: TIME_PICKER_EMPTY,
        inputTime: TIME_PICKER_EMPTY
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      panelValue: function panelValue() {
        var time = this.time || TIME_PICKER_EMPTY;
        return time.map(function (val) {
          return val ? dayjs_min(val) : dayjs_min();
        });
      },
      textClassName: function textClassName() {
        var isDefault = this.inputTime.some(function (item) {
          return !!item.hour && !!item.minute && !!item.second;
        });
        return isDefault ? "" : "".concat(name$g, "__group-text");
      }
    },
    watch: {
      value: {
        handler: function handler(val, oldVal) {
          if (JSON.stringify(val) === JSON.stringify(oldVal)) return;
          var values = Array.isArray(this.value) ? this.value : [];
          var format = this.format;

          function getVal(value) {
            return value ? dayjs_min(value, format) : void 0;
          }

          var dayjsList = [getVal(values[0]), getVal(values[1])];
          this.time = dayjsList;
          this.updateInputTime();
        },
        immediate: true
      }
    },
    methods: {
      inputChange: function inputChange(event) {
        var type = event.type,
            value = event.value,
            index = event.index;
        var newTime = this.time[index];

        if (value === EMPTY_VALUE) {
          this.inputTime[index][type] = void 0;
          newTime[type](0);
          return;
        }

        if (!newTime) {
          newTime = dayjs_min();
          newTime.hour(0);
          newTime.minute(0);
          newTime.second(0);
        }

        newTime = newTime.set(type, value);
        this.time[index] = dayjs_min(newTime);
        this.updateInputTime();
        this.$emit("input", {
          input: value,
          value: this.time[index].format(this.format),
          e: event
        });
        var panelRef = this.$refs.panel;
        panelRef.panelColUpdate();
      },
      getFormatValues: function getFormatValues() {
        var _this = this;

        var values = [];
        this.time.forEach(function (time) {
          if (time) {
            values.push(time.format(_this.format));
          }
        });
        return values;
      },
      onBlurDefault: function onBlurDefault(e) {
        var value = this.getFormatValues();
        this.$emit("blur", {
          value: value,
          e: e
        });
      },
      onFocusDefault: function onFocusDefault(e) {
        var value = this.getFormatValues();
        this.$emit("focus", {
          value: value,
          e: e
        });
      },
      panelVisibleChange: function panelVisibleChange(val, context) {
        if (this.tDisabled) return;

        if (context.trigger) {
          var isClickDoc = context.trigger === "document";
          this.isShowPanel = !isClickDoc;
          this.$emit(isClickDoc ? "close" : "open", context);
        } else {
          this.isShowPanel = val;
          this.$emit(val ? "open" : "close", context);
        }
      },
      toggleInputMeridiem: function toggleInputMeridiem(index) {
        var curTime = this.time[index];
        var current = curTime.format("a");
        var currentHour = curTime.hour() + (current === AM ? 12 : -12);
        this.inputChange({
          type: "hour",
          value: currentHour,
          index: index
        });
      },
      pickTime: function pickTime(col, change, index, value) {
        var time = this.time,
            format = this.format;
        var panelRef = this.$refs.panel;
        var shouldUpdatePanel = false;
        var setTime = time[index];

        if (EPickerCols.hour === col) {
          setTime = value.set(col, value.hour() >= 12 && (AM_FORMAT.test(format) || PM_Format.test(format)) ? Number(change) + 12 : change);
        } else if ([EPickerCols.minute, EPickerCols.second].includes(col)) {
          setTime = value.set(col, change);
        } else {
          var currentHour = value.hour();

          if (change === this.global.anteMeridiem) {
            currentHour -= 12;
          } else if (change === this.global.postMeridiem) {
            currentHour += 12;
          }

          setTime = value.hour(currentHour);
        }

        this.time[index] = setTime;

        if (index === 0 && !this.time[1]) {
          this.time[1] = setTime;
          shouldUpdatePanel = true;
        } else if (index === 1 && !this.time[0]) {
          this.time[0] = dayjs_min().hour(0).minute(0).second(0);
          shouldUpdatePanel = true;
        }

        this.updateInputTime();
        shouldUpdatePanel && panelRef.panelColUpdate();
      },
      makeSure: function makeSure(e) {
        this.panelVisibleChange(false, {
          e: e
        });
      },
      updateInputTime: function updateInputTime() {
        var format = this.$props.format;
        var disPlayValues = [];
        (this.time || []).forEach(function (time) {
          if (!time) {
            disPlayValues.push({
              hour: void 0,
              minute: void 0,
              second: void 0,
              meridiem: AM
            });
          } else {
            var hour = time.hour();
            var minute = time.minute();
            var second = time.second();

            if (/[h]{1}/.test(format)) {
              hour %= 12;
            }

            if (/[h|H]{2}/.test(format)) {
              hour = hour < 10 ? "0".concat(hour) : hour;
            }

            if (/[m|M]{2}/.test(format)) {
              minute = minute < 10 ? "0".concat(minute) : minute;
            }

            if (/[s|S]{2}/.test(format)) {
              second = second < 10 ? "0".concat(second) : second;
            }

            disPlayValues.push({
              hour: hour,
              minute: minute,
              second: second,
              meridiem: time.format("a")
            });
          }
        });
        this.inputTime = disPlayValues;
        this.triggerUpdateValue();
      },
      clear: function clear(context) {
        var e = context.e;
        this.time = TIME_PICKER_EMPTY;
        this.updateInputTime();
        e.stopPropagation();
      },
      triggerUpdateValue: function triggerUpdateValue() {
        var _this2 = this;

        var values = [];
        this.time.forEach(function (time) {
          if (time) {
            values.push(time.format(_this2.format));
          }
        });
        this.$emit("change", values);
        isFunction_1(this.onChange) && this.onChange(values);
      },
      handleTInputFocus: function handleTInputFocus() {
        this.$refs.tInput.blur();
      },
      renderInput: function renderInput() {
        var _this3 = this;

        var h = this.$createElement;
        var classes = ["".concat(name$g, "__group"), _defineProperty$2({}, "".concat(prefix, "-is-focused"), this.isShowPanel)];
        return h("div", {
          "class": classes
        }, [h("t-input", {
          "attrs": {
            "disabled": this.tDisabled,
            "size": this.size,
            "clearable": this.clearable,
            "placeholder": " ",
            "value": !isEqual_1(this.time, TIME_PICKER_EMPTY) ? " " : void 0
          },
          "on": {
            "clear": this.clear
          },
          "ref": "tInput"
        }, [h("time-icon", {
          "slot": "suffix-icon"
        })]), h("input-items", {
          "attrs": {
            "size": this.size,
            "dayjs": this.inputTime,
            "disabled": this.tDisabled,
            "format": this.format,
            "allowInput": this.allowInput,
            "placeholder": this.placeholder || this.global.placeholder,
            "isRangePicker": true,
            "steps": this.steps
          },
          "on": {
            "toggleMeridiem": function toggleMeridiem(index) {
              return _this3.toggleInputMeridiem(index);
            },
            "blurDefault": this.onBlurDefault,
            "focusDefault": this.onFocusDefault,
            "change": function change(e) {
              return _this3.inputChange(e);
            }
          }
        })]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var _this$$props = this.$props,
          size = _this$$props.size,
          className = _this$$props.className,
          tDisabled = _this$$props.tDisabled;
      var classes = [name$g, ClASSNAMES.SIZE[size], className];
      return h("t-popup", helper([{
        "ref": "popup",
        "class": classes,
        "attrs": {
          "placement": "bottom-left",
          "trigger": "click",
          "disabled": tDisabled,
          "visible": this.isShowPanel,
          "overlayClassName": "".concat(componentName, "__panel-container ").concat(componentName, "__range")
        }
      }, {
        "on": {
          "visible-change": this.panelVisibleChange
        }
      }, {
        "attrs": {
          "expandAnimation": true
        }
      }]), [this.renderInput(), h("template", {
        "slot": "content"
      }, [h("picker-panel", {
        "ref": "panel",
        "attrs": {
          "format": this.format,
          "value": this.panelValue,
          "disabled": this.tDisabled,
          "isShowPanel": this.isShowPanel,
          "steps": this.steps,
          "hideDisabledTime": this.hideDisabledTime,
          "disableTime": this.disableTime,
          "isFocus": this.focus
        },
        "on": {
          "time-pick": this.pickTime,
          "sure": this.makeSure
        }
      })])]);
    }
  });

  var TimePicker = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_TimePicker));
  var TimeRangePicker = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_TimeRangePicker));

  /** `Object#toString` result references. */

  var boolTag = '[object Boolean]';
  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */

  function isBoolean(value) {
    return value === true || value === false || isObjectLike_1(value) && _baseGetTag(value) == boolTag;
  }

  var isBoolean_1 = isBoolean;

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getParentsToRoot(element, root) {
    var list = [];
    var el = element;

    while (el && el.parentNode) {
      list.push(el);

      if (el === root) {
        break;
      }

      el = el.parentNode;
    }

    return list;
  }
  function getParentMarks(name, element, root) {
    var list = getParentsToRoot(element, root);
    return list.map(function (el) {
      var mark = {
        name: name,
        value: (el === null || el === void 0 ? void 0 : el.getAttribute(name)) || "",
        el: el
      };
      return mark;
    }).filter(function (mark) {
      return mark.value;
    });
  }
  function getMark(name, element, root) {
    var list = getParentMarks(name, element, root);
    var info = list.pop() || null;
    return info;
  }
  function getTNode(prop, options) {
    var tnode = null;
    var item = null;

    var conf = _objectSpread$C({}, options);

    if (typeof prop === "function") {
      var _conf$node;

      item = prop(conf.createElement, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
    } else if (typeof prop === "string") {
      item = prop;
    }

    if (typeof item === "string") {
      tnode = item;
    } else if (item) {
      tnode = item;
    }

    return tnode;
  }
  function isTreeNodeValue(item) {
    return typeof item === "string" || typeof item === "number";
  }
  function getNode(store, item) {
    var node = null;
    var val = null;

    if (typeof item === "string" || typeof item === "number") {
      val = item;
    } else if (item && isTreeNodeValue(item.value)) {
      val = item.value;
    }

    node = store.getNode(val);
    return node;
  }

  var TREE_NODE_NAME = "".concat(prefix, "-tree-node");
  var FX = {
    treeNode: "".concat(prefix, "-tree-toggle")
  };
  var tree = "".concat(prefix, "-tree");
  var CLASS_NAMES = {
    icon: "".concat(prefix, "-icon"),
    folderIcon: "".concat(prefix, "-folder-icon"),
    actived: "".concat(prefix, "-is-active"),
    disabled: "".concat(prefix, "-is-disabled"),
    treeIconRight: "".concat(prefix, "-icon-arrow-right"),
    treeIconDown: "".concat(prefix, "-icon-arrow-down"),
    tree: tree,
    treeTransition: "".concat(tree, "--transition"),
    treeBlockNode: "".concat(tree, "--block-node"),
    treeEmpty: "".concat(tree, "__empty"),
    treeList: "".concat(tree, "__list"),
    treeNode: "".concat(tree, "__item"),
    treeNodeOpen: "".concat(tree, "__item--open"),
    treeHoverable: "".concat(tree, "--hoverable"),
    treeCheckable: "".concat(tree, "--checkable"),
    treeLabel: "".concat(tree, "__label"),
    treeLabelStrictly: "".concat(tree, "__label--strictly"),
    treeIcon: "".concat(tree, "__icon"),
    treeIconDefault: "".concat(tree, "__icon--default"),
    treeSpace: "".concat(tree, "__space"),
    treeOperations: "".concat(tree, "__operations"),
    treeNodeVisible: "".concat(tree, "__item--visible"),
    treeNodeHidden: "".concat(tree, "__item--hidden"),
    treeNodeEnter: "".concat(tree, "__item--enter-active"),
    treeNodeLeave: "".concat(tree, "__item--leave-active"),
    line: "".concat(tree, "__line"),
    lineIsLeaf: "".concat(tree, "__line--leaf"),
    lineIsFirst: "".concat(tree, "__line--first")
  };

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins = getKeepAnimationMixins();
  var TreeItemProps = {
    node: {
      type: TreeNode
    },
    treeScope: {
      type: Object
    }
  };
  var TreeItem = mixins(getConfigReceiverMixins("tree"), keepAnimationMixins).extend({
    name: TREE_NODE_NAME,
    props: TreeItemProps,
    directives: {
      ripple: Ripple
    },
    data: function data() {
      return {
        data: null,
        clicked: false
      };
    },
    methods: {
      getStyles: function getStyles() {
        var level = this.node.level;
        var styles = "--level: ".concat(level, ";");
        return styles;
      },
      getClassList: function getClassList() {
        var _list$push;

        var node = this.node;
        var list = [];
        list.push(CLASS_NAMES.treeNode);
        list.push((_list$push = {}, _defineProperty$2(_list$push, CLASS_NAMES.treeNodeOpen, node.expanded), _defineProperty$2(_list$push, CLASS_NAMES.actived, node.isActivable() ? node.actived : false), _defineProperty$2(_list$push, CLASS_NAMES.disabled, node.isDisabled()), _list$push));

        if (node.visible) {
          list.push(CLASS_NAMES.treeNodeVisible);
        } else {
          list.push(CLASS_NAMES.treeNodeHidden);
        }

        return list;
      },
      renderLine: function renderLine(createElement) {
        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope;
        var line = treeScope.line,
            scopedSlots = treeScope.scopedSlots;
        var iconVisible = !!treeScope.icon;
        var lineNode = null;

        if (line === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
            lineNode = scopedSlots.line({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (node.parent && node.tree) {
            var vmIsLeaf = node.vmIsLeaf,
                vmIsFirst = node.vmIsFirst,
                level = node.level;
            var lineClasses = [];
            lineClasses.push(CLASS_NAMES.line);

            if (vmIsLeaf || !iconVisible) {
              lineClasses.push(CLASS_NAMES.lineIsLeaf);
            }

            if (vmIsFirst && iconVisible) {
              lineClasses.push(CLASS_NAMES.lineIsFirst);
            }

            var shadowStyles = [];
            var parents = node.getParents();
            parents.pop();
            parents.forEach(function (pnode, index) {
              if (!pnode.vmIsLast) {
                shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
              }
            });
            var styles = {
              "--level": level ? String(level) : void 0,
              "box-shadow": shadowStyles.join(",")
            };
            lineNode = h("span", {
              "class": lineClasses,
              "style": styles
            });
          }
        } else {
          lineNode = getTNode(line, {
            createElement: createElement,
            node: node
          });
        }

        return lineNode;
      },
      getFolderIcon: function getFolderIcon() {
        var h = this.$createElement;

        if (isFunction_1(this.global.folderIcon)) {
          return this.global.folderIcon(this.$createElement);
        }

        return h(CaretRightSmall);
      },
      renderIcon: function renderIcon(createElement) {
        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope;
        var icon = treeScope.icon,
            scopedSlots = treeScope.scopedSlots;
        var isDefaultIcon = false;
        var iconNode = null;

        if (icon === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
            iconNode = scopedSlots.icon({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (!node.vmIsLeaf) {
            isDefaultIcon = true;
            iconNode = this.getFolderIcon();

            if (node.loading && node.expanded) {
              iconNode = h(Loading);
            }
          } else {
            iconNode = "";
          }
        } else {
          iconNode = getTNode(icon, {
            createElement: createElement,
            node: node
          });
        }

        iconNode = h("span", {
          "class": [CLASS_NAMES.treeIcon, CLASS_NAMES.folderIcon, isDefaultIcon ? CLASS_NAMES.treeIconDefault : ""],
          "attrs": {
            "trigger": "expand",
            "ignore": "active"
          }
        }, [iconNode]);
        return iconNode;
      },
      renderLabel: function renderLabel(createElement) {
        var _this = this;

        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope;
        var label = treeScope.label,
            scopedSlots = treeScope.scopedSlots,
            disableCheck = treeScope.disableCheck;
        var checkProps = treeScope.checkProps || {};
        var labelNode = null;

        if (label === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.label) {
            labelNode = scopedSlots.label({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else {
            labelNode = node.label || "";
          }
        } else {
          labelNode = getTNode(label, {
            createElement: createElement,
            node: node
          });
        }

        var labelClasses = [CLASS_NAMES.treeLabel, CLASS_NAMES.treeLabelStrictly, _defineProperty$2({}, CLASS_NAMES.actived, node.isActivable() ? node.actived : false)];

        if (node.vmCheckable) {
          var checkboxDisabled = false;

          if (typeof disableCheck === "function") {
            checkboxDisabled = disableCheck(node);
          } else {
            checkboxDisabled = !!disableCheck;
          }

          if (node.isDisabled()) {
            checkboxDisabled = true;
          }

          var itemCheckProps = _objectSpread$B(_objectSpread$B({}, checkProps), {}, {
            disabled: checkboxDisabled
          });

          labelNode = h(Checkbox, {
            "directives": [{
              name: "ripple",
              value: this.keepAnimation.ripple
            }],
            "class": labelClasses,
            "attrs": {
              "checked": node.checked,
              "indeterminate": node.indeterminate,
              "disabled": node.isDisabled(),
              "name": String(node.value),
              "ignore": "expand,active"
            },
            "on": {
              "change": function change() {
                return _this.handleChange();
              }
            },
            "props": _objectSpread$B({}, itemCheckProps)
          }, [labelNode]);
        } else {
          var inner = h("span", {
            "style": "position: relative"
          }, [labelNode]);
          labelNode = node.isActivable() ? h("span", {
            "key": "1",
            "directives": [{
              name: "ripple",
              value: this.keepAnimation.ripple
            }],
            "class": labelClasses
          }, [inner]) : h("span", {
            "key": "2",
            "class": labelClasses
          }, [inner]);
        }

        return labelNode;
      },
      renderOperations: function renderOperations(createElement) {
        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope;
        var operations = treeScope.operations,
            scopedSlots = treeScope.scopedSlots;
        var opNode = null;

        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
          opNode = scopedSlots.operations({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else {
          opNode = getTNode(operations, {
            createElement: createElement,
            node: node
          });
        }

        if (opNode) {
          opNode = h("span", {
            "class": CLASS_NAMES.treeOperations,
            "attrs": {
              "ignore": "active,expand"
            }
          }, [opNode]);
        }

        return opNode;
      },
      renderItem: function renderItem(createElement) {
        var itemNodes = [];
        var iconNode = this.renderIcon(createElement);
        var lineNode = this.renderLine(createElement);

        if (lineNode) {
          itemNodes.push(lineNode);
        }

        if (iconNode) {
          itemNodes.push(iconNode);
        }

        var labelNode = this.renderLabel(createElement);

        if (labelNode) {
          itemNodes.push(labelNode);
        }

        var opNode = this.renderOperations(createElement);

        if (opNode) {
          itemNodes.push(opNode);
        }

        return itemNodes;
      },
      handleClick: function handleClick(evt) {
        var _this2 = this;

        if (this.clicked) return;
        this.clicked = true;
        setTimeout(function () {
          _this2.clicked = false;
        });
        var node = this.node;
        var state = {
          mouseEvent: evt,
          event: evt,
          node: node,
          path: node.getPath()
        };
        this.$emit("click", state);
      },
      handleChange: function handleChange() {
        var node = this.node;
        var event = new Event("change");
        var state = {
          event: event,
          node: node
        };
        this.$emit("change", state);
      }
    },
    created: function created() {
      if (this.node) {
        this.data = this.node.data;
      }
    },
    destroyed: function destroyed() {
      this.data = null;
    },
    render: function render(createElement) {
      var _this3 = this;

      var h = arguments[0];
      var node = this.node;
      var tree = node.tree,
          level = node.level,
          value = node.value;

      if (!tree || !tree.nodeMap.get(value)) {
        this.$destroy();
      }

      var styles = this.getStyles();
      var classList = this.getClassList();
      return h("div", {
        "class": classList,
        "attrs": {
          "data-value": value,
          "data-level": level
        },
        "style": styles,
        "on": {
          "click": function click(evt) {
            return _this3.handleClick(evt);
          }
        }
      }, [this.renderItem(createElement)]);
    }
  });

  var props$i = {
    activable: Boolean,
    actived: {
      type: Array
    },
    defaultActived: {
      type: Array
    },
    activeMultiple: Boolean,
    checkable: Boolean,
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableCheck: {
      type: [Boolean, Function],
      "default": false
    },
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    expandAll: Boolean,
    expanded: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultExpanded: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    expandLevel: {
      type: Number,
      "default": 0
    },
    expandMutex: Boolean,
    expandOnClickNode: Boolean,
    expandParent: Boolean,
    filter: {
      type: Function
    },
    hover: Boolean,
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    line: {
      type: [Boolean, Function],
      "default": false
    },
    load: {
      type: Function
    },
    operations: {
      type: Function
    },
    transition: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    onActive: Function,
    onChange: Function,
    onClick: Function,
    onExpand: Function,
    onLoad: Function
  };

  var _TdTree = mixins(getConfigReceiverMixins("tree")).extend({
    name: "TTree",
    model: {
      prop: "value",
      event: "change"
    },
    props: props$i,
    data: function data() {
      var checkProps = this.checkProps,
          empty = this.empty,
          icon = this.icon,
          label = this.label,
          line = this.line,
          operations = this.operations;
      return {
        store: null,
        nodesMap: null,
        mouseEvent: null,
        treeNodes: [],
        treeScope: {
          checkProps: checkProps,
          empty: empty,
          icon: icon,
          label: label,
          line: line,
          operations: operations,
          scopedSlots: null
        },
        transitionCD: null
      };
    },
    computed: {
      classList: function classList() {
        var list = [CLASS_NAMES.tree];
        var disabled = this.disabled,
            hover = this.hover,
            transition = this.transition,
            checkable = this.checkable,
            expandOnClickNode = this.expandOnClickNode;

        if (disabled) {
          list.push(CLASS_NAMES.disabled);
        }

        if (hover) {
          list.push(CLASS_NAMES.treeHoverable);
        }

        if (checkable) {
          list.push(CLASS_NAMES.treeCheckable);
        }

        if (transition) {
          list.push(CLASS_NAMES.treeTransition);
        }

        if (expandOnClickNode) {
          list.push(CLASS_NAMES.treeBlockNode);
        }

        return list;
      }
    },
    watch: {
      data: function data(list) {
        this.rebuild(list);
      },
      value: function value(nVal) {
        this.store.replaceChecked(nVal);
      },
      expanded: function expanded(nVal) {
        this.store.replaceExpanded(nVal);
      },
      actived: function actived(nVal) {
        this.store.replaceActived(nVal);
      }
    },
    methods: {
      renderItem: function renderItem(node) {
        var h = this.$createElement;
        var treeScope = this.treeScope;
        var treeItem = h(TreeItem, {
          "key": node.value,
          "attrs": {
            "node": node,
            "treeScope": treeScope
          },
          "on": {
            "click": this.handleClick,
            "change": this.handleChange
          }
        });
        return treeItem;
      },
      getNodesMap: function getNodesMap() {
        var nodesMap = this.nodesMap;

        if (!nodesMap) {
          nodesMap = /* @__PURE__ */new Map();
          this.nodesMap = nodesMap;
        }

        return nodesMap;
      },
      refresh: function refresh() {
        var _this = this;

        var store = this.store;
        var nodesMap = this.getNodesMap();
        var allNodes = store.getNodes();
        var curNodesMap = /* @__PURE__ */new Map();
        this.treeNodes = allNodes.map(function (node) {
          curNodesMap.set(node.value, 1);
          var nodeView = nodesMap.get(node.value);

          if (!nodeView && node.visible) {
            nodeView = _this.renderItem(node);
            nodesMap.set(node.value, nodeView);
          }

          return nodeView;
        });
        this.$nextTick(function () {
          var keys = _toConsumableArray(nodesMap.keys());

          keys.forEach(function (value) {
            if (!curNodesMap.get(value)) {
              nodesMap["delete"](value);
            }
          });
          curNodesMap.clear();
        });
      },
      updateStoreConfig: function updateStoreConfig() {
        var store = this.store;
        if (!store) return;
        var storeProps = pick_1(this, ["keys", "expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "checkable", "checkStrictly", "load", "lazy", "valueMode", "filter"]);
        store.setConfig(storeProps);
      },
      updateExpanded: function updateExpanded() {
        var store = this.store,
            expanded = this.expanded,
            expandParent = this.expandParent;

        if (Array.isArray(expanded)) {
          var expandedMap = /* @__PURE__ */new Map();
          expanded.forEach(function (val) {
            expandedMap.set(val, true);

            if (expandParent) {
              var node = store.getNode(val);
              node.getParents().forEach(function (tn) {
                expandedMap.set(tn.value, true);
              });
            }
          });
          var expandedArr = Array.from(expandedMap.keys());
          store.setExpanded(expandedArr);
        }
      },
      build: function build() {
        var _this2 = this;

        var list = this.data;
        var actived = this.actived,
            value = this.value,
            valueMode = this.valueMode,
            filter = this.filter;
        var store = new TreeStore({
          valueMode: valueMode,
          filter: filter,
          onLoad: function onLoad(info) {
            _this2.handleLoad(info);
          },
          onUpdate: function onUpdate() {
            _this2.refresh();
          }
        });
        this.store = store;
        this.updateStoreConfig();

        if (!Array.isArray(list)) {
          list = [];
        }

        store.append(list);
        store.refreshNodes();

        if (Array.isArray(value)) {
          store.setChecked(value);
        }

        this.updateExpanded();

        if (Array.isArray(actived)) {
          store.setActived(actived);
        }

        this.refresh();
      },
      rebuild: function rebuild(list) {
        this.getNodesMap().clear();
        this.treeNodes.length = 0;
        var store = this.store,
            value = this.value,
            actived = this.actived;
        store.reload(list);

        if (Array.isArray(value)) {
          store.setChecked(value);
        }

        this.updateExpanded();

        if (Array.isArray(actived)) {
          store.setActived(actived);
        }

        store.refreshState();
      },
      toggleActived: function toggleActived(item) {
        var node = getNode(this.store, item);
        return this.setActived(node, !node.isActived());
      },
      setActived: function setActived(item, isActived) {
        var node = getNode(this.store, item);
        var actived = node.setActived(isActived);
        var mouseEvent = this.mouseEvent;
        var ctx = {
          node: node.getModel(),
          e: mouseEvent
        };
        emitEvent(this, "active", actived, ctx);
        return actived;
      },
      toggleExpanded: function toggleExpanded(item) {
        var node = getNode(this.store, item);
        return this.setExpanded(node, !node.isExpanded());
      },
      setExpanded: function setExpanded(item, isExpanded) {
        var node = getNode(this.store, item);
        var expanded = node.setExpanded(isExpanded);
        var mouseEvent = this.mouseEvent;
        var ctx = {
          node: node.getModel(),
          e: mouseEvent
        };
        emitEvent(this, "expand", expanded, ctx);
        return expanded;
      },
      toggleChecked: function toggleChecked(item) {
        var node = getNode(this.store, item);
        return this.setChecked(node, !node.isChecked());
      },
      setChecked: function setChecked(item, isChecked) {
        var node = getNode(this.store, item);
        var checked = node.setChecked(isChecked);
        var ctx = {
          node: node.getModel()
        };
        emitEvent(this, "change", checked, ctx);
        return checked;
      },
      handleLoad: function handleLoad(info) {
        var node = info.node;
        var ctx = {
          node: node.getModel()
        };
        var value = this.value,
            expanded = this.expanded,
            actived = this.actived,
            store = this.store;

        if (value && value.length > 0) {
          store.replaceChecked(value);
        }

        if (expanded && expanded.length > 0) {
          store.replaceExpanded(expanded);
        }

        if (actived && actived.length > 0) {
          store.replaceActived(actived);
        }

        emitEvent(this, "load", ctx);
      },
      handleClick: function handleClick(state) {
        var expandOnClickNode = this.expandOnClickNode;
        var mouseEvent = state.mouseEvent,
            event = state.event,
            node = state.node;

        if (!node || this.disabled || node.disabled) {
          return;
        }

        this.mouseEvent = mouseEvent;
        var shouldExpand = expandOnClickNode;
        var shouldActive = true;
        ["trigger", "ignore"].forEach(function (markName) {
          var mark = getMark(markName, event.target, event.currentTarget);
          var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";

          if (markValue.indexOf("expand") >= 0) {
            if (markName === "trigger") {
              shouldExpand = true;
            } else if (markName === "ignore") {
              shouldExpand = false;
            }
          }

          if (markValue.indexOf("active") >= 0) {
            if (markName === "ignore") {
              shouldActive = false;
            }
          }
        });

        if (shouldExpand) {
          this.toggleExpanded(node);
        }

        if (shouldActive) {
          this.toggleActived(node);
        }

        var ctx = {
          node: node.getModel(),
          e: mouseEvent
        };
        emitEvent(this, "click", ctx);
        this.mouseEvent = null;
      },
      handleChange: function handleChange(state) {
        var disabled = this.disabled;
        var node = state.node;

        if (!node || disabled || node.disabled) {
          return;
        }

        this.toggleChecked(node);
      },
      setItem: function setItem(value, options) {
        var _this3 = this;

        var node = this.store.getNode(value);
        var spec = options;
        var keys = Object.keys(spec);

        if (node && spec) {
          ["expanded", "actived", "checked"].forEach(function (name) {
            if (keys.includes(name)) {
              _this3["set".concat(upperFirst_1(name))](node, spec[name]);

              delete spec[name];
            }
          });
          node.set(spec);
        }
      },
      getItem: function getItem(value) {
        var node = this.store.getNode(value);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getItems: function getItems(value) {
        var nodes = this.store.getNodes(value);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      appendTo: function appendTo(para, item) {
        var _this4 = this;

        var list = [];

        if (Array.isArray(item)) {
          list = item;
        } else {
          list = [item];
        }

        list.forEach(function (item2) {
          var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
          var node = getNode(_this4.store, val);

          if (node) {
            _this4.store.appendNodes(para, node);
          } else {
            _this4.store.appendNodes(para, item2);
          }
        });
      },
      insertBefore: function insertBefore(value, item) {
        var val = (item === null || item === void 0 ? void 0 : item.value) || "";
        var node = getNode(this.store, val);

        if (node) {
          this.store.insertBefore(value, node);
        } else {
          this.store.insertBefore(value, item);
        }
      },
      insertAfter: function insertAfter(value, item) {
        var val = (item === null || item === void 0 ? void 0 : item.value) || "";
        var node = getNode(this.store, val);

        if (node) {
          this.store.insertAfter(value, node);
        } else {
          this.store.insertAfter(value, item);
        }
      },
      remove: function remove(value) {
        return this.store.remove(value);
      },
      getIndex: function getIndex(value) {
        return this.store.getNodeIndex(value);
      },
      getParent: function getParent(value) {
        var node = this.store.getParent(value);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getParents: function getParents(value) {
        var nodes = this.store.getParents(value);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getPath: function getPath(value) {
        var node = this.store.getNode(value);
        var pathNodes = [];

        if (node) {
          pathNodes = node.getPath().map(function (node2) {
            return node2.getModel();
          });
        }

        return pathNodes;
      }
    },
    created: function created() {
      this.build();
    },
    render: function render() {
      var h = arguments[0];
      var classList = this.classList,
          treeNodes = this.treeNodes,
          treeScope = this.treeScope,
          scopedSlots = this.$scopedSlots;
      var scopeProps = pick_1(this, ["checkProps", "disableCheck", "icon", "label", "line", "operations"]);
      this.updateStoreConfig();
      Object.assign(treeScope, scopeProps);
      treeScope.scopedSlots = scopedSlots;
      var emptyNode = null;
      var treeNodeList = null;

      if (treeNodes.length <= 0) {
        var useLocale = !this.empty && !this.$scopedSlots.empty;
        emptyNode = h("div", {
          "class": CLASS_NAMES.treeEmpty
        }, [useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty")]);
      }

      treeNodeList = h("transition-group", {
        "attrs": {
          "name": FX.treeNode,
          "tag": "div",
          "enter-active-class": CLASS_NAMES.treeNodeEnter,
          "leave-active-class": CLASS_NAMES.treeNodeLeave
        },
        "class": CLASS_NAMES.treeList
      }, [treeNodes]);
      return h("div", {
        "class": classList
      }, [emptyNode || treeNodeList]);
    }
  });

  var Tree = withInstall(mapProps([{
    name: "value",
    event: ["change", "update:value"]
  }, {
    name: "expanded",
    event: ["expand", "update:expanded"]
  }, {
    name: "actived",
    event: ["active", "update:actived"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_TdTree));

  var props$h = {
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    showCheckAlll: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    treeProps: {
      type: Object
    },
    value: {
      type: [String, Number, Object, Array]
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: Function
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onFocus: Function,
    onRemove: Function,
    onSearch: Function
  };

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TreeSelect = mixins(getConfigReceiverMixins("treeSelect")).extend({
    name: "TTreeSelect",
    model: {
      prop: "value",
      event: "change"
    },
    props: props$h,
    data: function data() {
      return {
        formDisabled: void 0,
        visible: false,
        isHover: false,
        focusing: false,
        defaultProps: {
          trigger: "click",
          placement: "bottom-left",
          overlayClassName: "",
          overlayStyle: function overlayStyle(trigger) {
            return {
              width: "".concat(trigger.offsetWidth, "px")
            };
          }
        },
        filterText: "",
        filterByText: null,
        actived: [],
        expanded: [],
        nodeInfo: null,
        treeKey: 0
      };
    },
    watch: {
      value: function value() {
        var _this = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this.changeNodeInfo();

                case 2:
                  if (!_this.multiple) {
                    _this.actived = _this.nodeInfo ? [_this.nodeInfo.value] : [];
                  }

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      data: function data() {
        var _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this2.changeNodeInfo();

                case 2:
                  _this2.treeRerender();

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      }
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      classes: function classes() {
        var _ref;

        return ["".concat(prefix, "-select"), "".concat(prefix, "-select-polyfill"), (_ref = {}, _defineProperty$2(_ref, ClASSNAMES.STATUS.disabled, this.tDisabled), _defineProperty$2(_ref, ClASSNAMES.STATUS.active, this.visible), _defineProperty$2(_ref, ClASSNAMES.SIZE[this.size], this.size), _defineProperty$2(_ref, "".concat(prefix, "-has-prefix"), this.prefixIconSlot), _defineProperty$2(_ref, "".concat(prefix, "-select-selected"), this.selectedSingle || !isEmpty_1(this.selectedMultiple)), _ref)];
      },
      popupClass: function popupClass() {
        var popupObject = this.popupObject;
        return "".concat(popupObject.overlayClassName, " ").concat(prefix, "-select__dropdown narrow-scrollbar");
      },
      isObjectValue: function isObjectValue() {
        return this.valueType === "object";
      },
      checked: function checked() {
        if (this.multiple) {
          if (this.isObjectValue) {
            return isArray_1(this.value) ? this.value.map(function (item) {
              return item.value;
            }) : [];
          }

          return isArray_1(this.value) ? this.value : [];
        }

        return [];
      },
      showArrow: function showArrow() {
        return !this.clearable || !this.isHover || this.tDisabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && isArray_1(this.value) && isEmpty_1(this.value);
      },
      showLoading: function showLoading() {
        return this.loading && !this.tDisabled;
      },
      showClose: function showClose() {
        return this.clearable && this.isHover && !this.tDisabled && (!this.multiple && (!!this.value || this.value === 0) || this.multiple && !isEmpty_1(this.value));
      },
      showPlaceholder: function showPlaceholder() {
        if (!this.showFilter && (isString_1(this.value) && this.value === "" && !this.selectedSingle || isArray_1(this.value) && isEmpty_1(this.value) || isNil_1(this.value))) {
          return true;
        }

        return false;
      },
      showFilter: function showFilter() {
        if (this.tDisabled) {
          return false;
        }

        if (!this.multiple && this.selectedSingle && (this.filterable || isFunction_1(this.filter))) {
          return this.visible;
        }

        return this.filterable || isFunction_1(this.filter);
      },
      showTree: function showTree() {
        return !this.loading;
      },
      popupObject: function popupObject() {
        var propsObject = this.popupProps ? _objectSpread$A(_objectSpread$A({}, this.defaultProps), this.popupProps) : this.defaultProps;
        return propsObject;
      },
      selectedSingle: function selectedSingle() {
        if (!this.multiple && (isString_1(this.value) || isNumber_1(this.value) || isObject_1(this.value))) {
          if (this.nodeInfo) {
            return this.nodeInfo.label;
          }

          return "".concat(this.value);
        }

        return "";
      },
      selectedMultiple: function selectedMultiple() {
        if (this.multiple && isArray_1(this.value) && !isEmpty_1(this.value)) {
          return this.value;
        }

        return [];
      },
      multiLimitDisabled: function multiLimitDisabled() {
        if (this.multiple && this.max && isArray_1(this.value) && this.max <= this.value.length) {
          return true;
        }

        return false;
      },
      filterPlaceholder: function filterPlaceholder() {
        if (this.multiple && isArray_1(this.value) && !isEmpty_1(this.value)) {
          return "";
        }

        var single = this.selectedSingle instanceof Array ? this.selectedSingle[0] : this.selectedSingle;

        if (!this.multiple && single) {
          return single;
        }

        return this.placeholder;
      },
      loadingTextSlot: function loadingTextSlot() {
        var h = this.$createElement;
        var useLocale = !this.loadingText && !this.$scopedSlots.loadingText;
        return useLocale ? h("div", {
          "class": "".concat(prefix, "-select__empty")
        }, [this.t(this.global.loadingText)]) : renderTNodeJSX(this, "loadingText");
      },
      emptySlot: function emptySlot() {
        var h = this.$createElement;
        var useLocale = !this.empty && !this.$scopedSlots.empty;
        return useLocale ? h("div", {
          "class": "".concat(prefix, "-select__empty")
        }, [this.t(this.global.empty)]) : renderTNodeJSX(this, "empty");
      },
      prefixIconSlot: function prefixIconSlot() {
        return renderTNodeJSX(this, "prefixIcon");
      },
      realLabel: function realLabel() {
        var treeProps = this.treeProps;

        if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
          return treeProps.keys.label || "label";
        }

        return "label";
      },
      realValue: function realValue() {
        var treeProps = this.treeProps;

        if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
          return treeProps.keys.value || "value";
        }

        return "value";
      },
      tagList: function tagList() {
        if (this.nodeInfo && isArray_1(this.nodeInfo)) {
          return this.nodeInfo.map(function (node) {
            return node.label;
          });
        }

        return this.selectedMultiple;
      }
    },
    mounted: function mounted() {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!_this3.value && _this3.defaultValue)) {
                  _context3.next = 3;
                  break;
                }

                _context3.next = 3;
                return _this3.change(_this3.defaultValue, null);

              case 3:
                if (_this3.isObjectValue) {
                  _this3.actived = isArray_1(_this3.value) ? _this3.value.map(function (item) {
                    return item.value;
                  }) : [_this3.value.value];
                } else {
                  _this3.actived = isArray_1(_this3.value) ? _this3.value : [_this3.value];
                }

                _this3.changeNodeInfo();

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    methods: {
      popupVisibleChange: function popupVisibleChange(visible) {
        var _this4 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          var searchInput;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this4.visible = visible;

                case 2:
                  if (_this4.showFilter && _this4.visible) {
                    searchInput = _this4.$refs.input;
                    searchInput === null || searchInput === void 0 ? void 0 : searchInput.focus();
                    _this4.focusing = true;
                  }

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }))();
      },
      removeTag: function removeTag(index, data, e) {
        if (this.tDisabled) {
          return;
        }

        this.remove({
          value: this.value[index],
          data: data,
          e: e
        });
        isArray_1(this.value) && this.value.splice(index, 1);
        this.change(this.value, null);
      },
      change: function change(value, node) {
        emitEvent(this, "change", value, {
          node: node
        });
        this.changeNodeInfo();
      },
      clear: function clear(e) {
        var defaultValue = this.multiple ? [] : "";
        this.change(defaultValue, null);
        this.actived = [];
        this.filterText = "";
        emitEvent(this, "clear", {
          e: e
        });
      },
      focus: function focus(ctx) {
        this.focusing = true;
        emitEvent(this, "focus", _objectSpread$A({
          value: this.value
        }, ctx));
      },
      blur: function blur(ctx) {
        this.focusing = false;
        this.filterText = "";
        emitEvent(this, "blur", _objectSpread$A({
          value: this.value
        }, ctx));
      },
      remove: function remove(options) {
        emitEvent(this, "remove", options);
      },
      search: function search(filterWords) {
        emitEvent(this, "search", filterWords);
      },
      treeNodeChange: function treeNodeChange(value, context) {
        var _this5 = this;

        var current = value;

        if (this.isObjectValue) {
          current = value.map(function (nodeValue) {
            return _this5.getTreeNode(_this5.data, nodeValue);
          });
        }

        this.change(current, context.node);
        this.actived = value;
      },
      treeNodeActive: function treeNodeActive(value, context) {
        if (this.multiple) {
          return;
        }

        var current = value;

        if (this.isObjectValue) {
          var nodeValue = isEmpty_1(value) ? "" : value[0];
          current = this.getTreeNode(this.data, nodeValue);
        } else {
          current = isEmpty_1(value) ? "" : value[0];
        }

        this.change(current, context.node);
        this.actived = value;
        this.visible = false;
      },
      treeNodeExpand: function treeNodeExpand(value) {
        this.expanded = value;
      },
      onInputChange: function onInputChange() {
        var _this6 = this;

        this.filterByText = function (node) {
          if (isFunction_1(_this6.filter)) {
            var filter = _this6.filter(_this6.filterText, node);

            if (isBoolean_1(filter)) {
              return filter;
            }
          }

          return node.data[_this6.realLabel].indexOf(_this6.filterText) >= 0;
        };

        this.search(this.filterText);
      },
      getTreeData: function getTreeData() {
        var _this$$refs$tree,
            _this7 = this;

        return (((_this$$refs$tree = this.$refs.tree) === null || _this$$refs$tree === void 0 ? void 0 : _this$$refs$tree.getItems()) || []).map(function (item) {
          return {
            label: item.data[_this7.realLabel],
            value: item.data[_this7.realValue]
          };
        });
      },
      changeNodeInfo: function changeNodeInfo() {
        var _this8 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
          var nodeValue, node;
          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _this8.value;

                case 2:
                  if (!_this8.multiple && _this8.value) {
                    nodeValue = _this8.isObjectValue ? _this8.value.value : _this8.value;
                    node = _this8.getTreeNode(_this8.data, nodeValue);

                    if (!node) {
                      _this8.nodeInfo = {
                        label: nodeValue,
                        value: nodeValue
                      };
                    } else {
                      _this8.nodeInfo = node;
                    }
                  } else if (_this8.multiple && isArray_1(_this8.value)) {
                    _this8.nodeInfo = _this8.value.map(function (value) {
                      var nodeValue = _this8.isObjectValue ? value.value : value;

                      var node = _this8.getTreeNode(_this8.data, nodeValue);

                      if (!node) {
                        return {
                          label: nodeValue,
                          value: nodeValue
                        };
                      }

                      return node;
                    });
                  } else {
                    _this8.nodeInfo = null;
                  }

                case 3:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }))();
      },
      getTreeNode: function getTreeNode(data, targetValue) {
        for (var i = 0, len = data.length; i < len; i++) {
          var _data$i;

          if (data[i][this.realValue] === targetValue) {
            return {
              label: data[i][this.realLabel],
              value: data[i][this.realValue]
            };
          }

          var childrenData = (_data$i = data[i]) === null || _data$i === void 0 ? void 0 : _data$i.children;

          if (childrenData) {
            var data2 = Array.isArray(childrenData) ? childrenData : this.getTreeData();
            var result = this.getTreeNode(data2, targetValue);

            if (!isNil_1(result)) {
              return result;
            }
          }
        }

        return null;
      },
      treeRerender: function treeRerender() {
        this.treeKey += 1;
      }
    },
    render: function render() {
      var _this9 = this,
          _ref2;

      var h = arguments[0];
      var treeProps = this.treeProps,
          popupObject = this.popupObject,
          classes = this.classes,
          popupClass = this.popupClass,
          treeKey = this.treeKey;
      var iconStyle = {
        "font-size": this.size
      };
      var treeItem = h(Tree, {
        "ref": "tree",
        "directives": [{
          name: "show",
          value: this.showTree
        }],
        "key": treeKey,
        "attrs": {
          "value": this.checked,
          "hover": true,
          "data": this.data,
          "activable": !this.multiple,
          "checkable": this.multiple,
          "disabled": this.tDisabled || this.multiLimitDisabled,
          "empty": this.empty,
          "size": this.size,
          "filter": this.filterByText,
          "actived": this.actived,
          "expanded": this.expanded,
          "activeMultiple": this.multiple,
          "expandOnClickNode": true,
          "checkStrictly": false
        },
        "on": {
          "change": this.treeNodeChange,
          "active": this.treeNodeActive,
          "expand": this.treeNodeExpand
        },
        "props": _objectSpread$A({}, treeProps)
      }, [h("template", {
        "slot": "empty"
      }, [this.emptySlot])]);
      var searchInput = h(Input, {
        "ref": "input",
        "directives": [{
          name: "show",
          value: this.showFilter
        }],
        "class": "".concat(prefix, "-select__input"),
        "attrs": {
          "size": this.size,
          "disabled": this.tDisabled,
          "placeholder": this.filterPlaceholder
        },
        "on": {
          "change": this.onInputChange,
          "blur": function blur(value, context) {
            return _this9.blur(context);
          },
          "focus": function focus(value, context) {
            return _this9.focus(context);
          }
        },
        "model": {
          value: _this9.filterText,
          callback: function callback($$v) {
            _this9.filterText = $$v;
          }
        }
      });
      var tagItem = !isEmpty_1(this.tagList) && (this.valueDisplay || this.$scopedSlots.valueDisplay) ? renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.nodeInfo,
          onClose: function onClose(index) {
            return _this9.removeTag(index, null);
          }
        }
      }) : this.tagList.map(function (label, index) {
        return h(Tag, {
          "directives": [{
            name: "show",
            value: _this9.minCollapsedNum <= 0 || index < _this9.minCollapsedNum
          }],
          "key": index,
          "attrs": {
            "size": _this9.size,
            "closable": !_this9.tDisabled,
            "disabled": _this9.tDisabled,
            "maxWidth": 300,
            "title": label
          },
          "on": {
            "close": function close(e) {
              return _this9.removeTag(index, null, e);
            }
          }
        }, [label]);
      });
      var selectedSingle = this.valueDisplay || this.$scopedSlots.valueDisplay ? renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.nodeInfo || (_ref2 = {}, _defineProperty$2(_ref2, this.realLabel, ""), _defineProperty$2(_ref2, this.realValue, ""), _ref2)
        }
      }) : h("span", {
        "attrs": {
          "title": this.selectedSingle
        },
        "class": "".concat(prefix, "-select__single")
      }, [this.selectedSingle]);
      var collapsedItem = (this.collapsedItems || this.$scopedSlots.collapsedItems) && this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum ? renderTNodeJSX(this, "collapsedItems", {
        params: {
          count: this.tagList.length - this.minCollapsedNum,
          value: this.selectedMultiple,
          collapsedSelectedItems: this.selectedMultiple.slice(this.minCollapsedNum)
        }
      }) : h(Tag, {
        "directives": [{
          name: "show",
          value: this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum
        }],
        "attrs": {
          "size": this.size
        }
      }, ["+".concat(this.tagList.length - this.minCollapsedNum)]);
      return h("div", {
        "ref": "treeSelect",
        "class": "".concat(prefix, "-select__wrap")
      }, [h(Popup, helper([{
        "ref": "popup",
        "class": "".concat(prefix, "-select__popup-reference"),
        "attrs": {
          "visible": this.visible,
          "disabled": this.tDisabled,
          "placement": popupObject.placement,
          "trigger": popupObject.trigger,
          "overlayStyle": popupObject.overlayStyle,
          "overlayClassName": popupClass
        }
      }, {
        "on": {
          "visible-change": this.popupVisibleChange
        }
      }, {
        "attrs": {
          "expandAnimation": true
        }
      }]), [h("div", {
        "class": classes,
        "on": {
          "mouseenter": function mouseenter() {
            return _this9.isHover = true;
          },
          "mouseleave": function mouseleave() {
            return _this9.isHover = false;
          }
        }
      }, [this.prefixIconSlot && h("span", {
        "class": "".concat(prefix, "-select__left-icon")
      }, [this.prefixIconSlot[0]]), h("span", {
        "directives": [{
          name: "show",
          value: this.showPlaceholder
        }],
        "class": "".concat(prefix, "-select__placeholder")
      }, [this.placeholder || this.global.placeholder]), tagItem, collapsedItem, !this.multiple && !this.showPlaceholder && !this.showFilter && selectedSingle, searchInput, this.showArrow && !this.showLoading && h(FakeArrow, {
        "attrs": {
          "overlayClassName": "".concat(prefix, "-select__right-icon ").concat(prefix, "-select__right-icon-polyfill"),
          "overlayStyle": iconStyle,
          "isActive": this.visible && !this.tDisabled
        }
      }), h(CloseCircleFilled, {
        "directives": [{
          name: "show",
          value: this.showClose && !this.showLoading
        }],
        "class": ["".concat(prefix, "-select__right-icon"), "".concat(prefix, "-select__right-icon-polyfill"), "".concat(prefix, "-select__right-icon-clear")],
        "attrs": {
          "size": this.size
        },
        "nativeOn": {
          "click": this.clear
        }
      }), h(Loading, {
        "directives": [{
          name: "show",
          value: this.showLoading
        }],
        "class": "".concat(prefix, "-select__right-icon ").concat(prefix, "-select__right-icon-polyfill ").concat(prefix, "-select__active-icon"),
        "attrs": {
          "size": "small"
        }
      })]), h("div", {
        "slot": "content"
      }, [h("p", {
        "directives": [{
          name: "show",
          value: this.showLoading
        }],
        "class": "".concat(prefix, "-select__loading-tips ").concat(prefix, "-select__right-icon-polyfill")
      }, [this.loadingTextSlot]), treeItem])])]);
    }
  });

  var TreeSelect$1 = withInstall(mapProps([{
    name: "value",
    event: ["change", "clear", "remove"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_TreeSelect));

  var props$g = {
    alt: {
      type: String,
      "default": ""
    },
    hideOnLoadFailed: Boolean,
    icon: {
      type: Function
    },
    image: {
      type: String,
      "default": ""
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    size: {
      type: String,
      "default": ""
    },
    onError: Function
  };

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$f = "".concat(prefix, "-avatar");
  var _Avatar = Vue__default["default"].extend({
    name: "TAvatar",
    props: _objectSpread$z({}, props$g),
    data: function data() {
      return {
        isImgExist: true,
        gap: 4,
        sizeValue: "",
        scale: ""
      };
    },
    inject: {
      avatarGroup: {
        "default": void 0
      }
    },
    computed: {
      customAvatarSize: function customAvatarSize() {
        return this.isCustomSize() ? {
          width: this.sizeValue,
          height: this.sizeValue,
          "font-size": "".concat(Number.parseInt(this.sizeValue, 10) / 2, "px")
        } : {};
      },
      customImageSize: function customImageSize() {
        return this.isCustomSize() ? {
          height: this.sizeValue,
          width: this.sizeValue
        } : {};
      },
      customCharaSize: function customCharaSize() {
        return {
          transform: this.scale
        };
      }
    },
    mounted: function mounted() {
      var _this = this;

      var avatarGroup = this.avatarGroup;
      this.sizeValue = this.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
      this.$nextTick(function () {
        _this.setScaleParams();
      });
    },
    methods: {
      handleImgLoadError: function handleImgLoadError() {
        var _this$$props = this.$props,
            onError = _this$$props.onError,
            hideOnLoadFailed = _this$$props.hideOnLoadFailed;
        this.isImgExist = !hideOnLoadFailed;
        onError && onError();
        this.$emit("error");
      },
      setScaleParams: function setScaleParams() {
        var avater = this.$refs.avatar;
        var avaterChild = this.$refs.avatarChild;
        var avaterWidth = avater === null || avater === void 0 ? void 0 : avater.offsetWidth;
        var avaterChildWidth = avaterChild === null || avaterChild === void 0 ? void 0 : avaterChild.offsetWidth;

        if (this.gap * 2 < avaterWidth) {
          this.scale = avaterChildWidth > avaterWidth - this.gap * 2 ? "scale(".concat((avaterWidth - this.gap * 2) / avaterChildWidth, ")") : "scale(1)";
        }
      },
      isCustomSize: function isCustomSize() {
        return this.sizeValue && !ClASSNAMES.SIZE[this.sizeValue];
      }
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.setScaleParams();
      });
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var content = renderContent(this, "default", "content");
      var icon = renderTNodeJSX(this, "icon");
      var isIconOnly = icon && !content;
      var _this$$props2 = this.$props,
          shape = _this$$props2.shape,
          image = _this$$props2.image,
          alt = _this$$props2.alt;
      var avatarClass = ["".concat(name$f), ClASSNAMES.SIZE[this.sizeValue], (_ref = {}, _defineProperty$2(_ref, "".concat(name$f, "--circle"), shape === "circle"), _defineProperty$2(_ref, "".concat(name$f, "--round"), shape === "round"), _defineProperty$2(_ref, "".concat(name$f, "__icon"), !!isIconOnly), _ref)];
      content = h("span", {
        "ref": "avatarChild",
        "style": _objectSpread$z({}, this.customCharaSize)
      }, [content]);

      if (icon) {
        content = [icon, !isIconOnly ? content : ""];
      }

      if (image && this.isImgExist) {
        content = h("img", {
          "style": _objectSpread$z({}, this.customImageSize),
          "attrs": {
            "src": image,
            "alt": alt
          },
          "on": {
            "error": this.handleImgLoadError
          }
        });
      }

      return h("div", {
        "ref": "avatar",
        "class": avatarClass,
        "style": _objectSpread$z({}, this.customAvatarSize)
      }, [content]);
    }
  });

  var props$f = {
    cascading: {
      type: String,
      "default": "right-up",
      validator: function validator(val) {
        return ["left-up", "right-up"].includes(val);
      }
    },
    collapseAvatar: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    placement: {
      type: String,
      validator: function validator(val) {
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium"
    }
  };

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$e = "".concat(prefix, "-avatar-group");
  var _AvatarGroup = Vue__default["default"].extend({
    name: "TAvatarGroup",
    components: {
      Avatar: _Avatar
    },
    props: _objectSpread$y({}, props$f),
    provide: function provide() {
      return {
        avatarGroup: this
      };
    },
    methods: {
      renderEllipsisAvatar: function renderEllipsisAvatar(children) {
        var h = this.$createElement;

        if ((children === null || children === void 0 ? void 0 : children.length) > this.max) {
          var content = this.setEllipsisContent(children);
          var outAvatar = children.slice(0, this.max);
          outAvatar.push(h(_Avatar, {
            "attrs": {
              "size": this.size,
              "icon": this.isIcon() ? this.collapseAvatar : null
            }
          }, [content]));
          return [outAvatar];
        }

        return [children];
      },
      setEllipsisContent: function setEllipsisContent(children) {
        var content = "";

        if (this.collapseAvatar) {
          if (!this.isIcon()) {
            content = renderContent(this, "collapseAvatar", "content");
          }
        } else {
          content = "+".concat(children.length - this.max);
        }

        return content;
      },
      isIcon: function isIcon() {
        var content = renderTNodeJSX(this, "collapseAvatar");
        return (content === null || content === void 0 ? void 0 : content.context) instanceof Vue__default["default"];
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var $scopedSlots = this.$scopedSlots;
      var children = $scopedSlots["default"] && $scopedSlots["default"](null);
      var _this$$props = this.$props,
          cascading = _this$$props.cascading,
          max = _this$$props.max;
      var groupClass = ["".concat(name$e), (_ref = {}, _defineProperty$2(_ref, "".concat(prefix, "-avatar--offset-right"), cascading === "right-up"), _defineProperty$2(_ref, "".concat(prefix, "-avatar--offset-left"), cascading === "left-up"), _ref)];
      var content = [children];

      if (max && max >= 0) {
        content = [this.renderEllipsisAvatar(children)];
      }

      return h("div", {
        "class": groupClass
      }, [content]);
    }
  });

  var Avatar = withInstall(_Avatar);
  var AvatarGroup = withInstall(_AvatarGroup);

  var props$e = {
    color: {
      type: String,
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    count: {
      type: [String, Number, Function],
      "default": 0
    },
    "default": {
      type: [String, Function]
    },
    dot: Boolean,
    maxCount: {
      type: Number,
      "default": 99
    },
    offset: {
      type: Array
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    showZero: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium"].includes(val);
      }
    }
  };

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$d = "".concat(prefix, "-badge");
  var _Badge = Vue__default["default"].extend({
    name: "TBadge",
    props: _objectSpread$x({}, props$e),
    methods: {
      getContent: function getContent() {
        if (this.dot) return "";

        if (typeof this.count === "function") {
          return renderTNodeJSX(this, "count");
        }

        if (isNaN(Number(this.count))) {
          return this.count;
        }

        var count = Number(this.count);
        return count > this.maxCount ? "".concat(this.maxCount, "+") : count;
      },
      isSmall: function isSmall() {
        return this.size === "small";
      },
      isZero: function isZero() {
        var content = this.getContent();
        return content === 0 || content === "0";
      },
      isHidden: function isHidden() {
        return !this.showZero && this.isZero();
      },
      getOffset: function getOffset() {
        if (!this.offset) return {};

        var _this$offset = _slicedToArray(this.offset, 2),
            xOffset = _this$offset[0],
            yOffset = _this$offset[1];

        xOffset = isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
        yOffset = isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
        return {
          xOffset: xOffset,
          yOffset: yOffset
        };
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var _this$$props = this.$props,
          dot = _this$$props.dot,
          shape = _this$$props.shape,
          color = _this$$props.color;
      var content = this.getContent();
      var isHidden = this.isHidden();
      var children = this.$slots["default"];

      var _this$getOffset = this.getOffset(),
          xOffset = _this$getOffset.xOffset,
          yOffset = _this$getOffset.yOffset;

      var badgeClassNames = [(_ref = {}, _defineProperty$2(_ref, "".concat(name$d, "--dot"), !!dot), _defineProperty$2(_ref, "".concat(name$d, "--circle"), !dot && shape === "circle"), _defineProperty$2(_ref, "".concat(name$d, "--round"), shape === "round"), _defineProperty$2(_ref, "".concat(name$d, "--ribbon"), shape === "ribbon"), _defineProperty$2(_ref, "".concat(prefix, "-size-s"), this.isSmall()), _ref)];
      var inlineStyle = {
        background: "".concat(color),
        right: xOffset,
        top: yOffset
      };
      return h("div", {
        "class": name$d
      }, [children || null, isHidden ? null : h("sup", {
        "class": badgeClassNames,
        "style": inlineStyle
      }, [content])]);
    }
  });

  var Badge = withInstall(_Badge);

  var calendar = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t, a) {
        var n = "h:mm A",
            d = {
          lastDay: "[Yesterday at] " + n,
          sameDay: "[Today at] " + n,
          nextDay: "[Tomorrow at] " + n,
          nextWeek: "dddd [at] " + n,
          lastWeek: "[Last] dddd [at] " + n,
          sameElse: "MM/DD/YYYY"
        };

        t.prototype.calendar = function (e, t) {
          var n = t || this.$locale().calendar || d,
              o = a(e || void 0).startOf("d"),
              s = this.diff(o, "d", !0),
              i = "sameElse",
              f = s < -6 ? i : s < -1 ? "lastWeek" : s < 0 ? "lastDay" : s < 1 ? "sameDay" : s < 2 ? "nextDay" : s < 7 ? "nextWeek" : i,
              l = n[f] || d[f];
          return "function" == typeof l ? l.call(this, a()) : this.format(l);
        };
      };
    });
  });

  var props$d = {
    cell: {
      type: [String, Function]
    },
    cellAppend: {
      type: [String, Function]
    },
    controllerConfig: {
      type: [Boolean, Object],
      "default": void 0
    },
    fillWithZero: {
      type: Boolean,
      "default": void 0
    },
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": "YYYY-MM-DD"
    },
    head: {
      type: [String, Function]
    },
    isShowWeekendDefault: {
      type: Boolean,
      "default": true
    },
    mode: {
      type: String,
      "default": "month",
      validator: function validator(val) {
        return ["month", "year"].includes(val);
      }
    },
    preventCellContextmenu: Boolean,
    range: {
      type: Array
    },
    theme: {
      type: String,
      "default": "full",
      validator: function validator(val) {
        return ["full", "card"].includes(val);
      }
    },
    value: {
      type: [String, Date]
    },
    week: {
      type: [Array, Function]
    },
    onCellClick: Function,
    onCellDoubleClick: Function,
    onCellRightClick: Function,
    onControllerChange: Function,
    onMonthChange: Function
  };

  var COMPONENT_NAME = "".concat(prefix, "-calendar");
  var MIN_YEAR = 1970;
  var FIRST_MONTH_OF_YEAR = 1;
  var LAST_MONTH_OF_YEAR = 12;
  var DEFAULT_YEAR_CELL_NUMINROW = 4;
  var DAY_CN_MAP = {
    1: "\u4E00",
    2: "\u4E8C",
    3: "\u4E09",
    4: "\u56DB",
    5: "\u4E94",
    6: "\u516D",
    7: "\u65E5"
  };

  var getDay = function getDay(dt) {
    var day = dayjs_min(dt).day();

    if (day === 0) {
      day = 7;
    }

    return day;
  };

  var getDayCn = function getDayCn(num) {
    var re = "";
    var numStr = num.toString();

    if (numStr in DAY_CN_MAP) {
      re = DAY_CN_MAP[numStr];
    }

    return re;
  };

  var getCellColIndex = function getCellColIndex(firstDayOfWeek, dt) {
    var re = 0;
    var day = getDay(dt);

    if (day >= firstDayOfWeek) {
      re = day - firstDayOfWeek;
    } else {
      re = 7 - firstDayOfWeek + day;
    }

    return re;
  };

  var addDate = function addDate(dt, days) {
    var d = new Date(dt);
    d.setDate(d.getDate() + days);
    return d;
  };

  var createYearCellsData = function createYearCellsData(year, curDate, format) {
    var monthsArr = [];
    var isCurYear = curDate.year() === year;

    for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {
      var date = new Date(year, num - 1);
      var curDateMon = parseInt(curDate.format("M"), 10);
      var isCurrent = isCurYear && curDateMon === num;
      monthsArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs_min(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });
    }

    return monthsArr;
  };

  var createMonthCellsData = function createMonthCellsData(year, month, firstDayOfWeek, curDate, format) {
    var daysArr = [];
    var begin = dayjs_min("".concat(year, "-").concat(month)).startOf("month").toDate();
    var end = dayjs_min("".concat(year, "-").concat(month)).endOf("month").toDate();
    var days = end.getDate();
    var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);
    var arr = [];
    var num = 1;

    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs_min(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };

    for (var i = 0; i < beginDateColIndex; i++) {
      var date = addDate(begin, i - beginDateColIndex);
      arr.push(createCellData(-1, false, date, num));

      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }

    for (var _i = 0; _i < days; _i++) {
      var _date = addDate(begin, _i);

      arr.push(createCellData(0, curDate.isSame(dayjs_min(_date)), _date, num));

      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }

    if (arr.length) {
      var nextMonthCellNum = 7 - arr.length;

      for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {
        var _date2 = addDate(end, _i2 + 1);

        arr.push(createCellData(1, false, _date2, num));
      }

      daysArr.push(arr);
    }

    return daysArr;
  };

  var clickTypeEmitEventMap = {
    click: "click",
    dblclick: "dblclick",
    contextmenu: "rightclick"
  };
  var CalendarCellItem = Vue__default["default"].extend({
    name: "".concat(COMPONENT_NAME, "-cell"),
    props: {
      item: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      theme: {
        type: String,
        "default": function _default() {
          return null;
        }
      },
      fillWithZero: {
        type: Boolean,
        "default": void 0
      },
      t: Function,
      global: Object,
      cell: Function
    },
    computed: {
      allowSlot: function allowSlot() {
        return this.theme === "full";
      },
      disabled: function disabled() {
        return this.item.mode === "month" && this.item.belongTo !== 0;
      },
      valueDisplay: function valueDisplay() {
        if (this.item.mode === "month") {
          var _ref, _this$fillWithZero;

          var dateNum = this.item.date.getDate();
          var fillZero = dateNum < 10 && ((_ref = (_this$fillWithZero = this.fillWithZero) !== null && _this$fillWithZero !== void 0 ? _this$fillWithZero : this.global.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
          return fillZero ? "0".concat(dateNum) : dateNum;
        }

        var map = this.t(this.global.cellMonth).split(",");
        return map[this.item.date.getMonth().toString()];
      },
      cellCls: function cellCls() {
        var _ref2;

        var _this$item = this.item,
            mode = _this$item.mode,
            date = _this$item.date,
            formattedDate = _this$item.formattedDate,
            isCurrent = _this$item.isCurrent;
        var isNow = mode === "year" ? new Date().getMonth() === date.getMonth() : formattedDate === dayjs_min().format("YYYY-MM-DD");
        return ["".concat(prefix, "-calendar__table-body-cell"), (_ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-is-disabled"), this.disabled), _defineProperty$2(_ref2, "".concat(prefix, "-is-checked"), isCurrent), _defineProperty$2(_ref2, "".concat(prefix, "-calendar__table-body-cell--now"), isNow), _ref2)];
      }
    },
    methods: {
      clickCell: function clickCell(e) {
        if (this.disabled) return;
        this.$emit(clickTypeEmitEventMap[e.type], e);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var item = this.item,
          cellCls = this.cellCls,
          clickCell = this.clickCell,
          valueDisplay = this.valueDisplay,
          allowSlot = this.allowSlot;

      var defaultNode = function defaultNode() {
        return h("span", [h("div", {
          "class": "".concat(prefix, "-calendar__table-body-cell-display")
        }, [valueDisplay]), h("div", {
          "class": "".concat(prefix, "-calendar__table-body-cell-content")
        }, [allowSlot && renderTNodeJSX(_this, "cellAppend", {
          params: item
        })])]);
      };

      return item && h("div", {
        "class": cellCls,
        "on": {
          "click": clickCell,
          "dblclick": clickCell,
          "contextmenu": clickCell
        }
      }, [typeof this.cell === "function" ? this.cell(this.$createElement, item) : renderTNodeJSXDefault(this, "cell", {
        defaultNode: defaultNode(),
        params: item
      })]);
    }
  });

  var RenderComponent = Vue__default["default"].extend({
    name: "render-componnet",
    functional: true,
    props: {
      render: Function
    },
    render: function render(h, ctx) {
      return ctx.props.render(h, ctx.data.attrs);
    }
  });

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(calendar);

  var createDefaultCurDate = function createDefaultCurDate() {
    return dayjs_min(dayjs_min().format("YYYY-MM-DD"));
  };

  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selecteProps: {}
      },
      month: {
        visible: true,
        selecteProps: {}
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };

  var _Calendar = mixins(getConfigReceiverMixins("calendar")).extend({
    name: "TCalendar",
    components: {
      TCheckTag: CheckTag,
      TSelect: Select,
      TOption: Option,
      TRadioGroup: RadioGroup,
      TRadioButton: RadioButton,
      TButton: Button,
      CalendarCellItem: CalendarCellItem,
      RenderComponent: RenderComponent
    },
    props: _objectSpread$w({}, props$d),
    data: function data() {
      return {
        curDate: null,
        curSelectedYear: null,
        curSelectedMonth: null,
        curSelectedMode: null,
        isShowWeekend: true,
        controlSize: "medium"
      };
    },
    computed: {
      realFirstDayOfWeek: function realFirstDayOfWeek() {
        var _ref, _this$firstDayOfWeek;

        return (_ref = (_this$firstDayOfWeek = this.firstDayOfWeek) !== null && _this$firstDayOfWeek !== void 0 ? _this$firstDayOfWeek : this.global.firstDayOfWeek) !== null && _ref !== void 0 ? _ref : 1;
      },
      TEXT_MAP: function TEXT_MAP() {
        var t = this.t,
            global = this.global;
        var r = {
          showWeekend: t(global.showWeekend),
          hideWeekend: t(global.hideWeekend),
          today: t(global.today),
          thisMonth: t(global.thisMonth)
        };
        return r;
      },
      weekDipalyText: function weekDipalyText() {
        return this.week || this.t(this.global.week).split(",");
      },
      calendarCls: function calendarCls() {
        return ["".concat(COMPONENT_NAME), "".concat(COMPONENT_NAME, "--").concat(this.theme)];
      },
      calendarPanelCls: function calendarPanelCls() {
        return ["".concat(COMPONENT_NAME, "__panel"), "".concat(COMPONENT_NAME, "__panel--").concat(this.curSelectedMode)];
      },
      isWeekRender: function isWeekRender() {
        return typeof this.week === "function";
      },
      rangeFromTo: function rangeFromTo() {
        if (!this.range || this.range.length < 2) {
          return null;
        }

        var _this$range = _slicedToArray(this.range, 2),
            v1 = _this$range[0],
            v2 = _this$range[1];

        if (dayjs_min(v1).isBefore(dayjs_min(v2))) {
          return {
            from: v1,
            to: v2
          };
        }

        return {
          from: v2,
          to: v1
        };
      },
      controllerOptions: function controllerOptions() {
        var dayJsFilterDate = dayjs_min("".concat(this.curSelectedYear, "-").concat(this.curSelectedMonth));
        var re = {
          isShowWeekend: this.isShowWeekend,
          filterDate: dayJsFilterDate.toDate(),
          formattedFilterDate: dayJsFilterDate.format(this.format),
          mode: this.curSelectedMode
        };
        return re;
      },
      cellColHeaders: function cellColHeaders() {
        var re = [];
        var min = 1;
        var max = 7;

        for (var i = this.realFirstDayOfWeek; i <= max; i++) {
          re.push({
            num: i,
            display: this.getWeekDisplay(i)
          });
        }

        if (this.realFirstDayOfWeek > min) {
          for (var _i = min; _i < this.realFirstDayOfWeek; _i++) {
            re.push({
              num: _i,
              display: this.getWeekDisplay(_i)
            });
          }
        }

        return re;
      },
      yearSelectOptionList: function yearSelectOptionList() {
        var re = [];
        var begin = this.curSelectedYear - 10;
        var end = this.curSelectedYear + 10;

        if (this.rangeFromTo && this.rangeFromTo.from && this.rangeFromTo.to) {
          begin = dayjs_min(this.rangeFromTo.from).year();
          end = dayjs_min(this.rangeFromTo.to).year();
        }

        if (begin < MIN_YEAR) {
          begin = MIN_YEAR;
        }

        if (end < MIN_YEAR) {
          end = MIN_YEAR;
        }

        for (var i = begin; i <= end; i++) {
          var disabled = this.checkMonthAndYearSelecterDisabled(i, this.curSelectedMonth);
          re.push({
            value: i,
            label: this.t(this.global.yearSelection, {
              year: i
            }),
            disabled: disabled
          });
        }

        return re;
      },
      monthSelectOptionList: function monthSelectOptionList() {
        var re = [];

        for (var i = FIRST_MONTH_OF_YEAR; i <= LAST_MONTH_OF_YEAR; i++) {
          var disabled = this.checkMonthAndYearSelecterDisabled(this.curSelectedYear, i);
          re.push({
            value: i,
            label: this.t(this.global.monthSelection, {
              month: i
            }),
            disabled: disabled
          });
        }

        return re;
      },
      modeSelectOptionList: function modeSelectOptionList() {
        return [{
          value: "month",
          label: this.t(this.global.monthRadio)
        }, {
          value: "year",
          label: this.t(this.global.yearRadio)
        }];
      },
      monthCellsData: function monthCellsData() {
        var realFirstDayOfWeek = this.realFirstDayOfWeek;
        var daysArr = createMonthCellsData(this.curSelectedYear, this.curSelectedMonth, realFirstDayOfWeek, this.curDate, this.format);
        return daysArr;
      },
      yearCellsData: function yearCellsData() {
        var re = [];
        var monthsArr = createYearCellsData(this.curSelectedYear, this.curDate, this.format);
        var rowCount = Math.ceil(monthsArr.length / DEFAULT_YEAR_CELL_NUMINROW);
        var index = 0;

        for (var i = 1; i <= rowCount; i++) {
          var row = [];

          for (var j = 1; j <= DEFAULT_YEAR_CELL_NUMINROW; j++) {
            row.push(monthsArr[index]);
            index += 1;
          }

          re.push(row);
        }

        return re;
      },
      controllerConfigData: function controllerConfigData() {
        var _ref2, _this$controllerConfi;

        var controllerConfig = (_ref2 = (_this$controllerConfi = this.controllerConfig) !== null && _this$controllerConfi !== void 0 ? _this$controllerConfi : this.global.controllerConfig) !== null && _ref2 !== void 0 ? _ref2 : true;

        if (typeof controllerConfig === "boolean") {
          return getDefaultControllerConfigData(controllerConfig);
        }

        return _objectSpread$w(_objectSpread$w({}, getDefaultControllerConfigData()), controllerConfig);
      },
      isControllerVisible: function isControllerVisible() {
        return this.controllerConfigData && this.controllerConfigData.visible;
      },
      weekendBtnText: function weekendBtnText() {
        return this.isShowWeekend ? this.TEXT_MAP.hideWeekend : this.TEXT_MAP.showWeekend;
      },
      weekendBtnVBind: function weekendBtnVBind() {
        var c = this.controllerConfigData.weekend;
        return this.isShowWeekend ? c.hideWeekendButtonProps : c.showWeekendButtonProps;
      },
      currentBtnText: function currentBtnText() {
        return this.curSelectedMode === "month" ? this.TEXT_MAP.today : this.TEXT_MAP.thisMonth;
      },
      currentBtnVBind: function currentBtnVBind() {
        var c = this.controllerConfigData.current;
        return this.curSelectedMode === "month" ? c.currentDayButtonProps : c.currentMonthButtonProps;
      },
      isModeVisible: function isModeVisible() {
        return this.checkControllerVisible("mode");
      },
      isYearVisible: function isYearVisible() {
        return this.checkControllerVisible("year");
      },
      isMonthVisible: function isMonthVisible() {
        return this.checkControllerVisible("month");
      },
      isWeekendToggleVisible: function isWeekendToggleVisible() {
        return this.checkControllerVisible("weekend");
      },
      isCurrentBtnVisible: function isCurrentBtnVisible() {
        return this.checkControllerVisible("current");
      },
      isModeDisabled: function isModeDisabled() {
        return this.checkControllerDisabled("mode", "radioGroupProps");
      },
      isYearDisabled: function isYearDisabled() {
        return this.checkControllerDisabled("year", "selecteProps");
      },
      isMonthDisabled: function isMonthDisabled() {
        return this.checkControllerDisabled("month", "selecteProps");
      },
      isWeekendToggleDisabled: function isWeekendToggleDisabled() {
        var p = this.isShowWeekend ? "hideWeekendButtonProps" : "showWeekendButtonProps";
        return this.checkControllerDisabled("weekend", p);
      },
      isCurrentBtnDisabled: function isCurrentBtnDisabled() {
        var p = this.curSelectedMode === "month" ? "currentDayButtonProps" : "currentMonthButtonProps";
        return this.checkControllerDisabled("current", p);
      },
      filterYearStr: function filterYearStr() {
        return "".concat(this.controllerOptions.filterDate.getFullYear());
      },
      filterMonthStr: function filterMonthStr() {
        return "".concat(this.controllerOptions.filterDate.getMonth() + 1);
      },
      filterYearMonth: function filterYearMonth() {
        return {
          year: this.filterYearStr,
          month: this.filterMonthStr
        };
      }
    },
    watch: {
      value: {
        handler: function handler(v) {
          this.toCurrent(v);
        },
        immediate: true
      },
      mode: {
        handler: function handler(v) {
          this.curSelectedMode = v;
        },
        immediate: true
      },
      isShowWeekendDefault: {
        handler: function handler(v) {
          this.isShowWeekend = v;
        },
        immediate: true
      },
      filterYearMonth: {
        handler: function handler(v) {
          emitEvent(this, "month-change", v);
          this.controllerChange();
        }
      },
      curSelectedMode: function curSelectedMode() {
        this.handleIE();
      },
      isShowWeekend: function isShowWeekend() {
        this.handleIE();
      },
      isControllerVisible: function isControllerVisible() {
        this.handleIE();
      }
    },
    mounted: function mounted() {
      this.handleIE();
    },
    methods: {
      handleIE: function handleIE() {
        var _this = this;

        if (getIEVersion$1() <= 9) {
          this.$nextTick(function () {
            var element = _this.$el.children[_this.isControllerVisible ? 1 : 0];

            if (_this.curSelectedMode === "month") {
              element.setAttribute("is-show-weekend", "".concat(_this.isShowWeekend));
            } else {
              element.removeAttribute("is-show-weekend");
            }
          });
        }
      },
      getCalendarWeekSlotData: function getCalendarWeekSlotData(item) {
        return {
          day: item.num
        };
      },
      getWeekDisplay: function getWeekDisplay(weekNum) {
        var weekText = this.weekDipalyText;
        return _typeof(weekText) === "object" && weekText[weekNum - 1] ? weekText[weekNum - 1] : getDayCn(weekNum);
      },
      checkMonthCellItemShowed: function checkMonthCellItemShowed(cellData) {
        return this.isShowWeekend || cellData.day < 6;
      },
      createCalendarCell: function createCalendarCell(cellData) {
        return _objectSpread$w(_objectSpread$w({}, cellData), this.controllerOptions);
      },
      clickCell: function clickCell(e, cellData) {
        this.curDate = dayjs_min(cellData.date);
        var options = this.getCellClickEventOptions(e, cellData);
        emitEvent(this, "cell-click", options);
      },
      doubleClickCell: function doubleClickCell(e, cellData) {
        var options = this.getCellClickEventOptions(e, cellData);
        emitEvent(this, "cell-double-click", options);
      },
      rightClickCell: function rightClickCell(e, cellData) {
        if (this.preventCellContextmenu) {
          e.preventDefault();
        }

        var options = this.getCellClickEventOptions(e, cellData);
        emitEvent(this, "cell-right-click", options);
      },
      getCellClickEventOptions: function getCellClickEventOptions(e, cellData) {
        return {
          cell: this.createCalendarCell(cellData),
          e: e
        };
      },
      controllerChange: function controllerChange() {
        var options = this.controllerOptions;
        emitEvent(this, "controller-change", options);
      },
      onWeekendToggleClick: function onWeekendToggleClick() {
        this.isShowWeekend = !this.isShowWeekend;
        this.controllerChange();
      },
      checkMonthCellColHeaderVisibled: function checkMonthCellColHeaderVisibled(item) {
        var re = true;

        if (!this.isShowWeekend) {
          re = item.num !== 6 && item.num !== 7;
        }

        return re;
      },
      checkControllerDisabled: function checkControllerDisabled(name, propsName) {
        var re = false;
        var conf = this.controllerConfigData;

        if (conf && (conf.disabled || conf[name] && conf[name][propsName] && conf[name][propsName].disabled)) {
          re = true;
        }

        return re;
      },
      checkControllerVisible: function checkControllerVisible(name) {
        var re = true;
        var conf = this.controllerConfigData;

        if (!conf || !conf.visible || conf[name] === false || conf[name] && !conf[name].visible) {
          re = false;
        }

        return re;
      },
      toCurrent: function toCurrent(value) {
        this.curDate = value ? dayjs_min(value) : createDefaultCurDate();
        this.curSelectedYear = this.curDate.year();
        this.curSelectedMonth = parseInt(this.curDate.format("M"), 10);
      },
      checkMonthAndYearSelecterDisabled: function checkMonthAndYearSelecterDisabled(year, month) {
        var disabled = false;

        if (this.rangeFromTo && this.rangeFromTo.from && this.rangeFromTo.to) {
          var beginYear = dayjs_min(this.rangeFromTo.from).year();
          var endYear = dayjs_min(this.rangeFromTo.to).year();

          if (year === beginYear) {
            var beginMon = parseInt(dayjs_min(this.rangeFromTo.from).format("M"), 10);
            disabled = month < beginMon;
          } else if (year === endYear) {
            var endMon = parseInt(dayjs_min(this.rangeFromTo.to).format("M"), 10);
            disabled = month > endMon;
          }
        }

        return disabled;
      },
      renderControl: function renderControl() {
        var _this2 = this;

        var h = this.$createElement;
        var controllerOptions = this.controllerOptions;
        return h("div", {
          "class": "".concat(COMPONENT_NAME, "__control")
        }, [h("div", {
          "class": "".concat(COMPONENT_NAME, "__title")
        }, [renderTNodeJSX(this, "head", {
          params: controllerOptions
        })]), h("div", {
          "class": "".concat(COMPONENT_NAME, "__control-section")
        }, [this.isYearVisible && h("div", {
          "class": "".concat(COMPONENT_NAME, "__control-section-cell")
        }, [h("t-select", helper([{
          "attrs": {
            "size": this.controlSize,
            "disabled": this.isYearDisabled
          }
        }, {
          "props": _objectSpread$w({}, this.controllerConfigData.year.selecteProps)
        }, {
          "model": {
            value: _this2.curSelectedYear,
            callback: function callback($$v) {
              _this2.curSelectedYear = $$v;
            }
          }
        }]), [this.yearSelectOptionList.map(function (item) {
          return h("t-option", {
            "key": item.value,
            "attrs": {
              "value": item.value,
              "label": item.label,
              "disabled": item.disabled
            }
          }, [item.label]);
        })])]), this.curSelectedMode === "month" && this.isMonthVisible && h("div", {
          "class": "".concat(COMPONENT_NAME, "__control-section-cell")
        }, [h("t-select", helper([{
          "attrs": {
            "size": this.controlSize,
            "disabled": this.isMonthDisabled
          }
        }, {
          "props": _objectSpread$w({}, this.controllerConfigData.month.selecteProps)
        }, {
          "model": {
            value: _this2.curSelectedMonth,
            callback: function callback($$v) {
              _this2.curSelectedMonth = $$v;
            }
          }
        }]), [this.monthSelectOptionList.map(function (item) {
          return h("t-option", {
            "key": item.value,
            "attrs": {
              "value": item.value,
              "label": item.label,
              "disabled": item.disabled
            }
          }, [item.label]);
        })])]), this.isModeVisible && h("div", {
          "class": "".concat(COMPONENT_NAME, "__control-section-cell"),
          "style": "height: auto"
        }, [h("t-radio-group", helper([{
          "attrs": {
            "variant": "default-filled",
            "size": this.controlSize,
            "disabled": this.isModeDisabled
          }
        }, {
          "props": _objectSpread$w({}, this.controllerConfigData.mode.radioGroupProps)
        }, {
          "on": {
            "change": this.controllerChange
          },
          "model": {
            value: _this2.curSelectedMode,
            callback: function callback($$v) {
              _this2.curSelectedMode = $$v;
            }
          }
        }]), [this.modeSelectOptionList.map(function (item) {
          return h("t-radio-button", {
            "key": item.value,
            "attrs": {
              "value": item.value
            }
          }, [item.label]);
        })])]), this.theme === "full" && this.curSelectedMode === "month" && this.isWeekendToggleVisible && h("div", {
          "class": "".concat(COMPONENT_NAME, "__control-section-cell")
        }, [h("t-check-tag", helper([{
          "class": "".concat(COMPONENT_NAME, "__control-tag"),
          "attrs": {
            "defaultChecked": !this.isShowWeekend,
            "disabled": this.isWeekendToggleDisabled
          },
          "on": {
            "click": this.onWeekendToggleClick
          }
        }, {
          "props": _objectSpread$w({}, this.weekendBtnVBind)
        }]), [this.weekendBtnText])]), this.theme === "full" && this.isCurrentBtnVisible && h("div", {
          "class": "".concat(COMPONENT_NAME, "__control-section-cell")
        }, [h("t-button", helper([{
          "attrs": {
            "size": this.controlSize,
            "disabled": this.isCurrentBtnDisabled
          },
          "on": {
            "click": function click() {
              _this2.toCurrent();
            }
          }
        }, {
          "props": _objectSpread$w({}, this.currentBtnVBind)
        }]), [this.currentBtnText])])])]);
      }
    },
    render: function render() {
      var _this3 = this;

      var h = arguments[0];
      var calendarCls = this.calendarCls,
          calendarPanelCls = this.calendarPanelCls,
          isControllerVisible = this.isControllerVisible,
          cellColHeaders = this.cellColHeaders,
          checkMonthCellColHeaderVisibled = this.checkMonthCellColHeaderVisibled;

      var monthBody = function monthBody() {
        return h("table", {
          "class": "".concat(COMPONENT_NAME, "__table")
        }, [h("thead", {
          "class": "".concat(COMPONENT_NAME, "__table-head")
        }, [h("tr", {
          "class": "".concat(COMPONENT_NAME, "__table-head-row")
        }, [cellColHeaders.map(function (item, index) {
          return checkMonthCellColHeaderVisibled(item) && h("th", {
            "class": "".concat(COMPONENT_NAME, "__table-head-cell")
          }, [Array.isArray(_this3.week) ? _this3.week[index] : renderTNodeJSXDefault(_this3, "week", {
            defaultNode: h("span", [item.display]),
            params: _this3.getCalendarWeekSlotData(item)
          })]);
        })])]), h("tbody", {
          "class": "".concat(COMPONENT_NAME, "__table-body")
        }, [_this3.monthCellsData.map(function (week, weekIndex) {
          return h("tr", {
            "class": "".concat(COMPONENT_NAME, "__table-body-row")
          }, [week.map(function (item, itemIndex) {
            return _this3.checkMonthCellItemShowed(item) && h("calendar-cell-item", {
              "key": "d-".concat(weekIndex, "-").concat(itemIndex),
              "attrs": {
                "item": item,
                "theme": _this3.theme,
                "t": _this3.t,
                "global": _this3.global,
                "cell": _this3.cell,
                "fillWithZero": _this3.fillWithZero
              },
              "on": {
                "click": function click(e) {
                  return _this3.clickCell(e, item);
                },
                "dblclick": function dblclick(e) {
                  return _this3.doubleClickCell(e, item);
                },
                "rightclick": function rightclick(e) {
                  return _this3.rightClickCell(e, item);
                }
              },
              "scopedSlots": _objectSpread$w({}, _this3.$scopedSlots)
            });
          })]);
        })])]);
      };

      var yearBody = function yearBody() {
        return h("table", {
          "class": "".concat(COMPONENT_NAME, "__table")
        }, [h("tbody", {
          "class": "".concat(COMPONENT_NAME, "__table-body")
        }, [_this3.yearCellsData.map(function (cell, cellIndex) {
          return h("tr", {
            "class": "".concat(COMPONENT_NAME, "__table-body-row")
          }, [cell.map(function (item, itemIndex) {
            return h("calendar-cell-item", {
              "key": "m-".concat(cellIndex, "-").concat(itemIndex),
              "attrs": {
                "item": item,
                "theme": _this3.theme,
                "t": _this3.t,
                "global": _this3.global,
                "cell": _this3.cell,
                "fillWithZero": _this3.fillWithZero
              },
              "on": {
                "click": function click(e) {
                  return _this3.clickCell(e, item);
                },
                "dblclick": function dblclick(e) {
                  return _this3.doubleClickCell(e, item);
                },
                "rightclick": function rightclick(e) {
                  return _this3.rightClickCell(e, item);
                }
              },
              "scopedSlots": _objectSpread$w({}, _this3.$scopedSlots)
            });
          })]);
        })])]);
      };

      return h("div", {
        "class": calendarCls
      }, [isControllerVisible && this.renderControl(), h("div", {
        "class": calendarPanelCls
      }, [this.curSelectedMode === "month" ? monthBody() : yearBody()])]);
    }
  });

  var Calendar = withInstall(_Calendar);

  var props$c = {
    actions: {
      type: Array
    },
    author: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Object, Function]
    },
    content: {
      type: [String, Function]
    },
    datetime: {
      type: [String, Function]
    },
    quote: {
      type: [String, Function]
    },
    reply: {
      type: [String, Function]
    }
  };

  var preName = "".concat(prefix, "-comment");
  var _Comment = Vue__default["default"].extend({
    name: "TComment",
    props: props$c,
    methods: {
      renderReply: function renderReply() {
        var h = this.$createElement;
        var reply = renderTNodeJSX(this, "reply");
        return reply ? h("div", {
          "class": "".concat(preName, "__reply")
        }, [reply]) : null;
      },
      renderActions: function renderActions() {
        var h = this.$createElement;
        var actions = renderTNodeJSX(this, "actions");
        return actions && actions.length ? h("ul", {
          "class": "".concat(preName, "__actions")
        }, [actions.map(function (action, index) {
          return h("li", {
            "key": "action-".concat(index)
          }, [action]);
        })]) : null;
      },
      renderQuote: function renderQuote() {
        var h = this.$createElement;
        var quote = renderTNodeJSX(this, "quote");
        return quote ? h("div", {
          "class": "".concat(preName, "__quote")
        }, [quote]) : null;
      },
      renderAuthorDatetime: function renderAuthorDatetime() {
        var h = this.$createElement;
        var author = renderTNodeJSX(this, "author");
        var datetime = renderTNodeJSX(this, "datetime");
        return (author || datetime) && h("div", {
          "class": "".concat(preName, "__author")
        }, [author && h("span", {
          "class": "".concat(preName, "__name")
        }, [author]), datetime && h("span", {
          "class": "".concat(preName, "__time")
        }, [datetime])]);
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(preName, "__content")
        }, [this.renderAuthorDatetime(), h("div", {
          "class": "".concat(preName, "__detail")
        }, [renderTNodeJSX(this, "content")]), this.renderQuote(), this.renderActions()]);
      },
      renderAvatar: function renderAvatar() {
        var h = this.$createElement;
        var avatar = renderTNodeJSX(this, "avatar");
        return avatar ? h("div", {
          "class": "".concat(preName, "__avatar")
        }, [typeof avatar === "string" ? h("img", {
          "attrs": {
            "src": avatar,
            "alt": ""
          },
          "class": "".concat(preName, "__avatar-image")
        }) : avatar]) : null;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": preName
      }, [h("div", {
        "class": "".concat(preName, "__inner")
      }, [this.renderAvatar(), this.renderContent()]), this.renderReply()]);
    }
  });

  var Comment = withInstall(_Comment);

  var props$b = {
    asyncLoading: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    split: Boolean,
    stripe: Boolean,
    onLoadMore: Function,
    onScroll: Function
  };

  var LOAD_MORE = "load-more";
  var LOADING = "loading";

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$c = "".concat(prefix, "-list");
  var _List = Vue__default["default"].extend({
    name: "TList",
    props: _objectSpread$v({}, props$b),
    computed: {
      listClass: function listClass() {
        var _ref;

        return ["".concat(name$c), ClASSNAMES.SIZE[this.size], (_ref = {}, _defineProperty$2(_ref, "".concat(name$c, "--split"), this.split), _defineProperty$2(_ref, "".concat(name$c, "--stripe"), this.stripe), _defineProperty$2(_ref, "".concat(name$c, "--vertical-action"), this.layout === "vertical"), _ref)];
      },
      loadingClass: function loadingClass() {
        if (this.asyncLoading === "loading") return ClASSNAMES.STATUS.loading;
        if (this.asyncLoading === "load-more") return ClASSNAMES.STATUS.loadMore;
        return "";
      }
    },
    components: {
      Loading: Loading
    },
    methods: {
      renderLoading: function renderLoading() {
        var h = this.$createElement;

        if (this.asyncLoading && typeof this.asyncLoading === "string") {
          var _LOADING$LOAD_MORE$th;

          var text = (_LOADING$LOAD_MORE$th = {}, _defineProperty$2(_LOADING$LOAD_MORE$th, LOADING, "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E"), _defineProperty$2(_LOADING$LOAD_MORE$th, LOAD_MORE, "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"), _LOADING$LOAD_MORE$th)[this.asyncLoading];
          var loading = this.asyncLoading === LOADING;
          return h(Loading, {
            "class": this.loadingClass,
            "attrs": {
              "loading": loading,
              "text": text
            }
          });
        }

        return renderTNodeJSX(this, "asyncLoading");
      },
      handleScroll: function handleScroll(e) {
        var listElement = this.$el;
        var scrollTop = listElement.scrollTop,
            scrollHeight = listElement.scrollHeight,
            clientHeight = listElement.clientHeight;
        this.$emit("scroll", {
          $event: e,
          scrollTop: scrollTop,
          scrollBottom: scrollHeight - clientHeight - scrollTop
        });

        if (this.onScroll) {
          this.onScroll({
            e: e,
            scrollTop: scrollTop,
            scrollBottom: scrollHeight - clientHeight - scrollTop
          });
        }
      },
      handleLoadMore: function handleLoadMore(e) {
        if (typeof this.asyncLoading === "string" && this.asyncLoading !== LOAD_MORE) return;
        this.$emit("load-more", {
          e: e
        });

        if (this.onLoadMore) {
          this.onLoadMore({
            e: e
          });
        }
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        var propsHeaderContent = renderTNodeJSX(this, "header");
        var propsFooterContent = renderTNodeJSX(this, "footer");
        return [propsHeaderContent && h("div", {
          "class": "".concat(name$c, "__header")
        }, [propsHeaderContent]), h("ul", {
          "class": "".concat(name$c, "__inner")
        }, [renderTNodeJSX(this, "default")]), propsFooterContent && h("div", {
          "class": "".concat(name$c, "__footer")
        }, [propsFooterContent])];
      }
    },
    render: function render() {
      var h = arguments[0];
      var listContent = this.renderContent();
      listContent = [listContent, h("div", {
        "class": "".concat(name$c, "__load"),
        "on": {
          "click": this.handleLoadMore
        }
      }, [this.renderLoading()])];
      return h("div", {
        "class": this.listClass,
        "on": {
          "scroll": this.handleScroll
        }
      }, [listContent]);
    }
  });

  var props$a = {
    action: {
      type: [String, Function]
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    }
  };

  var name$b = "".concat(prefix, "-list-item");
  var _ListItem = Vue__default["default"].extend({
    name: "TListItem",
    props: props$a,
    render: function render() {
      var h = arguments[0];
      var content = renderContent(this, "default", "content");
      var propsActionContent = renderTNodeJSX(this, "action");
      return h("li", {
        "class": name$b
      }, [h("div", {
        "class": "".concat(name$b, "-main")
      }, [h("div", {
        "class": "".concat(name$b, "__content")
      }, [content]), propsActionContent && h("li", {
        "class": "".concat(name$b, "__action")
      }, [propsActionContent])])]);
    }
  });

  var props$9 = {
    avatar: {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    image: {
      type: [String, Function]
    },
    title: {
      type: [String, Function]
    }
  };

  var name$a = "".concat(prefix, "-list-item__meta");
  var _ListItemMeta = Vue__default["default"].extend({
    name: "TListItemMeta",
    props: props$9,
    methods: {
      renderAvatar: function renderAvatar() {
        var h = this.$createElement;

        if (this.avatar || this.$scopedSlots.avatar) {
          console.warn("`avatar` is going to be deprecated, please use `image` instead");
        }

        var thumbnail = renderContent(this, "avatar", "image");
        if (!thumbnail) return;

        if (typeof thumbnail === "string") {
          return h("div", {
            "class": "".concat(name$a, "-avatar")
          }, [h("img", {
            "attrs": {
              "src": thumbnail
            }
          })]);
        }

        return h("div", {
          "class": "".concat(name$a, "-avatar")
        }, [thumbnail]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var propsTitleContent = renderTNodeJSX(this, "title");
      var propsDescriptionContent = renderTNodeJSX(this, "description");
      var listItemMetaContent = [this.renderAvatar(), h("div", {
        "class": "".concat(name$a, "-content")
      }, [propsTitleContent && h("h3", {
        "class": "".concat(name$a, "-title")
      }, [propsTitleContent]), propsDescriptionContent && h("p", {
        "class": "".concat(name$a, "-description")
      }, [propsDescriptionContent])])];
      return h("div", {
        "class": name$a
      }, [listItemMetaContent]);
    }
  });

  var List = withInstall(_List);
  var ListItem = withInstall(_ListItem);
  var ListItemMeta = withInstall(_ListItemMeta);

  var PRO_THEME = {
    LINE: "line",
    PLUMP: "plump",
    CIRCLE: "circle"
  };
  var CIRCLE_SIZE = {
    SMALL: "small",
    MEDIUM: "medium",
    LARGE: "large"
  };
  var CIRCLE_SIZE_PX = {
    SMALL: 72,
    MEDIUM: 112,
    LARGE: 160
  };
  var CIRCLE_FONT_SIZE_RATIO = {
    SMALL: 14 / CIRCLE_SIZE_PX.SMALL,
    MEDIUM: 20 / CIRCLE_SIZE_PX.MEDIUM,
    LARGE: 36 / CIRCLE_SIZE_PX.LARGE
  };
  var STATUS_ICON = ["success", "error", "warning"];

  var props$8 = {
    color: {
      type: [String, Object, Array],
      "default": ""
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    percentage: {
      type: Number,
      "default": 0
    },
    size: {
      type: [String, Number],
      "default": "medium"
    },
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "error", "warning", "active"].includes(val);
      }
    },
    strokeWidth: {
      type: [String, Number]
    },
    theme: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        return ["line", "plump", "circle"].includes(val);
      }
    },
    trackColor: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$9 = "".concat(prefix, "-progress");
  var _Progress = Vue__default["default"].extend({
    name: "TProgress",
    props: _objectSpread$u({}, props$8),
    data: function data() {
      return {
        name: name$9
      };
    },
    computed: {
      statusStyle: function statusStyle() {
        if (this.percentage >= 100) {
          return "success";
        }

        return this.status;
      },
      themeClass: function themeClass() {
        var Line = PRO_THEME.LINE;

        if (this.theme === Line) {
          return "thin";
        }

        return this.theme;
      },
      trackBgStyle: function trackBgStyle() {
        var strokeWidth = this.strokeWidth;
        var height = typeof strokeWidth === "string" ? strokeWidth : "".concat(strokeWidth, "px");
        return {
          height: height,
          backgroundColor: this.trackColor,
          borderRadius: height
        };
      },
      circleStrokeStyle: function circleStrokeStyle() {
        return {
          stroke: this.trackColor
        };
      },
      barStyle: function barStyle() {
        return {
          width: "".concat(this.percentage, "%"),
          background: this.color && getBackgroundColor(this.color)
        };
      },
      circlePathStyle: function circlePathStyle() {
        var strokeColor = _typeof(this.color) === "object" ? "" : this.color;
        return {
          stroke: strokeColor
        };
      },
      isShowIcon: function isShowIcon() {
        return STATUS_ICON.includes(this.status) && typeof this.label === "boolean";
      },
      diameter: function diameter() {
        var diameter = CIRCLE_SIZE_PX.MEDIUM;

        if (!this.size) {
          return diameter;
        }

        var SMALL = CIRCLE_SIZE.SMALL,
            LARGE = CIRCLE_SIZE.LARGE,
            MEDIUM = CIRCLE_SIZE.MEDIUM;

        switch (this.size) {
          case SMALL:
            diameter = CIRCLE_SIZE_PX.SMALL;
            break;

          case MEDIUM:
            diameter = CIRCLE_SIZE_PX.MEDIUM;
            break;

          case LARGE:
            diameter = CIRCLE_SIZE_PX.LARGE;
            break;

          default:
            diameter = Number(this.size);
            break;
        }

        return diameter;
      },
      rPoints: function rPoints() {
        return this.diameter / 2;
      },
      radius: function radius() {
        return this.rPoints - this.circleStrokeWidth / 2;
      },
      circleStyle: function circleStyle() {
        if (this.theme !== PRO_THEME.CIRCLE) {
          return {};
        }

        var fontSize = this.diameter * CIRCLE_FONT_SIZE_RATIO.MEDIUM;

        if (this.diameter <= CIRCLE_SIZE_PX.SMALL) {
          fontSize = this.diameter * CIRCLE_FONT_SIZE_RATIO.SMALL;
        } else if (this.diameter >= CIRCLE_SIZE_PX.LARGE) {
          fontSize = this.diameter * CIRCLE_FONT_SIZE_RATIO.LARGE;
        }

        return {
          width: "".concat(this.diameter, "px"),
          height: "".concat(this.diameter, "px"),
          fontSize: "".concat(fontSize, "px")
        };
      },
      circleStrokeWidth: function circleStrokeWidth() {
        var defaultWidth = this.size === CIRCLE_SIZE.SMALL ? 4 : 6;
        return this.strokeWidth ? Number(this.strokeWidth) : defaultWidth;
      },
      strokeDashArr: function strokeDashArr() {
        var radius = this.diameter / 2;
        var perimeter = Math.PI * 2 * radius;
        var percent = this.percentage / 100;
        return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      },
      plumpStyles: function plumpStyles() {
        return {};
      }
    },
    methods: {
      getIconMap: function getIconMap() {
        var CIRCLE_ICONS = {
          success: Check,
          warning: Error$1,
          error: Close
        };
        var NORMAL_ICONS = {
          success: CheckCircleFilled,
          warning: ErrorCircleFilled,
          error: CloseCircleFilled
        };
        return this.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
      },
      getLabelContent: function getLabelContent() {
        var h = this.$createElement;
        var labelContent = "".concat(this.percentage, "%");
        var status = this.status || "";

        if (STATUS_ICON.includes(status) && this.theme !== PRO_THEME.PLUMP) {
          var components = this.getIconMap();
          var component = components[status];

          if (component) {
            labelContent = h(component, {
              "class": ["".concat(name$9, "__icon")]
            });
          }
        }

        return labelContent;
      }
    },
    render: function render() {
      var h = arguments[0];
      var labelContent = h("div", {
        "class": "".concat(name$9, "__info")
      }, [renderTNodeJSX(this, "label", this.getLabelContent())]);
      var PLUMP_SEPARATE = 10;
      var separateClasses = this.percentage > PLUMP_SEPARATE ? "".concat(name$9, "--over-ten") : "".concat(name$9, "--under-ten");
      return h("div", {
        "class": name$9
      }, [this.theme === PRO_THEME.LINE && h("div", {
        "class": "".concat(name$9, "--thin ").concat(name$9, "--status--").concat(this.statusStyle)
      }, [h("div", {
        "class": "".concat(name$9, "__bar"),
        "style": this.trackBgStyle
      }, [h("div", {
        "class": "".concat(name$9, "__inner"),
        "style": this.barStyle
      })]), labelContent]), this.theme === PRO_THEME.PLUMP && h("div", {
        "class": ["".concat(name$9, "__bar ").concat(name$9, "--plump ").concat(separateClasses), _defineProperty$2({}, "".concat(name$9, "--status--").concat(this.statusStyle), this.statusStyle)],
        "style": this.trackBgStyle
      }, [h("div", {
        "class": "".concat(name$9, "__inner"),
        "style": this.barStyle
      }, [this.percentage > PLUMP_SEPARATE && labelContent]), this.percentage <= PLUMP_SEPARATE && labelContent]), this.theme === PRO_THEME.CIRCLE && h("div", {
        "class": "".concat(name$9, "--circle ").concat(name$9, "--status--").concat(this.statusStyle),
        "style": this.circleStyle
      }, [labelContent, h("svg", {
        "attrs": {
          "width": this.diameter,
          "height": this.diameter,
          "viewBox": "0 0 ".concat(this.diameter, " ").concat(this.diameter)
        }
      }, [h("circle", {
        "attrs": {
          "cx": this.rPoints,
          "cy": this.rPoints,
          "r": this.radius,
          "stroke-width": this.circleStrokeWidth,
          "stroke": this.trackColor,
          "fill": "none"
        },
        "class": "".concat(name$9, "__circle-outer"),
        "style": this.circleStrokeStyle
      }), this.percentage > 0 && h("circle", {
        "attrs": {
          "cx": this.rPoints,
          "cy": this.rPoints,
          "r": this.radius,
          "stroke-width": this.circleStrokeWidth,
          "fill": "none",
          "stroke-linecap": "round",
          "transform": "matrix(0,-1,1,0,0,".concat(this.diameter, ")"),
          "stroke-dasharray": this.strokeDashArr
        },
        "class": "".concat(name$9, "__circle-inner"),
        "style": this.circlePathStyle
      })])])]);
    }
  });

  var Progress = withInstall(_Progress);

  var props$7 = {
    animation: {
      type: String,
      validator: function validator(val) {
        return ["gradient", "flashed"].includes(val);
      }
    },
    loading: {
      type: Boolean,
      "default": true
    },
    rowCol: {
      type: Array
    },
    theme: {
      type: String,
      validator: function validator(val) {
        return ["text", "avatar", "paragraph", "avatar-text", "tab", "article"].includes(val);
      }
    }
  };

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$8 = "".concat(prefix, "-skeleton");
  var ThemeMap = {
    text: [1],
    avatar: [{
      type: "circle",
      size: "56px"
    }],
    paragraph: [1, 1, {
      width: "70%"
    }],
    "avatar-text": [[{
      type: "circle"
    }, {
      type: "text",
      height: "32px"
    }]],
    tab: [{
      height: "30px"
    }, {
      height: "200px"
    }],
    article: [{
      type: "rect",
      height: "30px",
      width: "100%"
    }, {
      type: "rect",
      height: "200px",
      width: "100%"
    }, [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }]]
  };
  var _Skeleton = Vue__default["default"].extend({
    name: "TSkeleton",
    props: _objectSpread$t({}, props$7),
    data: function data() {
      return {};
    },
    methods: {
      renderCols: function renderCols(_cols) {
        var _this = this;

        var h = this.$createElement;

        var getColItemClass = function getColItemClass(obj) {
          return ["".concat(name$8, "__col"), "".concat(name$8, "--type-").concat(obj.type || "text"), _defineProperty$2({}, "".concat(name$8, "--animation-").concat(_this.animation), _this.animation)];
        };

        var getColItemStyle = function getColItemStyle(obj) {
          var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
          var style = {};
          styleName.forEach(function (name2) {
            if (name2 in obj) {
              var px = isNumber_1(obj[name2]) ? "".concat(obj[name2], "px") : obj[name2];

              if (name2 === "size") {
                var _ref2 = [px, px];
                style.width = _ref2[0];
                style.height = _ref2[1];
              } else {
                style[name2] = px;
              }
            }
          });
          return style;
        };

        var cols = [];

        if (Array.isArray(_cols)) {
          cols = _cols;
        } else if (isNumber_1(_cols)) {
          cols = new Array(_cols).fill({
            type: "text"
          });
        } else {
          cols = [_cols];
        }

        return cols.map(function (obj) {
          return h("div", {
            "class": getColItemClass(obj),
            "style": getColItemStyle(obj)
          }, [typeof obj.content === "function" ? obj.content(_this.$createElement) : obj.content]);
        });
      },
      renderRowCol: function renderRowCol(_rowCol) {
        var _this2 = this;

        var h = this.$createElement;
        var rowCol = _rowCol || this.rowCol;

        var getBlockClass = function getBlockClass() {
          return ["".concat(name$8, "__row")];
        };

        return rowCol.map(function (item) {
          return h("div", {
            "class": getBlockClass()
          }, [_this2.renderCols(item)]);
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      var content = renderContent(this, "default", "content");

      if (this.$scopedSlots["default"] && !this.loading) {
        return h("div", [content]);
      }

      if (!this.loading) {
        return;
      }

      var children = [];

      if (this.theme) {
        children.push(this.renderRowCol(ThemeMap[this.theme]));
      }

      if (this.rowCol) {
        children.push(this.renderRowCol(this.rowCol));
      }

      if (!this.theme && !this.rowCol) {
        children.push(this.renderRowCol([1, 1, 1, {
          width: "70%"
        }]));
      }

      return h("div", {
        "class": name$8
      }, [children]);
    }
  });

  var Skeleton = withInstall(_Skeleton);

  var props$6 = {
    animation: {
      type: String,
      "default": "slide",
      validator: function validator(val) {
        return ["slide"].includes(val);
      }
    },
    autoplay: {
      type: Boolean,
      "default": true
    },
    current: {
      type: Number
    },
    defaultCurrent: {
      type: Number
    },
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    duration: {
      type: Number,
      "default": 300
    },
    interval: {
      type: Number,
      "default": 5e3
    },
    onChange: Function
  };

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$7 = "".concat(prefix, "-swiper");
  var _Swiper = Vue__default["default"].extend({
    name: "TSwiper",
    props: _objectSpread$s({}, props$6),
    data: function data() {
      return {
        visible: true,
        index: 0,
        timeoutHandler: null
      };
    },
    computed: {
      items: function items() {
        return (this.$slots["default"] || []).filter(function (child) {
          var node = child;
          return node.componentOptions && node.componentOptions.tag === "".concat(prefix, "-swiper-item");
        });
      }
    },
    watch: {
      interval: {
        handler: function handler() {
          this.swiperTo(this.index, "");
        },
        immediate: true
      }
    },
    render: function render() {
      var h = arguments[0];
      var swiperClass = ["".concat(name$7), _defineProperty$2({}, "".concat(prefix, "-is-hidden"), !this.visible)];
      return h("div", {
        "class": swiperClass,
        "on": {
          "mouseenter": this.clearTimer,
          "mouseleave": this.setTimer
        }
      }, [this.renderContent(), this.renderTrigger()]);
    },
    methods: {
      renderContent: function renderContent() {
        var h = this.$createElement;
        var wraperStyles = {};

        if (this.direction === "vertical") {
          wraperStyles = {
            height: "".concat(this.items.length * 100, "%"),
            transform: "translate(0,".concat(-this.index * 100 / this.items.length, "%)"),
            transition: "transform ".concat(this.duration / 1e3, "s")
          };
        } else {
          wraperStyles = {
            width: "".concat(this.items.length * 100, "%"),
            transform: "translate(".concat(-this.index * 100 / this.items.length, "%,0)"),
            transition: "transform ".concat(this.duration / 1e3, "s")
          };
        }

        return h("div", {
          "class": "".concat(name$7, "__content")
        }, [h("div", {
          "class": "".concat(name$7, "__swiper-wrap--").concat(this.direction),
          "style": wraperStyles
        }, [this.items])]);
      },
      renderTrigger: function renderTrigger() {
        var _this = this;

        var h = this.$createElement;
        var index = this.index % this.items.length;
        return h("ul", {
          "class": "t-swiper__trigger-wrap"
        }, [this.items.map(function (_, i) {
          return h("li", {
            "class": i === index ? "t-swiper__trigger--active" : "",
            "on": {
              "click": function click() {
                return _this.swiperTo(i, "touch");
              }
            }
          });
        })]);
      },
      swiperToNext: function swiperToNext(source) {
        var number = this.index + 1;
        this.swiperTo(number, source);

        if (source) {
          emitEvent(this, "change", number, {
            source: source
          });
        }
      },
      swiperTo: function swiperTo(index, source) {
        var _this2 = this;

        var findIndex = this.items.length === 0 ? 0 : index % this.items.length;

        if (this.timeoutHandler) {
          this.clearTimer();
        }

        this.index = findIndex;

        if (this.interval > 0) {
          this.timeoutHandler = setTimeout(function () {
            _this2.swiperToNext(source);
          }, this.interval);
        }
      },
      setTimer: function setTimer() {
        var _this3 = this;

        if (this.interval > 0) {
          this.timeoutHandler = Number(setTimeout(function () {
            _this3.clearTimer();

            _this3.swiperToNext("autoplay");
          }, this.interval));
        }
      },
      clearTimer: function clearTimer() {
        clearTimeout(this.timeoutHandler);
        this.timeoutHandler = null;
      }
    }
  });

  var _SwiperItem = Vue__default["default"].extend({
    name: "TSwiperItem",
    render: function render() {
      var h = arguments[0];
      return h("div", [this.$slots["default"]]);
    }
  });

  var Swiper = withInstall(_Swiper);
  var SwiperItem = withInstall(_SwiperItem);

  /** Error message constants. */

  var FUNC_ERROR_TEXT = 'Expected a function';
  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */

  function throttle(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    if (isObject_1(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    return debounce_1(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  var throttle_1 = throttle;

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function flatColumns(columns) {
    var result = [];
    columns.forEach(function (column) {
      var children = column.children;

      if (children !== null && children !== void 0 && children.length) {
        result.push.apply(result, _toConsumableArray(flatColumns(children)));
      } else {
        result.push(_objectSpread$r({}, column));
      }
    });
    return result;
  }

  var baseTableProps = {
    bordered: Boolean,
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableDataSort: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    firstFullRow: {
      type: [String, Function]
    },
    height: {
      type: [String, Number],
      "default": "auto"
    },
    hover: Boolean,
    lastFullRow: {
      type: [String, Function]
    },
    loading: {
      type: [Boolean, Function],
      "default": false
    },
    maxHeight: {
      type: [String, Number]
    },
    pagination: {
      type: Object
    },
    rowClassName: {
      type: [String, Object, Array, Function]
    },
    rowKey: {
      type: String,
      "default": "",
      required: true
    },
    rowspanAndColspan: {
      type: Function
    },
    scroll: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    stripe: Boolean,
    tableLayout: {
      type: String,
      "default": "fixed",
      validator: function validator(val) {
        return ["auto", "fixed"].includes(val);
      }
    },
    topContent: {
      type: [String, Function]
    },
    verticalAlign: {
      type: String,
      "default": "middle",
      validator: function validator(val) {
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    onCellClick: Function,
    onPageChange: Function,
    onRowClick: Function,
    onRowDbClick: Function,
    onRowHover: Function,
    onRowMousedown: Function,
    onRowMouseenter: Function,
    onRowMouseleave: Function,
    onRowMouseup: Function,
    onScrollX: Function,
    onScrollY: Function
  };

  var primaryTableProps = {
    asyncLoading: {
      type: [String, Function]
    },
    columnController: {
      type: Object
    },
    columnControllerContent: {
      type: [String, Function]
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    dragSort: Boolean,
    expandedRow: {
      type: [String, Function]
    },
    expandedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultExpandedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandOnRowClick: Boolean,
    filterIcon: {
      type: Function
    },
    filterRow: {
      type: [String, Function]
    },
    filterValue: {
      type: Object
    },
    defaultFilterValue: {
      type: Object
    },
    multipleSort: Boolean,
    selectedRowKeys: {
      type: Array
    },
    defaultSelectedRowKeys: {
      type: Array
    },
    showDragCol: Boolean,
    sort: {
      type: [Object, Array]
    },
    defaultSort: {
      type: [Object, Array]
    },
    sortOnRowDraggable: Boolean,
    onAsyncLoadingClick: Function,
    onCellClick: Function,
    onChange: Function,
    onDataChange: Function,
    onDragSort: Function,
    onExpandChange: Function,
    onFilterChange: Function,
    onSelectChange: Function,
    onSortChange: Function
  };

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function debounce(fn) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
    var timer;
    return function newFn() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var context = this;
      clearTimeout(timer);
      timer = setTimeout(function () {
        fn.apply(context, args);
      }, delay);
    };
  }
  function filterDataByIds() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var byId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "id";
    return data.filter(function () {
      var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return ids.includes(d[byId]);
    });
  }
  var SCROLL_DIRECTION = /* @__PURE__ */function (SCROLL_DIRECTION2) {
    SCROLL_DIRECTION2["X"] = "x";
    SCROLL_DIRECTION2["Y"] = "y";
    SCROLL_DIRECTION2["UNKNOWN"] = "unknown";
    return SCROLL_DIRECTION2;
  }(SCROLL_DIRECTION || {});
  var preScrollLeft;
  var preScrollTop;
  var getScrollDirection = function getScrollDirection(scrollLeft, scrollTop) {
    var direction = "unknown"
    /* UNKNOWN */
    ;

    if (preScrollTop !== scrollTop) {
      direction = "y"
      /* Y */
      ;
    } else if (preScrollLeft !== scrollLeft) {
      direction = "x"
      /* X */
      ;
    }

    preScrollTop = scrollTop;
    preScrollLeft = scrollLeft;
    return direction;
  };
  var getRecord = function getRecord(record) {
    if (!record) {
      return record;
    }

    var result = {};
    Object.keys(record).forEach(function (key) {
      var descriptor = Object.getOwnPropertyDescriptor(record, key);
      descriptor && Reflect.defineProperty(result, key, {
        set: function set(val) {
          descriptor.set(val);
        },
        get: function get() {
          console.warn("The parameter `record` will be deprecated, please use `row` instead");
          return descriptor.get();
        }
      });
    });
    return result;
  };
  function getTitle(vm, column, colIndex) {
    var result = null;

    if (isFunction_1(column.title)) {
      result = column.title(vm.$createElement, {
        col: column,
        colIndex: colIndex
      });
    } else if (isString_1(column.title)) {
      result = vm.$scopedSlots[column.title] ? vm.$scopedSlots[column.title](null) : column.title;
    } else if (isFunction_1(column.render)) {
      result = column.render(vm.$createElement, {
        type: "title",
        col: column,
        colIndex: colIndex,
        row: void 0,
        rowIndex: void 0
      });
    }

    return result;
  }
  function getCell(vm, p) {
    var col = p.col,
        row = p.row;
    var result = null;

    if (isFunction_1(col.cell)) {
      result = col.cell(vm.$createElement, _objectSpread$q({}, p));
    } else if (isString_1(col.cell)) {
      result = vm.$scopedSlots[col.cell] ? vm.$scopedSlots[col.cell](p) : row[col.colKey];
    } else if (isFunction_1(col.render)) {
      result = col.render(vm.$createElement, _objectSpread$q({
        type: "cell"
      }, p));
    }

    return result || row[col.colKey];
  }
  function isRowSelectedDisabled(selectColumn, row, rowIndex) {
    var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;

    if (selectColumn.checkProps) {
      if (isFunction_1(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }

    return !!disabled;
  }

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ELLIPSIS_CLASS_NAME = "".concat(prefix, "-text-ellipsis");
  var overlayStyle = {
    width: "100%",
    maxWidth: "400px",
    wordBreak: "break-all"
  };
  var TableCell = Vue__default["default"].extend({
    name: "".concat(prefix, "-table-cell"),
    props: {
      cellData: {
        type: Object,
        "default": function _default() {
          return {};
        }
      }
    },
    data: function data() {
      return {
        offsetLeft: 0,
        isBoundary: false,
        isCutOff: false
      };
    },
    methods: {
      init: function init() {
        var _this$cellData,
            _this = this;

        var _this$cellData$col = (_this$cellData = this.cellData) === null || _this$cellData === void 0 ? void 0 : _this$cellData.col,
            fixed = _this$cellData$col.fixed;

        var children = this.$parent.$children;

        if (fixed) {
          var offsetLeft = 0;
          var fixedColumns = children.filter(function (el) {
            var _el$cellData, _el$cellData$col;

            return (el === null || el === void 0 ? void 0 : (_el$cellData = el.cellData) === null || _el$cellData === void 0 ? void 0 : (_el$cellData$col = _el$cellData.col) === null || _el$cellData$col === void 0 ? void 0 : _el$cellData$col.fixed) === fixed;
          });
          var indexInFixedColumns = fixedColumns.findIndex(function (el) {
            return el === _this;
          });
          fixedColumns.forEach(function (el, cur) {
            if (fixed === "right" && cur > indexInFixedColumns || fixed === "left" && cur < indexInFixedColumns) {
              var _el$cellData2;

              var width = parseInt((_el$cellData2 = el.cellData) === null || _el$cellData2 === void 0 ? void 0 : _el$cellData2.col["with"], 10);
              var clientWidth = el.$el.clientWidth;
              offsetLeft += width > 0 ? width : clientWidth;
            }
          });
          this.isBoundary = fixed === "left" ? indexInFixedColumns === fixedColumns.length - 1 : indexInFixedColumns === 0;
          this.offsetLeft = offsetLeft;
        }

        this.isCutOff = isNodeOverflow(this.$el);
      }
    },
    render: function render(h) {
      var _col$attrs,
          _this2 = this;

      var cellData = this.cellData;
      var col = cellData.col,
          colIndex = cellData.colIndex,
          row = cellData.row,
          rowIndex = cellData.rowIndex,
          customData = cellData.customData,
          customRender = cellData.customRender,
          withoutBorder = cellData.withoutBorder,
          withBorder = cellData.withBorder;
      var colKey = col.colKey,
          attrs = col.attrs,
          align = col.align,
          ellipsis = col.ellipsis,
          width = col.width,
          className = col.className,
          title = col.title,
          fixed = col.fixed;

      var style = _objectSpread$p({}, (_col$attrs = col.attrs) === null || _col$attrs === void 0 ? void 0 : _col$attrs.style);

      var fixedClass = [];
      var attrClass = (attrs === null || attrs === void 0 ? void 0 : attrs["class"]) || [];

      if (fixed) {
        style.position = "sticky";
        style[fixed] = "".concat(this.offsetLeft, "px");
        fixedClass.push("".concat(prefix, "-table__cell--fixed-").concat(fixed));

        if (this.isBoundary) {
          fixedClass.push("".concat(prefix, "-table__cell--fixed-").concat(fixed, "-").concat(fixed === "left" ? "last" : "first"));
        }
      }

      if (align) {
        attrClass.push("".concat(prefix, "-align-").concat(align));
      }

      if (width && !fixed) {
        style.overflow = "hidden";
      }

      if (withoutBorder === true) {
        style.borderLeftWidth = "0px";
      }

      if (withBorder === true) {
        style.borderLeftWidth = "1px";
      }

      if (ellipsis === true || typeof ellipsis === "function") {
        attrClass.push("".concat(prefix, "-text-ellipsis"));
      }

      if (className) {
        if (typeof className === "function") {
          attrClass.push(className({
            type: cellData.type,
            col: col,
            colIndex: colIndex,
            row: row,
            rowIndex: rowIndex
          }));
        } else {
          attrClass.push(className);
        }
      }

      if (["single", "multiple"].indexOf(col.type) > -1) {
        attrClass.push("".concat(prefix, "-table__cell--selectable"));
      }

      var record = getRecord(row);
      var cellContent;

      if (typeof customRender === "function") {
        var type = customData.type,
            func = customData.func;
        var baseData = {
          col: col,
          colIndex: colIndex,
          row: row,
          rowIndex: rowIndex,
          record: record
        };

        if (func === "title") {
          cellContent = customRender(h, {
            col: col,
            colIndex: colIndex,
            type: type
          });
        } else if (func === "cell") {
          cellContent = customRender(h, baseData);
        } else if (func === "render") {
          cellContent = customRender(h, _objectSpread$p({
            type: type
          }, baseData));
        }
      } else {
        cellContent = this.$createElement(title || "");
      }

      var tdAttrs = {
        attrs: _objectSpread$p(_objectSpread$p({}, attrs), {}, {
          "class": [].concat(fixedClass, _toConsumableArray(attrClass)).filter(function (notEmpty) {
            return notEmpty;
          }).join(" "),
          key: colKey
        }),
        style: style,
        on: {
          click: function click(e) {
            emitEvent(_this2, "cell-click", {
              col: col,
              colIndex: colIndex,
              row: row,
              rowIndex: rowIndex,
              e: e
            });
          }
        }
      };
      var newCellContent = cellContent;

      if (ellipsis && this.isCutOff) {
        var popupCellContent = cellContent;

        if (typeof ellipsis === "function") {
          popupCellContent = ellipsis(h, {
            row: row,
            col: col,
            rowIndex: rowIndex,
            colIndex: colIndex
          });
        }

        this.$nextTick(function () {
          var _cellContent;

          if ((_cellContent = cellContent) !== null && _cellContent !== void 0 && _cellContent.elm) {
            var _elm$classList, _elm$classList$remove, _elm$classList2, _elm$classList2$add;

            var elm = cellContent.elm;
            (_elm$classList = elm.classList) === null || _elm$classList === void 0 ? void 0 : (_elm$classList$remove = _elm$classList.remove) === null || _elm$classList$remove === void 0 ? void 0 : _elm$classList$remove.call(_elm$classList, ELLIPSIS_CLASS_NAME);
            (_elm$classList2 = elm.classList) === null || _elm$classList2 === void 0 ? void 0 : (_elm$classList2$add = _elm$classList2.add) === null || _elm$classList2$add === void 0 ? void 0 : _elm$classList2$add.call(_elm$classList2, ELLIPSIS_CLASS_NAME);
          }
        });
        newCellContent = h(Popup, {
          "style": "display: inline;",
          "attrs": {
            "overlayStyle": overlayStyle,
            "placement": "bottom-left",
            "showArrow": false,
            "content": function content() {
              return popupCellContent;
            }
          }
        }, [cellContent]);
      }

      return h("td", helper([{}, tdAttrs]), [newCellContent]);
    },
    mounted: function mounted() {
      this.init();
    },
    updated: function updated() {
      this.init();
    }
  });

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var eventsName = {
    mouseover: "row-hover",
    mouseleave: "row-mouseleave",
    mouseenter: "row-mouseenter",
    mousedown: "row-mousedown",
    mouseup: "row-mouseup",
    click: "row-click",
    dblclick: "row-db-click",
    dragstart: "row-dragstart",
    dragover: "row-dragover"
  };
  var TableRow = Vue__default["default"].extend({
    name: "".concat(prefix, "-table-row"),
    props: {
      rowClass: baseTableProps.rowClassName,
      columns: baseTableProps.columns,
      rowKey: baseTableProps.rowKey,
      rowspanAndColspanProps: {
        type: Object,
        required: false
      },
      rowData: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      index: {
        type: Number,
        "default": -1
      },
      current: {
        type: Number,
        "default": 1
      },
      onCellClick: baseTableProps.onCellClick,
      provider: {
        type: Object,
        "default": function _default() {
          return {
            sortOnRowDraggable: false
          };
        }
      }
    },
    methods: {
      renderRow: function renderRow() {
        var _this = this;

        var h = this.$createElement;
        var rowData = this.rowData,
            columns = this.columns,
            rowIndex = this.index,
            rowspanAndColspanProps = this.rowspanAndColspanProps;
        var rowBody = [];
        var flag = true;
        columns.forEach(function (column, index) {
          var customData = {
            type: "cell",
            func: "cell"
          };
          var render = column.render,
              cell = column.cell,
              scopedSlots = column.scopedSlots;
          var scopedSlotsCol = scopedSlots === null || scopedSlots === void 0 ? void 0 : scopedSlots.col;
          var colKey = column.colKey;
          var customRender;

          if (typeof _this.$scopedSlots[scopedSlotsCol] === "function") {
            customRender = function customRender(h, params) {
              return _this.$scopedSlots[scopedSlotsCol](params);
            };

            console.warn("TDesign Table Warn: scopedSlots will be deprecated, please use `cell` and `title` instead.");
          } else if (typeof cell === "function") {
            customRender = cell;
          } else if (typeof cell === "string" && typeof _this.$scopedSlots[cell] === "function") {
            customRender = function customRender(h, params) {
              return _this.$scopedSlots[cell](params);
            };
          } else if (typeof _this.$scopedSlots[colKey] === "function") {
            customRender = function customRender(h, params) {
              return _this.$scopedSlots[colKey](params);
            };
          } else if (typeof render === "function") {
            customRender = render;
            customData.func = "render";
          } else {
            customRender = function customRender() {
              return get_1(rowData, colKey);
            };
          }

          var attrs = column.attrs || {};

          if (colKey !== "expanded-row" && rowspanAndColspanProps !== null && rowspanAndColspanProps !== void 0 && rowspanAndColspanProps[colKey]) {
            var colspan = 1;
            var rowspan = 1;

            if (rowspanAndColspanProps[colKey]) {
              rowspan = rowspanAndColspanProps[colKey].rowspan || rowspan;
              colspan = rowspanAndColspanProps[colKey].colspan || colspan;
            }

            attrs.colspan = colspan;
            attrs.rowspan = rowspan;

            if (colspan === -1 || rowspan === -1) {
              return;
            }
          }

          var withBorder;
          var withoutBorder;

          if (index > rowBody.length && rowIndex > 0) {
            var _columns;

            if ((_columns = columns[index - 1]) !== null && _columns !== void 0 && _columns.fixed && rowBody.length === 0) {
              withoutBorder = true;
            } else if (flag) {
              withBorder = true;
              flag = false;
            }
          }

          var cellData = {
            col: _objectSpread$o(_objectSpread$o({}, column), {}, {
              attrs: attrs
            }),
            withBorder: withBorder,
            withoutBorder: withoutBorder,
            colIndex: index,
            row: rowData,
            rowIndex: rowIndex,
            customData: customData,
            customRender: customRender,
            type: "td"
          };
          var on = {
            "cell-click": function cellClick(p) {
              emitEvent(_this, "cell-click", p);
            }
          };
          rowBody.push(h(TableCell, helper([{}, {
            "on": on
          }, {
            "attrs": {
              "cellData": cellData,
              "length": columns.length
            }
          }])));
        });
        return rowBody;
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      var rowClass = this.rowClass,
          $attrs = this.$attrs,
          rowData = this.rowData,
          index = this.index,
          rowKey = this.rowKey,
          current = this.current;
      var params = {
        row: rowData,
        index: index
      };

      var on = _objectSpread$o({}, this.$listeners);

      Object.keys(eventsName).forEach(function (event) {
        var emitEventName = eventsName[event];

        on[event] = function (e) {
          emitEvent(_this2, emitEventName, _objectSpread$o(_objectSpread$o({}, params), {}, {
            e: e
          }));
        };
      });
      var trProps = {
        attrs: _objectSpread$o(_objectSpread$o({}, $attrs), {}, {
          "class": rowClass,
          key: rowKey ? get_1(rowData, rowKey) : index + current
        }),
        on: on
      };

      if (this.provider.sortOnRowDraggable) {
        trProps.attrs.draggable = true;
      }

      return h("tr", helper([{}, trProps]), [this.renderRow()]);
    }
  });

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var setPropsValue = function setPropsValue(propsArray, rowIndex, key, value) {
    if (typeof propsArray[rowIndex] === "undefined") {
      propsArray[rowIndex] = _defineProperty$2({}, key, {});
    }

    if (typeof propsArray[rowIndex][key] === "undefined") {
      propsArray[rowIndex][key] = {};
    }

    propsArray[rowIndex][key] = value;
  };

  var TableBody = Vue__default["default"].extend({
    name: "".concat(prefix, "-table-body"),
    props: {
      data: baseTableProps.data,
      columns: baseTableProps.columns,
      rowClassName: baseTableProps.rowClassName,
      rowKey: baseTableProps.rowKey,
      rowspanAndColspan: baseTableProps.rowspanAndColspan,
      firstFullRow: baseTableProps.firstFullRow,
      lastFullRow: baseTableProps.lastFullRow,
      onCellClick: baseTableProps.onCellClick,
      onRowHover: baseTableProps.onRowHover,
      onRowMouseup: baseTableProps.onRowMouseup,
      onRowMousedown: baseTableProps.onRowMousedown,
      onRowClick: baseTableProps.onRowClick,
      onRowDbClick: baseTableProps.onRowDbClick,
      selectedRowKeys: primaryTableProps.selectedRowKeys,
      provider: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      current: {
        type: Number,
        "default": 1
      }
    },
    computed: {
      selectColumn: function selectColumn() {
        return this.columns.find(function (_ref) {
          var type = _ref.type;
          return ["multiple", "single"].includes(type);
        }) || {};
      }
    },
    methods: {
      getRowspanAndColspanProps: function getRowspanAndColspanProps() {
        var props = [];
        var data = this.data,
            columns = this.columns,
            rowspanAndColspan = this.rowspanAndColspan;
        data.forEach(function (rowData, rowIndex) {
          if (props[rowIndex] === void 0) {
            props[rowIndex] = {};
          }

          columns.forEach(function (col, colIndex) {
            var _props$rowIndex;

            var colKey = col.colKey;

            if ((_props$rowIndex = props[rowIndex]) !== null && _props$rowIndex !== void 0 && _props$rowIndex[colKey]) {
              return;
            }

            var _ref2 = rowspanAndColspan({
              col: col,
              colIndex: colIndex,
              row: rowData,
              rowIndex: rowIndex
            }) || {},
                rowspan = _ref2.rowspan,
                colspan = _ref2.colspan;

            rowspan = rowspan || 1;
            colspan = colspan || 1;

            if (rowspan > 1 || colspan > 1) {
              var occupiedRow = 0;

              while (occupiedRow < rowspan) {
                var occupiedCol = 1;

                while (occupiedCol < colspan) {
                  var _columns$curColIndex;

                  var curColIndex = colIndex + occupiedCol;
                  var nextColKey = (_columns$curColIndex = columns[curColIndex]) === null || _columns$curColIndex === void 0 ? void 0 : _columns$curColIndex.colKey;
                  setPropsValue(props, rowIndex + occupiedRow, nextColKey, {
                    colspan: -1
                  });
                  occupiedCol += 1;
                }

                if (occupiedRow > 0) {
                  setPropsValue(props, rowIndex + occupiedRow, colKey, {
                    rowspan: -1
                  });
                }

                occupiedRow += 1;
              }
            }

            props[rowIndex][colKey] = {
              rowspan: rowspan,
              colspan: colspan
            };
          });
        });
        return props;
      },
      renderFullRow: function renderFullRow(type) {
        var h = this.$createElement;
        var fullRowNode = renderTNodeJSX(this, camelCase_1(type));

        if (fullRowNode) {
          return h("tr", [h("td", {
            "attrs": {
              "colspan": this.columns.length
            },
            "class": "".concat(prefix, "-table__row--full ").concat(prefix, "-table__row-").concat(type)
          }, [fullRowNode])]);
        }

        return null;
      },
      renderBody: function renderBody() {
        var _this = this;

        var h = this.$createElement;
        var data = this.data,
            rowClassName = this.rowClassName,
            rowKey = this.rowKey,
            scopedSlots = this.$scopedSlots,
            rowspanAndColspan = this.rowspanAndColspan,
            selectedRowKeys = this.selectedRowKeys,
            selectColumn = this.selectColumn;
        var body = [];
        var allRowspanAndColspanProps;

        if (typeof rowspanAndColspan === "function") {
          allRowspanAndColspanProps = this.getRowspanAndColspanProps();
        }

        data.forEach(function (row, index) {
          var _row$__t_table_inner_, _this$provider$render, _this$provider;

          var defaultRowClass = typeof rowClassName === "function" ? rowClassName({
            row: row,
            rowIndex: index
          }) : rowClassName;
          var rowClass = [];

          if (defaultRowClass) {
            rowClass = rowClass.concat(defaultRowClass);
          }

          var rowspanAndColspanProps = allRowspanAndColspanProps ? allRowspanAndColspanProps[index] : void 0;
          var rowVnode;
          var key = rowKey ? get_1(row, rowKey) : index + _this.current;
          var disabled = typeof selectColumn.disabled === "function" ? selectColumn.disabled({
            row: row,
            rowIndex: index
          }) : selectColumn.disabled;

          if (disabled) {
            rowClass.push("".concat(prefix, "-table__row--disabled"));
          }

          if ((selectedRowKeys === null || selectedRowKeys === void 0 ? void 0 : selectedRowKeys.indexOf(key)) > -1) {
            rowClass.push("".concat(prefix, "-table__row--selected"));
          }

          if ((_row$__t_table_inner_ = row.__t_table_inner_data__) !== null && _row$__t_table_inner_ !== void 0 && _row$__t_table_inner_.level) {
            var _row$__t_table_inner_2;

            rowClass.push("".concat(prefix, "-table__row--level-").concat(((_row$__t_table_inner_2 = row.__t_table_inner_data__) === null || _row$__t_table_inner_2 === void 0 ? void 0 : _row$__t_table_inner_2.level) || 0));
          }

          var props = {
            key: key,
            props: _objectSpread$n(_objectSpread$n({}, _this.$props), {}, {
              rowClass: rowClass.join(" "),
              rowData: row,
              index: index,
              rowspanAndColspanProps: rowspanAndColspanProps
            }),
            on: _objectSpread$n(_objectSpread$n({}, _this.$listeners), {}, {
              "row-dragstart": function rowDragstart() {
                emitEvent(_this, "row-dragstart", {
                  index: index,
                  row: row
                });
              },
              "row-dragover": function rowDragover(_ref3) {
                var e = _ref3.e;
                e.preventDefault();
                emitEvent(_this, "row-dragover", {
                  index: index,
                  row: row,
                  targetElm: rowVnode.elm
                });
              }
            }),
            scopedSlots: scopedSlots
          };
          rowVnode = h(TableRow, helper([{
            "attrs": {
              "rowKey": _this.rowKey
            }
          }, props]));
          body.push(rowVnode);
          var expandedRow = (_this$provider$render = (_this$provider = _this.provider).renderExpandedRow) === null || _this$provider$render === void 0 ? void 0 : _this$provider$render.call(_this$provider, {
            row: row,
            index: index
          });
          expandedRow && (body = body.concat(expandedRow));
        });
        var firstRow = this.renderFullRow("first-full-row");

        if (firstRow) {
          body = [firstRow].concat(body);
        }

        var lastRow = this.renderFullRow("last-full-row");

        if (lastRow) {
          body = body.concat(lastRow);
        }

        return body;
      }
    },
    render: function render() {
      var h = arguments[0];

      if (this.provider.sortOnRowDraggable) {
        var className = "".concat(prefix, "-table__body ").concat(this.provider.dragging ? "".concat(prefix, "-table__body--dragging") : "");
        return h("transition-group", {
          "class": className,
          "attrs": {
            "tag": "tbody"
          }
        }, [this.renderBody()]);
      }

      return h("tbody", {
        "class": "".concat(prefix, "-table__body")
      }, [this.renderBody()]);
    }
  });

  var TableHeader = Vue__default["default"].extend({
    name: "".concat(prefix, "-table-header"),
    props: {
      columns: baseTableProps.columns,
      bordered: baseTableProps.bordered
    },
    data: function data() {
      return {
        cacheRowMaxRowspan: []
      };
    },
    methods: {
      renderHeader: function renderHeader() {
        var _this = this;

        var h = this.$createElement;
        var bordered = this.bordered,
            cacheRowMaxRowspan = this.cacheRowMaxRowspan;
        var trPropsList = [];
        this.renderTr(this.columns, 0, trPropsList, true);
        return trPropsList.map(function (thPropsList, rowindex) {
          var currentRowMaxRowspan = cacheRowMaxRowspan[rowindex] || 1;
          return h("tr", [thPropsList.map(function (_ref) {
            var column = _ref.column,
                rowspan = _ref.rowspan,
                colspan = _ref.colspan,
                index = _ref.index,
                hasChildren = _ref.hasChildren,
                isFirstColumn = _ref.isFirstColumn;
            var withBorder = bordered && index === 0 && !isFirstColumn;
            return _this.renderCell(column, hasChildren ? rowspan : currentRowMaxRowspan, colspan, index, withBorder);
          })]);
        });
      },
      renderTr: function renderTr(columns, currentRowIndex, trPropsList, isParentFirstColumn) {
        var _this2 = this,
            _trPropsList$currentR;

        var cacheRowMaxRowspan = this.cacheRowMaxRowspan;
        var currentRowThProps = [];

        if (typeof trPropsList[currentRowIndex] === "undefined") {
          trPropsList[currentRowIndex] = [];
        }

        if (typeof cacheRowMaxRowspan[currentRowIndex] === "undefined") {
          cacheRowMaxRowspan[currentRowIndex] = 1;
        }

        var colspan = 0;
        var rowspan = 1;
        columns.forEach(function (column, index) {
          var children = column.children;

          if (children !== null && children !== void 0 && children.length) {
            var isFirstColumn = isParentFirstColumn && index === 0;

            var _this2$renderTr = _this2.renderTr(children, currentRowIndex + 1, trPropsList, isFirstColumn),
                occupiedCol = _this2$renderTr.colspan,
                occupiedRow = _this2$renderTr.rowspan;

            colspan += occupiedCol;
            rowspan += occupiedRow;
            cacheRowMaxRowspan[currentRowIndex] = Math.max(rowspan, cacheRowMaxRowspan[currentRowIndex]);
            currentRowThProps[index] = {
              rowspan: 1,
              colspan: occupiedCol,
              column: column,
              index: index,
              hasChildren: true,
              isFirstColumn: index === 0 && isParentFirstColumn
            };
          }
        });
        columns.forEach(function (column, index) {
          var children = column.children;

          if (!children || (children === null || children === void 0 ? void 0 : children.length) === 0) {
            currentRowThProps[index] = {
              rowspan: rowspan,
              colspan: 1,
              column: column,
              index: index,
              hasChildren: false,
              isFirstColumn: index === 0 && isParentFirstColumn
            };
            colspan += 1;
          }
        });

        (_trPropsList$currentR = trPropsList[currentRowIndex]).push.apply(_trPropsList$currentR, currentRowThProps);

        return {
          colspan: colspan,
          rowspan: rowspan
        };
      },
      renderCell: function renderCell(column, rowspan, colspan, index, withBorder) {
        var _this3 = this;

        var h = this.$createElement;
        var title = column.title,
            render = column.render,
            scopedSlots = column.scopedSlots;
        var scopedSlotsTitle = scopedSlots === null || scopedSlots === void 0 ? void 0 : scopedSlots.title;
        var customData = {
          type: "title",
          func: "title"
        };
        var customRender;

        if (typeof this.$scopedSlots[scopedSlotsTitle] === "function") {
          customRender = this.$scopedSlots[scopedSlotsTitle];
          console.error("TDesign Table Warn: scopedSlots will be deprecated, please use `cell` and `title` instead.");
        } else if (typeof title === "string") {
          if (typeof this.$scopedSlots[title] === "function") {
            customRender = function customRender(params) {
              return _this3.$scopedSlots[title](params);
            };
          } else {
            customRender = function customRender() {
              return title;
            };
          }
        } else if (typeof title === "function") {
          customRender = function customRender(h, params) {
            return title(h, {
              colIndex: params.colIndex,
              col: params.col
            });
          };
        } else if (typeof render === "function") {
          customRender = render;
          customData.func = "render";
        } else {
          customRender = function customRender() {
            return "";
          };
        }

        var cellData = {
          col: column,
          colIndex: index,
          customData: customData,
          customRender: customRender,
          type: "th",
          withBorder: withBorder
        };
        return h(TableCell, {
          "attrs": {
            "cellData": cellData,
            "colspan": colspan,
            "rowspan": rowspan
          }
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("thead", [this.renderHeader()]);
    }
  });

  var TableColGroup = Vue__default["default"].extend({
    name: "".concat(prefix, "-table-col-group"),
    props: {
      columns: {
        type: Array,
        "default": function _default() {
          return [];
        }
      }
    },
    methods: {
      renderColgroup: function renderColgroup() {
        var h = this.$createElement;
        var columns = this.columns;
        var colgroup = [];
        columns.forEach(function (column) {
          var width = column.width,
              minWidth = column.minWidth,
              colKey = column.colKey;
          var style = {};

          if (width) {
            style.width = isNaN(width) ? width : "".concat(width, "px");
          }

          if (minWidth) {
            if (!width) {
              style.width = "".concat(minWidth, "px");
            }

            style.minWidth = "".concat(minWidth, "px");
          }

          colgroup.push(h("col", {
            "key": colKey,
            "style": style
          }));
        });
        return colgroup;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("colgroup", [this.renderColgroup()]);
    }
  });

  var EventNameWithKebab = ["row-hover", "row-mouseenter", "row-mouseleave", "row-mouseup", "row-mousedown", "row-click", "row-db-click"];
  var ExpandProps = {
    expandedRowKeys: primaryTableProps.expandedRowKeys,
    expandedRow: primaryTableProps.expandedRow,
    expandIcon: primaryTableProps.expandIcon,
    expandOnRowClick: primaryTableProps.expandOnRowClick
  };

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _BaseTable = mixins(getConfigReceiverMixins("table")).extend({
    name: "TBaseTable",
    model: {
      prop: "value",
      event: "change"
    },
    props: _objectSpread$m(_objectSpread$m({}, baseTableProps), {}, {
      selectedRowKeys: primaryTableProps.selectedRowKeys,
      provider: {
        type: Object,
        "default": function _default() {
          return {};
        }
      }
    }),
    data: function data() {
      return {
        scrollableToLeft: false,
        scrollableToRight: false,
        scrollBarWidth: 0,
        defaultCurrent: 0,
        defaultPageSize: 0,
        useFixedHeader: false
      };
    },
    computed: {
      current: function current() {
        var _this$pagination, _this$pagination2;

        return ((_this$pagination = this.pagination) === null || _this$pagination === void 0 ? void 0 : _this$pagination.current) || this.defaultCurrent || ((_this$pagination2 = this.pagination) === null || _this$pagination2 === void 0 ? void 0 : _this$pagination2.defaultCurrent);
      },
      pageSize: function pageSize() {
        var _this$pagination3, _this$pagination4;

        return ((_this$pagination3 = this.pagination) === null || _this$pagination3 === void 0 ? void 0 : _this$pagination3.pageSize) || this.defaultPageSize || ((_this$pagination4 = this.pagination) === null || _this$pagination4 === void 0 ? void 0 : _this$pagination4.defaultPageSize);
      },
      dataSource: function dataSource() {
        if (!this.hasPagination) return this.data.slice(0);
        var current = this.current,
            pageSize = this.pageSize;

        if (this.data.length > pageSize && !this.disableDataSort) {
          return this.data.slice((current - 1) * pageSize, current * pageSize);
        }

        return this.data;
      },
      flattedColumns: function flattedColumns() {
        return flatColumns(this.columns);
      },
      isEmpty: function isEmpty() {
        return (!this.dataSource || this.dataSource.length === 0) && !this.loading;
      },
      hasFixedColumns: function hasFixedColumns() {
        var columns = this.columns;
        return columns.some(function (item) {
          return item.fixed === "right" || item.fixed === "left";
        });
      },
      hasPagination: function hasPagination() {
        return !!this.pagination;
      },
      isLoading: function isLoading() {
        return !!this.loading;
      },
      tableHeight: function tableHeight() {
        var height = this.height,
            maxHeight = this.maxHeight,
            useFixedHeader = this.useFixedHeader,
            isEmpty = this.isEmpty;

        if (isEmpty) {
          return "auto";
        }

        if (height !== "auto" && height) {
          return height;
        }

        if (maxHeight && useFixedHeader) {
          return maxHeight;
        }

        return "auto";
      },
      fixedHeader: function fixedHeader() {
        var tableHeight = this.tableHeight;
        return tableHeight !== "auto";
      },
      commonClass: function commonClass() {
        var _ref;

        var classes = ["".concat(prefix, "-table"), (_ref = {}, _defineProperty$2(_ref, SIZE_CLASSNAMES.small, this.size === "small"), _defineProperty$2(_ref, SIZE_CLASSNAMES.large, this.size === "large"), _defineProperty$2(_ref, "".concat(prefix, "-table--bordered"), this.bordered), _defineProperty$2(_ref, "".concat(prefix, "-table--striped"), this.stripe), _defineProperty$2(_ref, "".concat(prefix, "-table--hoverable"), this.hover), _defineProperty$2(_ref, "".concat(prefix, "-table__row--draggable"), this.provider.sortOnRowDraggable), _defineProperty$2(_ref, "".concat(prefix, "-table-table--align-top"), this.verticalAlign === "top"), _defineProperty$2(_ref, "".concat(prefix, "-table-table--align-bottom"), this.verticalAlign === "bottom"), _defineProperty$2(_ref, "".concat(prefix, "-table__cell--fixed"), this.hasFixedColumns), _defineProperty$2(_ref, "".concat(prefix, "-table--has-fixed"), this.hasFixedColumns), _defineProperty$2(_ref, "".concat(prefix, "-table__header--fixed"), this.fixedHeader), _ref)];
        return classes;
      },
      usePadding: function usePadding() {
        return this.fixedHeader || this.scrollableToRight || this.scrollableToLeft;
      }
    },
    methods: {
      checkScrollableToLeftOrRight: function checkScrollableToLeftOrRight() {
        var scrollContainer = this.$refs[this.fixedHeader ? "scrollBody" : "tableContent"];
        if (!scrollContainer) return;
        var scrollLeft = scrollContainer.scrollLeft,
            scrollWidth = scrollContainer.scrollWidth,
            clientWidth = scrollContainer.clientWidth;
        this.scrollableToLeft = scrollLeft > 0;
        this.scrollableToRight = scrollLeft + clientWidth < scrollWidth;
      },
      addWindowResizeEventListener: function addWindowResizeEventListener() {
        var checkScrollableToLeftOrRight = debounce(this.checkScrollableToLeftOrRight);
        window.addEventListener("resize", checkScrollableToLeftOrRight);
        this.$once("hook:beforeDestroy", function () {
          return window.removeEventListener("resize", checkScrollableToLeftOrRight);
        });
      },
      renderHeader: function renderHeader() {
        var h = this.$createElement;
        var columns = this.columns,
            scopedSlots = this.$scopedSlots,
            bordered = this.bordered;
        return h(TableHeader, {
          "scopedSlots": scopedSlots,
          "attrs": {
            "columns": columns,
            "bordered": bordered
          }
        });
      },
      registerRowEvents: function registerRowEvents() {
        var _this = this;

        var events = {};
        EventNameWithKebab.forEach(function (eventName) {
          events[eventName] = function (params) {
            emitEvent(_this, eventName, params);
          };
        });
        return events;
      },
      renderBody: function renderBody() {
        var h = this.$createElement;
        var listener = this.$listeners,
            scopedSlots = this.$scopedSlots;
        var rowEvents = this.registerRowEvents();
        var props = {
          props: _objectSpread$m(_objectSpread$m({}, this.$props), {}, {
            rowKey: this.rowKey,
            data: this.dataSource,
            provider: this.provider,
            columns: this.flattedColumns,
            rowClassName: this.rowClassName,
            current: this.current,
            selectedRowKeys: this.selectedRowKeys,
            rowspanAndColspan: this.rowspanAndColspan,
            firstFullRow: this.firstFullRow,
            lastFullRow: this.lastFullRow
          }),
          scopedSlots: scopedSlots,
          on: _objectSpread$m(_objectSpread$m({}, listener), rowEvents)
        };
        return h(TableBody, helper([{}, props]));
      },
      renderEmptyTable: function renderEmptyTable() {
        var h = this.$createElement;
        if (this.empty === null) return null;
        var useLocale = !this.empty && !this.$scopedSlots.empty;
        var height = this.height;
        var wrapperStyle = {};

        if (height !== "auto") {
          wrapperStyle.height = isNaN(Number(height)) ? height : "".concat(height, "px");
        }

        return h("div", {
          "style": wrapperStyle,
          "class": "".concat(prefix, "-table__empty")
        }, [useLocale ? this.global.empty : renderTNodeJSX(this, "empty")]);
      },
      renderPagination: function renderPagination() {
        var _this2 = this;

        var h = this.$createElement;
        var paginationProps = this.pagination;
        return h("div", {
          "class": "".concat(prefix, "-table__pagination")
        }, [h(Pagination, helper([{}, {
          "props": _objectSpread$m({}, paginationProps)
        }, {
          "on": _objectSpread$m({}, {
            change: function change(pageInfo) {
              var current = pageInfo.current,
                  pageSize = pageInfo.pageSize;
              emitEvent(_this2, "page-change", pageInfo, _this2.dataSource);
              _this2.defaultCurrent = current;
              _this2.defaultPageSize = pageSize;
            }
          })
        }]))]);
      },
      renderTableWithFixedHeader: function renderTableWithFixedHeader() {
        var _this3 = this;

        var h = this.$createElement;
        var fixedTable = [];
        var columns = this.columns,
            asyncLoadingProps = this.provider.asyncLoadingProps,
            tableLayout = this.tableLayout,
            scrollBarWidth = this.scrollBarWidth,
            hasFixedColumns = this.hasFixedColumns,
            tableHeight = this.tableHeight,
            usePadding = this.usePadding;
        var handleScroll = throttle_1(function (e) {
          var target = e.target;
          var scrollLeft = target.scrollLeft;
          _this3.$refs.scrollHeader.scrollLeft = scrollLeft;

          _this3.handleScroll(e);
        }, 10);
        var paddingRight = "".concat(scrollBarWidth, "px");
        var headerContainerStyle = columns.length > 1 && usePadding ? {
          paddingRight: paddingRight
        } : {};
        fixedTable.push(h("div", {
          "class": "".concat(prefix, "-table__header"),
          "style": headerContainerStyle,
          "ref": "scrollHeader"
        }, [h("table", {
          "style": {
            tableLayout: tableLayout
          }
        }, [h(TableColGroup, {
          "attrs": {
            "columns": columns
          }
        }), this.renderHeader()])]));
        var containerStyle = {
          height: isNaN(Number(tableHeight)) ? tableHeight : "".concat(Number(tableHeight), "px"),
          width: hasFixedColumns ? "100%" : void 0
        };
        fixedTable.push(h("div", helper([{
          "class": "".concat(prefix, "-table__body"),
          "style": containerStyle
        }, asyncLoadingProps, {
          "ref": "scrollBody",
          "on": {
            "scroll": handleScroll
          }
        }]), [h("table", {
          "ref": "table",
          "style": {
            tableLayout: tableLayout
          }
        }, [h(TableColGroup, {
          "attrs": {
            "columns": columns
          }
        }), this.renderBody(), this.renderFooter()])]));
        return fixedTable;
      },
      renderLoadingContent: function renderLoadingContent() {
        var h = this.$createElement;
        return renderTNodeJSX(this, "loading", {
          defaultNode: h("div")
        });
      },
      renderFooter: function renderFooter() {
        var h = this.$createElement;
        var colspan = this.flattedColumns.length;
        var footerContent = renderTNodeJSX(this, "footer");
        return footerContent ? h("tfoot", [h("tr", [h("td", {
          "attrs": {
            "colspan": colspan
          }
        }, [footerContent])])]) : null;
      },
      handleScroll: function handleScroll(e) {
        this.checkScrollableToLeftOrRight();
        var _e$target = e.target,
            scrollLeft = _e$target.scrollLeft,
            scrollTop = _e$target.scrollTop;
        var direction = getScrollDirection(scrollLeft, scrollTop);

        if (direction !== SCROLL_DIRECTION.UNKNOWN) {
          var scrollListenerName = direction === SCROLL_DIRECTION.X ? "scroll-x" : "scroll-y";
          var scrollParams = {
            e: e
          };
          emitEvent(this, scrollListenerName, scrollParams);
        }
      },
      checkMaxHeight: function checkMaxHeight() {
        var maxHeight = this.maxHeight;

        if (maxHeight && this.$refs.tableContent.clientHeight > maxHeight) {
          this.useFixedHeader = true;
        }
      }
    },
    render: function render() {
      var _ref2;

      var h = arguments[0];
      var hasPagination = this.hasPagination,
          commonClass = this.commonClass,
          fixedHeader = this.fixedHeader,
          columns = this.columns,
          tableLayout = this.tableLayout,
          isLoading = this.isLoading,
          isEmpty = this.isEmpty,
          useFixedHeader = this.useFixedHeader,
          hasFixedColumns = this.hasFixedColumns;
      var body = [];
      var tableColGroup = h(TableColGroup, {
        "attrs": {
          "columns": columns
        }
      });
      var tableHeader = this.renderHeader();
      var tableContent = [tableColGroup, tableHeader];
      var fixedTableContent;

      if (fixedHeader || useFixedHeader) {
        fixedTableContent = this.renderTableWithFixedHeader();
      } else {
        tableContent.push(this.renderBody());
        tableContent.push(this.renderFooter());
      }

      if (isEmpty) {
        var empty = this.renderEmptyTable();
        empty && body.push(empty);
      }

      if (hasPagination) {
        body.push(this.renderPagination());
      }

      var handleScroll = throttle_1(this.handleScroll, 100);
      var tableContentClass = ["".concat(prefix, "-table__content"), (_ref2 = {}, _defineProperty$2(_ref2, "".concat(prefix, "-table__content--scrollable-to-right"), this.scrollableToRight), _defineProperty$2(_ref2, "".concat(prefix, "-table__content--scrollable-to-left"), this.scrollableToLeft), _ref2)];
      var width;
      var _this$$refs = this.$refs,
          tableContentEl = _this$$refs.tableContent,
          tableEl = _this$$refs.table;

      if (!hasFixedColumns && tableContentEl && tableContentEl.clientWidth < tableEl.clientWidth) {
        width = "".concat(tableEl.clientWidth, "px");
      }

      return h("div", {
        "class": commonClass,
        "style": {
          width: width
        }
      }, [renderTNodeJSX(this, "topContent"), h(Loading, {
        "attrs": {
          "loading": isLoading,
          "showOverlay": true,
          "text": this.renderLoadingContent
        }
      }, [h("div", {
        "ref": "tableContent",
        "class": tableContentClass,
        "on": {
          "scroll": handleScroll
        }
      }, [fixedTableContent || h("table", {
        "ref": "table",
        "style": {
          tableLayout: tableLayout
        }
      }, [tableContent])]), body])]);
    },
    updated: function updated() {
      this.checkMaxHeight();
    },
    mounted: function mounted() {
      var _this4 = this;

      if (this.hasFixedColumns) {
        var timer = setTimeout(function () {
          _this4.checkScrollableToLeftOrRight();

          clearTimeout(timer);
          timer = null;
        }, 0);
        this.addWindowResizeEventListener();
      }

      var scrollDiv = document.createElement("div");
      scrollDiv.style.cssText = "\n      width: 99px;\n      height: 99px;\n      overflow: scroll;\n      position: absolute;\n      top: -9999px;";
      scrollDiv.classList.add("scrollbar");
      document.body.appendChild(scrollDiv);
      this.scrollBarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      this.checkMaxHeight();
    }
  });

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ExpandBox = mixins(getConfigReceiverMixins("table")).extend({
    name: "".concat(prefix, "-expand-box"),
    props: {
      expanded: {
        type: Boolean,
        "default": false
      },
      row: {
        type: Object
      },
      rowIndex: {
        type: Number
      },
      expandIcon: primaryTableProps.expandIcon
    },
    methods: {
      getDefaultIcon: function getDefaultIcon() {
        var h = this.$createElement;
        return isFunction_1(this.global.expandIcon) ? this.global.expandIcon(this.$createElement) : h(ChevronRightCircle);
      },
      getExpandIcon: function getExpandIcon(expanded) {
        var h = this.$createElement;
        var icon = isFunction_1(this.expandIcon) ? this.expandIcon(this.$createElement, {
          row: this.row,
          index: this.rowIndex
        }) : this.getDefaultIcon();
        var style = {
          transition: "all .2s",
          display: "inline-block",
          "align-items": "center"
        };

        if (expanded) {
          style.transform = "rotate(90deg)";
        }

        if (!icon) return false;
        return h("span", {
          "style": style
        }, [icon]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var expanded = this.expanded,
          $listeners = this.$listeners;
      var buttonProps = {
        on: _objectSpread$l({}, $listeners)
      };
      var icon = this.getExpandIcon(expanded);
      if (!icon) return null;
      return h("span", helper([{}, buttonProps, {
        "class": "".concat(prefix, "-table__expand-box")
      }]), [icon]);
    }
  });

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var expandedColKey = "expanded-icon-cell";
  var expand = Vue__default["default"].extend({
    name: "".concat(prefix, "-primary-table-expand"),
    props: _objectSpread$k({
      data: baseTableProps.data,
      columns: baseTableProps.columns,
      rowKey: baseTableProps.rowKey
    }, ExpandProps),
    data: function data() {
      return {
        hasExpandedColumn: false
      };
    },
    computed: {
      reRowKey: function reRowKey() {
        return this.rowKey || "id";
      },
      columnLength: function columnLength() {
        var len = this.columns.length;

        if (this.hasExpandedColumn) {
          len += 1;
        }

        return len;
      },
      isFirstColumnFixed: function isFirstColumnFixed() {
        return this.columns[0].fixed === "left";
      }
    },
    methods: {
      getExpandRowHandler: function getExpandRowHandler() {
        var _this = this;

        if (!this.expandedRow && !this.$scopedSlots.expandedRow) return;
        return function (h, params) {
          return renderTNodeJSX(_this, "expandedRow", {
            params: params
          });
        };
      },
      getExpandColumns: function getExpandColumns(columns) {
        var _this2 = this;

        var expandRowHandler = this.getExpandRowHandler();
        var hasExpandedColumn = Boolean(expandRowHandler && this.expandIcon);
        this.hasExpandedColumn = hasExpandedColumn;
        if (!hasExpandedColumn) return columns;
        return [{
          colKey: expandedColKey,
          width: 48,
          attrs: {
            "class": ["".concat(prefix, "-table__expandable-icon-cell")],
            style: {
              overflow: "auto"
            }
          },
          fixed: this.isFirstColumnFixed ? "left" : void 0,
          cell: function cell(h, _ref) {
            var row = _ref.row,
                rowIndex = _ref.rowIndex;
            return _this2.renderExpandIconCell({
              row: row,
              rowIndex: rowIndex
            });
          }
        }].concat(_toConsumableArray(columns));
      },
      renderExpandIconCell: function renderExpandIconCell(_ref2) {
        var _this3 = this;

        var row = _ref2.row,
            rowIndex = _ref2.rowIndex;
        var h = this.$createElement;
        var _this$expandedRowKeys = this.expandedRowKeys,
            expandedRowKeys = _this$expandedRowKeys === void 0 ? [] : _this$expandedRowKeys;
        var id = get_1(row, this.reRowKey);
        var isExpanded = expandedRowKeys.indexOf(id) !== -1;
        return h(ExpandBox, {
          "attrs": {
            "expandIcon": this.expandIcon,
            "expanded": isExpanded,
            "row": row,
            "rowIndex": rowIndex
          },
          "on": {
            "click": function click(e) {
              _this3.expandOnRowClick && e.stopPropagation();

              _this3.handleExpandChange(row);
            }
          }
        });
      },
      renderExpandedRow: function renderExpandedRow(params) {
        var h = this.$createElement;
        var id = get_1(params.row, this.reRowKey);
        var isShowExpanded = this.expandedRowKeys.includes(id);

        if (isShowExpanded) {
          return h("tr", {
            "class": "".concat(prefix, "-table__expanded-row")
          }, [h("td", {
            "attrs": {
              "colspan": this.columnLength
            },
            "class": "".concat(prefix, "-table__row--full")
          }, [h("div", {
            "class": "".concat(prefix, "-table__expanded-row-inner")
          }, [renderTNodeJSX(this, "expandedRow", {
            params: params
          })])])]);
        }

        return null;
      },
      handleExpandChange: function handleExpandChange() {
        var record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var expandedRowKeys = _toConsumableArray(this.expandedRowKeys);

        var id = get_1(record, this.reRowKey);
        var expandedRowIndex = expandedRowKeys.indexOf(id);
        var isExpanded = expandedRowIndex !== -1;
        isExpanded ? expandedRowKeys.splice(expandedRowIndex, 1) : expandedRowKeys.push(id);
        emitEvent(this, "expand-change", expandedRowKeys, {
          expandedRowData: filterDataByIds(this.data, expandedRowKeys)
        });
      }
    }
  });

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var inputType = {
    multiple: Checkbox,
    single: Radio
  };
  var SelectBox = Vue__default["default"].extend({
    name: "".concat(prefix, "-select-box"),
    props: {
      checked: {
        type: Boolean,
        "default": false
      },
      indeterminate: {
        type: Boolean,
        "default": false
      },
      type: {
        type: String,
        validator: function validator(value) {
          return ["multiple", "single"].includes(value);
        },
        "default": "multiple"
      },
      checkProps: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      index: {
        type: Number,
        "default": -1
      }
    },
    data: function data() {
      return {};
    },
    render: function render(h) {
      var _this = this;

      var checked = this.checked,
          indeterminate = this.indeterminate,
          type = this.type,
          checkProps = this.checkProps,
          disabled = this.disabled,
          $listeners = this.$listeners;
      return h(inputType[type], {
        props: _objectSpread$j({
          checked: checked
        }, checkProps),
        attrs: {
          style: "display: inline-block",
          indeterminate: indeterminate,
          type: inputType[type],
          disabled: disabled
        },
        on: _objectSpread$j({}, $listeners),
        nativeOn: {
          click: function click(e) {
            _this.$emit("click", e);
          }
        }
      });
    }
  });

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var select = Vue__default["default"].extend({
    name: "".concat(prefix, "-primary-table-select"),
    props: {
      columns: primaryTableProps.columns,
      data: baseTableProps.data,
      rowKey: baseTableProps.rowKey,
      selectedRowKeys: primaryTableProps.selectedRowKeys
    },
    computed: {
      reRowKey: function reRowKey() {
        return this.rowKey || "id";
      },
      selectColumn: function selectColumn() {
        return this.columns.find(function (_ref) {
          var type = _ref.type;
          return ["multiple", "single"].includes(type);
        }) || {};
      },
      canSelectedRows: function canSelectedRows() {
        var _this = this;

        return this.data.filter(function (row, rowIndex) {
          return !_this.isDisabled(row, rowIndex);
        });
      },
      isSelectedAll: function isSelectedAll() {
        var _this2 = this;

        return !!(this.canSelectedRows.length && this.canSelectedRows.every(function (record) {
          return _this2.selectedRowKeys.includes(get_1(record, _this2.reRowKey));
        }));
      },
      isSelectedSome: function isSelectedSome() {
        var _this3 = this;

        return !this.isSelectedAll && this.canSelectedRows.some(function (record) {
          return _this3.selectedRowKeys.includes(get_1(record, _this3.reRowKey));
        });
      }
    },
    methods: {
      isDisabled: function isDisabled(row, rowIndex) {
        return isRowSelectedDisabled(this.selectColumn, row, rowIndex);
      },
      getSelectColumns: function getSelectColumns(columns) {
        var _this4 = this;

        return columns.map(function (c) {
          var isSelection = ["multiple", "single"].includes(c.type);
          var isMultiple = c.type === "multiple";
          var title = isMultiple ? _this4.getSelectedHeader() : "";
          return _objectSpread$i(_objectSpread$i(_objectSpread$i({}, c), isSelection ? {
            render: function render(h, slotProps) {
              return _this4.renderSelectCell(_objectSpread$i({
                column: c
              }, slotProps));
            }
          } : {}), isSelection ? {
            title: title
          } : {});
        });
      },
      getSelectedHeader: function getSelectedHeader() {
        var _this5 = this;

        var h = this.$createElement;
        return function () {
          return h(SelectBox, {
            "attrs": {
              "checked": _this5.isSelectedAll,
              "indeterminate": _this5.isSelectedSome,
              "disabled": !_this5.canSelectedRows.length
            },
            "on": _objectSpread$i({}, {
              change: _this5.handleSelectAll
            })
          });
        };
      },
      renderSelectCell: function renderSelectCell(_ref2) {
        var _this6 = this;

        var _ref2$column = _ref2.column,
            column = _ref2$column === void 0 ? {} : _ref2$column,
            _ref2$row = _ref2.row,
            row = _ref2$row === void 0 ? {} : _ref2$row,
            rowIndex = _ref2.rowIndex;
        var h = this.$createElement;
        var selectBoxProps = {
          props: _objectSpread$i(_objectSpread$i({
            checked: this.selectedRowKeys.includes(get_1(row, this.reRowKey))
          }, column), {}, {
            type: column.type,
            checkProps: typeof column.checkProps === "function" ? column.checkProps({
              row: row,
              rowIndex: rowIndex
            }) : column.checkProps,
            disabled: typeof column.disabled === "function" ? column.disabled({
              row: row,
              rowIndex: rowIndex
            }) : column.disabled,
            rowIndex: rowIndex
          }),
          on: {
            click: function click(e) {
              e === null || e === void 0 ? void 0 : e.stopPropagation();
            },
            change: function change() {
              return _this6.handleSelectChange(row);
            }
          }
        };
        return h(SelectBox, helper([{}, selectBoxProps]));
      },
      handleSelectChange: function handleSelectChange() {
        var record = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var selectedRowKeys = _toConsumableArray(this.selectedRowKeys);

        var reRowKey = this.reRowKey;
        var id = get_1(record, reRowKey);
        var selectedRowIndex = selectedRowKeys.indexOf(id);
        var isSelected = selectedRowIndex !== -1;

        if (this.selectColumn.type === "multiple") {
          isSelected ? selectedRowKeys.splice(selectedRowIndex, 1) : selectedRowKeys.push(id);
        }

        if (this.selectColumn.type === "single") {
          selectedRowKeys = !isSelected ? [id] : [];
        }

        emitEvent(this, "select-change", selectedRowKeys, {
          selectedRowData: filterDataByIds(this.data, selectedRowKeys, reRowKey),
          currentRowKey: id,
          currentRowData: record,
          type: isSelected ? "uncheck" : "check"
        });
      },
      handleSelectAll: function handleSelectAll() {
        var selectedRowKeys = this.selectedRowKeys,
            canSelectedRows = this.canSelectedRows,
            reRowKey = this.reRowKey;
        var canSelectedRowKeys = canSelectedRows.map(function (record) {
          return get_1(record, reRowKey);
        });
        var disabledSelectedRowKeys = selectedRowKeys.filter(function (id) {
          return !canSelectedRowKeys.includes(id);
        });
        var allIds = this.isSelectedAll ? _toConsumableArray(disabledSelectedRowKeys) : [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys));
        emitEvent(this, "select-change", allIds, {
          selectedRowData: filterDataByIds(this.data, allIds, reRowKey),
          type: this.isSelectedAll ? "uncheck" : "check",
          currentRowKey: "CHECK_ALL_BOX"
        });
      }
    }
  });

  function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var tooltips = {
    asc: "\u70B9\u51FB\u5347\u5E8F",
    desc: "\u70B9\u51FB\u964D\u5E8F",
    undefined: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F"
  };
  var SorterButton = mixins(getConfigReceiverMixins("table")).extend({
    name: "".concat(prefix, "-sorter-button"),
    props: {
      sortType: {
        type: String,
        "default": null
      },
      sortOrder: {
        type: String,
        "default": function _default() {
          return "";
        }
      },
      nextSortOrder: {
        type: String,
        required: false
      }
    },
    computed: {
      allowSortTypes: function allowSortTypes() {
        return this.sortType === "all" ? ["asc", "desc"] : [this.sortType];
      }
    },
    methods: {
      getSortIcon: function getSortIcon(direction, className) {
        var h = this.$createElement;
        var icon = isFunction_1(this.global.sortIcon) ? this.global.sortIcon(this.$createElement) : h(ChevronDown, {
          "attrs": {
            "size": "16px"
          }
        });
        var style = {
          left: "0px"
        };

        if (direction === "asc") {
          style = _objectSpread$h({
            transform: "rotate(-180deg)",
            top: "-1px"
          }, style);
        } else {
          style.bottom = "-1px";
        }

        var sortClassName = ["".concat(prefix, "-table__sort-icon"), className, "".concat(prefix, "-table-sort-").concat(direction)];
        return h("span", {
          "style": style,
          "class": sortClassName
        }, [icon]);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var $listeners = this.$listeners,
          allowSortTypes = this.allowSortTypes,
          sortOrder = this.sortOrder,
          nextSortOrder = this.nextSortOrder;
      var buttonProps = {
        on: _objectSpread$h({}, $listeners),
        "class": allowSortTypes.length > 1 ? "".concat(prefix, "-table__double-icons") : ""
      };
      var tips = tooltips[nextSortOrder];
      var sortButton = allowSortTypes.map(function (direction) {
        var className = direction === sortOrder ? "".concat(prefix, "-table__sort-icon--active") : "".concat(prefix, "-icon-sort--default");
        return _this.getSortIcon(direction, className);
      });
      return h("div", helper([{
        "class": "".concat(prefix, "-table__cell--sort-trigger")
      }, buttonProps]), [tips ? h(Tooltip, {
        "style": "line-height: 0px;position:relative;",
        "attrs": {
          "content": tips,
          "showArrow": false
        }
      }, [sortButton]) : sortButton]);
    }
  });

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var sort = Vue__default["default"].extend({
    name: "".concat(prefix, "-primary-table-sort"),
    props: {
      data: baseTableProps.data,
      columns: primaryTableProps.columns,
      sort: primaryTableProps.sort,
      multipleSort: primaryTableProps.multipleSort
    },
    data: function data() {
      return {
        sorterFuncMap: {}
      };
    },
    computed: {
      sortArray: function sortArray() {
        var sort = this.sort;
        if (!sort) return [];
        return Array.isArray(sort) ? sort : [sort];
      },
      sortMap: function sortMap() {
        var sortMap = {};
        this.sortArray.forEach(function (info, index) {
          var sortBy = info.sortBy;
          sortMap[sortBy] = _objectSpread$g({
            index: index
          }, info);
        });
        return sortMap;
      },
      localDataSort: function localDataSort() {
        return !!Object.keys(this.sorterFuncMap).length;
      }
    },
    methods: {
      handleDataSort: function handleDataSort() {
        var _this = this;

        var data = this.data,
            sort = this.sort;
        if (!sort || !this.localDataSort) return;
        var formatedSort = sort instanceof Array ? sort : [sort];
        var newData = data.slice().sort(function (a, b) {
          var sortResult = 0;

          for (var i = 0, len = formatedSort.length; i < len; i++) {
            var item = formatedSort[i];
            var sortFunc = _this.sorterFuncMap[item.sortBy];

            if (sortResult === 0 && sortFunc) {
              sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);

              if (sortResult !== 0) {
                sortResult = sortResult > 0 ? 1 : -1;
              }
            } else {
              break;
            }
          }

          return sortResult;
        });
        if (JSON.stringify(newData) === JSON.stringify(this.data)) return;
        emitEvent(this, "data-change", newData);
        return newData;
      },
      needSort: function needSort(column) {
        var sorter = column.sorter,
            sortType = column.sortType;
        return sorter && (!sortType || Array.isArray(sortType) && sortType.length > 0 || typeof sortType === "string");
      },
      getNextSortOrder: function getNextSortOrder(currentSortOrder, sortType) {
        var sorterTypes = !sortType || sortType === "all" ? ["desc", "asc"] : [sortType];
        var idx = (sorterTypes.indexOf(currentSortOrder) + 1) % (sorterTypes.length + 1);
        return sorterTypes[idx];
      },
      handleSortHeaderClick: function handleSortHeaderClick(col) {
        var newData = this.handleDataSort();
        var sortInfo;

        if (this.multipleSort) {
          sortInfo = this.getMultipleNextSort(col);
        } else {
          sortInfo = this.getSingleNextSort(col);
        }

        emitEvent(this, "sort-change", sortInfo, {
          currentDataSource: newData || this.data,
          col: col
        });
        emitEvent(this, "change", {
          sorter: sortInfo
        }, {
          trigger: "sorter",
          currentData: newData || this.data
        });
      },
      getSortColumn: function getSortColumn(colKey) {
        return this.columns.find(function (column) {
          return column.colKey === colKey;
        });
      },
      getSortOrder: function getSortOrder(descending) {
        if (descending === void 0) return;
        return descending ? "desc" : "asc";
      },
      getNextDescending: function getNextDescending(current, col) {
        var _ref = current || {},
            descending = _ref.descending;

        var _col$sortType = col.sortType,
            sortType = _col$sortType === void 0 ? "all" : _col$sortType;
        if (descending === true && ["asc", "all"].includes(sortType)) return false;
        if (descending === void 0 && ["desc", "all"].includes(sortType)) return true;
      },
      getSingleNextSort: function getSingleNextSort(col) {
        var colKey = col.colKey;
        var current = this.sortMap[colKey];
        var next = this.getNextDescending(current, col);
        if (next === void 0) return;
        return {
          sortBy: colKey,
          descending: next
        };
      },
      getMultipleNextSort: function getMultipleNextSort(col) {
        if (!(this.sort instanceof Array)) return;
        var colKey = col.colKey;

        var result = _toConsumableArray(this.sort);

        for (var i = 0, len = this.sort.length; i < len; i++) {
          if (this.sort[i].sortBy === colKey) {
            var next = this.getSingleNextSort(col);
            next ? result[i] = next : result.splice(i, 1);
            return result;
          }
        }

        result.push({
          sortBy: colKey,
          descending: true
        });
        return result;
      },
      getSorterColumns: function getSorterColumns(columns) {
        var _this2 = this;

        var h = this.$createElement;
        var r = columns.map(function (item, index) {
          var _column$children;

          var column = _objectSpread$g({}, item);

          if ((_column$children = column.children) !== null && _column$children !== void 0 && _column$children.length) {
            column.children = _toConsumableArray(_this2.getSorterColumns(column.children));
          } else {
            if (isFunction_1(column.sorter)) {
              _this2.sorterFuncMap[column.colKey] = column.sorter;
            }

            var needSort = _this2.needSort(column);

            if (needSort) {
              var _this2$sortMap$colKey;

              var _column$sortType = column.sortType,
                  sortType = _column$sortType === void 0 ? "all" : _column$sortType,
                  colKey = column.colKey;

              var nextSort = _this2.getSingleNextSort(column);

              var sorterButtonsProps = {
                on: {
                  click: function click() {
                    return _this2.handleSortHeaderClick(column);
                  }
                },
                props: {
                  sortType: sortType,
                  sortOrder: _this2.getSortOrder((_this2$sortMap$colKey = _this2.sortMap[colKey]) === null || _this2$sortMap$colKey === void 0 ? void 0 : _this2$sortMap$colKey.descending),
                  nextSortOrder: _this2.getSortOrder(nextSort === null || nextSort === void 0 ? void 0 : nextSort.descending)
                }
              };
              var title = getTitle(_this2, column, index);

              column.title = function () {
                return h("div", {
                  "class": "".concat(prefix, "-table__cell--sortable")
                }, [h("div", {
                  "class": "".concat(prefix, "-table__cell--title")
                }, [h("div", [title]), h(SorterButton, helper([{}, sorterButtonsProps]))])]);
              };
            }
          }

          return column;
        });
        this.handleDataSort();
        return r;
      }
    }
  });

  var rowDraggable = Vue__default["default"].extend({
    name: "".concat(prefix, "-primary-table-row-draggable"),
    data: function data() {
      return {
        draggingRowCurrentIndex: -1,
        currentRowData: null
      };
    },
    computed: {
      dragging: function dragging() {
        return this.draggingRowCurrentIndex !== -1;
      }
    },
    methods: {
      onDragStart: function onDragStart(_ref) {
        var index = _ref.index,
            row = _ref.row;
        this.draggingRowCurrentIndex = index;
        this.currentRowData = row;
        this.addDragEndListener();
      },
      onDragOver: function onDragOver(_ref2) {
        var overIndex = _ref2.index,
            row = _ref2.row,
            targetElm = _ref2.targetElm;
        if (_toConsumableArray(targetElm.classList).includes("v-move")) return;
        var draggingRowCurrentIndex = this.draggingRowCurrentIndex;
        if (draggingRowCurrentIndex === -1 || draggingRowCurrentIndex === overIndex) return;
        this.emitChange(this.currentRowData, row, draggingRowCurrentIndex, overIndex);
        this.draggingRowCurrentIndex = overIndex;
      },
      addDragEndListener: function addDragEndListener() {
        var _this = this;

        var onDragEnd = function onDragEnd() {
          _this.draggingRowCurrentIndex = -1;
          document.removeEventListener("dragend", onDragEnd);
        };

        document.addEventListener("dragend", onDragEnd);
      },
      emitChange: function emitChange(current, target, currentIndex, targetIndex) {
        emitEvent(this, "drag-sort", {
          current: current,
          target: target,
          currentIndex: currentIndex,
          targetIndex: targetIndex
        });
      }
    }
  });

  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function filterEmptyData(data) {
    var newFilterValue = {};
    Object.keys(data).forEach(function (key) {
      var item = data[key];
      var isArrayTrue = item instanceof Array && item.length;
      var isObject = _typeof(item) === "object" && !(item instanceof Array);
      var isObjectTrue = isObject && Object.keys(item).length;

      if (isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(item))) {
        newFilterValue[key] = item;
      }
    });
    return newFilterValue;
  }

  var filter = Vue__default["default"].extend({
    name: "".concat(prefix, "-primary-table-filter"),
    data: function data() {
      return {
        tableWidth: 0,
        innerFilterValue: this.filterValue,
        filterPopupVisible: {}
      };
    },
    props: {
      columns: primaryTableProps.columns,
      pagination: baseTableProps.pagination,
      filterValue: primaryTableProps.filterValue,
      filterIcon: primaryTableProps.filterIcon,
      data: baseTableProps.data,
      filterRow: Function
    },
    computed: {
      fixedLeftColumn: function fixedLeftColumn() {
        var _this$columns;

        return !!((_this$columns = this.columns) !== null && _this$columns !== void 0 && _this$columns.filter(function (col) {
          return col.fixed === "left";
        }).length);
      },
      hasFilterCondition: function hasFilterCondition() {
        var _this$columns2;

        return !!((_this$columns2 = this.columns) !== null && _this$columns2 !== void 0 && _this$columns2.filter(function (col) {
          return col.filter;
        }).length);
      }
    },
    watch: {
      filterValue: function filterValue(val) {
        this.innerFilterValue = _objectSpread$f({}, val);
      }
    },
    mounted: function mounted() {
      var _this = this;

      var timer = setTimeout(function () {
        _this.updateTableWidth();

        clearTimeout(timer);
        timer = null;
      }, 0);
    },
    methods: {
      updateTableWidth: function updateTableWidth() {
        var _this$$el;

        if (!this.$el) return;
        var tbody = (_this$$el = this.$el) === null || _this$$el === void 0 ? void 0 : _this$$el.querySelector(".".concat(prefix, "-table__body"));

        if (tbody) {
          this.tableWidth = tbody.clientWidth;
        } else {
          var el = this.$el.querySelector(".".concat(prefix, "-table-content"));
          el && (this.tableWidth = el.clientWidth);
        }
      },
      onFilterPopupVisibleChange: function onFilterPopupVisibleChange(visible, colKey) {
        this.$set(this.filterPopupVisible, colKey, visible);
      },
      renderFirstFilterRow: function renderFirstFilterRow() {
        var _this$pagination, _this$data;

        var h = this.$createElement;
        var filterEmpty = filterEmptyData(this.filterValue);
        if (!this.filterValue || !Object.keys(filterEmpty).length) return null;
        var defaultNode = h("div", {
          "class": "".concat(prefix, "-table__filter-result")
        }, [h("span", ["\u641C\u7D22 \u201C", this.getFilterResultContent(), "\u201D\uFF0C"]), h("span", ["\u627E\u5230 ", ((_this$pagination = this.pagination) === null || _this$pagination === void 0 ? void 0 : _this$pagination.total) || ((_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.length), " \u6761\u7ED3\u679C"]), h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "on": {
            "click": this.onResetAll
          }
        }, ["\u6E05\u7A7A\u7B5B\u9009"])]);
        var filterContent = renderTNodeJSXDefault(this, "filterRow", {
          defaultNode: defaultNode
        });
        return h("div", {
          "style": {
            width: this.fixedLeftColumn ? "".concat(this.tableWidth, "px") : void 0
          },
          "class": "".concat(prefix, "-table__row-filter-inner")
        }, [filterContent]);
      },
      getFilterResultContent: function getFilterResultContent() {
        var _this2 = this;

        var arr = [];
        this.columns.filter(function (col) {
          return col.filter;
        }).forEach(function (col) {
          var value = _this2.filterValue[col.colKey];

          if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
            var formattedValue = value instanceof Array ? value : [value];
            var label = [];
            col.filter.list.forEach(function (option) {
              if (formattedValue.includes(option.value)) {
                label.push(option.label);
              }
            });
            value = label.join();
          }

          if (value) {
            arr.push("".concat(col.title, "\uFF1A").concat(value));
          }
        });
        return arr.join("\uFF1B");
      },
      onInnerFilterChange: function onInnerFilterChange(val, column) {
        var filterValue = _objectSpread$f(_objectSpread$f({}, this.innerFilterValue), {}, _defineProperty$2({}, column.colKey, val));

        this.innerFilterValue = filterValue;

        if (!column.filter.showConfirmAndReset) {
          this.emitFilterChange(filterValue, column);
        }
      },
      emitFilterChange: function emitFilterChange(filterValue, column) {
        emitEvent(this, "filter-change", filterValue, {
          col: column
        });
        emitEvent(this, "change", {
          filter: filterValue
        }, {
          trigger: "filter"
        });
      },
      onReset: function onReset(column) {
        var filterValue = _objectSpread$f(_objectSpread$f({}, this.innerFilterValue), {}, _defineProperty$2({}, column.colKey, {
          single: "",
          multiple: [],
          input: ""
        }[column.filter.type] || column.filter.resetValue || ""));

        this.innerFilterValue = filterValue;
        this.emitFilterChange(filterValue, column);
        this.$set(this.filterPopupVisible, column.colKey, false);
      },
      onResetAll: function onResetAll() {
        this.innerFilterValue = {};
        this.emitFilterChange({});
        this.filterPopupVisible = {};
      },
      onConfirm: function onConfirm(column) {
        this.emitFilterChange(this.innerFilterValue, column);
        this.$set(this.filterPopupVisible, column.colKey, false);
      },
      getBottomButtons: function getBottomButtons(column) {
        var _this3 = this;

        var h = this.$createElement;
        if (!column.filter.showConfirmAndReset) return;
        return h("div", {
          "class": "".concat(prefix, "-table__filter--bottom-buttons")
        }, [h(Button, {
          "attrs": {
            "theme": "default",
            "size": "small"
          },
          "on": {
            "click": function click() {
              return _this3.onReset(column);
            }
          }
        }, ["\u91CD\u7F6E"]), h(Button, {
          "attrs": {
            "theme": "primary",
            "size": "small"
          },
          "on": {
            "click": function click() {
              return _this3.onConfirm(column);
            }
          }
        }, ["\u786E\u8BA4"])]);
      },
      getFilterContent: function getFilterContent(column) {
        var _column$filter,
            _column$filter2,
            _column$filter3,
            _column$filter4,
            _column$filter5,
            _this4 = this,
            _column$filter6,
            _column$filter7;

        var h = this.$createElement;
        var types = ["single", "multiple", "input"];

        if (column.type && !types.includes(column.filter.type)) {
          console.error("TDesign Table Error: column.filter.type must be the following: ".concat(JSON.stringify(types)));
          return;
        }

        if (column !== null && column !== void 0 && (_column$filter = column.filter) !== null && _column$filter !== void 0 && _column$filter.component && typeof (column === null || column === void 0 ? void 0 : (_column$filter2 = column.filter) === null || _column$filter2 === void 0 ? void 0 : _column$filter2.component) !== "function") {
          console.error("TDesign Table Error: column.filter.component must be a function");
          return;
        }

        var component = {
          single: RadioGroup,
          multiple: CheckboxGroup,
          input: Input
        }[column.filter.type];
        if (!component && !(column !== null && column !== void 0 && (_column$filter3 = column.filter) !== null && _column$filter3 !== void 0 && _column$filter3.component)) return;

        var props = _objectSpread$f(_objectSpread$f({
          options: ["single", "multiple"].includes(column.filter.type) ? (_column$filter4 = column.filter) === null || _column$filter4 === void 0 ? void 0 : _column$filter4.list : void 0
        }, ((_column$filter5 = column.filter) === null || _column$filter5 === void 0 ? void 0 : _column$filter5.props) || {}), {}, {
          value: this.innerFilterValue[column.colKey]
        });

        var on = {
          change: function change(val) {
            return _this4.onInnerFilterChange(val, column);
          }
        };
        return h("div", {
          "class": "".concat(prefix, "-table__filter-pop-content-inner")
        }, [column !== null && column !== void 0 && (_column$filter6 = column.filter) !== null && _column$filter6 !== void 0 && _column$filter6.component ? column === null || column === void 0 ? void 0 : (_column$filter7 = column.filter) === null || _column$filter7 === void 0 ? void 0 : _column$filter7.component(function (v, b) {
          var tProps = _typeof(b) === "object" && "attrs" in b ? b.attrs : {};
          return _this4.$createElement(v, {
            props: _objectSpread$f(_objectSpread$f({}, props), tProps),
            on: on
          });
        }) : h(component, helper([{
          "attrs": {
            "value": this.innerFilterValue[column.colKey]
          }
        }, {
          "props": _objectSpread$f({}, props)
        }, {}, {
          "on": _objectSpread$f({}, on)
        }]))]);
      },
      getFilterColumns: function getFilterColumns(columns) {
        var _this5 = this;

        var h = this.$createElement;
        return columns.map(function (item, index) {
          var column = _objectSpread$f({}, item);

          if (column.filter) {
            var title = getTitle(_this5, column, index);

            column.title = function () {
              return h("div", {
                "class": "".concat(prefix, "-table__cell--title")
              }, [h("div", [title]), h("div", {
                "class": "".concat(prefix, "-table__cell--filter")
              }, [h(Popup, helper([{
                "attrs": {
                  "visible": _this5.filterPopupVisible[column.colKey],
                  "trigger": "click",
                  "placement": "bottom",
                  "showArrow": true,
                  "overlayClassName": "".concat(prefix, "-table__filter-pop")
                }
              }, {
                "on": {
                  "visible-change": function visibleChange(val) {
                    return _this5.onFilterPopupVisibleChange(val, column.colKey);
                  }
                }
              }]), [isFunction_1(_this5.filterIcon) ? _this5.filterIcon(_this5.$createElement) : h(Filter, {
                "attrs": {
                  "name": "filter"
                },
                "class": "".concat(prefix, "-table__filter-icon")
              }), h("template", {
                "slot": "content"
              }, [h("div", {
                "class": "".concat(prefix, "-table__filter-pop-content")
              }, [_this5.getFilterContent(column), _this5.getBottomButtons(column)])])])])]);
            };
          }

          return column;
        });
      }
    }
  });

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ActionMixin = Vue__default["default"].extend({
    methods: {
      getConfirmBtn: function getConfirmBtn(options) {
        var h = this.$createElement;
        var confirmBtn = options.confirmBtn,
            className = options.className;
        if (confirmBtn === null) return null;

        if (confirmBtn && this.$scopedSlots.confirmBtn) {
          console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
        }

        var defaultButtonProps = this.getDefaultConfrimBtnProps(options);

        if (!confirmBtn && !this.$scopedSlots.confirmBtn) {
          return h(Button, helper([{
            "class": className
          }, {
            "props": _objectSpread$e({}, defaultButtonProps)
          }]));
        }

        if (confirmBtn && ["string", "object"].includes(_typeof(confirmBtn))) {
          return this.getButtonByProps(confirmBtn, defaultButtonProps, className);
        }

        return renderTNodeJSX(this, "confirmBtn");
      },
      getCancelBtn: function getCancelBtn(options) {
        var h = this.$createElement;
        var cancelBtn = options.cancelBtn,
            className = options.className;
        if (cancelBtn === null) return null;

        if (cancelBtn && this.$scopedSlots.cancelBtn) {
          console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
        }

        var defaultButtonProps = this.getDefaultCancelBtnProps(options);

        if (!cancelBtn && !this.$scopedSlots.cancelBtn) {
          return h(Button, helper([{
            "class": className
          }, {
            "props": _objectSpread$e({}, defaultButtonProps)
          }]));
        }

        if (cancelBtn && ["string", "object"].includes(_typeof(cancelBtn))) {
          return this.getButtonByProps(cancelBtn, defaultButtonProps);
        }

        return renderTNodeJSX(this, "cancelBtn");
      },
      getButtonByProps: function getButtonByProps(button, defaultButton, className) {
        var h = this.$createElement;
        var newOptions = defaultButton;

        if (isString_1(button)) {
          newOptions.content = button;
        } else if (isObject_1(button)) {
          newOptions = _objectSpread$e(_objectSpread$e({}, newOptions), button);
        }

        return h(Button, helper([{
          "class": className
        }, {
          "props": newOptions
        }]));
      },
      confirmBtnAction: function confirmBtnAction(e) {},
      cancelBtnAction: function cancelBtnAction(e) {},
      getDefaultConfrimBtnProps: function getDefaultConfrimBtnProps(options) {
        var _this = this;

        var globalConfirm = options.globalConfirm,
            theme = options.theme,
            globalConfirmBtnTheme = options.globalConfirmBtnTheme;
        var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
        var props = {
          theme: defaultTheme,
          content: "\u786E\u5B9A",
          onClick: function onClick(e) {
            _this.confirmBtnAction(e);
          }
        };

        if (isString_1(globalConfirm)) {
          props.content = globalConfirm;
        } else if (isObject_1(globalConfirm)) {
          props = _objectSpread$e(_objectSpread$e({}, props), globalConfirm);
        }

        return props;
      },
      getDefaultCancelBtnProps: function getDefaultCancelBtnProps(options) {
        var _this2 = this;

        var globalCancel = options.globalCancel;
        var props = {
          theme: "default",
          content: "\u53D6\u6D88",
          onClick: function onClick(e) {
            _this2.cancelBtnAction(e);
          }
        };

        if (isString_1(globalCancel)) {
          props.content = globalCancel;
        } else if (isObject_1(globalCancel)) {
          props = _objectSpread$e(_objectSpread$e({}, props), globalCancel);
        }

        return props;
      }
    }
  });

  var props$5 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function],
      "default": ""
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": true
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": true
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    draggable: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    mode: {
      type: String,
      "default": "modal",
      validator: function validator(val) {
        return ["modal", "modeless", "normal"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["top", "center"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "info", "warning", "danger", "success"].includes(val);
      }
    },
    top: {
      type: [String, Number]
    },
    visible: Boolean,
    width: {
      type: [String, Number]
    },
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onClosed: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOpened: Function,
    onOverlayClick: Function
  };

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$6 = "".concat(prefix, "-dialog");
  var lockClass$1 = "".concat(prefix, "-dialog--lock");

  function getCSSValue(v) {
    return isNaN(Number(v)) ? v : "".concat(Number(v), "px");
  }

  var _Dialog = mixins(ActionMixin, getConfigReceiverMixins("dialog")).extend({
    name: "TDialog",
    components: {
      CloseIcon: Close,
      InfoCircleFilledIcon: InfoCircleFilled,
      CheckCircleFilledIcon: CheckCircleFilled,
      ErrorCircleFilledIcon: ErrorCircleFilled,
      TButton: Button
    },
    data: function data() {
      return {
        scrollWidth: 0,
        disX: 0,
        disY: 0,
        windowInnerWidth: 0,
        windowInnerHeight: 0,
        offsetX: 0,
        offsetY: 0,
        diaglogW: 0,
        diaglogH: 0,
        dLeft: 0,
        dTop: 0
      };
    },
    props: _objectSpread$d({}, props$5),
    computed: {
      isModal: function isModal() {
        return this.mode === "modal";
      },
      isModeless: function isModeless() {
        return this.mode === "modeless";
      },
      maskClass: function maskClass() {
        return ["".concat(name$6, "__mask"), !this.showOverlay && "".concat(prefix, "-is-hidden")];
      },
      dialogClass: function dialogClass() {
        var dialogClass = ["".concat(name$6), "".concat(name$6, "--default"), "".concat(name$6, "--").concat(this.placement), "".concat(name$6, "__modal-").concat(this.theme)];

        if (["modeless", "modal"].includes(this.mode)) {
          dialogClass.push("".concat(name$6, "--fixed"));
        }

        return dialogClass;
      },
      dialogStyle: function dialogStyle() {
        var top = this.top,
            placement = this.placement;
        var topStyle = {};

        if (top) {
          var topValue = getCSSValue(top);
          topStyle = {
            top: topValue,
            transform: "translate(-50%, 0)",
            transformOrigin: "25% 25%",
            maxHeight: "calc(100% - ".concat(topValue, ")"),
            zIndex: this.zIndex
          };
        } else if (placement === "top") {
          topStyle = {
            maxHeight: "calc(100% - 20%)"
          };
        }

        return _objectSpread$d({
          width: getCSSValue(this.width)
        }, topStyle);
      }
    },
    watch: {
      visible: function visible(value) {
        if (value) {
          var scrollWidth = this.scrollWidth;

          if (scrollWidth > 0) {
            var bodyCssText = "position: relative;width: calc(100% - ".concat(scrollWidth, "px);");
            document.body.style.cssText = bodyCssText;
          }

          addClass(document.body, lockClass$1);
        } else {
          document.body.style.cssText = "";
          removeClass(document.body, lockClass$1);
        }

        this.addKeyboardEvent(value);

        if (this.isModeless && this.draggable) {
          this.initDragEvent(value);
        }
      }
    },
    mounted: function mounted() {
      this.scrollWidth = window.innerWidth - document.body.offsetWidth;

      if (this.draggable) {
        window.addEventListener("resize", throttle_1(this.resizeAdjustPosition, 1e3));
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.addKeyboardEvent(false);
    },
    directives: {
      TransferDom: TransferDom
    },
    methods: {
      addKeyboardEvent: function addKeyboardEvent(status) {
        if (status) {
          document.addEventListener("keydown", this.keyboardEvent);
        } else {
          document.removeEventListener("keydown", this.keyboardEvent);
        }
      },
      keyboardEvent: function keyboardEvent(e) {
        if (e.code === "Escape") {
          emitEvent(this, "esc-keydown", {
            e: e
          });

          if (this.closeOnEscKeydown) {
            this.emitCloseEvent({
              trigger: "esc",
              e: e
            });
          }
        }
      },
      overlayAction: function overlayAction(e) {
        emitEvent(this, "overlay-click", {
          e: e
        });

        if (this.closeOnOverlayClick) {
          this.emitCloseEvent({
            trigger: "overlay",
            e: e
          });
        }
      },
      closeBtnAcion: function closeBtnAcion(e) {
        emitEvent(this, "close-btn-click", {
          e: e
        });
        this.emitCloseEvent({
          trigger: "close-btn",
          e: e
        });
      },
      cancelBtnAction: function cancelBtnAction(e) {
        emitEvent(this, "cancel", {
          e: e
        });
        this.emitCloseEvent({
          trigger: "cancel",
          e: e
        });
      },
      confirmBtnAction: function confirmBtnAction(e) {
        emitEvent(this, "confirm", {
          e: e
        });
      },
      afterEnter: function afterEnter() {
        emitEvent(this, "opened");
      },
      afterLeave: function afterLeave() {
        emitEvent(this, "closed");
      },
      emitCloseEvent: function emitCloseEvent(context) {
        emitEvent(this, "close", context);
        this.$emit("update:visible", false);
      },
      hasEventOn: function hasEventOn(name2) {
        var _this$_events;

        var eventFuncs = (_this$_events = this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name2];
        return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
      },
      getIcon: function getIcon() {
        var h = this.$createElement;
        var icon = {
          info: h(InfoCircleFilled, {
            "class": "".concat(prefix, "-is-info")
          }),
          warning: h(ErrorCircleFilled, {
            "class": "".concat(prefix, "-is-warning")
          }),
          danger: h(ErrorCircleFilled, {
            "class": "".concat(prefix, "-is-error")
          }),
          success: h(CheckCircleFilled, {
            "class": "".concat(prefix, "-is-success")
          })
        };
        return icon[this.theme];
      },
      mousedownHanler: function mousedownHanler(targetEvent) {
        var target = this.$refs.dialog;
        this.disX = targetEvent.clientX - target.offsetLeft;
        this.disY = targetEvent.clientY - target.offsetTop;
        this.diaglogW = target.offsetWidth;
        this.diaglogH = target.offsetHeight;

        var _this$getTranslateXY = this.getTranslateXY(target),
            _this$getTranslateXY2 = _slicedToArray(_this$getTranslateXY, 2),
            x = _this$getTranslateXY2[0],
            y = _this$getTranslateXY2[1];

        this.offsetX = x;
        this.offsetY = y;
        this.windowInnerWidth = window.innerWidth;
        this.windowInnerHeight = window.innerHeight;
        document.addEventListener("mousemove", this.mouseMoverHander);
        document.addEventListener("mouseup", this.mouseUpHandler);
        document.addEventListener("dragend", this.mouseUpHandler);
      },
      mouseMoverHander: function mouseMoverHander(documentEvent) {
        var target = this.$refs.dialog;
        var left = documentEvent.clientX - this.disX;
        var top = documentEvent.clientY - this.disY;

        if (left + this.diaglogW - this.offsetX > this.windowInnerWidth) {
          this.dLeft = this.windowInnerWidth - this.diaglogW + this.offsetX;
        } else {
          this.dLeft = target.offsetLeft < this.offsetX || left <= this.offsetX ? this.offsetX : left;
        }

        target.style.left = "".concat(this.dLeft, "px");

        if (top + this.diaglogH - this.offsetY > this.windowInnerHeight) {
          this.dTop = this.windowInnerHeight - this.diaglogH + this.offsetY;
        } else {
          this.dTop = top < this.offsetY ? this.offsetY : top;
        }

        target.style.top = "".concat(this.dTop, "px");
      },
      mouseUpHandler: function mouseUpHandler() {
        document.removeEventListener("mousemove", this.mouseMoverHander);
        document.removeEventListener("mouseup", this.mouseUpHandler);
        document.removeEventListener("dragend", this.mouseUpHandler);
      },
      initDragEvent: function initDragEvent(status) {
        var target = this.$refs.dialog;

        if (status) {
          target.addEventListener("mousedown", this.mousedownHanler);
        } else {
          target.removeEventListener("mousedown", this.mousedownHanler);
        }
      },
      getTranslateXY: function getTranslateXY(target) {
        var transformStyle = document.defaultView.getComputedStyle(target).transform;
        var reg = /(\d+(\.\d+)?)/g;
        var tarnsArr = transformStyle.match(reg);
        return [parseFloat(tarnsArr[4]), parseFloat(tarnsArr[5])];
      },
      resizeAdjustPosition: function resizeAdjustPosition() {
        if (this.visible) {
          var target = this.$refs.dialog;
          target.style.left = "".concat(this.dLeft * (window.innerWidth / this.windowInnerWidth), "px");
          target.style.top = "".concat(this.dTop * (window.innerHeight / this.windowInnerHeight), "px");
        }
      },
      renderDialog: function renderDialog() {
        var h = this.$createElement;
        var defaultHeader = h("h5", {
          "class": "title"
        });
        var defaultCloseBtn = h("close-icon");
        var body = renderContent(this, "default", "body");
        var defaultFooter = h("div", [this.getCancelBtn({
          cancelBtn: this.cancelBtn,
          globalCancel: this.global.cancel,
          className: "".concat(prefix, "-dialog__cancel")
        }), this.getConfirmBtn({
          theme: this.theme,
          confirmBtn: this.confirmBtn,
          globalConfirm: this.global.confirm,
          globalConfirmBtnTheme: this.global.confirmBtnTheme,
          className: "".concat(prefix, "-dialog__confirm")
        })]);
        var bodyClassName = this.theme === "default" ? "".concat(name$6, "__body") : "".concat(name$6, "__body__icon");
        return h("div", {
          "key": "dialog",
          "ref": "dialog",
          "class": this.dialogClass,
          "style": this.dialogStyle
        }, [h("div", {
          "class": "".concat(name$6, "__header")
        }, [this.getIcon(), renderTNodeJSX(this, "header", defaultHeader)]), this.closeBtn ? h("span", {
          "class": "".concat(name$6, "__close"),
          "on": {
            "click": this.closeBtnAcion
          }
        }, [renderTNodeJSX(this, "closeBtn", defaultCloseBtn)]) : null, h("div", {
          "class": bodyClassName
        }, [body]), h("div", {
          "class": "".concat(name$6, "__footer")
        }, [renderTNodeJSX(this, "footer", defaultFooter)])]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var maskView = this.isModal && h("div", {
        "key": "mask",
        "class": this.maskClass,
        "on": {
          "click": this.overlayAction
        }
      });
      var dialogView = this.renderDialog();
      var view = [maskView, dialogView];
      var ctxStyle = {
        zIndex: this.zIndex
      };
      var ctxClass = ["".concat(name$6, "__ctx"), _defineProperty$2({}, "".concat(prefix, "-dialog__ctx--fixed"), this.mode === "modal")];
      return h("transition", {
        "attrs": {
          "duration": 300,
          "name": "".concat(name$6, "-zoom__vue")
        },
        "on": {
          "afterEnter": this.afterEnter,
          "afterLeave": this.afterLeave
        }
      }, [(!this.destroyOnClose || this.visible) && h("div", {
        "directives": [{
          name: "show",
          value: this.visible
        }, {
          name: "transfer-dom",
          value: this.attach
        }],
        "class": ctxClass,
        "style": ctxStyle
      }, [view])]);
    }
  });

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var createDialog = function createDialog(props) {
    var options = _objectSpread$c({}, props);

    options.visible = true;
    var dialog = new _Dialog({
      propsData: _objectSpread$c(_objectSpread$c({}, options), {}, {
        onClose: options.onClose || function () {
          dialog.visible = false;
        }
      })
    }).$mount();

    if (options.className) {
      options.className.split(" ").forEach(function (name) {
        dialog.$el.classList.add(name.trim());
      });
    }

    if (options.style) {
      dialog.$el.style.cssText += options.style;
    }

    var container = getAttach(options.attach);

    if (container) {
      container.appendChild(dialog.$el);
    } else {
      console.error("attach is not exist");
    }

    var dialogNode = {
      show: function show() {
        dialog.visible = true;
      },
      hide: function hide() {
        dialog.visible = false;
      },
      update: function update(options2) {
        Object.assign(dialog, options2);
      },
      destroy: function destroy() {
        dialog.visible = false;
        container.contains(dialog.$el) && container.removeChild(dialog.$el);
      }
    };
    return dialogNode;
  };

  var confirm = function confirm(props) {
    return createDialog(props);
  };

  var alert = function alert(props) {
    var options = _objectSpread$c({}, props);

    options.cancelBtn = null;
    return createDialog(options);
  };

  var extraApi$1 = {
    confirm: confirm,
    alert: alert
  };
  var _DialogPlugin = {
    install: function install() {
      Vue__default["default"].prototype.$dialog = createDialog;
      Object.keys(extraApi$1).forEach(function (funcName) {
        Vue__default["default"].prototype.$dialog[funcName] = extraApi$1[funcName];
      });
    }
  };
  Object.keys(extraApi$1).forEach(function (funcName) {
    _DialogPlugin[funcName] = extraApi$1[funcName];
  });
  var DialogPlugin = _DialogPlugin;

  var showColumns = Vue__default["default"].extend({
    name: "".concat(prefix, "-primary-show-columns"),
    props: {
      columnController: primaryTableProps.columnController,
      columns: primaryTableProps.columns,
      showColumns: {
        type: Boolean,
        "default": false
      }
    },
    data: function data() {
      return {
        showColumnKeys: this.columns.map(function (_ref) {
          var colKey = _ref.colKey;
          return colKey;
        }),
        showColumnCheckboxKeys: this.columns.map(function (_ref2) {
          var colKey = _ref2.colKey;
          return colKey;
        }),
        isShowColumnsDlg: false
      };
    },
    computed: {
      showColumnCheckboxOpts: function showColumnCheckboxOpts() {
        var _this$columnControlle;

        var enbledKeys = new Set(((_this$columnControlle = this.columnController) === null || _this$columnControlle === void 0 ? void 0 : _this$columnControlle.fields) || this.columns.map(function (_ref3) {
          var colKey = _ref3.colKey;
          return colKey;
        }));
        return this.columns.filter(function (_ref4) {
          var colKey = _ref4.colKey,
              title = _ref4.title;
          return colKey && title;
        }).map(function (_ref5) {
          var colKey = _ref5.colKey,
              title = _ref5.title;
          return {
            label: title,
            value: colKey,
            disabled: !enbledKeys.has(colKey)
          };
        });
      },
      isAllShowColumns: function isAllShowColumns() {
        var _this = this;

        return this.showColumnCheckboxOpts.every(function (_ref6) {
          var value = _ref6.value;
          return _this.showColumnCheckboxKeys.includes(value);
        });
      },
      isSomeShowColumns: function isSomeShowColumns() {
        var _this2 = this;

        return !this.isAllShowColumns && this.showColumnCheckboxOpts.some(function (_ref7) {
          var value = _ref7.value;
          return _this2.showColumnCheckboxKeys.includes(value);
        });
      }
    },
    methods: {
      getShowColumns: function getShowColumns(columns) {
        var _this3 = this;

        return columns.filter(function (_ref8) {
          var colKey = _ref8.colKey;
          return _this3.showColumnKeys.includes(colKey) || !_this3.showColumnCheckboxOpts.map(function (_ref9) {
            var value = _ref9.value;
            return value;
          }).includes(colKey);
        });
      },
      renderShowColumns: function renderShowColumns() {
        var _this4 = this;

        var h = this.$createElement;

        var handleCheckChange = function handleCheckChange(vals) {
          _this4.showColumnCheckboxKeys = vals;
        };

        var handleToggleColumnController = function handleToggleColumnController() {
          var dialogTmp = DialogPlugin.confirm({
            header: "\u81EA\u5B9A\u4E49\u8BBE\u7F6E\u8868\u683C\u5217",
            body: function body() {
              var defaultNode = h("div", {
                "class": "".concat(prefix, "-table__column-controller ").concat(prefix, "-table__column-controller--").concat(_this4.columnController.displayType === "fixed-width" ? "fixed" : "auto")
              }, [h("div", {
                "class": "".concat(prefix, "-table__column-controller-body")
              }, [h("p", {
                "class": "".concat(prefix, "-table__column-controller-desc")
              }, ["\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217"]), h("div", {
                "class": "".concat(prefix, "-table__column-controller-block")
              }, [h(Checkbox, {
                "attrs": {
                  "indeterminate": _this4.isSomeShowColumns,
                  "checked": _this4.isAllShowColumns
                },
                "on": {
                  "change": _this4.handleClickAllShowColumns
                }
              }, ["\u5168\u9009"])]), h("div", {
                "class": "".concat(prefix, "-table__column-controller-block")
              }, [h(CheckboxGroup$1, {
                "attrs": {
                  "options": _this4.showColumnCheckboxOpts,
                  "value": _this4.showColumnCheckboxKeys
                },
                "on": {
                  "change": handleCheckChange
                }
              })])])]);
              return renderTNodeJSXDefault(_this4, "columnControllerContent", defaultNode);
            },
            confirmBtn: "\u786E\u8BA4",
            cancelBtn: "\u53D6\u6D88",
            width: 612,
            onConfirm: function onConfirm() {
              _this4.showColumnKeys = _toConsumableArray(_this4.showColumnCheckboxKeys);
              dialogTmp.hide();
            },
            onClose: function onClose() {
              dialogTmp.hide();
            }
          });
        };

        return h("div", {
          "class": "".concat(prefix, "-table__top-content")
        }, [h("t-button", {
          "attrs": {
            "theme": "default",
            "variant": "outline"
          },
          "on": {
            "click": handleToggleColumnController
          }
        }, [h(Setting, {
          "slot": "icon"
        }), "\u81EA\u5B9A\u4E49\u5217"])]);
      },
      handleClickAllShowColumns: function handleClickAllShowColumns() {
        if (this.isAllShowColumns) {
          this.showColumnCheckboxKeys = this.showColumnCheckboxOpts.filter(function (item) {
            return item.disabled;
          }).map(function (_ref10) {
            var value = _ref10.value;
            return value;
          });
        } else {
          this.showColumnCheckboxKeys = this.showColumnCheckboxOpts.map(function (_ref11) {
            var value = _ref11.value;
            return value;
          });
        }
      },
      updateColumns: function updateColumns() {
        var keys = this.columns.map(function (_ref12) {
          var colKey = _ref12.colKey;
          return colKey;
        });
        this.showColumnKeys = keys;
        this.showColumnCheckboxKeys = keys;
      }
    },
    watch: {
      columns: {
        deep: true,
        handler: function handler() {
          this.updateColumns();
        }
      }
    }
  });

  var asyncLoadingMixin = Vue__default["default"].extend({
    name: "".concat(prefix, "-primary-table-async-loading"),
    props: {
      asyncLoading: primaryTableProps.asyncLoading
    },
    data: function data() {
      return {
        pullDownLoading: false
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        return ["".concat(prefix, "-table__async-loading"), (_ref = {}, _defineProperty$2(_ref, STATUS_CLASSNAMES.loading, this.asyncLoading === "loading"), _defineProperty$2(_ref, STATUS_CLASSNAMES.loadMore, this.asyncLoading === "load-more"), _ref)];
      }
    },
    methods: {
      onLoadClick: function onLoadClick() {
        if (typeof this.asyncLoading !== "string") return;
        emitEvent(this, "async-loading-click", {
          status: this.asyncLoading
        });
      },
      renderAsyncLoadingRow: function renderAsyncLoadingRow() {
        var h = this.$createElement;
        var asyncLoadingNode = renderTNodeJSX(this, "asyncLoading");

        if (isString_1(asyncLoadingNode)) {
          var asyncLoading = this.asyncLoading;
          var loadingText = {
            "load-more": "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
            loading: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E"
          }[String(asyncLoading)];
          return h("div", {
            "class": this.classes,
            "on": {
              "click": this.onLoadClick
            }
          }, [h(Loading, {
            "attrs": {
              "loading": asyncLoading === "loading",
              "text": loadingText
            }
          })]);
        }

        if (![null, false, void 0].includes(asyncLoadingNode)) {
          return h("div", {
            "class": this.classes,
            "on": {
              "click": this.onLoadClick
            }
          }, [asyncLoadingNode]);
        }

        return null;
      }
    }
  });

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _PrimaryTable = mixins(expand, select, sort, rowDraggable, filter, showColumns, asyncLoadingMixin).extend({
    name: "TTable",
    props: _objectSpread$b(_objectSpread$b({}, baseTableProps), primaryTableProps),
    computed: {
      rehandleColumns: function rehandleColumns() {
        var columns = this.columns.map(function (col) {
          return _objectSpread$b({}, col);
        });
        columns = this.getShowColumns(_toConsumableArray(this.columns));
        columns = this.getSorterColumns(columns);
        columns = this.getFilterColumns(columns);
        columns = this.getSelectColumns(columns);
        columns = this.getExpandColumns(columns);
        return columns;
      }
    },
    created: function created() {
      if (typeof this.$attrs["expanded-row-render"] !== "undefined") {
        console.warn("The expandedRowRender prop is deprecated. Use expandedRow instead.");
      }
    },
    methods: {
      renderLastFullRow: function renderLastFullRow() {
        var h = this.$createElement;
        var lastFullRow = renderTNodeJSX(this, "lastFullRow");
        var asyncLoadingNode = this.renderAsyncLoadingRow();
        var nodes = [lastFullRow, asyncLoadingNode].filter(function (v) {
          return ![void 0, null, false].includes(v);
        });
        if (nodes.length === 0) return null;
        if (nodes.length === 1) return nodes[0];
        return h("div", [nodes[0], nodes[1]]);
      }
    },
    render: function render() {
      var _this = this,
          _this$expandedRow;

      var h = arguments[0];
      var $props = this.$props,
          $scopedSlots = this.$scopedSlots,
          rehandleColumns = this.rehandleColumns;

      var scopedSlots = _objectSpread$b({}, $scopedSlots);

      var on = _objectSpread$b(_objectSpread$b({}, this.$listeners), {}, {
        "page-change": function pageChange(pageInfo, newDataSource) {
          emitEvent(_this, "page-change", pageInfo, newDataSource);
          emitEvent(_this, "change", {
            pagination: pageInfo
          }, {
            trigger: "pagination",
            currentData: newDataSource
          });
        },
        "row-dragstart": this.onDragStart,
        "row-dragover": this.onDragOver
      });

      if (this.expandOnRowClick) {
        on["row-click"] = function (params) {
          _this.handleExpandChange(params.row);
        };
      }

      var baseTableProps2 = {
        props: _objectSpread$b(_objectSpread$b({}, $props), {}, {
          columns: rehandleColumns,
          provider: {
            renderExpandedRow: ((_this$expandedRow = this.expandedRow) !== null && _this$expandedRow !== void 0 ? _this$expandedRow : this.$scopedSlots.expandedRow) ? this.renderExpandedRow : void 0,
            sortOnRowDraggable: this.sortOnRowDraggable,
            dragging: this.dragging
          },
          firstFullRow: this.hasFilterCondition ? this.renderFirstFilterRow : this.firstFullRow,
          lastFullRow: this.renderLastFullRow,
          empty: this.empty,
          topContent: this.columnController ? this.renderShowColumns() : ""
        }),
        scopedSlots: scopedSlots,
        on: on
      };
      return h(_BaseTable, helper([{}, baseTableProps2]));
    }
  });

  var enhancedTableProps = {
    tree: {
      type: Object
    }
  };

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var TableTreeStore = /*#__PURE__*/function () {
    function TableTreeStore() {
      _classCallCheck(this, TableTreeStore);

      _defineProperty$2(this, "treeDataMap", /* @__PURE__ */new Map());

      this.treeDataMap = /* @__PURE__ */new Map();
    }

    _createClass(TableTreeStore, [{
      key: "initialTreeStore",
      value: function initialTreeStore(dataSource, columns, keys) {
        var _this$treeDataMap;

        (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 ? void 0 : _this$treeDataMap.clear();
        initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);
      }
    }, {
      key: "toggleExpandData",
      value: function toggleExpandData(p, dataSouce, keys) {
        var rowValue = get_1(p.row, keys.rowKey);
        var r = this.treeDataMap.get(rowValue) || {
          row: p.row,
          rowIndex: p.rowIndex,
          expanded: false
        };
        r.rowIndex = p.rowIndex;
        r.expanded = !r.expanded;
        this.treeDataMap.set(rowValue, r);
        this.updateExpandRow(r, dataSouce, keys);
      }
    }, {
      key: "updateExpandRow",
      value: function updateExpandRow(changeRow, dataSource, keys) {
        var row = changeRow.row,
            rowIndex = changeRow.rowIndex,
            expanded = changeRow.expanded;
        var treeDataMap = this.treeDataMap;
        var childrenNodes = get_1(row, keys.childrenKey);
        if (!row || !childrenNodes) return;

        if (expanded) {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys);
          dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
        } else {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          var len = changeRow.expandChildrenLength || childrenNodes.length;
          updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys);
          dataSource.splice(rowIndex + 1, len);
        }

        updateRowIndex(treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: rowIndex + 1
        });
      }
    }, {
      key: "getData",
      value: function getData(key) {
        return this.treeDataMap.get(key);
      }
    }, {
      key: "updateData",
      value: function updateData(key, newRowData, dataSource, keys) {
        var newKey = get_1(newRowData, keys.rowKey);
        var rowState = this.treeDataMap.get(key);

        if (!rowState || rowState.rowIndex === -1) {
          updateRowData(dataSource, key, newRowData, {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          return;
        }

        var currentRowIndex = rowState.rowIndex;
        rowState.row = newRowData;
        this.treeDataMap.set(key, rowState);

        if (rowState.parent) {
          var siblings = get_1(rowState.parent.row, keys.childrenKey);
          var index = siblings.findIndex(function (item) {
            return get_1(item, keys.rowKey) === key;
          });
          siblings[index] = newRowData;
        }

        if (key !== newKey) {
          this.treeDataMap.set(newKey, rowState);
          this.treeDataMap["delete"](key);
        } else {
          this.treeDataMap.set(key, rowState);
        }

        return currentRowIndex;
      }
    }, {
      key: "remove",
      value: function remove(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);

        if (r && r.rowIndex >= 0) {
          var removeNumber = (r.expandChildrenLength || 0) + 1;
          dataSource.splice(r.rowIndex, removeNumber);

          if (r.parent) {
            var siblings = get_1(r.parent.row, keys.childrenKey);
            var index = siblings.findIndex(function (item) {
              return get_1(item, keys.rowKey) === key;
            });
            siblings.splice(index, 1);
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", {
              rowKey: keys.rowKey,
              childrenKey: keys.childrenKey
            });
          }

          this.treeDataMap["delete"](key);
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: r.rowIndex,
            rowKey: keys.rowKey
          });
        } else {
          console.warn("TDesign Table Warn: Do not remove this node, which is not appreared.");
        }

        return dataSource;
      }
    }, {
      key: "appendTo",
      value: function appendTo(key, newData, dataSource, keys) {
        var state = this.treeDataMap.get(key);

        if (!state) {
          console.warn("TDesign Table Warn: ".concat(key, " is not exist."));
          return;
        }

        var newRowValue = get_1(newData, keys.rowKey);

        if (this.treeDataMap.get(newRowValue)) {
          console.warn("TDesign Table Warn: Duplicated Key. ".concat(newRowValue, " is already exists."));
          return;
        }

        var children = get_1(state.row, keys.childrenKey);
        var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
        var newState = {
          row: newData,
          level: state.level + 1,
          parent: state,
          path: _toConsumableArray(state.path),
          expanded: false,
          expandChildrenLength: 0,
          rowIndex: isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + 1 : -1
        };
        newState.path = newState.path.concat(newState);

        if (children !== null && children !== void 0 && children.length) {
          state.row[keys.childrenKey].push(newData);
        } else {
          state.row[keys.childrenKey] = [newData];
          state.expanded = true;
        }

        this.treeDataMap.set(newRowValue, newState);

        if (isShowNewNode) {
          dataSource.splice(newState.rowIndex, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.row, 1, "insert", {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: newState.rowIndex,
            rowKey: keys.rowKey
          });
        }

        return dataSource;
      }
    }]);

    return TableTreeStore;
  }();
  function initialTreeDataMap(treeDataMap, dataSource, column, keys) {
    for (var i = 0, len = dataSource.length; i < len; i++) {
      var item = dataSource[i];
      var rowValue = get_1(item, keys.rowKey);
      var state = {
        row: item,
        rowIndex: i,
        expanded: false,
        level: 0,
        expandChildrenLength: 0,
        disabled: isRowSelectedDisabled(column, item, i)
      };
      state.path = [state];
      treeDataMap.set(rowValue, state);
      var children = get_1(item, keys.childrenKey);

      if (column.colKey === "row-select" && children !== null && children !== void 0 && children.length) {
        initialTreeDataMap(treeDataMap, children, column, keys);
      }
    }
  }
  function updateRowExpandLength(treeDataMap, row, distance, type, keys) {
    var tmp = row;

    while (tmp) {
      var _state$parent;

      var state = treeDataMap.get(get_1(tmp, keys.rowKey));
      var expandLen = (state.expandChildrenLength || 0) + distance;
      state.expandChildrenLength = Math.max(0, expandLen);
      tmp = state === null || state === void 0 ? void 0 : (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
    }

    if (type === "fold") {
      clearRowExpandLength(treeDataMap, row, keys);
    }
  }
  function clearRowExpandLength(treeDataMap, row, keys) {
    var children = get_1(row, keys.childrenKey);

    if (children !== null && children !== void 0 && children.length) {
      children.forEach(function (item) {
        var state = treeDataMap.get(get_1(item, keys.rowKey));
        if (!state) return;
        state.expandChildrenLength = 0;
        clearRowExpandLength(treeDataMap, state.row, keys);
      });
    }
  }
  function updateChildrenRowState(treeDataMap, rowState, expanded, keys) {
    var row = rowState.row,
        _rowState$level = rowState.level,
        level = _rowState$level === void 0 ? 0 : _rowState$level,
        rowIndex = rowState.rowIndex;
    var childrenNodes = get_1(row, keys.childrenKey);
    childrenNodes.forEach(function (item, kidRowIndex) {
      var rowValue = get_1(item, keys.rowKey);
      var index = expanded ? rowIndex + 1 + kidRowIndex : -1;
      var curState = treeDataMap.get(rowValue);

      var newState = _objectSpread$a(_objectSpread$a({}, curState), {}, {
        row: item,
        rowIndex: index,
        expanded: false,
        parent: rowState,
        level: level + 1,
        path: []
      });

      newState.path = newState.path.concat(newState);
      treeDataMap.set(rowValue, newState);

      if (!expanded) {
        var children = get_1(item, keys.childrenKey);

        if (children !== null && children !== void 0 && children.length) {
          updateChildrenRowState(treeDataMap, _objectSpread$a(_objectSpread$a({}, newState), {}, {
            rowIndex: -1,
            expanded: false
          }), expanded, keys);
        }
      }
    });
  }
  function updateRowData(data, key, newData, keys) {
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];

      if (get_1(item, keys.rowKey) === key) {
        data[i] = newData;
        return;
      }

      var children = get_1(item, keys.childrenKey) || [];

      if (children !== null && children !== void 0 && children.length) {
        updateRowData(children, key, newData, keys);
      }
    }
  }
  function updateRowIndex(treeDataMap, dataSource, extra) {
    var start = extra.minRowIndex || 0;
    var end = extra.maxRowIndex || dataSource.length;

    for (var rowIndex = start; rowIndex < end; rowIndex++) {
      var item = dataSource[rowIndex];
      var state = treeDataMap.get(get_1(item, extra.rowKey));
      state.rowIndex = rowIndex;
    }
  }

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeData = Vue__default["default"].extend({
    props: {
      rowKey: baseTableProps.rowKey,
      data: baseTableProps.data,
      columns: primaryTableProps.columns,
      tree: enhancedTableProps.tree
    },
    data: function data() {
      return {
        store: new TableTreeStore(),
        dataSource: []
      };
    },
    computed: {
      rowDataKeys: function rowDataKeys() {
        return {
          rowKey: this.rowKey,
          childrenKey: this.childrenKey
        };
      },
      childrenKey: function childrenKey() {
        var _this$tree;

        return ((_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.childrenKey) || "children";
      },
      columnsSource: function columnsSource() {
        var _this$tree2,
            _this$columns$treeNod,
            _this = this;

        this.$createElement;
        var treeNodeColumnIndex = ((_this$tree2 = this.tree) === null || _this$tree2 === void 0 ? void 0 : _this$tree2.treeNodeColumnIndex) || 0;

        if ((_this$columns$treeNod = this.columns[treeNodeColumnIndex]) !== null && _this$columns$treeNod !== void 0 && _this$columns$treeNod.type) {
          treeNodeColumnIndex += 1;
        }

        var cols = _toConsumableArray(this.columns);

        var treeNodeCol = _objectSpread$9({}, this.columns[treeNodeColumnIndex]);

        treeNodeCol.cell = function (h, p) {
          var cellInfo = getCell(_this, _objectSpread$9(_objectSpread$9({}, p), {}, {
            col: _this.columns[treeNodeColumnIndex]
          }));

          var currentState = _this.store.treeDataMap.get(get_1(p.row, _this.rowKey));

          var colStyle = _this.getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

          var childrenNodes = get_1(p.row, _this.childrenKey);

          if (childrenNodes && childrenNodes instanceof Array) {
            var _this$store$treeDataM;

            var IconNode = (_this$store$treeDataM = _this.store.treeDataMap.get(get_1(p.row, _this.rowKey))) !== null && _this$store$treeDataM !== void 0 && _this$store$treeDataM.expanded ? MinusRectangle : AddRectangle;
            return h("div", {
              "class": "".concat(prefix, "-table__tree-col"),
              "style": colStyle
            }, [!!childrenNodes.length && h(IconNode, {
              "style": {
                marginRight: "8px"
              },
              "on": {
                "click": function click() {
                  return _this.toggleExpandData(p);
                }
              }
            }), cellInfo]);
          }

          return h("div", {
            "style": colStyle
          }, [cellInfo]);
        };

        if (treeNodeCol.ellipsis === true) {
          treeNodeCol.ellipsis = function (h, p) {
            return getCell(_this, _objectSpread$9(_objectSpread$9({}, p), {}, {
              col: _this.columns[treeNodeColumnIndex]
            }));
          };
        }

        cols[treeNodeColumnIndex] = treeNodeCol;
        return cols;
      }
    },
    watch: {
      data: {
        immediate: true,
        handler: function handler(val) {
          this.dataSource = _toConsumableArray(cloneDeep_1(val));
          this.store.initialTreeStore(this.dataSource, this.columns, this.rowDataKeys);
        }
      }
    },
    destroyed: function destroyed() {
      var _this$store$treeDataM2;

      (_this$store$treeDataM2 = this.store.treeDataMap) === null || _this$store$treeDataM2 === void 0 ? void 0 : _this$store$treeDataM2.clear();
      this.store = null;
    },
    methods: {
      getTreeNodeStyle: function getTreeNodeStyle(level) {
        var _this$tree3;

        if (!level) return;
        var indent = ((_this$tree3 = this.tree) === null || _this$tree3 === void 0 ? void 0 : _this$tree3.indent) || 24;
        return {
          paddingLeft: "".concat(level * indent, "px")
        };
      },
      toggleExpandData: function toggleExpandData(p) {
        this.store.toggleExpandData(p, this.dataSource, this.rowDataKeys);
      },
      setData: function setData(key, newRowData) {
        var rowIndex = this.store.updateData(key, newRowData, this.dataSource, this.rowDataKeys);
        this.$set(this.dataSource, rowIndex, newRowData);
      },
      getData: function getData(key) {
        return this.store.getData(key);
      },
      remove: function remove(key) {
        this.store.remove(key, this.dataSource, this.rowDataKeys);
      },
      appendTo: function appendTo(key, newData) {
        this.store.appendTo(key, newData, this.dataSource, this.rowDataKeys);
      }
    }
  });

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var childreMap = /* @__PURE__ */new Map();
  function getChildrenData(treeDataMap, data, childrenKey, rowKey, r) {
    if (childreMap.get(data)) return childreMap.get(data);
    var result = r || {
      allChildren: [],
      allChildrenKeys: []
    };
    var children = get_1(data, childrenKey);
    if (!children || !children.length) return result;
    var selectableChildren = children.filter(function (item) {
      var _treeDataMap$get;

      return !((_treeDataMap$get = treeDataMap.get(get_1(item, rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
    });
    result.allChildren = result.allChildren.concat(selectableChildren);
    var childrenKeys = selectableChildren.map(function (item) {
      return get_1(item, rowKey);
    });
    result.allChildrenKeys = result.allChildrenKeys.concat(childrenKeys);

    for (var i = 0, len = children.length; i < len; i++) {
      var tItem = children[i];
      var c = get_1(tItem, childrenKey);

      if (c !== null && c !== void 0 && c.length) {
        var nextLevelData = getChildrenData(treeDataMap, tItem, childrenKey, rowKey, result);
        result.allChildren = result.allChildren.concat(nextLevelData.allChildren);
        result.allChildrenKeys = result.allChildrenKeys.concat(nextLevelData.allChildrenKeys);
      }
    }

    return result;
  }
  function removeChildrenKeys(p, r) {
    var selectedRowKeys = p.selectedRowKeys,
        removeKeys = p.removeKeys;
    var result = r || {
      data: [],
      keys: []
    };

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];

      if (!removeKeys.includes(key)) {
        result.keys.push(key);
      }
    }

    return result;
  }
  function getRowDataByKeys(p) {
    var treeDataMap = p.treeDataMap,
        selectedRowKeys = p.selectedRowKeys;
    var result = [];

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      result.push(treeDataMap.get(key));
    }

    return result;
  }
  var TreeSelect = Vue__default["default"].extend({
    props: {
      data: baseTableProps.data,
      rowKey: baseTableProps.rowKey,
      columns: primaryTableProps.columns,
      tree: enhancedTableProps.tree
    },
    data: function data() {
      return {
        dataSource: this.data,
        store: new TableTreeStore()
      };
    },
    computed: {
      childrenKey: function childrenKey() {
        var _this$tree;

        return ((_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.childrenKey) || "children";
      },
      rowDataKeys: function rowDataKeys() {
        return {
          rowKey: this.rowKey,
          childrenKey: this.childrenKey
        };
      }
    },
    methods: {
      onInnerSelectChange: function onInnerSelectChange(rowKeys, extraData) {
        if (extraData.currentRowKey === "CHECK_ALL_BOX") {
          this.handleSelectAll(extraData);
        } else {
          this.handleSelect(rowKeys, extraData);
        }
      },
      handleSelectAll: function handleSelectAll(extraData) {
        var newRowKeys = [];
        var newRowData = [];

        if (extraData.type === "check") {
          var arr = _toConsumableArray(this.store.treeDataMap.values());

          for (var i = 0, len = arr.length; i < len; i++) {
            var item = arr[i];

            if (!item.disabled) {
              newRowData.push(item.row);
              newRowKeys.push(get_1(item.row, this.rowKey));
            }
          }
        }

        var newExtraData = _objectSpread$8(_objectSpread$8({}, extraData), {}, {
          selectedRowData: newRowData || []
        });

        emitEvent(this, "select-change", newRowKeys, newExtraData);
        this.$emit("update:selectedRowKeys", newRowKeys, newExtraData);
      },
      handleSelect: function handleSelect(rowKeys, extraData) {
        var newRowKeys = _toConsumableArray(rowKeys);

        if ((this === null || this === void 0 ? void 0 : this.tree.checkStrictly) === false) {
          if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
            var result = getChildrenData(this.store.treeDataMap, extraData.currentRowData, this.childrenKey, this.rowKey);
            var allChildrenKeys = result.allChildrenKeys;
            childreMap.set(extraData.currentRowData, result);
            newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
          } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
            var children = getChildrenData(this.store.treeDataMap, extraData.currentRowData, this.childrenKey, this.rowKey);

            var _result = removeChildrenKeys({
              selectedRowKeys: rowKeys,
              removeKeys: children.allChildrenKeys
            });

            newRowKeys = _result.keys;
          }
        }

        var newRowData = getRowDataByKeys({
          treeDataMap: this.store.treeDataMap,
          selectedRowKeys: newRowKeys
        });

        var newExtraData = _objectSpread$8(_objectSpread$8({}, extraData), {}, {
          selectedRowData: newRowData
        });

        emitEvent(this, "select-change", newRowKeys, newExtraData);
        this.$emit("update:selectedRowKeys", newRowKeys, newExtraData);
      }
    }
  });

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _EnhancedTable = mixins(TreeData, TreeSelect).extend({
    name: "TEnhancedTable",
    props: _objectSpread$7(_objectSpread$7(_objectSpread$7({}, baseTableProps), primaryTableProps), enhancedTableProps),
    data: function data() {
      return {
        dataSource: []
      };
    },
    computed: {
      childrenKey: function childrenKey() {
        var _this$tree;

        return ((_this$tree = this.tree) === null || _this$tree === void 0 ? void 0 : _this$tree.childrenKey) || "children";
      }
    },
    render: function render() {
      var h = arguments[0];
      var options = {
        props: _objectSpread$7(_objectSpread$7({}, this.$props), {}, {
          data: this.dataSource,
          columns: this.columnsSource
        }),
        on: _objectSpread$7(_objectSpread$7({}, this.$listeners), {}, {
          "select-change": this.onInnerSelectChange
        }),
        scopedSlots: _objectSpread$7({}, this.$scopedSlots)
      };
      return h(_PrimaryTable, helper([{}, options]));
    }
  });

  var TPrimaryTable = mapProps([{
    name: "expandedRowKeys",
    event: ["expand-change", "update:expandedRowKeys"]
  }, {
    name: "selectedRowKeys",
    event: ["select-change", "update:selectedRowKeys"]
  }, {
    name: "sort",
    event: ["sort-change", "update:sort"]
  }, {
    name: "filterValue",
    event: ["filter-change", "update:filterValue"]
  }])(_PrimaryTable);
  var BaseTable = withInstall(_BaseTable);
  var PrimaryTable = withInstall(TPrimaryTable);
  var EnhancedTable = withInstall(_EnhancedTable);
  var Table = withInstall(TPrimaryTable);

  var props$4 = {
    close: {
      type: [String, Boolean, Function],
      "default": false
    },
    "default": {
      type: [String, Function]
    },
    icon: {
      type: Function
    },
    maxLine: {
      type: Number,
      "default": 0
    },
    message: {
      type: [String, Function]
    },
    operation: {
      type: Function
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["success", "info", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onClose: Function,
    onClosed: Function
  };

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$5 = "".concat(prefix, "-alert");
  var _Alert = Vue__default["default"].extend({
    name: "TAlert",
    data: function data() {
      return {
        visible: true,
        collapsed: true
      };
    },
    props: _objectSpread$6({}, props$4),
    render: function render() {
      var h = arguments[0];
      var compClass = [name$5, "".concat(name$5, "--").concat(this.theme), _defineProperty$2({}, "".concat(prefix, "-is-hidden"), !this.visible)];
      return h("div", {
        "class": compClass
      }, [this.renderIcon(), this.renderContent(), this.renderClose()]);
    },
    mounted: function mounted() {
      on(this.$el, "transitionend", this.handleCloseEnd);
    },
    beforeDestroy: function beforeDestroy() {
      off(this.$el, "transitionend", this.handleCloseEnd);
    },
    methods: {
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        var iconContent;

        if (typeof this.icon === "function") {
          iconContent = this.icon(this.$createElement);
        } else if (this.$scopedSlots.icon) {
          iconContent = this.$scopedSlots.icon && this.$scopedSlots.icon(null)[0];
        } else {
          var component = {
            info: InfoCircleFilled,
            success: CheckCircleFilled,
            warning: ErrorCircleFilled,
            error: ErrorCircleFilled
          }[this.theme];
          iconContent = h(component);
        }

        return iconContent ? h("div", {
          "class": "".concat(name$5, "__icon")
        }, [iconContent]) : null;
      },
      renderClose: function renderClose() {
        var h = this.$createElement;
        var closeContent = null;

        if (this.close === true || this.close === "") {
          closeContent = h(Close);
        } else if (typeof this.close === "string") {
          closeContent = this.close;
        } else if (typeof this.close === "function") {
          closeContent = this.close(this.$createElement);
        } else {
          closeContent = this.$scopedSlots.close && this.$scopedSlots.close(null)[0];
        }

        return closeContent ? h("div", {
          "class": "".concat(name$5, "__close"),
          "on": {
            "click": this.handleClose
          }
        }, [closeContent]) : null;
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(name$5, "__content")
        }, [this.renderTitle(), this.renderMessage()]);
      },
      renderTitle: function renderTitle() {
        var h = this.$createElement;
        var titleContent = renderTNodeJSX(this, "title");
        return titleContent ? h("div", {
          "class": "".concat(name$5, "__title")
        }, [" ", titleContent]) : null;
      },
      renderMessage: function renderMessage() {
        var h = this.$createElement;
        var operationContent = renderTNodeJSX(this, "operation");
        return h("div", {
          "class": "".concat(name$5, "__message")
        }, [this.renderDescription(), operationContent ? h("div", {
          "class": "".concat(name$5, "__operation")
        }, [operationContent]) : null]);
      },
      renderDescription: function renderDescription() {
        var _this = this;

        var h = this.$createElement;
        var messageContent;
        messageContent = renderTNodeJSX(this, "default");

        if (!messageContent) {
          messageContent = renderTNodeJSX(this, "message");
        }

        var contentLength = Object.prototype.toString.call(messageContent) === "[object Array]" ? messageContent.length : 1;
        var hasCollapse = this.maxLine > 0 && this.maxLine < contentLength;

        if (hasCollapse && this.collapsed) {
          messageContent = messageContent.slice(0, this.maxLine);
        }

        return h("div", {
          "class": "".concat(name$5, "__description")
        }, [hasCollapse ? messageContent.map(function (content) {
          return h("div", [content]);
        }) : messageContent, hasCollapse ? h("div", {
          "class": "".concat(name$5, "__collapse"),
          "on": {
            "click": function click() {
              _this.collapsed = !_this.collapsed;
            }
          }
        }, [this.collapsed ? "\u5C55\u5F00\u5168\u90E8" : "\u6536\u8D77"]) : null]);
      },
      handleClose: function handleClose(e) {
        this.$emit("close", {
          e: e
        });

        if (this.onClose) {
          this.onClose({
            e: e
          });
        }

        addClass(this.$el, "".concat(name$5, "--closing"));
      },
      handleCloseEnd: function handleCloseEnd(e) {
        if (e.propertyName === "opacity") {
          this.visible = false;
          this.$emit("closed", {
            e: e
          });

          if (this.onClosed) {
            this.onClosed({
              e: e
            });
          }
        }
      }
    }
  });

  var Alert = withInstall(_Alert);

  var Dialog = withInstall(_Dialog);

  var props$3 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function]
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": true
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": true
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    mode: {
      type: String,
      "default": "overlay",
      validator: function validator(val) {
        return ["overlay", "push"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        return ["left", "right", "top", "bottom"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "small"
    },
    sizeDraggable: Boolean,
    visible: Boolean,
    defaultVisible: Boolean,
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOverlayClick: Function
  };

  var name$4 = "".concat(prefix, "-drawer");
  var lockClass = "".concat(prefix, "-drawer--lock");
  var _Drawer = mixins(ActionMixin, getConfigReceiverMixins("drawer")).extend({
    name: "TDrawer",
    components: {
      CloseIcon: Close,
      TButton: Button
    },
    props: props$3,
    directives: {
      TransferDom: TransferDom
    },
    data: function data() {
      return {
        isSizeDragging: false,
        draggedSizeValue: null
      };
    },
    computed: {
      drawerClasses: function drawerClasses() {
        var _ref;

        return [name$4, "".concat(name$4, "--").concat(this.placement), (_ref = {}, _defineProperty$2(_ref, "".concat(name$4, "--open"), this.visible), _defineProperty$2(_ref, "".concat(name$4, "--attach"), this.showInAttachedElement), _defineProperty$2(_ref, "".concat(name$4, "--without-mask"), !this.showOverlay), _ref)];
      },
      sizeValue: function sizeValue() {
        if (this.draggedSizeValue) return this.draggedSizeValue;
        var defaultSize = isNaN(Number(this.size)) ? this.size : "".concat(this.size, "px");
        return {
          small: "300px",
          medium: "500px",
          large: "760px"
        }[this.size] || defaultSize;
      },
      wrapperStyles: function wrapperStyles() {
        return {
          transform: this.visible ? "translateX(0)" : void 0,
          width: this.isHorizontal ? this.sizeValue : "",
          height: this.isVertical ? this.sizeValue : ""
        };
      },
      wrapperClasses: function wrapperClasses() {
        return ["".concat(name$4, "__content-wrapper"), "".concat(name$4, "__content-wrapper--").concat(this.placement)];
      },
      parentNode: function parentNode() {
        return this.$el && this.$el.parentNode;
      },
      modeAndPlacement: function modeAndPlacement() {
        return [this.mode, this.placement].join();
      },
      footerStyle: function footerStyle() {
        return {
          display: "flex",
          justifyContent: this.placement === "right" ? "flex-start" : "flex-end"
        };
      },
      isHorizontal: function isHorizontal() {
        return ["right", "left"].includes(this.placement);
      },
      isVertical: function isVertical() {
        return ["top", "bottom"].includes(this.placement);
      },
      draggableLineStyles: function draggableLineStyles() {
        var _ref2;

        var oppositeMap = {
          left: "right",
          right: "left",
          top: "bottom",
          bottom: "top"
        };
        return _ref2 = {
          zIndex: 1,
          position: "absolute",
          background: "transparent"
        }, _defineProperty$2(_ref2, oppositeMap[this.placement], 0), _defineProperty$2(_ref2, "width", this.isHorizontal ? "16px" : "100%"), _defineProperty$2(_ref2, "height", this.isHorizontal ? "100%" : "16px"), _defineProperty$2(_ref2, "cursor", this.isHorizontal ? "col-resize" : "row-resize"), _ref2;
      }
    },
    watch: {
      modeAndPlacement: {
        handler: function handler() {
          this.handlePushMode();
        },
        immediate: true
      },
      visible: {
        handler: function handler(val) {
          if (val) {
            var _this$$refs$drawerCon, _this$$refs$drawerCon2;

            (_this$$refs$drawerCon = this.$refs.drawerContainer) === null || _this$$refs$drawerCon === void 0 ? void 0 : (_this$$refs$drawerCon2 = _this$$refs$drawerCon.focus) === null || _this$$refs$drawerCon2 === void 0 ? void 0 : _this$$refs$drawerCon2.call(_this$$refs$drawerCon);
          }

          this.handleScrollThrough(val);
        }
      }
    },
    updated: function updated() {
      this.updatePushMode();
    },
    mounted: function mounted() {
      this.handleScrollThrough(this.visible);
    },
    render: function render() {
      var h = arguments[0];
      if (this.destroyOnClose && !this.visible) return;
      var defaultCloseBtn = h("close-icon", {
        "class": "".concat(prefix, "-submenu-icon")
      });
      var body = renderContent(this, "default", "body");
      var defaultFooter = this.getDefaultFooter();
      return h("div", {
        "class": this.drawerClasses,
        "style": {
          zIndex: this.zIndex
        },
        "on": {
          "keydown": this.onKeyDown
        },
        "directives": [{
          name: "transfer-dom",
          value: this.attach
        }],
        "ref": "drawerContainer",
        "attrs": {
          "tabindex": 0
        }
      }, [this.showOverlay && h("div", {
        "class": "".concat(name$4, "__mask"),
        "on": {
          "click": this.handleWrapperClick
        }
      }), h("div", {
        "class": this.wrapperClasses,
        "style": this.wrapperStyles
      }, [this.header !== false ? h("div", {
        "class": "".concat(name$4, "__header")
      }, [renderTNodeJSX(this, "header")]) : null, this.closeBtn !== false ? h("div", {
        "class": "".concat(name$4, "__close-btn"),
        "on": {
          "click": this.handleCloseBtnClick
        }
      }, [renderTNodeJSX(this, "closeBtn", defaultCloseBtn)]) : null, h("div", {
        "class": "".concat(name$4, "__body")
      }, [body]), this.footer !== false ? h("div", {
        "class": "".concat(name$4, "__footer")
      }, [renderTNodeJSX(this, "footer", defaultFooter)]) : null, this.sizeDraggable && h("div", {
        "style": this.draggableLineStyles,
        "on": {
          "mousedown": this.enableDrag,
          "mousemove": this.handleMousemove,
          "mouseup": this.disableDrag,
          "mouseleave": this.disableDrag
        }
      })])]);
    },
    methods: {
      enableDrag: function enableDrag() {
        this.isSizeDragging = true;
      },
      handleMousemove: function handleMousemove(e) {
        var x = e.x,
            y = e.y;

        if (this.isSizeDragging && this.sizeDraggable) {
          if (this.placement === "right") {
            this.draggedSizeValue = "".concat(document.documentElement.clientWidth - x + 8, "px");
          }

          if (this.placement === "left") {
            this.draggedSizeValue = "".concat(x + 8, "px");
          }

          if (this.placement === "top") {
            this.draggedSizeValue = "".concat(y + 8, "px");
          }

          if (this.placement === "bottom") {
            this.draggedSizeValue = "".concat(document.documentElement.clientHeight - y + 8, "px");
          }
        }
      },
      disableDrag: function disableDrag() {
        this.isSizeDragging = false;
      },
      handleScrollThrough: function handleScrollThrough(visible) {
        if (!document || !document.body || !this.preventScrollThrough) return;

        if (visible && !this.showInAttachedElement) {
          this.preventScrollThrough && addClass(document.body, lockClass);
        } else {
          this.preventScrollThrough && removeClass(document.body, lockClass);
        }
      },
      handlePushMode: function handlePushMode() {
        var _this = this;

        if (this.mode !== "push") return;
        this.$nextTick(function () {
          if (!_this.parentNode) return;
          _this.parentNode.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
        });
      },
      updatePushMode: function updatePushMode() {
        if (!this.parentNode) return;
        if (this.mode !== "push" || !this.parentNode) return;
        var marginStr = {
          left: "margin: 0 0 0 ".concat(this.sizeValue),
          right: "margin: 0 0 0 -".concat(this.sizeValue),
          top: "margin: ".concat(this.sizeValue, " 0 0 0"),
          bottom: "margin: -".concat(this.sizeValue, " 0 0 0")
        }[this.placement];

        if (this.visible) {
          this.parentNode.style.cssText += marginStr;
        } else {
          this.parentNode.style.cssText = this.parentNode.style.cssText.replace(/margin:.+;/, "");
        }
      },
      getDefaultBtn: function getDefaultBtn(btnType, btnApi) {
        var h = this.$createElement;
        var isCancel = btnType === "cancel";
        var clickAction = isCancel ? this.cancelBtnAction : this.confirmBtnAction;
        var theme = isCancel ? "default" : "primary";
        var isApiObject = _typeof(btnApi) === "object";
        return h("t-button", helper([{
          "attrs": {
            "theme": theme
          },
          "on": {
            "click": clickAction
          }
        }, {
          "props": isApiObject ? btnApi : {}
        }, {
          "class": "".concat(name$4, "-").concat(btnType)
        }]), [btnApi && _typeof(btnApi) === "object" ? btnApi.content : btnApi]);
      },
      isUseDefault: function isUseDefault(btnApi) {
        var baseTypes = ["string", "object"];
        return Boolean(btnApi && baseTypes.includes(_typeof(btnApi)));
      },
      getDefaultFooter: function getDefaultFooter() {
        var h = this.$createElement;
        var confirmBtn = this.getConfirmBtn({
          confirmBtn: this.confirmBtn,
          globalConfirm: this.global.confirm,
          className: "".concat(prefix, "-drawer__confirm")
        });
        var cancelBtn = this.getCancelBtn({
          cancelBtn: this.cancelBtn,
          globalCancel: this.global.cancel,
          className: "".concat(prefix, "-drawer__cancel")
        });
        return h("div", {
          "style": this.footerStyle
        }, [this.placement === "right" ? confirmBtn : null, cancelBtn, this.placement !== "right" ? confirmBtn : null]);
      },
      handleCloseBtnClick: function handleCloseBtnClick(e) {
        emitEvent(this, "close-btn-click", {
          e: e
        });
        this.closeDrawer({
          trigger: "close-btn",
          e: e
        });
      },
      handleWrapperClick: function handleWrapperClick(e) {
        emitEvent(this, "overlay-click", {
          e: e
        });

        if (this.closeOnOverlayClick) {
          this.closeDrawer({
            trigger: "overlay",
            e: e
          });
        }
      },
      onKeyDown: function onKeyDown(e) {
        if (e.key === "Escape") {
          emitEvent(this, "esc-keydown", {
            e: e
          });

          if (this.closeOnEscKeydown) {
            this.closeDrawer({
              trigger: "esc",
              e: e
            });
          }
        }
      },
      confirmBtnAction: function confirmBtnAction(e) {
        emitEvent(this, "confirm", {
          e: e
        });
      },
      cancelBtnAction: function cancelBtnAction(e) {
        emitEvent(this, "cancel", {
          e: e
        });
        this.closeDrawer({
          trigger: "cancel",
          e: e
        });
      },
      closeDrawer: function closeDrawer(params) {
        emitEvent(this, "close", params);
        this.$emit("update:visible", false);
      }
    }
  });

  var Drawer = withInstall(_Drawer);

  var Message = withInstall(_Message);

  var props$2 = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    footer: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["info", "success", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$3 = "".concat(prefix, "-notification");
  var _Notification = Vue__default["default"].extend({
    name: "TNotification",
    components: {
      InfoCircleFilledIcon: InfoCircleFilled,
      CheckCircleFilledIcon: CheckCircleFilled,
      CloseIcon: Close
    },
    props: _objectSpread$5({}, props$2),
    mounted: function mounted() {
      var _this = this;

      if (this.duration > 0) {
        var timer = setTimeout(function () {
          clearTimeout(timer);

          _this.$emit("duration-end");

          if (_this.onDurationEnd) {
            _this.onDurationEnd();
          }
        }, this.duration);
      }
    },
    methods: {
      close: function close(e) {
        this.$emit("close-btn-click", {
          e: e
        });

        if (this.onCloseBtnClick) {
          this.onCloseBtnClick({
            e: e
          });
        }
      },
      renderIcon: function renderIcon(h) {
        var icon;
        if (this.icon === false) return null;

        if (isFunction_1(this.icon)) {
          icon = this.icon(h);
        } else if (this.$scopedSlots.icon) {
          icon = this.$scopedSlots.icon(null);
        } else if (this.theme) {
          var iconType = this.theme === "success" ? h("check-circle-filled-icon", {
            "class": "".concat(prefix, "-is-").concat(this.theme)
          }) : h("info-circle-filled-icon", {
            "class": "".concat(prefix, "-is-").concat(this.theme)
          });
          icon = h("div", {
            "class": "".concat(name$3, "__icon")
          }, [iconType]);
        }

        return icon;
      },
      renderClose: function renderClose() {
        var h = this.$createElement;
        var defaultClose = h("close-icon");
        return h("span", {
          "class": "".concat(prefix, "-message__close"),
          "on": {
            "click": this.close
          }
        }, [renderTNodeJSX(this, "closeBtn", defaultClose)]);
      },
      renderContent: function renderContent$1() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(name$3, "__content")
        }, [renderContent(this, "default", "content")]);
      }
    },
    render: function render(h) {
      var icon = this.renderIcon(h);
      var close = this.renderClose();
      var content = this.renderContent();
      var footer = renderTNodeJSX(this, "footer");
      var title = renderTNodeJSX(this, "title");
      return h("div", {
        "class": "".concat(name$3)
      }, [icon, h("div", {
        "class": "".concat(name$3, "__main")
      }, [h("div", {
        "class": "".concat(name$3, "__title__wrap")
      }, [h("span", {
        "class": "".concat(name$3, "__title")
      }, [title]), close]), content, footer])]);
    }
  });

  var DEFAULT_Z_INDEX = 6e3;
  var DISTANCE = "16px";
  var PLACEMENT_OFFSET = {
    "top-left": {
      left: DISTANCE,
      top: DISTANCE
    },
    "top-right": {
      right: DISTANCE,
      top: DISTANCE
    },
    "bottom-right": {
      right: DISTANCE,
      bottom: DISTANCE
    },
    "bottom-left": {
      left: DISTANCE,
      bottom: DISTANCE
    }
  };

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var NotificationList = Vue__default["default"].extend({
    components: {
      Notification: _Notification
    },
    props: {
      placement: {
        type: String,
        "default": "top-right",
        validator: function validator(v) {
          return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
        }
      }
    },
    data: function data() {
      return {
        list: []
      };
    },
    computed: {
      styles: function styles() {
        return _objectSpread$4({
          zIndex: DEFAULT_Z_INDEX
        }, PLACEMENT_OFFSET[this.placement]);
      }
    },
    methods: {
      add: function add(options) {
        this.list.push(options);
        return this.list.length - 1;
      },
      remove: function remove(index) {
        this.list.splice(index, 1);
      },
      removeAll: function removeAll() {
        this.list = [];
      },
      getOffset: function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      },
      notificationStyles: function notificationStyles(item) {
        var styles = {
          marginBottom: DISTANCE
        };

        if (item.offset) {
          styles.position = "relative";
          styles.left = this.getOffset(item.offset[0]);
          styles.top = this.getOffset(item.offset[1]);
        }

        if (item.zIndex) styles["z-index"] = item.zIndex;
        return styles;
      },
      getListeners: function getListeners(index) {
        var _this = this;

        return {
          "close-btn-click": function closeBtnClick() {
            return _this.remove(index);
          },
          "duration-end": function durationEnd() {
            return _this.remove(index);
          }
        };
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      if (!this.list.length) return;
      return h("div", {
        "class": "".concat(prefix, "-notification__show--").concat(this.placement),
        "style": this.styles
      }, [this.list.map(function (item, index) {
        return h("t-notification", {
          "key": item.id,
          "style": _this2.notificationStyles(item),
          "props": _objectSpread$4({}, item),
          "on": _objectSpread$4({}, _this2.getListeners(index))
        });
      })]);
    }
  });

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var seed = 0;
  var instanceMap = /* @__PURE__ */new Map();

  var NotificationFunction = function NotificationFunction(options) {
    seed += 1;

    var hackOptions = _objectSpread$3({
      placement: "top-right",
      zIndex: 6e3,
      attach: "body",
      id: seed
    }, options);

    hackOptions.content = options.content ? options.content : "";
    var attachEl = getAttach(hackOptions.attach);

    if (!instanceMap.get(attachEl)) {
      instanceMap.set(attachEl, {});
    }

    var tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];

    if (!tmpInstance) {
      var list = new NotificationList({
        propsData: {
          placement: hackOptions.placement
        }
      });
      list.add(hackOptions);
      list.$mount();
      instanceMap.get(attachEl)[hackOptions.placement] = list;
      attachEl.appendChild(list.$el);
      tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];
    } else {
      tmpInstance.add(hackOptions);
    }

    return new Promise(function (resolve) {
      tmpInstance.$nextTick(function () {
        var list = tmpInstance.$children;
        resolve(list[list.length - 1]);
      });
    });
  };

  var showThemeNotification = function showThemeNotification(theme, options) {
    var hackOptions = _objectSpread$3(_objectSpread$3({}, options), {}, {
      theme: theme
    });

    return NotificationFunction(hackOptions);
  };

  var extraApi = {
    info: function info(options) {
      return showThemeNotification("info", options);
    },
    success: function success(options) {
      return showThemeNotification("success", options);
    },
    warning: function warning(options) {
      return showThemeNotification("warning", options);
    },
    error: function error(options) {
      return showThemeNotification("error", options);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      instanceMap.forEach(function (attach) {
        Object.keys(attach).forEach(function (placement) {
          attach[placement].removeAll();
        });
      });
    }
  };
  var NotificationPlugin = showThemeNotification;
  Object.keys(extraApi).forEach(function (funcName) {
    NotificationPlugin[funcName] = extraApi[funcName];
  });

  NotificationPlugin.install = function () {
    Vue__default["default"].prototype.$notify = NotificationPlugin;
    Vue__default["default"].prototype.$notification = NotificationPlugin;
  };

  var NotifyPlugin = NotificationPlugin;

  var Notification = withInstall(_Notification);

  var props$1 = {
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    icon: {
      type: Function
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "warning", "danger"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: Boolean,
    defaultVisible: Boolean,
    onCancel: Function,
    onConfirm: Function,
    onVisibleChange: Function
  };

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$2 = "".concat(prefix, "-popconfirm");
  var popupName = "".concat(prefix, "-popup");
  var _Popconfirm = mixins(ActionMixin, getConfigReceiverMixins("popconfirm")).extend({
    name: "TPopconfirm",
    props: _objectSpread$2({}, props$1),
    model: {
      prop: "visible",
      event: "visible-change"
    },
    data: function data() {
      return {
        name: name$2,
        popupName: popupName
      };
    },
    computed: {
      themeIcon: function themeIcon() {
        var iconMap = {
          "default": InfoCircleFilled,
          warning: ErrorCircleFilled,
          danger: ErrorCircleFilled
        };
        return iconMap[this.theme];
      },
      iconCls: function iconCls() {
        var theme = this.theme || "default";
        return "".concat(name$2, "__icon--").concat(theme);
      },
      innerPopupProps: function innerPopupProps() {
        return _objectSpread$2({
          showArrow: this.showArrow,
          overlayClassName: [name$2, "".concat(name$2, "__popup--").concat(this.theme || "default")],
          trigger: "click",
          destroyOnClose: this.destroyOnClose,
          placement: this.placement
        }, this.popupProps);
      }
    },
    methods: {
      cancelBtnAction: function cancelBtnAction(e) {
        emitEvent(this, "cancel", {
          e: e
        });
        var cancelContext = {
          e: e,
          trigger: "cancel"
        };
        emitEvent(this, "visible-change", false, cancelContext);
      },
      confirmBtnAction: function confirmBtnAction(e) {
        emitEvent(this, "confirm", {
          e: e
        });
        var confirmContext = {
          e: e,
          trigger: "confirm"
        };
        emitEvent(this, "visible-change", false, confirmContext);
      },
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        var Icon = this.themeIcon;
        return renderTNodeJSXDefault(this, "icon", h(Icon, {
          "class": this.iconCls
        }));
      },
      onPopupVisibleChange: function onPopupVisibleChange(val, context) {
        this.$emit("visible-change", val, context);
        this.onVisibleChange && this.onVisibleChange(val, context);
      }
    },
    render: function render() {
      var h = arguments[0];
      var triggerElement = renderContent(this, "default", "triggerElement");
      var cancelBtn = this.getCancelBtn({
        cancelBtn: this.cancelBtn,
        globalCancel: this.global.cancel,
        className: "".concat(name$2, "__cancel")
      });
      var confirmBtn = this.getConfirmBtn({
        theme: this.theme,
        confirmBtn: this.confirmBtn,
        globalConfirm: this.global.confirm,
        globalConfirmBtnTheme: this.global.confirmBtnTheme,
        className: "".concat(name$2, "__confirm")
      });
      return h(Popup, helper([{
        "ref": "popup",
        "attrs": {
          "visible": this.visible
        }
      }, {
        "props": this.innerPopupProps
      }, {}, {
        "on": {
          "visible-change": this.onPopupVisibleChange
        }
      }]), [h("template", {
        "slot": "content",
        "attrs": {
          "role": "poppconfirm"
        }
      }, [h("div", {
        "class": "".concat(name$2, "__content")
      }, [h("div", {
        "class": "".concat(name$2, "__body")
      }, [this.renderIcon(), h("div", {
        "class": "".concat(name$2, "__inner")
      }, [renderTNodeJSX(this, "content")])]), Boolean(cancelBtn || confirmBtn) && h("div", {
        "class": "".concat(name$2, "__buttons")
      }, [cancelBtn, confirmBtn])])]), triggerElement]);
    }
  });

  var Popconfirm = withInstall(mapProps(["visible"], {
    model: {
      prop: "visible",
      event: "visible-change"
    }
  })(_Popconfirm));

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;
  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new _Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  var _baseIsMatch = baseIsMatch;

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */

  function isStrictComparable(value) {
    return value === value && !isObject_1(value);
  }

  var _isStrictComparable = isStrictComparable;

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */

  function getMatchData(object) {
    var result = keys_1(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, _isStrictComparable(value)];
    }

    return result;
  }

  var _getMatchData = getMatchData;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable;

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatches(source) {
    var matchData = _getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || _baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatchesProperty(path, srcValue) {
    if (_isKey(path) && _isStrictComparable(srcValue)) {
      return _matchesStrictComparable(_toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get_1(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn_1(object, path) : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty;

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyDeep(path) {
    return function (object) {
      return _baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep;

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */

  function property(path) {
    return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
  }

  var property_1 = property;

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */

  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity_1;
    }

    if (_typeof(value) == 'object') {
      return isArray_1(value) ? _baseMatchesProperty(value[0], value[1]) : _baseMatches(value);
    }

    return property_1(value);
  }

  var _baseIteratee = baseIteratee;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax = Math.max;
  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */

  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;

    if (!length) {
      return -1;
    }

    var index = fromIndex == null ? 0 : toInteger_1(fromIndex);

    if (index < 0) {
      index = nativeMax(length + index, 0);
    }

    return _baseFindIndex(array, _baseIteratee(predicate), index);
  }

  var findIndex_1 = findIndex;

  /**
   * Creates an array excluding all given values using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * **Note:** Unlike `_.pull`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...*} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.difference, _.xor
   * @example
   *
   * _.without([2, 1, 2, 3], 1, 2);
   * // => [3]
   */

  var without = _baseRest(function (array, values) {
    return isArrayLikeObject_1(array) ? _baseDifference(array, values) : [];
  });
  var without_1 = without;

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {// No operation performed.
  }

  var noop_1 = noop;

  /** Used as references for various `Number` constants. */

  var INFINITY = 1 / 0;
  /**
   * Creates a set object of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */

  var createSet = !(_Set && 1 / _setToArray(new _Set([, -0]))[1] == INFINITY) ? noop_1 : function (values) {
    return new _Set(values);
  };
  var _createSet = createSet;

  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE = 200;
  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */

  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = _arrayIncludes,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = _arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : _createSet(array);

      if (set) {
        return _setToArray(set);
      }

      isCommon = false;
      includes = _cacheHas;
      seen = new _SetCache();
    } else {
      seen = iteratee ? [] : result;
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var seenIndex = seen.length;

        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }

        if (iteratee) {
          seen.push(computed);
        }

        result.push(value);
      } else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }

        result.push(value);
      }
    }

    return result;
  }

  var _baseUniq = baseUniq;

  /**
   * This method is like `_.uniq` except that it accepts `comparator` which
   * is invoked to compare elements of `array`. The order of result values is
   * determined by the order they occur in the array.The comparator is invoked
   * with two arguments: (arrVal, othVal).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
   *
   * _.uniqWith(objects, _.isEqual);
   * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
   */

  function uniqWith(array, comparator) {
    comparator = typeof comparator == 'function' ? comparator : undefined;
    return array && array.length ? _baseUniq(array, undefined, comparator) : [];
  }

  var uniqWith_1 = uniqWith;

  var UPLOAD_NAME = "".concat(prefix, "-upload");
  function returnFileSize(number) {
    if (number < 1024) {
      return "".concat(number, " Bytes");
    }

    if (number >= 1024 && number < 1048576) {
      return "".concat((number / 1024).toFixed(1), " KB");
    }

    if (number >= 1048576) {
      return "".concat((number / 1048576).toFixed(1), " MB");
    }
  }
  function getCurrentDate() {
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
  }
  function abridgeName(inputName) {
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightcount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;

    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;

      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightcount && rightLength < rightcount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }

    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  function dedupeFile(files) {
    var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "name";
    return uniqWith_1(files, function (val1, val2) {
      return val1[key] === val2[key];
    });
  }

  var props = {
    accept: {
      type: String,
      "default": ""
    },
    action: {
      type: String,
      "default": ""
    },
    allowUploadDuplicateFile: Boolean,
    autoUpload: {
      type: Boolean,
      "default": true
    },
    beforeUpload: {
      type: Function
    },
    data: {
      type: Object
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    draggable: Boolean,
    fileListDisplay: {
      type: Function
    },
    files: {
      type: Array
    },
    defaultFiles: {
      type: Array
    },
    format: {
      type: Function
    },
    formatResponse: {
      type: Function
    },
    headers: {
      type: Object
    },
    isBatchUpload: Boolean,
    max: {
      type: Number,
      "default": 0
    },
    method: {
      type: String,
      "default": "POST",
      validator: function validator(val) {
        if (!val) return true;
        return ["POST", "GET", "PUT", "OPTION", "PATCH", "post", "get", "put", "option", "patch"].includes(val);
      }
    },
    multiple: Boolean,
    name: {
      type: String,
      "default": "file"
    },
    placeholder: {
      type: String,
      "default": ""
    },
    requestMethod: {
      type: Function
    },
    showUploadProgress: {
      type: Boolean,
      "default": true
    },
    sizeLimit: {
      type: [Number, Object]
    },
    theme: {
      type: String,
      "default": "file",
      validator: function validator(val) {
        if (!val) return true;
        return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
      }
    },
    tips: {
      type: String,
      "default": ""
    },
    trigger: {
      type: [String, Function]
    },
    uploadAllFilesInOneRequest: Boolean,
    useMockProgress: {
      type: Boolean,
      "default": true
    },
    withCredentials: Boolean,
    onCancelUpload: Function,
    onChange: Function,
    onDragenter: Function,
    onDragleave: Function,
    onFail: Function,
    onPreview: Function,
    onProgress: Function,
    onRemove: Function,
    onSelectChange: Function,
    onSuccess: Function
  };

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name$1 = "".concat(prefix, "-upload-dragger");
  var Dragger = Vue__default["default"].extend({
    name: name$1,
    components: {
      TLoading: Loading,
      TButton: Button,
      CheckCircleFilledIcon: CheckCircleFilled,
      ErrorCircleFilledIcon: ErrorCircleFilled
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      file: {
        type: Object
      },
      loadingFile: {
        type: Object
      },
      display: {
        type: String,
        validator: function validator(val) {
          return ["file", "file-input", "image", "custom"].includes(val);
        }
      },
      cancel: Function,
      trigger: Function,
      remove: Function,
      upload: Function,
      autoUpload: Boolean
    },
    data: function data() {
      return {
        target: null,
        dragActive: false
      };
    },
    computed: {
      isImage: function isImage() {
        return this.display === "image";
      },
      imageUrl: function imageUrl() {
        return this.loadingFile && this.loadingFile.url || this.file && this.file.url;
      },
      percent: function percent() {
        return this.loadingFile && this.loadingFile.percent;
      },
      inputName: function inputName() {
        return this.loadingFile && this.loadingFile.name || this.file && this.file.name;
      },
      classes: function classes() {
        return ["".concat(UPLOAD_NAME, "__dragger"), _defineProperty$2({}, "".concat(UPLOAD_NAME, "__dragger-center"), !this.loadingFile && !this.file), _defineProperty$2({}, "".concat(UPLOAD_NAME, "__dragger-error"), this.loadingFile && this.loadingFile.status === "fail")];
      },
      size: function size() {
        return this.loadingFile && this.loadingFile.size || this.file && this.file.size;
      },
      showResultOperate: function showResultOperate() {
        var _this$file, _this$loadingFile;

        return Boolean(!this.loadingFile && ((_this$file = this.file) === null || _this$file === void 0 ? void 0 : _this$file.name)) || ["success", "fail"].includes((_this$loadingFile = this.loadingFile) === null || _this$loadingFile === void 0 ? void 0 : _this$loadingFile.status);
      }
    },
    methods: {
      handleDrop: function handleDrop(event) {
        event.preventDefault();
        this.$emit("change", event.dataTransfer.files);
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragenter: function handleDragenter(event) {
        this.target = event.target;
        event.preventDefault();
        this.$emit("dragenter", event);
        this.dragActive = true;
      },
      handleDragleave: function handleDragleave(event) {
        if (this.target !== event.target) return;
        event.preventDefault();
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragover: function handleDragover(event) {
        event.preventDefault();
      },
      renderDefaultDragElement: function renderDefaultDragElement() {
        var h = this.$createElement;
        var unActiveElement = h("div", [h("span", {
          "class": "".concat(prefix, "-upload--highlight")
        }, ["\u70B9\u51FB\u4E0A\u4F20"]), h("span", ["\xA0\xA0/\xA0\xA0\u62D6\u62FD\u5230\u6B64\u533A\u57DF"])]);
        var activeElement = h("div", ["\u91CA\u653E\u9F20\u6807"]);
        return this.dragActive ? activeElement : unActiveElement;
      },
      renderImage: function renderImage() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(UPLOAD_NAME, "__dragger-img-wrap")
        }, [this.imageUrl && h("img", {
          "attrs": {
            "src": this.imageUrl || "default.png"
          }
        })]);
      },
      renderUploading: function renderUploading() {
        var h = this.$createElement;

        if (this.loadingFile.status === "fail") {
          return h(ErrorCircleFilled);
        }

        if (this.loadingFile.status === "progress" && this.showUploadProgress) {
          return h("div", {
            "class": "".concat(UPLOAD_NAME, "__single-progress")
          }, [h(Loading), h("span", {
            "class": "".concat(UPLOAD_NAME, "__single-percent")
          }, [Math.min(this.loadingFile.percent, 99), "%"])]);
        }
      },
      reupload: function reupload(e) {
        this.remove(e);
        this.trigger(e);
      },
      renderProgress: function renderProgress() {
        var _this$loadingFile2,
            _this$loadingFile3,
            _this = this;

        var h = this.$createElement;
        return h("div", {
          "class": "".concat(UPLOAD_NAME, "__dragger-progress")
        }, [this.isImage && this.renderImage(), h("div", {
          "class": "".concat(UPLOAD_NAME, "__dragger-progress-info")
        }, [h("div", {
          "class": "".concat(UPLOAD_NAME, "__dragger-text")
        }, [h("span", {
          "class": "".concat(UPLOAD_NAME, "__single-name")
        }, [abridgeName(this.inputName)]), this.loadingFile && this.renderUploading(), !this.loadingFile && !!this.file && h(CheckCircleFilled)]), h("small", {
          "class": "".concat(prefix, "-size-s")
        }, ["\u6587\u4EF6\u5927\u5C0F\uFF1A", returnFileSize(this.size)]), h("small", {
          "class": "".concat(prefix, "-size-s")
        }, ["\u4E0A\u4F20\u65E5\u671F\uFF1A", getCurrentDate()]), h("div", {
          "class": "".concat(UPLOAD_NAME, "__dragger-btns")
        }, [["progress", "waiting"].includes((_this$loadingFile2 = this.loadingFile) === null || _this$loadingFile2 === void 0 ? void 0 : _this$loadingFile2.status) && h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "class": "".concat(UPLOAD_NAME, "__dragger-progress-cancel"),
          "on": {
            "click": this.cancel
          }
        }, ["\u53D6\u6D88\u4E0A\u4F20"]), !this.autoUpload && ((_this$loadingFile3 = this.loadingFile) === null || _this$loadingFile3 === void 0 ? void 0 : _this$loadingFile3.status) === "waiting" && h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "on": {
            "click": function click(e) {
              return _this.upload(_objectSpread$1({}, _this.loadingFile), e);
            }
          }
        }, ["\u5F00\u59CB\u4E0A\u4F20"])]), this.showResultOperate && h("div", {
          "class": "".concat(UPLOAD_NAME, "__dragger-btns")
        }, [h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "class": "".concat(UPLOAD_NAME, "__dragger-progress-cancel"),
          "on": {
            "click": this.reupload
          }
        }, ["\u91CD\u65B0\u4E0A\u4F20"]), h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "on": {
            "click": this.remove
          }
        }, ["\u5220\u9664"])])])]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var content = null;

      if ((this.loadingFile || this.file) && this.display !== "custom") {
        content = this.renderProgress();
      } else {
        content = h("div", {
          "class": "".concat(UPLOAD_NAME, "__trigger"),
          "on": {
            "click": this.trigger
          }
        }, [this.$scopedSlots["default"] && this.$scopedSlots["default"](null) || this.renderDefaultDragElement()]);
      }

      return h("div", {
        "class": this.classes,
        "on": {
          "drop": this.handleDrop,
          "dragenter": this.handleDragenter,
          "dragover": this.handleDragover,
          "dragleave": this.handleDragleave
        }
      }, [content]);
    }
  });

  var ImageCard = Vue__default["default"].extend({
    name: "TImageUpload",
    components: {
      AddIcon: Add,
      DeleteIcon: Delete,
      BrowseIcon: Browse,
      TLoading: Loading
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      files: {
        type: Array
      },
      loadingFile: {
        type: Object
      },
      trigger: {
        type: Function
      },
      remove: {
        type: Function
      },
      multiple: Boolean,
      max: Number,
      disabled: Boolean
    },
    computed: {
      showTrigger: function showTrigger() {
        if (this.multiple) {
          return !this.max || this.files.length < this.max;
        }

        return !(this.files && this.files[0]);
      }
    },
    methods: {
      onMaskClick: function onMaskClick(e) {
        !this.showTrigger && this.trigger(e);
      },
      onViewClick: function onViewClick(e, file) {
        this.$emit("imgPreview", e, file);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      return h("ul", {
        "class": "".concat(UPLOAD_NAME, "__card")
      }, [this.files && this.files.map(function (file, index) {
        return h("li", {
          "class": "".concat(UPLOAD_NAME, "__card-item ").concat(prefix, "-is--background")
        }, [h("div", {
          "class": "".concat(UPLOAD_NAME, "__card-content ").concat(UPLOAD_NAME, "__card-box")
        }, [h("img", {
          "class": "".concat(UPLOAD_NAME, "__card-image"),
          "attrs": {
            "src": file.url
          }
        }), h("div", {
          "class": "".concat(UPLOAD_NAME, "__card-mask"),
          "on": {
            "click": _this.onMaskClick
          }
        }, [h("span", {
          "class": "".concat(UPLOAD_NAME, "__card-mask-item"),
          "on": {
            "click": function click(e) {
              return e.stopPropagation();
            }
          }
        }, [h(Browse, {
          "nativeOn": {
            "click": function click(e) {
              return _this.onViewClick(e, file);
            }
          }
        })]), !_this.disabled && [h("span", {
          "class": "".concat(UPLOAD_NAME, "__card-mask-item-divider"),
          "key": "divider"
        }), h("span", {
          "class": "".concat(UPLOAD_NAME, "__card-mask-item"),
          "on": {
            "click": function click(e) {
              return e.stopPropagation();
            }
          },
          "key": "delete-icon"
        }, [h(Delete, {
          "nativeOn": {
            "click": function click(e) {
              return _this.remove({
                e: e,
                file: file,
                index: index
              });
            }
          }
        })])]])])]);
      }), this.showTrigger && h("li", {
        "class": ["".concat(UPLOAD_NAME, "__card-item ").concat(prefix, "-is--background"), _defineProperty$2({}, ClASSNAMES.STATUS.disabled, this.disabled)],
        "on": {
          "click": this.trigger
        }
      }, [this.showUploadProgress && this.loadingFile && this.loadingFile.status === "progress" ? h("div", {
        "class": "".concat(UPLOAD_NAME, "__card-container ").concat(UPLOAD_NAME, "__card-box")
      }, [h(Loading), h("p", ["\u4E0A\u4F20\u4E2D ", Math.min(this.loadingFile.percent, 99), "%"])]) : h("div", {
        "class": "".concat(UPLOAD_NAME, "__card-container ").concat(UPLOAD_NAME, "__card-box")
      }, [h(Add), h("p", {
        "class": "".concat(prefix, "-size-s")
      }, ["\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247"])])])]);
    }
  });

  var FlowList = Vue__default["default"].extend({
    name: "TUploadFlowList",
    components: {
      TButton: Button,
      TLoading: Loading,
      TimeFilledIcon: TimeFilled,
      CheckCircleFilledIcon: CheckCircleFilled,
      ErrorCircleFilledIcon: ErrorCircleFilled,
      DeleteIcon: Delete,
      BrowseIcon: Browse
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      allowUploadDuplicateFile: props.allowUploadDuplicateFile,
      files: Array,
      batchUpload: Boolean,
      toUploadFiles: Array,
      placeholder: String,
      autoUpload: Boolean,
      disabled: Boolean,
      remove: Function,
      upload: Function,
      cancel: Function,
      display: {
        type: String,
        validator: function validator(val) {
          return ["file-flow", "image-flow"].includes(val);
        }
      }
    },
    data: function data() {
      return {
        dragActive: false,
        target: null
      };
    },
    computed: {
      showInitial: function showInitial() {
        var isWatingEmpty = !this.waitingUploadFiles || !this.waitingUploadFiles.length;
        return (!this.files || !this.files.length) && isWatingEmpty;
      },
      waitingUploadFiles: function waitingUploadFiles() {
        var _this = this;

        var list = [];
        this.toUploadFiles.forEach(function (item) {
          if (!_this.allowUploadDuplicateFile) {
            var r = _this.files.filter(function (t) {
              return t.name === item.name;
            });

            if (!r.length) {
              list.push(item);
            }
          } else {
            list.push(item);
          }
        });
        return list;
      },
      listFiles: function listFiles() {
        if (!this.files || !this.files.length) return this.toUploadFiles;
        return this.files.concat(this.waitingUploadFiles);
      },
      failedList: function failedList() {
        return this.toUploadFiles.filter(function (file) {
          return file.status === "fail";
        });
      },
      processList: function processList() {
        return this.toUploadFiles.filter(function (file) {
          return file.status === "progress";
        });
      },
      isUploading: function isUploading() {
        return !!this.processList.length;
      },
      allowUpload: function allowUpload() {
        return Boolean(this.waitingUploadFiles && this.waitingUploadFiles.length) && !this.isUploading;
      },
      uploadText: function uploadText() {
        if (this.isUploading) return "\u4E0A\u4F20\u4E2D...";
        return this.failedList && this.failedList.length ? "\u91CD\u65B0\u4E0A\u4F20" : "\u5F00\u59CB\u4E0A\u4F20";
      },
      batchRemoveRow: function batchRemoveRow() {
        return this.batchUpload && this.files.length > 0;
      }
    },
    methods: {
      renderStatus: function renderStatus(file) {
        var h = this.$createElement;
        var status = null;

        switch (file.status) {
          case "success":
            status = h("div", {
              "class": "".concat(UPLOAD_NAME, "__flow-status")
            }, [h(CheckCircleFilled), h("span", ["\u4E0A\u4F20\u6210\u529F"])]);
            break;

          case "fail":
            status = h("div", {
              "class": "".concat(UPLOAD_NAME, "__flow-status")
            }, [h(ErrorCircleFilled), h("span", ["\u4E0A\u4F20\u5931\u8D25"])]);
            break;

          case "progress":
            this.showUploadProgress && (status = h("div", {
              "class": "".concat(UPLOAD_NAME, "__flow-status")
            }, [h(Loading), h("span", ["\u4E0A\u4F20\u4E2D ", Math.min(file.percent, 99), "%"])]));
            break;

          case "waiting":
            status = h("div", {
              "class": "".concat(UPLOAD_NAME, "__flow-status")
            }, [h(TimeFilled), h("span", ["\u5F85\u4E0A\u4F20"])]);
            break;
        }

        return status;
      },
      handleDrop: function handleDrop(event) {
        event.preventDefault();
        this.$emit("change", event.dataTransfer.files);
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragenter: function handleDragenter(event) {
        this.target = event.target;
        event.preventDefault();
        this.$emit("dragenter", event);
        this.dragActive = true;
      },
      handleDragleave: function handleDragleave(event) {
        if (this.target !== event.target) return;
        event.preventDefault();
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragover: function handleDragover(event) {
        event.preventDefault();
      },
      onViewClick: function onViewClick(event, file) {
        this.$emit("imgPreview", event, file);
      },
      renderDrager: function renderDrager() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(UPLOAD_NAME, "__flow-empty"),
          "on": {
            "drop": this.handleDrop,
            "dragenter": this.handleDragenter,
            "dragover": this.handleDragover,
            "dragleave": this.handleDragleave
          }
        }, [this.dragActive ? "\u91CA\u653E\u9F20\u6807" : "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"]);
      },
      renderFileList: function renderFileList() {
        var _this2 = this;

        var h = this.$createElement;
        return h("table", {
          "class": "".concat(UPLOAD_NAME, "__flow-table")
        }, [h("tr", [h("th", ["\u6587\u4EF6\u540D"]), h("th", ["\u5927\u5C0F"]), h("th", ["\u72B6\u6001"]), h("th", ["\u64CD\u4F5C"])]), this.showInitial && h("tr", [h("td", {
          "attrs": {
            "colspan": 4
          }
        }, [this.renderDrager()])]), this.listFiles.map(function (file, index) {
          var showBatchUploadAction = _this2.batchUpload && _this2.toUploadFiles.length === 0;
          return h("tr", [h("td", [abridgeName(file.name, 7, 10)]), h("td", [returnFileSize(file.size)]), h("td", [_this2.renderStatus(file)]), showBatchUploadAction ? _this2.renderBatchActionCol(index) : _this2.renderNormalActionCol(file, index)]);
        })]);
      },
      renderNormalActionCol: function renderNormalActionCol(file, index) {
        var _this3 = this;

        var h = this.$createElement;
        return h("td", [h("span", {
          "class": "".concat(UPLOAD_NAME, "__flow-button"),
          "on": {
            "click": function click(e) {
              return _this3.remove({
                e: e,
                index: index,
                file: file
              });
            }
          }
        }, ["\u5220\u9664"])]);
      },
      renderBatchActionCol: function renderBatchActionCol(index) {
        var _this4 = this;

        var h = this.$createElement;
        return index === 0 ? h("td", {
          "attrs": {
            "rowspan": this.listFiles.length
          },
          "class": "".concat(UPLOAD_NAME, "__flow-table__batch-row")
        }, [h("span", {
          "class": "".concat(UPLOAD_NAME, "__flow-button"),
          "on": {
            "click": function click(e) {
              return _this4.remove({
                e: e,
                index: -1,
                file: null
              });
            }
          }
        }, ["\u5220\u9664"])]) : "";
      },
      renderImgList: function renderImgList() {
        var _this5 = this;

        var h = this.$createElement;
        return h("div", {
          "class": "".concat(UPLOAD_NAME, "__flow-card-area")
        }, [this.showInitial && this.renderDrager(), !!this.listFiles.length && h("ul", {
          "class": "".concat(UPLOAD_NAME, "__card clearfix")
        }, [this.listFiles.map(function (file, index) {
          return h("li", {
            "class": "".concat(UPLOAD_NAME, "__card-item")
          }, [h("div", {
            "class": ["".concat(UPLOAD_NAME, "__card-content"), _defineProperty$2({}, "".concat(prefix, "-is-bordered"), file.status !== "waiting")]
          }, [file.status === "fail" && h("div", {
            "class": "".concat(UPLOAD_NAME, "__card-status-wrap")
          }, [h(ErrorCircleFilled), h("p", ["\u4E0A\u4F20\u5931\u8D25"])]), file.status === "progress" && h("div", {
            "class": "".concat(UPLOAD_NAME, "__card-status-wrap")
          }, [h(Loading), h("p", ["\u4E0A\u4F20\u4E2D ", Math.min(file.percent, 99)])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && h("img", {
            "class": "".concat(UPLOAD_NAME, "__card-image"),
            "attrs": {
              "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
            }
          }), h("div", {
            "class": "".concat(UPLOAD_NAME, "__card-mask")
          }, [file.url && h("span", {
            "class": "".concat(UPLOAD_NAME, "__card-mask-item")
          }, [h(Browse, {
            "nativeOn": {
              "click": function click(e) {
                return _this5.onViewClick(e, file);
              }
            }
          }), h("span", {
            "class": "".concat(UPLOAD_NAME, "__card-mask-item-divider")
          })]), !_this5.disabled && h("span", {
            "class": "".concat(UPLOAD_NAME, "__card-mask-item"),
            "on": {
              "click": function click(e) {
                return _this5.remove({
                  e: e,
                  index: index,
                  file: file
                });
              }
            }
          }, [h(Delete)])])]), h("p", {
            "class": "".concat(UPLOAD_NAME, "__card-name")
          }, [abridgeName(file.name)])]);
        })])]);
      }
    },
    render: function render() {
      var _this6 = this;

      var h = arguments[0];
      return h("div", {
        "class": ["".concat(UPLOAD_NAME, "__flow"), "".concat(UPLOAD_NAME, "__flow-").concat(this.display)]
      }, [h("div", {
        "class": "".concat(UPLOAD_NAME, "__flow-op")
      }, [this.$scopedSlots["default"] && this.$scopedSlots["default"](null), h("small", {
        "class": "".concat(prefix, "-size-s ").concat(UPLOAD_NAME, "__flow-placeholder")
      }, [this.placeholder])]), this.display === "file-flow" && this.renderFileList(), this.display === "image-flow" && this.renderImgList(), h("div", {
        "class": "".concat(UPLOAD_NAME, "__flow-bottom")
      }, [h(Button, {
        "attrs": {
          "theme": "default"
        },
        "on": {
          "click": this.cancel
        }
      }, ["\u53D6\u6D88"]), h(Button, {
        "attrs": {
          "disabled": !this.allowUpload,
          "theme": "primary"
        },
        "on": {
          "click": function click(e) {
            return _this6.upload(_this6.waitingUploadFiles, e);
          }
        }
      }, [this.uploadText])])]);
    }
  });

  function xhr(_ref) {
    var _ref$method = _ref.method,
        method = _ref$method === void 0 ? "POST" : _ref$method,
        action = _ref.action,
        _ref$withCredentials = _ref.withCredentials,
        withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
        _ref$headers = _ref.headers,
        headers = _ref$headers === void 0 ? {} : _ref$headers,
        _ref$data = _ref.data,
        data = _ref$data === void 0 ? {} : _ref$data,
        file = _ref.file,
        files = _ref.files,
        _ref$name = _ref.name,
        name = _ref$name === void 0 ? "file" : _ref$name,
        onError = _ref.onError,
        onProgress = _ref.onProgress,
        onSuccess = _ref.onSuccess;
    var innerFiles = Array.isArray(files) ? files : [file];
    var xhr2 = new XMLHttpRequest();

    if (withCredentials) {
      xhr2.withCredentials = true;
    }

    var formData = new FormData();
    var sendData = typeof data === "function" ? data(file) : data;
    Object.keys(sendData).forEach(function (key) {
      formData.append(key, data[key]);
    });
    innerFiles.forEach(function (f) {
      formData.append(name, f.raw);
    });
    xhr2.open(method, action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });

    xhr2.onerror = function (event) {
      return onError({
        event: event,
        file: file,
        files: innerFiles
      });
    };

    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var percent = 0;

        if (event.total > 0) {
          percent = Math.round(event.loaded / event.total * 100);
        }

        onProgress({
          event: event,
          percent: percent,
          file: file,
          files: innerFiles
        });
      };
    }

    xhr2.onload = function (event) {
      var response;
      var isFail = xhr2.status < 200 || xhr2.status >= 300;

      if (isFail) {
        return onError({
          event: event,
          file: file,
          files: innerFiles,
          response: response
        });
      }

      var text = xhr2.responseText || xhr2.response;

      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
      }

      onSuccess({
        event: event,
        file: file,
        files: innerFiles,
        response: response
      });
    };

    xhr2.send(formData);
    return xhr2;
  }

  var SingleFile = Vue__default["default"].extend({
    name: "TUploadSingleFile",
    components: {
      CloseCircleFilledIcon: CloseCircleFilled,
      ErrorCircleFilledIcon: ErrorCircleFilled,
      CheckCircleFilledIcon: CheckCircleFilled,
      Loading: Loading
    },
    data: function data() {
      return {};
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      file: Object,
      loadingFile: Object,
      remove: Function,
      placeholder: String,
      display: {
        type: String,
        validator: function validator(val) {
          return ["file", "file-input"].includes(val);
        }
      }
    },
    computed: {
      percent: function percent() {
        return this.loadingFile && this.loadingFile.percent;
      },
      showPreview: function showPreview() {
        return Boolean(this.file && this.file.name);
      },
      showTextPreview: function showTextPreview() {
        return this.display === "file";
      },
      showInput: function showInput() {
        return this.display === "file-input";
      },
      showProgress: function showProgress() {
        return !!(this.loadingFile && this.loadingFile.status === "progress");
      },
      showDelete: function showDelete() {
        return this.file && this.file.name && !this.loadingFile;
      },
      inputName: function inputName() {
        var fileName = this.file && this.file.name;
        var loadingName = this.loadingFile && this.loadingFile.name;
        return this.showProgress ? loadingName : fileName;
      },
      inputText: function inputText() {
        return this.inputName || this.placeholder;
      },
      inputTextClass: function inputTextClass() {
        return ["".concat(prefix, "-input__inner"), _defineProperty$2({}, "".concat(UPLOAD_NAME, "__placeholder"), !this.inputName)];
      },
      classes: function classes() {
        return ["".concat(UPLOAD_NAME, "__single"), "".concat(UPLOAD_NAME, "__single-").concat(this.display)];
      }
    },
    methods: {
      renderProgress: function renderProgress() {
        var h = this.$createElement;

        if (this.loadingFile.status === "fail") {
          return h(ErrorCircleFilled);
        }

        if (this.showUploadProgress) {
          return h("div", {
            "class": "".concat(UPLOAD_NAME, "__single-progress")
          }, [h(Loading), h("span", {
            "class": "".concat(UPLOAD_NAME, "__single-percent")
          }, [Math.min(this.loadingFile.percent, 99), "%"])]);
        }
      },
      renderResult: function renderResult() {
        var h = this.$createElement;

        if (!!this.loadingFile && this.loadingFile.status === "fail") {
          return h(ErrorCircleFilled);
        }

        if (this.file && this.file.name && !this.loadingFile) {
          return h(CheckCircleFilled);
        }

        return "";
      },
      renderFilePreviewAsText: function renderFilePreviewAsText() {
        var _this = this;

        var h = this.$createElement;
        if (!this.inputName) return;
        return h("div", {
          "class": "".concat(UPLOAD_NAME, "__single-display-text t-upload__display-text--margin")
        }, [h("span", {
          "class": "".concat(UPLOAD_NAME, "__single-name")
        }, [this.inputName]), this.showProgress ? this.renderProgress() : h(CloseCircleFilled, {
          "class": "".concat(UPLOAD_NAME, "__icon-delete"),
          "nativeOn": {
            "click": function click(e) {
              return _this.remove(e);
            }
          }
        })]);
      },
      renderFilePreviewAsInput: function renderFilePreviewAsInput() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(UPLOAD_NAME, "__single-input-preview ").concat(prefix, "-input")
        }, [h("div", {
          "class": this.inputTextClass
        }, [h("span", {
          "class": "".concat(UPLOAD_NAME, "__single-input-text")
        }, [abridgeName(this.inputText, 4, 6)]), this.showProgress && this.renderProgress(), this.renderResult()])]);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      return h("div", {
        "class": this.classes
      }, [this.showInput && this.renderFilePreviewAsInput(), this.$scopedSlots["default"] && this.$scopedSlots["default"](null), this.showTextPreview && this.renderFilePreviewAsText(), this.showInput && this.showDelete && h("span", {
        "class": "".concat(UPLOAD_NAME, "__single-input-delete"),
        "on": {
          "click": function click(e) {
            return _this2.remove(e);
          }
        }
      }, ["\u5220\u9664"])]);
    }
  });

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var name = "".concat(prefix, "-upload");
  var SIZE_MAP = {
    B: 1024,
    KB: 1,
    MB: 1048576,
    GB: 1073741824
  };

  function isOverSizeLimit(fileSize, sizeLimit, unit) {
    var units = ["B", "KB", "MB", "GB"];
    var KBIndex = 1;
    var index = units.indexOf(unit);

    if (index === -1) {
      console.warn("TDesign Upload Warn: `sizeLimit.unit` can only be one of ".concat(units.join()));
      index = KBIndex;
    }

    var num = SIZE_MAP[unit];
    var limit = index < KBIndex ? sizeLimit / num : sizeLimit * num;
    return fileSize <= limit;
  }

  var _Upload = mixins(getConfigReceiverMixins("upload")).extend({
    name: "TUpload",
    components: {
      Dragger: Dragger,
      SingleFile: SingleFile,
      ImageCard: ImageCard,
      FlowList: FlowList,
      TDialog: Dialog
    },
    model: {
      prop: "files",
      event: "change"
    },
    props: _objectSpread({}, props),
    data: function data() {
      return {
        formDisabled: void 0,
        dragActive: false,
        loadingFile: null,
        toUploadFiles: [],
        errorMsg: "",
        showImageViewDialog: false,
        showImageViewUrl: "",
        xhrReq: null
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      showTips: function showTips() {
        if (this.theme === "file") {
          var hasNoFile = (!this.files || !this.files.length) && !this.loadingFile;
          return this.tips && hasNoFile;
        }

        return Boolean(this.tips);
      },
      showCustomDisplay: function showCustomDisplay() {
        return this.theme === "custom";
      },
      showSingleDisplay: function showSingleDisplay() {
        return !this.draggable && ["file", "file-input"].includes(this.theme);
      },
      showImgCard: function showImgCard() {
        return !this.draggable && this.theme === "image";
      },
      singleDraggable: function singleDraggable() {
        return !this.multiple && this.draggable && ["file", "file-input", "image"].includes(this.theme);
      },
      showUploadList: function showUploadList() {
        return this.multiple && ["file-flow", "image-flow"].includes(this.theme);
      },
      showImgDialog: function showImgDialog() {
        return ["image", "image-flow", "custom"].includes(this.theme);
      },
      showErrorMsg: function showErrorMsg() {
        return !this.showUploadList && !!this.errorMsg;
      },
      tipsClasses: function tipsClasses() {
        return ["".concat(name, "__tips ").concat(prefix, "-size-s")];
      },
      errorClasses: function errorClasses() {
        return this.tipsClasses.concat("".concat(name, "__tips-error"));
      },
      uploadInOneRequest: function uploadInOneRequest() {
        return this.multiple && this.uploadAllFilesInOneRequest;
      },
      canBatchUpload: function canBatchUpload() {
        return this.uploadInOneRequest && this.isBatchUpload;
      },
      uploadListTriggerText: function uploadListTriggerText() {
        var _this$toUploadFiles, _this$files;

        var uploadText = "\u9009\u62E9\u6587\u4EF6";

        if (((_this$toUploadFiles = this.toUploadFiles) === null || _this$toUploadFiles === void 0 ? void 0 : _this$toUploadFiles.length) > 0 || ((_this$files = this.files) === null || _this$files === void 0 ? void 0 : _this$files.length) > 0) {
          var _this$files2;

          if (this.theme === "file-input" || ((_this$files2 = this.files) === null || _this$files2 === void 0 ? void 0 : _this$files2.length) > 0 && this.canBatchUpload) {
            uploadText = "\u91CD\u65B0\u9009\u62E9";
          } else {
            uploadText = "\u7EE7\u7EED\u9009\u62E9";
          }
        }

        return uploadText;
      }
    },
    methods: {
      emitChangeEvent: function emitChangeEvent(files, ctx) {
        emitEvent(this, "change", files, ctx);
      },
      emitRemoveEvent: function emitRemoveEvent(ctx) {
        emitEvent(this, "remove", ctx);
      },
      handlePreviewImg: function handlePreviewImg(event, file) {
        if (!file || !file.url) return log.error("Uploader", "Preview Error file");
        this.showImageViewUrl = file.url;
        this.showImageViewDialog = true;
        var previewCtx = {
          file: file,
          e: event
        };
        emitEvent(this, "preview", previewCtx);
      },
      handleChange: function handleChange(event) {
        var files = event.target.files;
        if (this.tDisabled) return;
        this.uploadFiles(files);
        this.$refs.input.value = "";
      },
      handleDragChange: function handleDragChange(files) {
        if (this.tDisabled) return;
        this.uploadFiles(files);
      },
      handleSingleRemove: function handleSingleRemove(e) {
        var changeCtx = {
          trigger: "remove"
        };
        if (this.loadingFile) this.loadingFile = null;
        this.errorMsg = "";
        this.emitChangeEvent([], changeCtx);
        this.emitRemoveEvent({
          e: e
        });
      },
      handleFileInputRemove: function handleFileInputRemove(e) {
        e === null || e === void 0 ? void 0 : e.stopPropagation();
        this.handleSingleRemove(e);
      },
      handleMultipleRemove: function handleMultipleRemove(options) {
        var changeCtx = _objectSpread({
          trigger: "remove"
        }, options);

        var files;

        if (!this.canBatchUpload) {
          files = this.files.concat();
          files.splice(options.index, 1);
        } else {
          files = [];
          options.files = this.files.concat();
        }

        this.emitChangeEvent(files, changeCtx);
        this.emitRemoveEvent(options);
      },
      handleListRemove: function handleListRemove(context) {
        var file = context.file;
        var index = findIndex_1(this.toUploadFiles, function (o) {
          return o.name === (file === null || file === void 0 ? void 0 : file.name);
        });

        if (index >= 0) {
          this.toUploadFiles.splice(index, 1);
        } else {
          var index2 = findIndex_1(this.files, function (o) {
            return o.name === (file === null || file === void 0 ? void 0 : file.name);
          });
          this.handleMultipleRemove({
            e: context.e,
            index: index2
          });
        }
      },
      uploadFiles: function uploadFiles(files) {
        var _this$files3,
            _this = this;

        if (this.canBatchUpload && ((_this$files3 = this.files) === null || _this$files3 === void 0 ? void 0 : _this$files3.length) > 0) {
          var context = {
            trigger: "batch-clear"
          };
          this.emitChangeEvent([], context);
        }

        var tmpFiles = _toConsumableArray(files);

        if (this.max) {
          tmpFiles = tmpFiles.slice(0, this.max - this.files.length);

          if (tmpFiles.length !== files.length) {
            console.warn("TDesign Upload Warn: you can only upload ".concat(this.max, " files"));
          }
        }

        tmpFiles.forEach(function (fileRaw) {
          var file = fileRaw;

          if (typeof _this.format === "function") {
            file = _this.format(fileRaw);
          }

          var uploadFile = _objectSpread({
            raw: fileRaw,
            lastModified: fileRaw.lastModified,
            name: fileRaw.name,
            size: fileRaw.size,
            type: fileRaw.type,
            percent: 0,
            status: "waiting"
          }, file);

          var reader = new FileReader();
          reader.readAsDataURL(fileRaw);

          reader.onload = function (event) {
            uploadFile.url = event.target.result;
          };

          _this.handleBeforeUpload(file).then(function (canUpload) {
            if (!canUpload) return;

            var newFiles = _this.toUploadFiles.concat();

            newFiles.push(uploadFile);
            _this.toUploadFiles = !_this.allowUploadDuplicateFile ? dedupeFile(_toConsumableArray(new Set(newFiles))) : _toConsumableArray(new Set(newFiles));
            _this.loadingFile = uploadFile;

            if (_this.autoUpload) {
              _this.upload(uploadFile);
            }
          });
        });
      },
      upload: function upload(currentFiles) {
        var _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var innerFiles, request;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  innerFiles = Array.isArray(currentFiles) ? currentFiles : [currentFiles];

                  if (!(!_this2.action && !_this2.requestMethod)) {
                    _context.next = 4;
                    break;
                  }

                  console.error("TDesign Upload Error: one of action and requestMethod must be exist.");
                  return _context.abrupt("return");

                case 4:
                  _this2.errorMsg = "";
                  innerFiles.forEach(function (file) {
                    file.status = "progress";
                    _this2.loadingFile = file;
                  });

                  if (_this2.requestMethod) {
                    _this2.handleRequestMethod(innerFiles);
                  } else {
                    if (_this2.useMockProgress) {
                      _this2.handleMockProgress(innerFiles);
                    }

                    request = xhr;
                    _this2.xhrReq = request({
                      method: _this2.method,
                      action: _this2.action,
                      data: _this2.data,
                      files: innerFiles,
                      name: _this2.name,
                      headers: _this2.headers,
                      withCredentials: _this2.withCredentials,
                      onError: _this2.onError,
                      onProgress: _this2.handleProgress,
                      onSuccess: _this2.handleSuccess
                    });
                  }

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      handleMockProgress: function handleMockProgress(files) {
        var _this3 = this;

        var timer = setInterval(function () {
          files.forEach(function (file) {
            if (file.status === "success" || file.percent >= 99) {
              clearInterval(timer);
              return;
            }

            file.percent += 1;
          });
          var percent = files[0].percent;

          _this3.handleProgress({
            files: files,
            percent: percent,
            type: "mock"
          });
        }, 10);
      },
      handleRequestMethod: function handleRequestMethod(files) {
        var _this4 = this;

        if (!isFunction_1(this.requestMethod)) {
          console.warn("TDesign Upload Warn: `requestMethod` must be a function.");
          return;
        }

        var requestMethodParam = this.uploadInOneRequest ? files : files[0];
        this.requestMethod(requestMethodParam).then(function (res) {
          if (!_this4.handleRequestMethodResponse(res)) return;

          if (res.status === "success") {
            _this4.handleSuccess({
              files: files,
              response: res.response
            });
          } else if (res.status === "fail") {
            var r = res.response || {};

            _this4.onError({
              file: _this4.uploadInOneRequest ? null : files[0],
              files: files,
              response: _objectSpread(_objectSpread({}, r), {}, {
                error: res.error
              })
            });
          }
        });
      },
      handleRequestMethodResponse: function handleRequestMethodResponse(res) {
        if (!res) {
          console.error("TDesign Upoad Error: `requestMethodResponse` is required.");
          return false;
        }

        if (!res.status) {
          console.error("TDesign Upoad Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`");
          return false;
        }

        if (!["success", "fail"].includes(res.status)) {
          console.error("TDesign Upoad Error: `requestMethodResponse.status` must be `success` or `fail`");
          return false;
        }

        if (res.status === "success" && (!res.response || !res.response.url)) {
          console.warn("TDesign Upoad Warn: `requestMethodResponse.response.url` is required, when `status` is `success`");
        }

        return true;
      },
      multipleUpload: function multipleUpload(currentFiles) {
        var _this5 = this;

        if (this.uploadAllFilesInOneRequest) {
          this.upload(currentFiles);
        } else {
          currentFiles.forEach(function (file) {
            _this5.upload(file);
          });
        }
      },
      onError: function onError(options) {
        var _this6 = this,
            _res;

        var event = options.event,
            file = options.file,
            files = options.files,
            response = options.response,
            resFormatted = options.resFormatted;
        var innerFiles = Array.isArray(files) ? files : [file];
        innerFiles.forEach(function (file2) {
          file2.status = "fail";
          _this6.loadingFile = file2;
        });
        var res = response;

        if (!resFormatted && typeof this.formatResponse === "function") {
          res = this.formatResponse(response, {
            file: file,
            currentFiles: files
          });
        }

        this.errorMsg = (_res = res) === null || _res === void 0 ? void 0 : _res.error;
        var context = {
          e: event,
          file: this.uploadInOneRequest ? null : innerFiles[0],
          currentFiles: innerFiles
        };
        emitEvent(this, "fail", context);
      },
      handleProgress: function handleProgress(_ref) {
        var _this7 = this;

        var event = _ref.event,
            file = _ref.file,
            currentFiles = _ref.files,
            percent = _ref.percent,
            _ref$type = _ref.type,
            type = _ref$type === void 0 ? "real" : _ref$type;
        var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
        if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0) return log.error("Uploader", "Progress Error files");
        innerFiles.forEach(function (file2) {
          file2.percent = Math.min(percent, 100);
          _this7.loadingFile = file2;
        });
        var progressCtx = {
          percent: percent,
          e: event,
          file: file,
          type: type,
          currentFiles: innerFiles
        };
        emitEvent(this, "progress", progressCtx);
      },
      handleSuccess: function handleSuccess(_ref2) {
        var _res2, _this$files4;

        var event = _ref2.event,
            file = _ref2.file,
            currentFiles = _ref2.files,
            response = _ref2.response;
        var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
        if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0) return log.error("Uploader", "success no files");
        innerFiles.forEach(function (file2) {
          file2.status = "success";
        });
        var res = response;

        if (typeof this.formatResponse === "function") {
          res = this.formatResponse(response, {
            file: this.uploadInOneRequest ? null : innerFiles[0],
            currentFiles: innerFiles
          });
        }

        if ((_res2 = res) !== null && _res2 !== void 0 && _res2.error) {
          this.onError({
            event: event,
            file: this.uploadInOneRequest ? null : innerFiles[0],
            files: innerFiles,
            response: res,
            resFormatted: true
          });
          return;
        }

        if (!this.uploadInOneRequest) {
          innerFiles[0].url = res.url || innerFiles[0].url;
        }

        this.toUploadFiles = without_1.apply(void 0, [this.toUploadFiles].concat(_toConsumableArray(innerFiles)));
        var newFiles = innerFiles.map(function (file2) {
          return _objectSpread(_objectSpread({}, file2), {}, {
            response: res
          });
        });
        this.multiple && (_this$files4 = this.files).push.apply(_this$files4, _toConsumableArray(newFiles));
        var uploadedFiles = this.multiple ? this.files : newFiles;
        var context = {
          e: event,
          response: res,
          trigger: "upload-success"
        };
        this.emitChangeEvent(uploadedFiles, context);
        var sContext = {
          file: this.uploadInOneRequest ? null : newFiles[0],
          fileList: uploadedFiles,
          currentFiles: newFiles,
          e: event,
          response: res
        };
        emitEvent(this, "success", sContext);
        this.loadingFile = null;
      },
      handlePreview: function handlePreview(_ref3) {
        var file = _ref3.file,
            event = _ref3.event;
        return {
          file: file,
          event: event
        };
      },
      triggerUpload: function triggerUpload() {
        if (this.tDisabled) return;
        this.$refs.input.click();
      },
      handleDragenter: function handleDragenter(e) {
        if (this.tDisabled) return;
        this.dragActive = true;
        emitEvent(this, "dragenter", {
          e: e
        });
      },
      handleDragleave: function handleDragleave(e) {
        if (this.tDisabled) return;
        this.dragActive = false;
        emitEvent(this, "dragleave", {
          e: e
        });
      },
      handleBeforeUpload: function handleBeforeUpload(file) {
        var _this8 = this;

        if (typeof this.beforeUpload === "function") {
          var r = this.beforeUpload(file);
          if (r instanceof Promise) return r;
          return new Promise(function (resolve) {
            return resolve(r);
          });
        }

        return new Promise(function (resolve) {
          if (_this8.sizeLimit) {
            resolve(_this8.handleSizeLimit(file.size));
          }

          resolve(true);
        });
      },
      handleSizeLimit: function handleSizeLimit(fileSize) {
        var sizeLimit = typeof this.sizeLimit === "number" ? {
          size: this.sizeLimit,
          unit: "KB"
        } : this.sizeLimit;
        var rSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);

        if (!rSize) {
          this.errorMsg = sizeLimit.message ? this.t(sizeLimit.message, {
            sizeLimit: sizeLimit.size
          }) : "".concat(this.t(this.global.sizeLimitMessage, {
            sizeLimit: sizeLimit.size
          }), " ").concat(sizeLimit.unit);
        }

        return rSize;
      },
      cancelUpload: function cancelUpload() {
        if (this.loadingFile) {
          if (this.requestMethod) {
            emitEvent(this, "cancel-upload");
          } else {
            this.xhrReq && this.xhrReq.abort();
          }

          this.loadingFile = null;
        }

        this.$refs.input.value = "";
      },
      cancelPreviewImgDialog: function cancelPreviewImgDialog() {
        var _this9 = this;

        this.showImageViewDialog = false;
        var timer = setTimeout(function () {
          _this9.showImageViewUrl = "";
          clearTimeout(timer);
          timer = null;
        }, 500);
      },
      getDefaultTrigger: function getDefaultTrigger() {
        var _this$files5;

        var h = this.$createElement;

        if (this.theme === "file-input" || this.showUploadList) {
          return h(Button, {
            "attrs": {
              "variant": "outline"
            }
          }, [this.uploadListTriggerText]);
        }

        return h(Button, {
          "attrs": {
            "variant": "outline"
          }
        }, [h(Upload$1, {
          "slot": "icon"
        }), (_this$files5 = this.files) !== null && _this$files5 !== void 0 && _this$files5.length ? "\u91CD\u65B0\u4E0A\u4F20" : "\u70B9\u51FB\u4E0A\u4F20"]);
      },
      renderInput: function renderInput() {
        var h = this.$createElement;
        return h("input", {
          "ref": "input",
          "attrs": {
            "type": "file",
            "disabled": this.tDisabled,
            "multiple": this.multiple,
            "accept": this.accept,
            "hidden": true
          },
          "on": {
            "change": this.handleChange
          }
        });
      },
      renderSingleDisplay: function renderSingleDisplay(triggerElement) {
        var h = this.$createElement;
        return h(SingleFile, {
          "attrs": {
            "file": this.files && this.files[0],
            "loadingFile": this.loadingFile,
            "display": this.theme,
            "remove": this.handleSingleRemove,
            "showUploadProgress": this.showUploadProgress,
            "placeholder": this.placeholder
          }
        }, [h("div", {
          "class": "".concat(name, "__trigger"),
          "on": {
            "click": this.triggerUpload
          }
        }, [triggerElement])]);
      },
      renderDraggerTrigger: function renderDraggerTrigger() {
        var h = this.$createElement;
        var params = {
          dragActive: this.dragActive,
          uploadingFile: this.multiple ? this.toUploadFiles : this.loadingFile
        };
        var triggerElement = renderContent(this, "default", "trigger", {
          params: params
        });
        return h(Dragger, {
          "attrs": {
            "showUploadProgress": this.showUploadProgress,
            "loadingFile": this.loadingFile,
            "file": this.files && this.files[0],
            "display": this.theme,
            "cancel": this.cancelUpload,
            "trigger": this.triggerUpload,
            "remove": this.handleSingleRemove,
            "upload": this.upload,
            "autoUpload": this.autoUpload
          },
          "on": {
            "change": this.handleDragChange,
            "dragenter": this.handleDragenter,
            "dragleave": this.handleDragleave
          }
        }, [triggerElement]);
      },
      renderTrigger: function renderTrigger() {
        var defaultNode = this.getDefaultTrigger();
        return renderContent(this, "default", "trigger", defaultNode);
      },
      renderCustom: function renderCustom(triggerElement) {
        var h = this.$createElement;
        return this.draggable ? this.renderDraggerTrigger() : h("div", {
          "class": "".concat(name, "__trigger"),
          "on": {
            "click": this.triggerUpload
          }
        }, [triggerElement]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var triggerElement = this.renderTrigger();
      return h("div", {
        "class": "".concat(name)
      }, [this.renderInput(), this.showCustomDisplay && this.renderCustom(triggerElement), this.showSingleDisplay && this.renderSingleDisplay(triggerElement), this.singleDraggable && this.renderDraggerTrigger(), this.showImgCard && h(ImageCard, {
        "attrs": {
          "files": this.files,
          "multiple": this.multiple,
          "remove": this.handleMultipleRemove,
          "trigger": this.triggerUpload,
          "loadingFile": this.loadingFile,
          "toUploadFiles": this.toUploadFiles,
          "max": this.max,
          "disabled": this.tDisabled
        },
        "on": {
          "imgPreview": this.handlePreviewImg
        }
      }), this.showUploadList && h(FlowList, {
        "attrs": {
          "files": this.files,
          "disabled": this.tDisabled,
          "placeholder": this.placeholder,
          "autoUpload": this.autoUpload,
          "toUploadFiles": this.toUploadFiles,
          "remove": this.handleListRemove,
          "showUploadProgress": this.showUploadProgress,
          "allowUploadDuplicateFile": this.allowUploadDuplicateFile,
          "upload": this.multipleUpload,
          "cancel": this.cancelUpload,
          "display": this.theme,
          "batchUpload": this.canBatchUpload
        },
        "on": {
          "imgPreview": this.handlePreviewImg,
          "change": this.handleDragChange,
          "dragenter": this.handleDragenter,
          "dragleave": this.handleDragleave
        }
      }, [h("div", {
        "class": "".concat(name, "__trigger"),
        "on": {
          "click": this.triggerUpload
        }
      }, [triggerElement])]), this.showImgDialog && h(Dialog, {
        "attrs": {
          "visible": this.showImageViewDialog,
          "showOverlay": true,
          "width": "auto",
          "top": "10%",
          "footer": false,
          "header": false
        },
        "class": "".concat(name, "__dialog"),
        "on": {
          "close": this.cancelPreviewImgDialog
        }
      }, [h("div", {
        "class": "".concat(prefix, "__dialog-body-img-box")
      }, [h("img", {
        "attrs": {
          "src": this.showImageViewUrl,
          "alt": ""
        }
      })])]), !this.errorMsg && this.showTips && h("small", {
        "class": this.tipsClasses
      }, [this.tips]), this.showErrorMsg && h("small", {
        "class": this.errorClasses
      }, [this.errorMsg])]);
    }
  });

  var Upload = withInstall(_Upload);

  var LocaleProvider$1 = Vue__default["default"].extend({
    name: "TLocaleProvider",
    props: {
      globalLocale: Object
    },
    provide: function provide() {
      return {
        globalLocale: this.globalLocale
      };
    },
    render: function render() {
      var h = arguments[0];

      if (this.$slots["default"].length === 1) {
        return this.$slots["default"][0];
      }

      return h("div", [this.$slots["default"]]);
    }
  });

  var LocaleProvider = withInstall(LocaleProvider$1);

  var components = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Button: Button,
    Divider: Divider,
    Icon: Icon,
    Col: Col,
    Row: Row,
    Aside: Aside,
    Layout: Layout,
    Header: Header,
    Footer: Footer,
    Content: Content,
    Affix: Affix,
    Anchor: Anchor,
    AnchorItem: AnchorItem,
    AnchorTarget: AnchorTarget,
    BreadcrumbItem: BreadcrumbItem,
    Breadcrumb: Breadcrumb,
    Dropdown: Dropdown,
    DropdownItem: DropdownItem,
    DropdownMenu: DropdownMenu,
    Menu: Menu,
    HeadMenu: HeadMenu,
    Submenu: Submenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup,
    Pagination: Pagination,
    StepItem: StepItem,
    Steps: Steps,
    Tabs: Tabs,
    TabPanel: TabPanel,
    Cascader: Cascader,
    Checkbox: Checkbox,
    CheckboxGroup: CheckboxGroup,
    DatePicker: DatePicker,
    Form: Form,
    FormItem: FormItem,
    Addon: Addon,
    Input: Input,
    InputGroup: InputGroup,
    InputNumber: InputNumber,
    Radio: Radio,
    RadioGroup: RadioGroup,
    RadioButton: RadioButton,
    Select: Select,
    Option: Option,
    OptionGroup: OptionGroup,
    Slider: Slider,
    Switch: Switch,
    TagInput: TagInput,
    SelectInput: SelectInput,
    Textarea: Textarea,
    Transfer: Transfer,
    KeyboardDirection: KeyboardDirection,
    EPickerCols: EPickerCols,
    TimePicker: TimePicker,
    TimeRangePicker: TimeRangePicker,
    TreeSelect: TreeSelect$1,
    Avatar: Avatar,
    AvatarGroup: AvatarGroup,
    Badge: Badge,
    Calendar: Calendar,
    Comment: Comment,
    List: List,
    ListItem: ListItem,
    ListItemMeta: ListItemMeta,
    LoadingPlugin: LoadingPlugin,
    Loading: Loading,
    Progress: Progress,
    Skeleton: Skeleton,
    Swiper: Swiper,
    SwiperItem: SwiperItem,
    BaseTable: BaseTable,
    PrimaryTable: PrimaryTable,
    EnhancedTable: EnhancedTable,
    Table: Table,
    Tag: Tag,
    CheckTag: CheckTag,
    Tooltip: Tooltip,
    Tree: Tree,
    Alert: Alert,
    DialogPlugin: DialogPlugin,
    Dialog: Dialog,
    Drawer: Drawer,
    MessagePlugin: MessagePlugin,
    Message: Message,
    NotificationPlugin: NotificationPlugin,
    NotifyPlugin: NotifyPlugin,
    Notification: Notification,
    Popconfirm: Popconfirm,
    Popup: Popup,
    Upload: Upload,
    merge: merge,
    useConfig: useConfig,
    usePrefixClass: usePrefixClass,
    ConnfigProvider: ConnfigProvider,
    LocaleProvider: LocaleProvider
  });

  function install(Vue, config) {
    Object.keys(components).forEach(function (key) {
      if (components[key]) {
        /plugin/i.test(key) ? Vue.use(components[key]) : Vue.use(components[key], config);
      }
    });
  }

  if (typeof window !== "undefined" && window.Vue) {
    install(window.Vue);
  }
  var tdesign = {
    install: install,
    version: "0.38.1"
  };

  if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
    console.warn("You are using a whole package of TDesign!");
  }

  exports.Addon = Addon;
  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.AnchorItem = AnchorItem;
  exports.AnchorTarget = AnchorTarget;
  exports.Aside = Aside;
  exports.Avatar = Avatar;
  exports.AvatarGroup = AvatarGroup;
  exports.Badge = Badge;
  exports.BaseTable = BaseTable;
  exports.Breadcrumb = Breadcrumb;
  exports.BreadcrumbItem = BreadcrumbItem;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Cascader = Cascader;
  exports.CheckTag = CheckTag;
  exports.Checkbox = Checkbox;
  exports.CheckboxGroup = CheckboxGroup;
  exports.Col = Col;
  exports.Comment = Comment;
  exports.ConnfigProvider = ConnfigProvider;
  exports.Content = Content;
  exports.DatePicker = DatePicker;
  exports.Dialog = Dialog;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.Dropdown = Dropdown;
  exports.DropdownItem = DropdownItem;
  exports.DropdownMenu = DropdownMenu;
  exports.EPickerCols = EPickerCols;
  exports.EnhancedTable = EnhancedTable;
  exports.Footer = Footer;
  exports.Form = Form;
  exports.FormItem = FormItem;
  exports.HeadMenu = HeadMenu;
  exports.Header = Header;
  exports.Icon = Icon;
  exports.Input = Input;
  exports.InputGroup = InputGroup;
  exports.InputNumber = InputNumber;
  exports.KeyboardDirection = KeyboardDirection;
  exports.Layout = Layout;
  exports.List = List;
  exports.ListItem = ListItem;
  exports.ListItemMeta = ListItemMeta;
  exports.Loading = Loading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.LocaleProvider = LocaleProvider;
  exports.Menu = Menu;
  exports.MenuGroup = MenuGroup;
  exports.MenuItem = MenuItem;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotificationPlugin = NotificationPlugin;
  exports.NotifyPlugin = NotifyPlugin;
  exports.Option = Option;
  exports.OptionGroup = OptionGroup;
  exports.Pagination = Pagination;
  exports.Popconfirm = Popconfirm;
  exports.Popup = Popup;
  exports.PrimaryTable = PrimaryTable;
  exports.Progress = Progress;
  exports.Radio = Radio;
  exports.RadioButton = RadioButton;
  exports.RadioGroup = RadioGroup;
  exports.Row = Row;
  exports.Select = Select;
  exports.SelectInput = SelectInput;
  exports.Skeleton = Skeleton;
  exports.Slider = Slider;
  exports.StepItem = StepItem;
  exports.Steps = Steps;
  exports.Submenu = Submenu;
  exports.Swiper = Swiper;
  exports.SwiperItem = SwiperItem;
  exports.Switch = Switch;
  exports.TabPanel = TabPanel;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.TagInput = TagInput;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.TimeRangePicker = TimeRangePicker;
  exports.Tooltip = Tooltip;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect$1;
  exports.Upload = Upload;
  exports["default"] = tdesign;
  exports.merge = merge;
  exports.useConfig = useConfig;
  exports.usePrefixClass = usePrefixClass;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map
